{
	"version": null,
	"data": [
		{
			"title": "",
			"paragraphs": [
				{
					"context": "## Shared-State Concurrency\n\nMessage passing is a fine way of handling concurrency, but it’s not the only\none. Another method would be for multiple threads to access the same shared\ndata. Consider this part of the slogan from the Go language documentation\nagain: “do not communicate by sharing memory.”\n\nWhat would communicating by sharing memory look like? In addition, why would\nmessage-passing enthusiasts caution not to use memory sharing?\n\nIn a way, channels in any programming language are similar to single ownership,\nbecause once you transfer a value down a channel, you should no longer use that\nvalue. Shared memory concurrency is like multiple ownership: multiple threads\ncan access the same memory location at the same time. As you saw in Chapter 15,\nwhere smart pointers made multiple ownership possible, multiple ownership can\nadd complexity because these different owners need managing. Rust’s type system\nand ownership rules greatly assist in getting this management correct. For an\nexample, let’s look at mutexes, one of the more common concurrency primitives\nfor shared memory.\n\n### Using Mutexes to Allow Access to Data from One Thread at a Time\n\n*Mutex* is an abbreviation for *mutual exclusion*, as in, a mutex allows only\none thread to access some data at any given time. To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex’s *lock*. The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data. Therefore, the\nmutex is described as *guarding* the data it holds via the locking system.\n\nMutexes have a reputation for being difficult to use because you have to\nremember two rules:\n\n* You must attempt to acquire the lock before using the data.\n* When you’re done with the data that the mutex guards, you must unlock the\n  data so other threads can acquire the lock.\n\nFor a real-world metaphor for a mutex, imagine a panel discussion at a\nconference with only one microphone. Before a panelist can speak, they have to\nask or signal that they want to use the microphone. When they get the\nmicrophone, they can talk for as long as they want to and then hand the\nmicrophone to the next panelist who requests to speak. If a panelist forgets to\nhand the microphone off when they’re finished with it, no one else is able to\nspeak. If management of the shared microphone goes wrong, the panel won’t work\nas planned!\n\nManagement of mutexes can be incredibly tricky to get right, which is why so\nmany people are enthusiastic about channels. However, thanks to Rust’s type\nsystem and ownership rules, you can’t get locking and unlocking wrong.\n\n#### The API of `Mutex<T>`\n\nAs an example of how to use a mutex, let’s start by using a mutex in a\nsingle-threaded context, as shown in Listing 16-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-12: Exploring the API of `Mutex<T>` in a\nsingle-threaded context for simplicity</span>\n\nAs with many types, we create a `Mutex<T>` using the associated function `new`.\nTo access the data inside the mutex, we use the `lock` method to acquire the\nlock. This call will block the current thread so it can’t do any work until\nit’s our turn to have the lock.\n\nThe call to `lock` would fail if another thread holding the lock panicked. In\nthat case, no one would ever be able to get the lock, so we’ve chosen to\n`unwrap` and have this thread panic if we’re in that situation.\n\nAfter we’ve acquired the lock, we can treat the return value, named `num` in\nthis case, as a mutable reference to the data inside. The type system ensures\nthat we acquire a lock before using the value in `m`. The type of `m` is\n`Mutex<i32>`, not `i32`, so we *must* call `lock` to be able to use the `i32`\nvalue. We can’t forget; the type system won’t let us access the inner `i32`\notherwise.\n\nAs you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call\nto `lock` *returns* a smart pointer called `MutexGuard`, wrapped in a\n`LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart\npointer implements `Deref` to point at our inner data; the smart pointer also\nhas a `Drop` implementation that releases the lock automatically when a\n`MutexGuard` goes out of scope, which happens at the end of the inner scope. As\na result, we don’t risk forgetting to release the lock and blocking the mutex\nfrom being used by other threads, because the lock release happens\nautomatically.\n\nAfter dropping the lock, we can print the mutex value and see that we were able\nto change the inner `i32` to 6.\n\n#### Sharing a `Mutex<T>` Between Multiple Threads\n\nNow, let’s try to share a value between multiple threads using `Mutex<T>`.\nWe’ll spin up 10 threads and have them each increment a counter value by 1, so\nthe counter goes from 0 to 10. The next example in Listing 16-13 will have\na compiler error, and we’ll use that error to learn more about using\n`Mutex<T>` and how Rust helps us use it correctly.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-13: Ten threads each increment a counter\nguarded by a `Mutex<T>`</span>\n\nWe create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we did\nin Listing 16-12. Next, we create 10 threads by iterating over a range of\nnumbers. We use `thread::spawn` and give all the threads the same closure: one\nthat moves the counter into the thread, acquires a lock on the `Mutex<T>` by\ncalling the `lock` method, and then adds 1 to the value in the mutex. When a\nthread finishes running its closure, `num` will go out of scope and release the\nlock so another thread can acquire it.\n\nIn the main thread, we collect all the join handles. Then, as we did in Listing\n16-2, we call `join` on each handle to make sure all the threads finish. At\nthat point, the main thread will acquire the lock and print the result of this\nprogram.\n\nWe hinted that this example wouldn’t compile. Now let’s find out why!\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-13/output.txt}}\n```\n\nThe error message states that the `counter` value was moved in the previous\niteration of the loop. Rust is telling us that we can’t move the ownership\nof lock `counter` into multiple threads. Let’s fix the compiler error with a\nmultiple-ownership method we discussed in Chapter 15.\n\n#### Multiple Ownership with Multiple Threads\n\nIn Chapter 15, we gave a value multiple owners by using the smart pointer\n`Rc<T>` to create a reference counted value. Let’s do the same here and see\nwhat happens. We’ll wrap the `Mutex<T>` in `Rc<T>` in Listing 16-14 and clone\nthe `Rc<T>` before moving ownership to the thread.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-14: Attempting to use `Rc<T>` to allow\nmultiple threads to own the `Mutex<T>`</span>\n\nOnce again, we compile and get... different errors! The compiler is teaching us\na lot.\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-14/output.txt}}\n```\n\nWow, that error message is very wordy! Here’s the important part to focus on:\n`` `Rc<Mutex<i32>>` cannot be sent between threads safely ``. The compiler is\nalso telling us the reason why: ``the trait `Send` is not implemented for\n`Rc<Mutex<i32>>` ``. We’ll talk about `Send` in the next section: it’s one of\nthe traits that ensures the types we use with threads are meant for use in\nconcurrent situations.\n\nUnfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>`\nmanages the reference count, it adds to the count for each call to `clone` and\nsubtracts from the count when each clone is dropped. But it doesn’t use any\nconcurrency primitives to make sure that changes to the count can’t be\ninterrupted by another thread. This could lead to wrong counts—subtle bugs that\ncould in turn lead to memory leaks or a value being dropped before we’re done\nwith it. What we need is a type exactly like `Rc<T>` but one that makes changes\nto the reference count in a thread-safe way.\n\n#### Atomic Reference Counting with `Arc<T>`\n\nFortunately, `Arc<T>` *is* a type like `Rc<T>` that is safe to use in\nconcurrent situations. The *a* stands for *atomic*, meaning it’s an *atomically\nreference counted* type. Atomics are an additional kind of concurrency\nprimitive that we won’t cover in detail here: see the standard library\ndocumentation for [`std::sync::atomic`][atomic]<!-- ignore --> for more\ndetails. At this point, you just need to know that atomics work like primitive\ntypes but are safe to share across threads.\n\nYou might then wonder why all primitive types aren’t atomic and why standard\nlibrary types aren’t implemented to use `Arc<T>` by default. The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to. If you’re just performing operations on values within a\nsingle thread, your code can run faster if it doesn’t have to enforce the\nguarantees atomics provide.\n\nLet’s return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix\nour program by changing the `use` line, the call to `new`, and the call to\n`clone`. The code in Listing 16-15 will finally compile and run:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-15/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-15: Using an `Arc<T>` to wrap the `Mutex<T>`\nto be able to share ownership across multiple threads</span>\n\nThis code will print the following:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nResult: 10\n```\n\nWe did it! We counted from 0 to 10, which may not seem very impressive, but it\ndid teach us a lot about `Mutex<T>` and thread safety. You could also use this\nprogram’s structure to do more complicated operations than just incrementing a\ncounter. Using this strategy, you can divide a calculation into independent\nparts, split those parts across threads, and then use a `Mutex<T>` to have each\nthread update the final result with its part.\n\nNote that if you are doing simple numerical operations, there are types simpler\nthan `Mutex<T>` types provided by the [`std::sync::atomic` module of the\nstandard library][atomic]<!-- ignore -->. These types provide safe, concurrent,\natomic access to primitive types. We chose to use `Mutex<T>` with a primitive\ntype for this example so we could concentrate on how `Mutex<T>` works.\n\n### Similarities Between `RefCell<T>`/`Rc<T>` and `Mutex<T>`/`Arc<T>`\n\nYou might have noticed that `counter` is immutable but we could get a mutable\nreference to the value inside it; this means `Mutex<T>` provides interior\nmutability, as the `Cell` family does. In the same way we used `RefCell<T>` in\nChapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>`\nto mutate contents inside an `Arc<T>`.\n\nAnother detail to note is that Rust can’t protect you from all kinds of logic\nerrors when you use `Mutex<T>`. Recall in Chapter 15 that using `Rc<T>` came\nwith the risk of creating reference cycles, where two `Rc<T>` values refer to\neach other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of\ncreating *deadlocks*. These occur when an operation needs to lock two resources\nand two threads have each acquired one of the locks, causing them to wait for\neach other forever. If you’re interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for `Mutex<T>` and `MutexGuard` offers\nuseful information.\n\nWe’ll round out this chapter by talking about the `Send` and `Sync` traits and\nhow we can use them with custom types.\n\n[atomic]: ../std/sync/atomic/index.html\n",
					"qas": [
						{
							"question": "Can Mutex<T> create deadlocks?",
							"id": 110,
							"answers": [
								{
									"text": "`Mutex‹T>` comes with the risk of\ncreating *deadlocks*.",
									"answer_start": 11606
								}
							],
							"is_impossible": false
						},
						{
							"question": "Why not all types are atomic?",
							"id": 109,
							"answers": [
								{
									"text": "The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to.",
									"answer_start": 9049
								}
							],
							"is_impossible": false
						},
						{
							"question": "How to use reference counting in multithreading?",
							"id": 108,
							"answers": [
								{
									"text": "Fortunately, `Arc‹T>` *is* a type like `Rc‹T>` that is safe to use in\nconcurrent situations.",
									"answer_start": 8423
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## The Slice Type\n\n*Slices* let you reference a contiguous sequence of elements in a collection\nrather than the whole collection. A slice is a kind of reference, so it does\nnot have ownership.\n\nHere’s a small programming problem: write a function that takes a string of\nwords separated by spaces and returns the first word it finds in that string.\nIf the function doesn’t find a space in the string, the whole string must be\none word, so the entire string should be returned.\n\nLet’s work through how we’d write the signature of this function without using\nslices, to understand the problem that slices will solve:\n\n```rust,ignore\nfn first_word(s: &String) -> ?\n```\n\nThe `first_word` function has a `&String` as a parameter. We don’t want\nownership, so this is fine. But what should we return? We don’t really have a\nway to talk about *part* of a string. However, we could return the index of the\nend of the word, indicated by a space. Let’s try that, as shown in Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-7: The `first_word` function that returns a\nbyte index value into the `String` parameter</span>\n\nBecause we need to go through the `String` element by element and check whether\na value is a space, we’ll convert our `String` to an array of bytes using the\n`as_bytes` method.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:as_bytes}}\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:iter}}\n```\n\nWe’ll discuss iterators in more detail in [Chapter 13][ch13]<!-- ignore -->.\nFor now, know that `iter` is a method that returns each element in a collection\nand that `enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to\ndestructure that tuple. We’ll be discussing patterns more in [Chapter\n6][ch6]<!-- ignore -->. In the `for` loop, we specify a pattern that has `i`\nfor the index in the tuple and `&item` for the single byte in the tuple.\nBecause we get a reference to the element from `.iter().enumerate()`, we use\n`&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using `s.len()`.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:inside_for}}\n```\n\nWe now have a way to find out the index of the end of the first word in the\nstring, but there’s a problem. We’re returning a `usize` on its own, but it’s\nonly a meaningful number in the context of the `&String`. In other words,\nbecause it’s a separate value from the `String`, there’s no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the `first_word` function from Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-8: Storing the result from calling the\n`first_word` function and then changing the `String` contents</span>\n\nThis program compiles without any errors and would also do so if we used `word`\nafter calling `s.clear()`. Because `word` isn’t connected to the state of `s`\nat all, `word` still contains the value `5`. We could use that value `5` with\nthe variable `s` to try to extract the first word out, but this would be a bug\nbecause the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in\n`s` is tedious and error prone! Managing these indices is even more brittle if\nwe write a `second_word` function. Its signature would have to look like this:\n\n```rust,ignore\nfn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we’re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren’t tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### String Slices\n\nA *string slice* is a reference to part of a `String`, and it looks like this:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-17-slice/src/main.rs:here}}\n```\n\nRather than a reference to the entire `String`, `hello` is a reference to a\nportion of the `String`, specified in the extra `[0..5]` bit. We create slices\nusing a range within brackets by specifying `[starting_index..ending_index]`,\nwhere `starting_index` is the first position in the slice and `ending_index` is\none more than the last position in the slice. Internally, the slice data\nstructure stores the starting position and the length of the slice, which\ncorresponds to `ending_index` minus `starting_index`. So, in the case of `let\nworld = &s[6..11];`, `world` would be a slice that contains a pointer to the\nbyte at index 6 of `s` with a length value of `5`.\n\nFigure 4-6 shows this in a diagram.\n\n<img alt=\"Three tables: a table representing the stack data of s, which points\nto the byte at index 0 in a table of the string data &quot;hello world&quot; on\nthe heap. The third table rep-resents the stack data of the slice world, which\nhas a length value of 5 and points to byte 6 of the heap data table.\"\nsrc=\"img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-6: String slice referring to part of a\n`String`</span>\n\nWith Rust’s `..` range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you\ncan drop the trailing number. That means these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];\n```\n\n> Note: String slice range indices must occur at valid UTF-8 character\n> boundaries. If you attempt to create a string slice in the middle of a\n> multibyte character, your program will exit with an error. For the purposes\n> of introducing string slices, we are assuming ASCII only in this section; a\n> more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded\n> Text with Strings”][strings]<!-- ignore --> section of Chapter 8.\n\nWith all this information in mind, let’s rewrite `first_word` to return a\nslice. The type that signifies “string slice” is written as `&str`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-18-first-word-slice/src/main.rs:here}}\n```\n\nWe get the index for the end of the word the same way we did in Listing 4-7, by\nlooking for the first occurrence of a space. When we find a space, we return a\nstring slice using the start of the string and the index of the space as the\nstarting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust,ignore\nfn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that’s much harder to mess up because the\ncompiler will ensure the references into the `String` remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn’t show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. Using the slice version of `first_word` will throw a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/src/main.rs:here}}\n```\n\nHere’s the compiler error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/output.txt}}\n```\n\nRecall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because `clear` needs to\ntruncate the `String`, it needs to get a mutable reference. The `println!`\nafter the call to `clear` uses the reference in `word`, so the immutable\nreference must still be active at that point. Rust disallows the mutable\nreference in `clear` and the immutable reference in `word` from existing at the\nsame time, and compilation fails. Not only has Rust made our API easier to use,\nbut it has also eliminated an entire class of errors at compile time!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"string-literals-are-slices\"></a>\n\n#### String Literals as Slices\n\nRecall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:\n\n```rust\nlet s = \"Hello, world!\";\n```\n\nThe type of `s` here is `&str`: it’s a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; `&str` is an\nimmutable reference.\n\n#### String Slices as Parameters\n\nKnowing that you can take slices of literals and `String` values leads us to\none more improvement on `first_word`, and that’s its signature:\n\n```rust,ignore\nfn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both `&String` values\nand `&str` values.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-9: Improving the `first_word` function by using\na string slice for the type of the `s` parameter</span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref coercions*, a feature we will cover in\n[“Implicit Deref Coercions with Functions and\nMethods”][deref-coercions]<!--ignore--> section of Chapter 15.\n\nDefining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:usage}}\n```\n\n### Other Slices\n\nString slices, as you might imagine, are specific to strings. But there’s a\nmore general slice type too. Consider this array:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n```\n\nJust as we might want to refer to part of a string, we might want to refer to\npart of an array. We’d do so like this:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You’ll use this kind of\nslice for all sorts of other collections. We’ll discuss these collections in\ndetail when we talk about vectors in Chapter 8.\n\n## Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don’t have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we’ll talk about\nthese concepts further throughout the rest of the book. Let’s move on to\nChapter 5 and look at grouping pieces of data together in a `struct`.\n\n[ch13]: ch13-02-iterators.html\n[ch6]: ch06-02-match.html#patterns-that-bind-to-values\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[deref-coercions]: ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n",
					"qas": [
						{
							"question": "How can I pass a string slice and a 'String'?",
							"id": 40,
							"answers": [
								{
									"text": "r‹/span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref ",
									"answer_start": 10794
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Building a Single-Threaded Web Server\n\nWe’ll start by getting a single-threaded web server working. Before we begin,\nlet’s look at a quick overview of the protocols involved in building web\nservers. The details of these protocols are beyond the scope of this book, but\na brief overview will give you the information you need.\n\nThe two main protocols involved in web servers are *Hypertext Transfer\nProtocol* *(HTTP)* and *Transmission Control Protocol* *(TCP)*. Both protocols\nare *request-response* protocols, meaning a *client* initiates requests and a\n*server* listens to the requests and provides a response to the client. The\ncontents of those requests and responses are defined by the protocols.\n\nTCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn’t specify what that information is.\nHTTP builds on top of TCP by defining the contents of the requests and\nresponses. It’s technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. We’ll work with the\nraw bytes of TCP and HTTP requests and responses.\n\n### Listening to the TCP Connection\n\nOur web server needs to listen to a TCP connection, so that’s the first part\nwe’ll work on. The standard library offers a `std::net` module that lets us do\nthis. Let’s make a new project in the usual fashion:\n\n```console\n$ cargo new hello\n     Created binary (application) `hello` project\n$ cd hello\n```\n\nNow enter the code in Listing 20-1 in *src/main.rs* to start. This code will\nlisten at the local address `127.0.0.1:7878` for incoming TCP streams. When it\ngets an incoming stream, it will print `Connection established!`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 20-1: Listening for incoming streams and printing\na message when we receive a stream</span>\n\nUsing `TcpListener`, we can listen for TCP connections at the address\n`127.0.0.1:7878`. In the address, the section before the colon is an IP address\nrepresenting your computer (this is the same on every computer and doesn’t\nrepresent the authors’ computer specifically), and `7878` is the port. We’ve\nchosen this port for two reasons: HTTP isn’t normally accepted on this port so\nour server is unlikely to conflict with any other web server you might have\nrunning on your machine, and 7878 is *rust* typed on a telephone.\n\nThe `bind` function in this scenario works like the `new` function in that it\nwill return a new `TcpListener` instance. The function is called `bind`\nbecause, in networking, connecting to a port to listen to is known as “binding\nto a port.”\n\nThe `bind` function returns a `Result<T, E>`, which indicates that it’s\npossible for binding to fail. For example, connecting to port 80 requires\nadministrator privileges (nonadministrators can listen only on ports higher\nthan 1023), so if we tried to connect to port 80 without being an\nadministrator, binding wouldn’t work. Binding also wouldn’t work, for example,\nif we ran two instances of our program and so had two programs listening to the\nsame port. Because we’re writing a basic server just for learning purposes, we\nwon’t worry about handling these kinds of errors; instead, we use `unwrap` to\nstop the program if errors happen.\n\nThe `incoming` method on `TcpListener` returns an iterator that gives us a\nsequence of streams (more specifically, streams of type `TcpStream`). A single\n*stream* represents an open connection between the client and the server. A\n*connection* is the name for the full request and response process in which a\nclient connects to the server, the server generates a response, and the server\ncloses the connection. As such, we will read from the `TcpStream` to see what\nthe client sent and then write our response to the stream to send data back to\nthe client. Overall, this `for` loop will process each connection in turn and\nproduce a series of streams for us to handle.\n\nFor now, our handling of the stream consists of calling `unwrap` to terminate\nour program if the stream has any errors; if there aren’t any errors, the\nprogram prints a message. We’ll add more functionality for the success case in\nthe next listing. The reason we might receive errors from the `incoming` method\nwhen a client connects to the server is that we’re not actually iterating over\nconnections. Instead, we’re iterating over *connection attempts*. The\nconnection might not be successful for a number of reasons, many of them\noperating system specific. For example, many operating systems have a limit to\nthe number of simultaneous open connections they can support; new connection\nattempts beyond that number will produce an error until some of the open\nconnections are closed.\n\nLet’s try running this code! Invoke `cargo run` in the terminal and then load\n*127.0.0.1:7878* in a web browser. The browser should show an error message\nlike “Connection reset,” because the server isn’t currently sending back any\ndata. But when you look at your terminal, you should see several messages that\nwere printed when the browser connected to the server!\n\n```text\n     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n```\n\nSometimes, you’ll see multiple messages printed for one browser request; the\nreason might be that the browser is making a request for the page as well as a\nrequest for other resources, like the *favicon.ico* icon that appears in the\nbrowser tab.\n\nIt could also be that the browser is trying to connect to the server multiple\ntimes because the server isn’t responding with any data. When `stream` goes out\nof scope and is dropped at the end of the loop, the connection is closed as\npart of the `drop` implementation. Browsers sometimes deal with closed\nconnections by retrying, because the problem might be temporary. The important\nfactor is that we’ve successfully gotten a handle to a TCP connection!\n\nRemember to stop the program by pressing <span class=\"keystroke\">ctrl-c</span>\nwhen you’re done running a particular version of the code. Then restart the\nprogram by invoking the `cargo run` command after you’ve made each set of code\nchanges to make sure you’re running the newest code.\n\n### Reading the Request\n\nLet’s implement the functionality to read the request from the browser! To\nseparate the concerns of first getting a connection and then taking some action\nwith the connection, we’ll start a new function for processing connections. In\nthis new `handle_connection` function, we’ll read data from the TCP stream and\nprint it so we can see the data being sent from the browser. Change the code to\nlook like Listing 20-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 20-2: Reading from the `TcpStream` and printing\nthe data</span>\n\nWe bring `std::io::prelude` and `std::io::BufReader` into scope to get access\nto traits and types that let us read from and write to the stream. In the `for`\nloop in the `main` function, instead of printing a message that says we made a\nconnection, we now call the new `handle_connection` function and pass the\n`stream` to it.\n\nIn the `handle_connection` function, we create a new `BufReader` instance that\nwraps a mutable reference to the `stream`. `BufReader` adds buffering by\nmanaging calls to the `std::io::Read` trait methods for us.\n\nWe create a variable named `http_request` to collect the lines of the request\nthe browser sends to our server. We indicate that we want to collect these\nlines in a vector by adding the `Vec<_>` type annotation.\n\n`BufReader` implements the `std::io::BufRead` trait, which provides the `lines`\nmethod. The `lines` method returns an iterator of `Result<String,\nstd::io::Error>` by splitting the stream of data whenever it sees a newline\nbyte. To get each `String`, we map and `unwrap` each `Result`. The `Result`\nmight be an error if the data isn’t valid UTF-8 or if there was a problem\nreading from the stream. Again, a production program should handle these errors\nmore gracefully, but we’re choosing to stop the program in the error case for\nsimplicity.\n\nThe browser signals the end of an HTTP request by sending two newline\ncharacters in a row, so to get one request from the stream, we take lines until\nwe get a line that is the empty string. Once we’ve collected the lines into the\nvector, we’re printing them out using pretty debug formatting so we can take a\nlook at the instructions the web browser is sending to our server.\n\nLet’s try this code! Start the program and make a request in a web browser\nagain. Note that we’ll still get an error page in the browser, but our\nprogram’s output in the terminal will now look similar to this:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: [\n    \"GET / HTTP/1.1\",\n    \"Host: 127.0.0.1:7878\",\n    \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\",\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Language: en-US,en;q=0.5\",\n    \"Accept-Encoding: gzip, deflate, br\",\n    \"DNT: 1\",\n    \"Connection: keep-alive\",\n    \"Upgrade-Insecure-Requests: 1\",\n    \"Sec-Fetch-Dest: document\",\n    \"Sec-Fetch-Mode: navigate\",\n    \"Sec-Fetch-Site: none\",\n    \"Sec-Fetch-User: ?1\",\n    \"Cache-Control: max-age=0\",\n]\n```\n\nDepending on your browser, you might get slightly different output. Now that\nwe’re printing the request data, we can see why we get multiple connections\nfrom one browser request by looking at the path after `GET` in the first line\nof the request. If the repeated connections are all requesting */*, we know the\nbrowser is trying to fetch */* repeatedly because it’s not getting a response\nfrom our program.\n\nLet’s break down this request data to understand what the browser is asking of\nour program.\n\n### A Closer Look at an HTTP Request\n\nHTTP is a text-based protocol, and a request takes this format:\n\n```text\nMethod Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is the *request line* that holds information about what the\nclient is requesting. The first part of the request line indicates the *method*\nbeing used, such as `GET` or `POST`, which describes how the client is making\nthis request. Our client used a `GET` request, which means it is asking for\ninformation.\n\nThe next part of the request line is */*, which indicates the *Uniform Resource\nIdentifier* *(URI)* the client is requesting: a URI is almost, but not quite,\nthe same as a *Uniform Resource Locator* *(URL)*. The difference between URIs\nand URLs isn’t important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute URL for URI here.\n\nThe last part is the HTTP version the client uses, and then the request line\nends in a *CRLF sequence*. (CRLF stands for *carriage return* and *line feed*,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The\nCRLF sequence separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than `\\r\\n`.\n\nLooking at the request line data we received from running our program so far,\nwe see that `GET` is the method, */* is the request URI, and `HTTP/1.1` is the\nversion.\n\nAfter the request line, the remaining lines starting from `Host:` onward are\nheaders. `GET` requests have no body.\n\nTry making a request from a different browser or asking for a different\naddress, such as *127.0.0.1:7878/test*, to see how the request data changes.\n\nNow that we know what the browser is asking for, let’s send back some data!\n\n### Writing a Response\n\nWe’re going to implement sending data in response to a client request.\nResponses have the following format:\n\n```text\nHTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is a *status line* that contains the HTTP version used in the\nresponse, a numeric status code that summarizes the result of the request, and\na reason phrase that provides a text description of the status code. After the\nCRLF sequence are any headers, another CRLF sequence, and the body of the\nresponse.\n\nHere is an example response that uses HTTP version 1.1, has a status code of\n200, an OK reason phrase, no headers, and no body:\n\n```text\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\nThe status code 200 is the standard success response. The text is a tiny\nsuccessful HTTP response. Let’s write this to the stream as our response to a\nsuccessful request! From the `handle_connection` function, remove the\n`println!` that was printing the request data and replace it with the code in\nListing 20-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-3: Writing a tiny successful HTTP response to\nthe stream</span>\n\nThe first new line defines the `response` variable that holds the success\nmessage’s data. Then we call `as_bytes` on our `response` to convert the string\ndata to bytes. The `write_all` method on `stream` takes a `&[u8]` and sends\nthose bytes directly down the connection. Because the `write_all` operation\ncould fail, we use `unwrap` on any error result as before. Again, in a real\napplication you would add error handling here.\n\nWith these changes, let’s run our code and make a request. We’re no longer\nprinting any data to the terminal, so we won’t see any output other than the\noutput from Cargo. When you load *127.0.0.1:7878* in a web browser, you should\nget a blank page instead of an error. You’ve just hand-coded receiving an HTTP\nrequest and sending a response!\n\n### Returning Real HTML\n\nLet’s implement the functionality for returning more than a blank page. Create\nthe new file *hello.html* in the root of your project directory, not in the\n*src* directory. You can input any HTML you want; Listing 20-4 shows one\npossibility.\n\n<span class=\"filename\">Filename: hello.html</span>\n\n```html\n{{#include ../listings/ch20-web-server/listing-20-05/hello.html}}\n```\n\n<span class=\"caption\">Listing 20-4: A sample HTML file to return in a\nresponse</span>\n\nThis is a minimal HTML5 document with a heading and some text. To return this\nfrom the server when a request is received, we’ll modify `handle_connection` as\nshown in Listing 20-5 to read the HTML file, add it to the response as a body,\nand send it.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-5: Sending the contents of *hello.html* as the\nbody of the response</span>\n\nWe’ve added `fs` to the `use` statement to bring the standard library’s\nfilesystem module into scope. The code for reading the contents of a file to a\nstring should look familiar; we used it in Chapter 12 when we read the contents\nof a file for our I/O project in Listing 12-4.\n\nNext, we use `format!` to add the file’s contents as the body of the success\nresponse. To ensure a valid HTTP response, we add the `Content-Length` header\nwhich is set to the size of our response body, in this case the size of\n`hello.html`.\n\nRun this code with `cargo run` and load *127.0.0.1:7878* in your browser; you\nshould see your HTML rendered!\n\nCurrently, we’re ignoring the request data in `http_request` and just sending\nback the contents of the HTML file unconditionally. That means if you try\nrequesting *127.0.0.1:7878/something-else* in your browser, you’ll still get\nback this same HTML response. At the moment, our server is very limited and\ndoes not do what most web servers do. We want to customize our responses\ndepending on the request and only send back the HTML file for a well-formed\nrequest to */*.\n\n### Validating the Request and Selectively Responding\n\nRight now, our web server will return the HTML in the file no matter what the\nclient requested. Let’s add functionality to check that the browser is\nrequesting */* before returning the HTML file and return an error if the\nbrowser requests anything else. For this we need to modify `handle_connection`,\nas shown in Listing 20-6. This new code checks the content of the request\nreceived against what we know a request for */* looks like and adds `if` and\n`else` blocks to treat requests differently.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-6: Handling requests to */* differently from\nother requests</span>\n\nWe’re only going to be looking at the first line of the HTTP request, so rather\nthan reading the entire request into a vector, we’re calling `next` to get the\nfirst item from the iterator. The first `unwrap` takes care of the `Option` and\nstops the program if the iterator has no items. The second `unwrap` handles the\n`Result` and has the same effect as the `unwrap` that was in the `map` added in\nListing 20-2.\n\nNext, we check the `request_line` to see if it equals the request line of a GET\nrequest to the */* path. If it does, the `if` block returns the contents of our\nHTML file.\n\nIf the `request_line` does *not* equal the GET request to the */* path, it\nmeans we’ve received some other request. We’ll add code to the `else` block in\na moment to respond to all other requests.\n\nRun this code now and request *127.0.0.1:7878*; you should get the HTML in\n*hello.html*. If you make any other request, such as\n*127.0.0.1:7878/something-else*, you’ll get a connection error like those you\nsaw when running the code in Listing 20-1 and Listing 20-2.\n\nNow let’s add the code in Listing 20-7 to the `else` block to return a response\nwith the status code 404, which signals that the content for the request was\nnot found. We’ll also return some HTML for a page to render in the browser\nindicating the response to the end user.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-7: Responding with status code 404 and an\nerror page if anything other than */* was requested</span>\n\nHere, our response has a status line with status code 404 and the reason phrase\n`NOT FOUND`. The body of the response will be the HTML in the file *404.html*.\nYou’ll need to create a *404.html* file next to *hello.html* for the error\npage; again feel free to use any HTML you want or use the example HTML in\nListing 20-8.\n\n<span class=\"filename\">Filename: 404.html</span>\n\n```html\n{{#include ../listings/ch20-web-server/listing-20-07/404.html}}\n```\n\n<span class=\"caption\">Listing 20-8: Sample content for the page to send back\nwith any 404 response</span>\n\nWith these changes, run your server again. Requesting *127.0.0.1:7878* should\nreturn the contents of *hello.html*, and any other request, like\n*127.0.0.1:7878/foo*, should return the error HTML from *404.html*.\n\n### A Touch of Refactoring\n\nAt the moment the `if` and `else` blocks have a lot of repetition: they’re both\nreading files and writing the contents of the files to the stream. The only\ndifferences are the status line and the filename. Let’s make the code more\nconcise by pulling out those differences into separate `if` and `else` lines\nthat will assign the values of the status line and the filename to variables;\nwe can then use those variables unconditionally in the code to read the file\nand write the response. Listing 20-9 shows the resulting code after replacing\nthe large `if` and `else` blocks.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-9: Refactoring the `if` and `else` blocks to\ncontain only the code that differs between the two cases</span>\n\nNow the `if` and `else` blocks only return the appropriate values for the\nstatus line and filename in a tuple; we then use destructuring to assign these\ntwo values to `status_line` and `filename` using a pattern in the `let`\nstatement, as discussed in Chapter 18.\n\nThe previously duplicated code is now outside the `if` and `else` blocks and\nuses the `status_line` and `filename` variables. This makes it easier to see\nthe difference between the two cases, and it means we have only one place to\nupdate the code if we want to change how the file reading and response writing\nwork. The behavior of the code in Listing 20-9 will be the same as that in\nListing 20-8.\n\nAwesome! We now have a simple web server in approximately 40 lines of Rust code\nthat responds to one request with a page of content and responds to all other\nrequests with a 404 response.\n\nCurrently, our server runs in a single thread, meaning it can only serve one\nrequest at a time. Let’s examine how that can be a problem by simulating some\nslow requests. Then we’ll fix it so our server can handle multiple requests at\nonce.\n",
					"qas": [
						{
							"question": "What is TCP protocol?",
							"id": 102,
							"answers": [
								{
									"text": "TCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn’t specify what that information is.",
									"answer_start": 706
								}
							],
							"is_impossible": false
						},
						{
							"question": "What does status code 200 means?",
							"id": 110,
							"answers": [
								{
									"text": "The status code 200 is the standard success response. ",
									"answer_start": 12703
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "<!-- Old heading. Do not remove or links may break. -->\n<a id=\"closures-anonymous-functions-that-can-capture-their-environment\"></a>\n\n## Closures: Anonymous Functions that Capture Their Environment\n\nRust’s closures are anonymous functions you can save in a variable or pass as\narguments to other functions. You can create the closure in one place and then\ncall the closure elsewhere to evaluate it in a different context. Unlike\nfunctions, closures can capture values from the scope in which they’re defined.\nWe’ll demonstrate how these closure features allow for code reuse and behavior\ncustomization.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"creating-an-abstraction-of-behavior-with-closures\"></a>\n<a id=\"refactoring-using-functions\"></a>\n<a id=\"refactoring-with-closures-to-store-code\"></a>\n\n### Capturing the Environment with Closures\n\nWe’ll first examine how we can use closures to capture values from the\nenvironment they’re defined in for later use. Here’s the scenario: Every so\noften, our t-shirt company gives away an exclusive, limited-edition shirt to\nsomeone on our mailing list as a promotion. People on the mailing list can\noptionally add their favorite color to their profile. If the person chosen for\na free shirt has their favorite color set, they get that color shirt. If the\nperson hasn’t specified a favorite color, they get whatever color the company\ncurrently has the most of.\n\nThere are many ways to implement this. For this example, we’re going to use an\nenum called `ShirtColor` that has the variants `Red` and `Blue` (limiting the\nnumber of colors available for simplicity). We represent the company’s\ninventory with an `Inventory` struct that has a field named `shirts` that\ncontains a `Vec<ShirtColor>` representing the shirt colors currently in stock.\nThe method `giveaway` defined on `Inventory` gets the optional shirt\ncolor preference of the free shirt winner, and returns the shirt color the\nperson will get. This setup is shown in Listing 13-1:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-1: Shirt company giveaway situation</span>\n\nThe `store` defined in `main` has two blue shirts and one red shirt remaining\nto distribute for this limited-edition promotion. We call the `giveaway` method\nfor a user with a preference for a red shirt and a user without any preference.\n\nAgain, this code could be implemented in many ways, and here, to focus on\nclosures, we’ve stuck to concepts you’ve already learned except for the body of\nthe `giveaway` method that uses a closure. In the `giveaway` method, we get the\nuser preference as a parameter of type `Option<ShirtColor>` and call the\n`unwrap_or_else` method on `user_preference`. The [`unwrap_or_else` method on\n`Option<T>`][unwrap-or-else]<!-- ignore --> is defined by the standard library.\nIt takes one argument: a closure without any arguments that returns a value `T`\n(the same type stored in the `Some` variant of the `Option<T>`, in this case\n`ShirtColor`). If the `Option<T>` is the `Some` variant, `unwrap_or_else`\nreturns the value from within the `Some`. If the `Option<T>` is the `None`\nvariant, `unwrap_or_else` calls the closure and returns the value returned by\nthe closure.\n\nWe specify the closure expression `|| self.most_stocked()` as the argument to\n`unwrap_or_else`. This is a closure that takes no parameters itself (if the\nclosure had parameters, they would appear between the two vertical bars). The\nbody of the closure calls `self.most_stocked()`. We’re defining the closure\nhere, and the implementation of `unwrap_or_else` will evaluate the closure\nlater if the result is needed.\n\nRunning this code prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-01/output.txt}}\n```\n\nOne interesting aspect here is that we’ve passed a closure that calls\n`self.most_stocked()` on the current `Inventory` instance. The standard library\ndidn’t need to know anything about the `Inventory` or `ShirtColor` types we\ndefined, or the logic we want to use in this scenario. The closure captures an\nimmutable reference to the `self` `Inventory` instance and passes it with the\ncode we specify to the `unwrap_or_else` method. Functions, on the other hand,\nare not able to capture their environment in this way.\n\n### Closure Type Inference and Annotation\n\nThere are more differences between functions and closures. Closures don’t\nusually require you to annotate the types of the parameters or the return value\nlike `fn` functions do. Type annotations are required on functions because the\ntypes are part of an explicit interface exposed to your users. Defining this\ninterface rigidly is important for ensuring that everyone agrees on what types\nof values a function uses and returns. Closures, on the other hand, aren’t used\nin an exposed interface like this: they’re stored in variables and used without\nnaming them and exposing them to users of our library.\n\nClosures are typically short and relevant only within a narrow context rather\nthan in any arbitrary scenario. Within these limited contexts, the compiler can\ninfer the types of the parameters and the return type, similar to how it’s able\nto infer the types of most variables (there are rare cases where the compiler\nneeds closure type annotations too).\n\nAs with variables, we can add type annotations if we want to increase\nexplicitness and clarity at the cost of being more verbose than is strictly\nnecessary. Annotating the types for a closure would look like the definition\nshown in Listing 13-2. In this example, we’re defining a closure and storing it\nin a variable rather than defining the closure in the spot we pass it as an\nargument as we did in Listing 13-1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-2: Adding optional type annotations of the\nparameter and return value types in the closure</span>\n\nWith type annotations added, the syntax of closures looks more similar to the\nsyntax of functions. Here we define a function that adds 1 to its parameter and\na closure that has the same behavior, for comparison. We’ve added some spaces\nto line up the relevant parts. This illustrates how closure syntax is similar\nto function syntax except for the use of pipes and the amount of syntax that is\noptional:\n\n```rust,ignore\nfn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;\n```\n\nThe first line shows a function definition, and the second line shows a fully\nannotated closure definition. In the third line, we remove the type annotations\nfrom the closure definition. In the fourth line, we remove the brackets, which\nare optional because the closure body has only one expression. These are all\nvalid definitions that will produce the same behavior when they’re called. The\n`add_one_v3` and `add_one_v4` lines require the closures to be evaluated to be\nable to compile because the types will be inferred from their usage. This is\nsimilar to `let v = Vec::new();` needing either type annotations or values of\nsome type to be inserted into the `Vec` for Rust to be able to infer the type.\n\nFor closure definitions, the compiler will infer one concrete type for each of\ntheir parameters and for their return value. For instance, Listing 13-3 shows\nthe definition of a short closure that just returns the value it receives as a\nparameter. This closure isn’t very useful except for the purposes of this\nexample. Note that we haven’t added any type annotations to the definition.\nBecause there are no type annotations, we can call the closure with any type,\nwhich we’ve done here with `String` the first time. If we then try to call\n`example_closure` with an integer, we’ll get an error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-3: Attempting to call a closure whose types\nare inferred with two different types</span>\n\nThe compiler gives us this error:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-03/output.txt}}\n```\n\nThe first time we call `example_closure` with the `String` value, the compiler\ninfers the type of `x` and the return type of the closure to be `String`. Those\ntypes are then locked into the closure in `example_closure`, and we get a type\nerror when we next try to use a different type with the same closure.\n\n### Capturing References or Moving Ownership\n\nClosures can capture values from their environment in three ways, which\ndirectly map to the three ways a function can take a parameter: borrowing\nimmutably, borrowing mutably, and taking ownership. The closure will decide\nwhich of these to use based on what the body of the function does with the\ncaptured values.\n\nIn Listing 13-4, we define a closure that captures an immutable reference to\nthe vector named `list` because it only needs an immutable reference to print\nthe value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-4: Defining and calling a closure that\ncaptures an immutable reference</span>\n\nThis example also illustrates that a variable can bind to a closure definition,\nand we can later call the closure by using the variable name and parentheses as\nif the variable name were a function name.\n\nBecause we can have multiple immutable references to `list` at the same time,\n`list` is still accessible from the code before the closure definition, after\nthe closure definition but before the closure is called, and after the closure\nis called. This code compiles, runs, and prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-04/output.txt}}\n```\n\nNext, in Listing 13-5, we change the closure body so that it adds an element to\nthe `list` vector. The closure now captures a mutable reference:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-5: Defining and calling a closure that\ncaptures a mutable reference</span>\n\nThis code compiles, runs, and prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-05/output.txt}}\n```\n\nNote that there’s no longer a `println!` between the definition and the call of\nthe `borrows_mutably` closure: when `borrows_mutably` is defined, it captures a\nmutable reference to `list`. We don’t use the closure again after the closure\nis called, so the mutable borrow ends. Between the closure definition and the\nclosure call, an immutable borrow to print isn’t allowed because no other\nborrows are allowed when there’s a mutable borrow. Try adding a `println!`\nthere to see what error message you get!\n\nIf you want to force the closure to take ownership of the values it uses in the\nenvironment even though the body of the closure doesn’t strictly need\nownership, you can use the `move` keyword before the parameter list.\n\nThis technique is mostly useful when passing a closure to a new thread to move\nthe data so that it’s owned by the new thread. We’ll discuss threads and why\nyou would want to use them in detail in Chapter 16 when we talk about\nconcurrency, but for now, let’s briefly explore spawning a new thread using a\nclosure that needs the `move` keyword. Listing 13-6 shows Listing 13-4 modified\nto print the vector in a new thread rather than in the main thread:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-6: Using `move` to force the closure for the\nthread to take ownership of `list`</span>\n\nWe spawn a new thread, giving the thread a closure to run as an argument. The\nclosure body prints out the list. In Listing 13-4, the closure only captured\n`list` using an immutable reference because that's the least amount of access\nto `list` needed to print it. In this example, even though the closure body\nstill only needs an immutable reference, we need to specify that `list` should\nbe moved into the closure by putting the `move` keyword at the beginning of the\nclosure definition. The new thread might finish before the rest of the main\nthread finishes, or the main thread might finish first. If the main thread\nmaintained ownership of `list` but ended before the new thread did and dropped\n`list`, the immutable reference in the thread would be invalid. Therefore, the\ncompiler requires that `list` be moved into the closure given to the new thread\nso the reference will be valid. Try removing the `move` keyword or using `list`\nin the main thread after the closure is defined to see what compiler errors you\nget!\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"storing-closures-using-generic-parameters-and-the-fn-traits\"></a>\n<a id=\"limitations-of-the-cacher-implementation\"></a>\n<a id=\"moving-captured-values-out-of-the-closure-and-the-fn-traits\"></a>\n\n### Moving Captured Values Out of Closures and the `Fn` Traits\n\nOnce a closure has captured a reference or captured ownership of a value from\nthe environment where the closure is defined (thus affecting what, if anything,\nis moved *into* the closure), the code in the body of the closure defines what\nhappens to the references or values when the closure is evaluated later (thus\naffecting what, if anything, is moved *out of* the closure). A closure body can\ndo any of the following: move a captured value out of the closure, mutate the\ncaptured value, neither move nor mutate the value, or capture nothing from the\nenvironment to begin with.\n\nThe way a closure captures and handles values from the environment affects\nwhich traits the closure implements, and traits are how functions and structs\ncan specify what kinds of closures they can use. Closures will automatically\nimplement one, two, or all three of these `Fn` traits, in an additive fashion,\ndepending on how the closure’s body handles the values:\n\n1. `FnOnce` applies to closures that can be called once. All closures implement\n   at least this trait, because all closures can be called. A closure that\n   moves captured values out of its body will only implement `FnOnce` and none\n   of the other `Fn` traits, because it can only be called once.\n2. `FnMut` applies to closures that don’t move captured values out of their\n   body, but that might mutate the captured values. These closures can be\n   called more than once.\n3. `Fn` applies to closures that don’t move captured values out of their body\n   and that don’t mutate captured values, as well as closures that capture\n   nothing from their environment. These closures can be called more than once\n   without mutating their environment, which is important in cases such as\n   calling a closure multiple times concurrently.\n\nLet’s look at the definition of the `unwrap_or_else` method on `Option<T>` that\nwe used in Listing 13-1:\n\n```rust,ignore\nimpl<T> Option<T> {\n    pub fn unwrap_or_else<F>(self, f: F) -> T\n    where\n        F: FnOnce() -> T\n    {\n        match self {\n            Some(x) => x,\n            None => f(),\n        }\n    }\n}\n```\n\nRecall that `T` is the generic type representing the type of the value in the\n`Some` variant of an `Option`. That type `T` is also the return type of the\n`unwrap_or_else` function: code that calls `unwrap_or_else` on an\n`Option<String>`, for example, will get a `String`.\n\nNext, notice that the `unwrap_or_else` function has the additional generic type\nparameter `F`. The `F` type is the type of the parameter named `f`, which is\nthe closure we provide when calling `unwrap_or_else`.\n\nThe trait bound specified on the generic type `F` is `FnOnce() -> T`, which\nmeans `F` must be able to be called once, take no arguments, and return a `T`.\nUsing `FnOnce` in the trait bound expresses the constraint that\n`unwrap_or_else` is only going to call `f` at most one time. In the body of\n`unwrap_or_else`, we can see that if the `Option` is `Some`, `f` won’t be\ncalled. If the `Option` is `None`, `f` will be called once. Because all\nclosures implement `FnOnce`, `unwrap_or_else` accepts the most different kinds\nof closures and is as flexible as it can be.\n\n> Note: Functions can implement all three of the `Fn` traits too. If what we\n> want to do doesn’t require capturing a value from the environment, we can use\n> the name of a function rather than a closure where we need something that\n> implements one of the `Fn` traits. For example, on an `Option<Vec<T>>` value,\n> we could call `unwrap_or_else(Vec::new)` to get a new, empty vector if the\n> value is `None`.\n\nNow let’s look at the standard library method `sort_by_key` defined on slices,\nto see how that differs from `unwrap_or_else` and why `sort_by_key` uses\n`FnMut` instead of `FnOnce` for the trait bound. The closure gets one argument\nin the form of a reference to the current item in the slice being considered,\nand returns a value of type `K` that can be ordered. This function is useful\nwhen you want to sort a slice by a particular attribute of each item. In\nListing 13-7, we have a list of `Rectangle` instances and we use `sort_by_key`\nto order them by their `width` attribute from low to high:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-7: Using `sort_by_key` to order rectangles by\nwidth</span>\n\nThis code prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-07/output.txt}}\n```\n\nThe reason `sort_by_key` is defined to take an `FnMut` closure is that it calls\nthe closure multiple times: once for each item in the slice. The closure `|r|\nr.width` doesn’t capture, mutate, or move out anything from its environment, so\nit meets the trait bound requirements.\n\nIn contrast, Listing 13-8 shows an example of a closure that implements just\nthe `FnOnce` trait, because it moves a value out of the environment. The\ncompiler won’t let us use this closure with `sort_by_key`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-8: Attempting to use an `FnOnce` closure with\n`sort_by_key`</span>\n\nThis is a contrived, convoluted way (that doesn’t work) to try and count the\nnumber of times `sort_by_key` gets called when sorting `list`. This code\nattempts to do this counting by pushing `value`—a `String` from the closure’s\nenvironment—into the `sort_operations` vector. The closure captures `value`\nthen moves `value` out of the closure by transferring ownership of `value` to\nthe `sort_operations` vector. This closure can be called once; trying to call\nit a second time wouldn’t work because `value` would no longer be in the\nenvironment to be pushed into `sort_operations` again! Therefore, this closure\nonly implements `FnOnce`. When we try to compile this code, we get this error\nthat `value` can’t be moved out of the closure because the closure must\nimplement `FnMut`:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-08/output.txt}}\n```\n\nThe error points to the line in the closure body that moves `value` out of the\nenvironment. To fix this, we need to change the closure body so that it doesn’t\nmove values out of the environment. To count the number of times `sort_by_key`\nis called, keeping a counter in the environment and incrementing its value in\nthe closure body is a more straightforward way to calculate that. The closure\nin Listing 13-9 works with `sort_by_key` because it is only capturing a mutable\nreference to the `num_sort_operations` counter and can therefore be called more\nthan once:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-9: Using an `FnMut` closure with `sort_by_key`\nis allowed</span>\n\nThe `Fn` traits are important when defining or using functions or types that\nmake use of closures. In the next section, we’ll discuss iterators. Many\niterator methods take closure arguments, so keep these closure details in mind\nas we continue!\n\n[unwrap-or-else]: ../std/option/enum.Option.html#method.unwrap_or_else\n",
					"qas": [
						{
							"question": "What is 'FnOnce'?",
							"id": 2216,
							"answers": [
								{
									"text": " `FnOnce` applies to closures that can be called once. All closures implement\n   at least this trait, because all closures can be called. A closure that\n   moves captured values out of its body will only implement `FnOnce` and none\n   of the other `Fn` traits, because it can only be called once",
									"answer_start": 14390
								}
							],
							"is_impossible": false
						},
						{
							"question": "What are closures?",
							"id": 2206,
							"answers": [
								{
									"text": "anonymous functions you can save in a variable or pass as\narguments to other functions",
									"answer_start": 219
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Variables and Mutability\n\nAs mentioned in the [“Storing Values with\nVariables”][storing-values-with-variables]<!-- ignore --> section, by default,\nvariables are immutable. This is one of many nudges Rust gives you to write\nyour code in a way that takes advantage of the safety and easy concurrency that\nRust offers. However, you still have the option to make your variables mutable.\nLet’s explore how and why Rust encourages you to favor immutability and why\nsometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can’t change\nthat value. To illustrate this, generate a new project called *variables* in\nyour *projects* directory by using `cargo new variables`.\n\nThen, in your new *variables* directory, open *src/main.rs* and replace its\ncode with the following code, which won’t compile just yet:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/src/main.rs}}\n```\n\nSave and run the program using `cargo run`. You should receive an error message\nregarding an immutability error, as shown in this output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/output.txt}}\n```\n\nThis example shows how the compiler helps you find errors in your programs.\nCompiler errors can be frustrating, but really they only mean your program\nisn’t safely doing what you want it to do yet; they do *not* mean that you’re\nnot a good programmer! Experienced Rustaceans still get compiler errors.\n\nYou received the error message `` cannot assign twice to immutable variable `x`\n`` because you tried to assign a second value to the immutable `x` variable.\n\nIt’s important that we get compile-time errors when we attempt to change a\nvalue that’s designated as immutable because this very situation can lead to\nbugs. If one part of our code operates on the assumption that a value will\nnever change and another part of our code changes that value, it’s possible\nthat the first part of the code won’t do what it was designed to do. The cause\nof this kind of bug can be difficult to track down after the fact, especially\nwhen the second piece of code changes the value only *sometimes*. The Rust\ncompiler guarantees that when you state that a value won’t change, it really\nwon’t change, so you don’t have to keep track of it yourself. Your code is thus\neasier to reason through.\n\nBut mutability can be very useful, and can make code more convenient to write.\nAlthough variables are immutable by default, you can make them mutable by\nadding `mut` in front of the variable name as you did in [Chapter\n2][storing-values-with-variables]<!-- ignore -->. Adding `mut` also conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable’s value.\n\nFor example, let’s change *src/main.rs* to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/src/main.rs}}\n```\n\nWhen we run the program now, we get this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/output.txt}}\n```\n\nWe’re allowed to change the value bound to `x` from `5` to `6` when `mut` is\nused. Ultimately, deciding whether to use mutability or not is up to you and\ndepends on what you think is clearest in that particular situation.\n\n### Constants\n\nLike immutable variables, *constants* are values that are bound to a name and\nare not allowed to change, but there are a few differences between constants\nand variables.\n\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just\nimmutable by default—they’re always immutable. You declare constants using the\n`const` keyword instead of the `let` keyword, and the type of the value *must*\nbe annotated. We’ll cover types and type annotations in the next section,\n[“Data Types”][data-types]<!-- ignore -->, so don’t worry about the details\nright now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression,\nnot the result of a value that could only be computed at runtime.\n\nHere’s an example of a constant declaration:\n\n```rust\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n```\n\nThe constant’s name is `THREE_HOURS_IN_SECONDS` and its value is set to the\nresult of multiplying 60 (the number of seconds in a minute) by 60 (the number\nof minutes in an hour) by 3 (the number of hours we want to count in this\nprogram). Rust’s naming convention for constants is to use all uppercase with\nunderscores between words. The compiler is able to evaluate a limited set of\noperations at compile time, which lets us choose to write out this value in a\nway that’s easier to understand and verify, rather than setting this constant\nto the value 10,800. See the [Rust Reference’s section on constant\nevaluation][const-eval] for more information on what operations can be used\nwhen declaring constants.\n\nConstants are valid for the entire time a program runs, within the scope in\nwhich they were declared. This property makes constants useful for values in\nyour application domain that multiple parts of the program might need to know\nabout, such as the maximum number of points any player of a game is allowed to\nearn, or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future.\n\n### Shadowing\n\nAs you saw in the guessing game tutorial in [Chapter\n2][comparing-the-guess-to-the-secret-number]<!-- ignore -->, you can declare a\nnew variable with the same name as a previous variable. Rustaceans say that the\nfirst variable is *shadowed* by the second, which means that the second\nvariable is what the compiler will see when you use the name of the variable.\nIn effect, the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends.\nWe can shadow a variable by using the same variable’s name and repeating the\nuse of the `let` keyword as follows:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/src/main.rs}}\n```\n\nThis program first binds `x` to a value of `5`. Then it creates a new variable\n`x` by repeating `let x =`, taking the original value and adding `1` so the\nvalue of `x` is then `6`. Then, within an inner scope created with the curly\nbrackets, the third `let` statement also shadows `x` and creates a new\nvariable, multiplying the previous value by `2` to give `x` a value of `12`.\nWhen that scope is over, the inner shadowing ends and `x` returns to being `6`.\nWhen we run this program, it will output the following:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/output.txt}}\n```\n\nShadowing is different from marking a variable as `mut` because we’ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword. By using `let`, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed.\n\nThe other difference between `mut` and shadowing is that because we’re\neffectively creating a new variable when we use the `let` keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, and then we want to store that input as a number:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-04-shadowing-can-change-types/src/main.rs:here}}\n```\n\nThe first `spaces` variable is a string type and the second `spaces` variable\nis a number type. Shadowing thus spares us from having to come up with\ndifferent names, such as `spaces_str` and `spaces_num`; instead, we can reuse\nthe simpler `spaces` name. However, if we try to use `mut` for this, as shown\nhere, we’ll get a compile-time error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/src/main.rs:here}}\n```\n\nThe error says we’re not allowed to mutate a variable’s type:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/output.txt}}\n```\n\nNow that we’ve explored how variables work, let’s look at more data types they\ncan have.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[data-types]: ch03-02-data-types.html#data-types\n[storing-values-with-variables]: ch02-00-guessing-game-tutorial.html#storing-values-with-variables\n[const-eval]: ../reference/const_eval.html\n",
					"qas": [
						{
							"question": "What will happen when we have two variables with the same name?",
							"id": 324,
							"answers": [
								{
									"text": "the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends",
									"answer_start": 6280
								}
							],
							"is_impossible": false
						},
						{
							"question": "How do we call a situation when two variables have the same name?",
							"id": 323,
							"answers": [
								{
									"text": "shadowed",
									"answer_start": 6138
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Traits: Defining Shared Behavior\n\nA *trait* defines functionality a particular type has and can share with other\ntypes. We can use traits to define shared behavior in an abstract way. We can\nuse *trait bounds* to specify that a generic type can be any type that has\ncertain behavior.\n\n> Note: Traits are similar to a feature often called *interfaces* in other\n> languages, although with some differences.\n\n### Defining a Trait\n\nA type’s behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose.\n\nFor example, let’s say we have multiple structs that hold various kinds and\namounts of text: a `NewsArticle` struct that holds a news story filed in a\nparticular location and a `Tweet` that can have at most 280 characters along\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\nto another tweet.\n\nWe want to make a media aggregator library crate named `aggregator` that can\ndisplay summaries of data that might be stored in a `NewsArticle` or `Tweet`\ninstance. To do this, we need a summary from each type, and we’ll request\nthat summary by calling a `summarize` method on an instance. Listing 10-12\nshows the definition of a public `Summary` trait that expresses this behavior.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 10-12: A `Summary` trait that consists of the\nbehavior provided by a `summarize` method</span>\n\nHere, we declare a trait using the `trait` keyword and then the trait’s name,\nwhich is `Summary` in this case. We’ve also declared the trait as `pub` so that\ncrates depending on this crate can make use of this trait too, as we’ll see in\na few examples. Inside the curly brackets, we declare the method signatures\nthat describe the behaviors of the types that implement this trait, which in\nthis case is `fn summarize(&self) -> String`.\n\nAfter the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the `Summary` trait will have the method `summarize`\ndefined with this signature exactly.\n\nA trait can have multiple methods in its body: the method signatures are listed\none per line and each line ends in a semicolon.\n\n### Implementing a Trait on a Type\n\nNow that we’ve defined the desired signatures of the `Summary` trait’s methods,\nwe can implement it on the types in our media aggregator. Listing 10-13 shows\nan implementation of the `Summary` trait on the `NewsArticle` struct that uses\nthe headline, the author, and the location to create the return value of\n`summarize`. For the `Tweet` struct, we define `summarize` as the username\nfollowed by the entire text of the tweet, assuming that tweet content is\nalready limited to 280 characters.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-13: Implementing the `Summary` trait on the\n`NewsArticle` and `Tweet` types</span>\n\nImplementing a trait on a type is similar to implementing regular methods. The\ndifference is that after `impl`, we put the trait name we want to implement,\nthen use the `for` keyword, and then specify the name of the type we want to\nimplement the trait for. Within the `impl` block, we put the method signatures\nthat the trait definition has defined. Instead of adding a semicolon after each\nsignature, we use curly brackets and fill in the method body with the specific\nbehavior that we want the methods of the trait to have for the particular type.\n\nNow that the library has implemented the `Summary` trait on `NewsArticle` and\n`Tweet`, users of the crate can call the trait methods on instances of\n`NewsArticle` and `Tweet` in the same way we call regular methods. The only\ndifference is that the user must bring the trait into scope as well as the\ntypes. Here’s an example of how a binary crate could use our `aggregator`\nlibrary crate:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-01-calling-trait-method/src/main.rs}}\n```\n\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already\nknow, people`.\n\nOther crates that depend on the `aggregator` crate can also bring the `Summary`\ntrait into scope to implement `Summary` on their own types. One restriction to\nnote is that we can implement a trait on a type only if at least one of the\ntrait or the type is local to our crate. For example, we can implement standard\nlibrary traits like `Display` on a custom type like `Tweet` as part of our\n`aggregator` crate functionality, because the type `Tweet` is local to our\n`aggregator` crate. We can also implement `Summary` on `Vec<T>` in our\n`aggregator` crate, because the trait `Summary` is local to our `aggregator`\ncrate.\n\nBut we can’t implement external traits on external types. For example, we can’t\nimplement the `Display` trait on `Vec<T>` within our `aggregator` crate,\nbecause `Display` and `Vec<T>` are both defined in the standard library and\naren’t local to our `aggregator` crate. This restriction is part of a property\ncalled *coherence*, and more specifically the *orphan rule*, so named because\nthe parent type is not present. This rule ensures that other people’s code\ncan’t break your code and vice versa. Without the rule, two crates could\nimplement the same trait for the same type, and Rust wouldn’t know which\nimplementation to use.\n\n### Default Implementations\n\nSometimes it’s useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method’s default behavior.\n\nIn Listing 10-14 we specify a default string for the `summarize` method of the\n`Summary` trait instead of only defining the method signature, as we did in\nListing 10-12.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-14/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-14: Defining a `Summary` trait with a default\nimplementation of the `summarize` method</span>\n\nTo use a default implementation to summarize instances of `NewsArticle`, we\nspecify an empty `impl` block with `impl Summary for NewsArticle {}`.\n\nEven though we’re no longer defining the `summarize` method on `NewsArticle`\ndirectly, we’ve provided a default implementation and specified that\n`NewsArticle` implements the `Summary` trait. As a result, we can still call\nthe `summarize` method on an instance of `NewsArticle`, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-02-calling-default-impl/src/main.rs:here}}\n```\n\nThis code prints `New article available! (Read more...)`.\n\nCreating a default implementation doesn’t require us to change anything about\nthe implementation of `Summary` on `Tweet` in Listing 10-13. The reason is that\nthe syntax for overriding a default implementation is the same as the syntax\nfor implementing a trait method that doesn’t have a default implementation.\n\nDefault implementations can call other methods in the same trait, even if those\nother methods don’t have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the `Summary` trait to have a\n`summarize_author` method whose implementation is required, and then define a\n`summarize` method that has a default implementation that calls the\n`summarize_author` method:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:here}}\n```\n\nTo use this version of `Summary`, we only need to define `summarize_author`\nwhen we implement the trait on a type:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:impl}}\n```\n\nAfter we define `summarize_author`, we can call `summarize` on instances of the\n`Tweet` struct, and the default implementation of `summarize` will call the\ndefinition of `summarize_author` that we’ve provided. Because we’ve implemented\n`summarize_author`, the `Summary` trait has given us the behavior of the\n`summarize` method without requiring us to write any more code.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/main.rs:here}}\n```\n\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\n\nNote that it isn’t possible to call the default implementation from an\noverriding implementation of that same method.\n\n### Traits as Parameters\n\nNow that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types. We'll use the\n`Summary` trait we implemented on the `NewsArticle` and `Tweet` types in\nListing 10-13 to define a `notify` function that calls the `summarize` method\non its `item` parameter, which is of some type that implements the `Summary`\ntrait. To do this, we use the `impl Trait` syntax, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-04-traits-as-parameters/src/lib.rs:here}}\n```\n\nInstead of a concrete type for the `item` parameter, we specify the `impl`\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of `notify`, we can call any methods on `item`\nthat come from the `Summary` trait, such as `summarize`. We can call `notify`\nand pass in any instance of `NewsArticle` or `Tweet`. Code that calls the\nfunction with any other type, such as a `String` or an `i32`, won’t compile\nbecause those types don’t implement `Summary`.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"fixing-the-largest-function-with-trait-bounds\"></a>\n\n#### Trait Bound Syntax\n\nThe `impl Trait` syntax works for straightforward cases but is actually syntax\nsugar for a longer form known as a *trait bound*; it looks like this:\n\n```rust,ignore\npub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets.\n\nThe `impl Trait` syntax is convenient and makes for more concise code in simple\ncases, while the fuller trait bound syntax can express more complexity in other\ncases. For example, we can have two parameters that implement `Summary`. Doing\nso with the `impl Trait` syntax looks like this:\n\n```rust,ignore\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\n```\n\nUsing `impl Trait` is appropriate if we want this function to allow `item1` and\n`item2` to have different types (as long as both types implement `Summary`). If\nwe want to force both parameters to have the same type, however, we must use a\ntrait bound, like this:\n\n```rust,ignore\npub fn notify<T: Summary>(item1: &T, item2: &T) {\n```\n\nThe generic type `T` specified as the type of the `item1` and `item2`\nparameters constrains the function such that the concrete type of the value\npassed as an argument for `item1` and `item2` must be the same.\n\n#### Specifying Multiple Trait Bounds with the `+` Syntax\n\nWe can also specify more than one trait bound. Say we wanted `notify` to use\ndisplay formatting as well as `summarize` on `item`: we specify in the `notify`\ndefinition that `item` must implement both `Display` and `Summary`. We can do\nso using the `+` syntax:\n\n```rust,ignore\npub fn notify(item: &(impl Summary + Display)) {\n```\n\nThe `+` syntax is also valid with trait bounds on generic types:\n\n```rust,ignore\npub fn notify<T: Summary + Display>(item: &T) {\n```\n\nWith the two trait bounds specified, the body of `notify` can call `summarize`\nand use `{}` to format `item`.\n\n#### Clearer Trait Bounds with `where` Clauses\n\nUsing too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function’s name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a `where` clause after the function\nsignature. So instead of writing this:\n\n```rust,ignore\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n```\n\nwe can use a `where` clause, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-where-clause/src/lib.rs:here}}\n```\n\nThis function’s signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds.\n\n### Returning Types that Implement Traits\n\nWe can also use the `impl Trait` syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-05-returning-impl-trait/src/lib.rs:here}}\n```\n\nBy using `impl Summary` for the return type, we specify that the\n`returns_summarizable` function returns some type that implements the `Summary`\ntrait without naming the concrete type. In this case, `returns_summarizable`\nreturns a `Tweet`, but the code calling this function doesn’t need to know that.\n\nThe ability to specify a return type only by the trait it implements is\nespecially useful in the context of closures and iterators, which we cover in\nChapter 13. Closures and iterators create types that only the compiler knows or\ntypes that are very long to specify. The `impl Trait` syntax lets you concisely\nspecify that a function returns some type that implements the `Iterator` trait\nwithout needing to write out a very long type.\n\nHowever, you can only use `impl Trait` if you’re returning a single type. For\nexample, this code that returns either a `NewsArticle` or a `Tweet` with the\nreturn type specified as `impl Summary` wouldn’t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-06-impl-trait-returns-one-type/src/lib.rs:here}}\n```\n\nReturning either a `NewsArticle` or a `Tweet` isn’t allowed due to restrictions\naround how the `impl Trait` syntax is implemented in the compiler. We’ll cover\nhow to write a function with this behavior in the [“Using Trait Objects That\nAllow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section of Chapter 17.\n\n### Using Trait Bounds to Conditionally Implement Methods\n\nBy using a trait bound with an `impl` block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type `Pair<T>` in Listing 10-15 always implements the\n`new` function to return a new instance of `Pair<T>` (recall from the\n[“Defining Methods”][methods]<!-- ignore --> section of Chapter 5 that `Self`\nis a type alias for the type of the `impl` block, which in this case is\n`Pair<T>`). But in the next `impl` block, `Pair<T>` only implements the\n`cmp_display` method if its inner type `T` implements the `PartialOrd` trait\nthat enables comparison *and* the `Display` trait that enables printing.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-15/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 10-15: Conditionally implementing methods on a\ngeneric type depending on trait bounds</span>\n\nWe can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called *blanket implementations* and are extensively used in the\nRust standard library. For example, the standard library implements the\n`ToString` trait on any type that implements the `Display` trait. The `impl`\nblock in the standard library looks similar to this code:\n\n```rust,ignore\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\n\nBecause the standard library has this blanket implementation, we can call the\n`to_string` method defined by the `ToString` trait on any type that implements\nthe `Display` trait. For example, we can turn integers into their corresponding\n`String` values like this because integers implement `Display`:\n\n```rust\nlet s = 3.to_string();\n```\n\nBlanket implementations appear in the documentation for the trait in the\n“Implementors” section.\n\nTraits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn’t define the method. But Rust\nmoves these errors to compile time so we’re forced to fix the problems before\nour code is even able to run. Additionally, we don’t have to write code that\nchecks for behavior at runtime because we’ve already checked at compile time.\nDoing so improves performance without having to give up the flexibility of\ngenerics.\n\n[using-trait-objects-that-allow-for-values-of-different-types]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[methods]: ch05-03-method-syntax.html#defining-methods\n",
					"qas": [
						{
							"question": "What are traits used for?",
							"id": 2049,
							"answers": [
								{
									"text": "Defining Shared Behavior",
									"answer_start": 11
								}
							],
							"is_impossible": false
						},
						{
							"question": "Can I use 'impl Trait' when I return multiple types?",
							"id": 2064,
							"answers": [
								{
									"text": "you can only use `impl Trait` if you’re returning a single type",
									"answer_start": 14558
								}
							],
							"is_impossible": false
						},
						{
							"question": "What are traits?",
							"id": 2050,
							"answers": [
								{
									"text": "A *trait* defines functionality a particular type has and can share with other\ntypes.",
									"answer_start": 37
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can I establish default behavior for few methods?",
							"id": 2059,
							"answers": [
								{
									"text": "in a trait instead of requiring implementations for all methods on every type",
									"answer_start": 6017
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## References and Borrowing\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the\n`String` to the calling function so we can still use the `String` after the\ncall to `calculate_length`, because the `String` was moved into\n`calculate_length`. Instead, we can provide a reference to the `String` value.\nA *reference* is like a pointer in that it’s an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.\n\nHere is how you would define and use a `calculate_length` function that has a\nreference to an object as a parameter instead of taking ownership of the value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:all}}\n```\n\nFirst, notice that all the tuple code in the variable declaration and the\nfunction return value is gone. Second, note that we pass `&s1` into\n`calculate_length` and, in its definition, we take `&String` rather than\n`String`. These ampersands represent *references*, and they allow you to refer\nto some value without taking ownership of it. Figure 4-5 depicts this concept.\n\n<img alt=\"Three tables: the table for s contains only a pointer to the table\nfor s1. The table for s1 contains the stack data for s1 and points to the\nstring data on the heap.\" src=\"img/trpl04-05.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 4-5: A diagram of `&String s` pointing at `String\ns1`</span>\n\n> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We’ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in\n> Chapter 15.\n\nLet’s take a closer look at the function call here:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:here}}\n```\n\nThe `&s1` syntax lets us create a reference that *refers* to the value of `s1`\nbut does not own it. Because it does not own it, the value it points to will\nnot be dropped when the reference stops being used.\n\nLikewise, the signature of the function uses `&` to indicate that the type of\nthe parameter `s` is a reference. Let’s add some explanatory annotations:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-08-reference-with-annotations/src/main.rs:here}}\n```\n\nThe scope in which the variable `s` is valid is the same as any function\nparameter’s scope, but the value pointed to by the reference is not dropped\nwhen `s` stops being used, because `s` doesn’t have ownership. When functions\nhave references as parameters instead of the actual values, we won’t need to\nreturn the values in order to give back ownership, because we never had\nownership.\n\nWe call the action of creating a reference *borrowing*. As in real life, if a\nperson owns something, you can borrow it from them. When you’re done, you have\nto give it back. You don’t own it.\n\nSo, what happens if we try to modify something we’re borrowing? Try the code in\nListing 4-6. Spoiler alert: it doesn’t work!\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-6: Attempting to modify a borrowed value</span>\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/listing-04-06/output.txt}}\n```\n\nJust as variables are immutable by default, so are references. We’re not\nallowed to modify something we have a reference to.\n\n### Mutable References\n\nWe can fix the code from Listing 4-6 to allow us to modify a borrowed value\nwith just a few small tweaks that use, instead, a *mutable reference*:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-09-fixes-listing-04-06/src/main.rs}}\n```\n\nFirst we change `s` to be `mut`. Then we create a mutable reference with `&mut\ns` where we call the `change` function, and update the function signature to\naccept a mutable reference with `some_string: &mut String`. This makes it very\nclear that the `change` function will mutate the value it borrows.\n\nMutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value. This code that\nattempts to create two mutable references to `s` will fail:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/src/main.rs:here}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/output.txt}}\n```\n\nThis error says that this code is invalid because we cannot borrow `s` as\nmutable more than once at a time. The first mutable borrow is in `r1` and must\nlast until it’s used in the `println!`, but between the creation of that\nmutable reference and its usage, we tried to create another mutable reference\nin `r2` that borrows the same data as `r1`.\n\nThe restriction preventing multiple mutable references to the same data at the\nsame time allows for mutation but in a very controlled fashion. It’s something\nthat new Rustaceans struggle with because most languages let you mutate\nwhenever you’d like. The benefit of having this restriction is that Rust can\nprevent data races at compile time. A *data race* is similar to a race\ncondition and happens when these three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There’s no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix\nwhen you’re trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for\nmultiple mutable references, just not *simultaneous* ones:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-11-muts-in-separate-scopes/src/main.rs:here}}\n```\n\nRust enforces a similar rule for combining mutable and immutable references.\nThis code results in an error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/src/main.rs:here}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/output.txt}}\n```\n\nWhew! We *also* cannot have a mutable reference while we have an immutable one\nto the same value.\n\nUsers of an immutable reference don’t expect the value to suddenly change out\nfrom under them! However, multiple immutable references are allowed because no\none who is just reading the data has the ability to affect anyone else’s\nreading of the data.\n\nNote that a reference’s scope starts from where it is introduced and continues\nthrough the last time that reference is used. For instance, this code will\ncompile because the last usage of the immutable references, the `println!`,\noccurs before the mutable reference is introduced:\n\n```rust,edition2021\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-13-reference-scope-ends/src/main.rs:here}}\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!`\nwhere they are last used, which is before the mutable reference `r3` is\ncreated. These scopes don’t overlap, so this code is allowed: the compiler can\ntell that the reference is no longer being used at a point before the end of\nthe scope.\n\nEven though borrowing errors may be frustrating at times, remember that it’s\nthe Rust compiler pointing out a potential bug early (at compile time rather\nthan at runtime) and showing you exactly where the problem is. Then you don’t\nhave to track down why your data isn’t what you thought it was.\n\n### Dangling References\n\nIn languages with pointers, it’s easy to erroneously create a *dangling\npointer*—a pointer that references a location in memory that may have been\ngiven to someone else—by freeing some memory while preserving a pointer to that\nmemory. In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet’s try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/src/main.rs}}\n```\n\nHere’s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/output.txt}}\n```\n\nThis error message refers to a feature we haven’t covered yet: lifetimes. We’ll\ndiscuss lifetimes in detail in Chapter 10. But, if you disregard the parts\nabout lifetimes, the message does contain the key to why this code is a problem:\n\n```text\nthis function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n```\n\nLet’s take a closer look at exactly what’s happening at each stage of our\n`dangle` code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-15-dangling-reference-annotated/src/main.rs:here}}\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished,\n`s` will be deallocated. But we tried to return a reference to it. That means\nthis reference would be pointing to an invalid `String`. That’s no good! Rust\nwon’t let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-16-no-dangle/src/main.rs:here}}\n```\n\nThis works without any problems. Ownership is moved out, and nothing is\ndeallocated.\n\n### The Rules of References\n\nLet’s recap what we’ve discussed about references:\n\n* At any given time, you can have *either* one mutable reference *or* any\n  number of immutable references.\n* References must always be valid.\n\nNext, we’ll look at a different kind of reference: slices.\n",
					"qas": [
						{
							"question": "What is the weakness of mutable references?",
							"id": 26,
							"answers": [
								{
									"text": "Mutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value.",
									"answer_start": 4381
								}
							],
							"is_impossible": false
						},
						{
							"question": "How will Rust prevent creating dangling references?",
							"id": 31,
							"answers": [
								{
									"text": "In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet’s try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:",
									"answer_start": 8455
								}
							],
							"is_impossible": false
						},
						{
							"question": "When starts and ends a reference's scope?",
							"id": 29,
							"answers": [
								{
									"text": "Note that a reference’s scope starts from where it is introduced and continues\nthrough the last time that reference is used.",
									"answer_start": 7159
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Storing Lists of Values with Vectors\n\nThe first collection type we’ll look at is `Vec<T>`, also known as a *vector*.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n\n### Creating a New Vector\n\nTo create a new empty vector, we call the `Vec::new` function, as shown in\nListing 8-1.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-1: Creating a new, empty vector to hold values\nof type `i32`</span>\n\nNote that we added a type annotation here. Because we aren’t inserting any\nvalues into this vector, Rust doesn’t know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe’ll cover how to use generics with your own types in Chapter 10. For now,\nknow that the `Vec<T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets. In Listing 8-1, we’ve told Rust that the `Vec<T>` in `v` will\nhold elements of the `i32` type.\n\nMore often, you’ll create a `Vec<T>` with initial values and Rust will infer\nthe type of value you want to store, so you rarely need to do this type\nannotation. Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it. Listing 8-2 creates a new\n`Vec<i32>` that holds the values `1`, `2`, and `3`. The integer type is `i32`\nbecause that’s the default integer type, as we discussed in the [“Data\nTypes”][data-types]<!-- ignore --> section of Chapter 3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-2: Creating a new vector containing\nvalues</span>\n\nBecause we’ve given initial `i32` values, Rust can infer that the type of `v`\nis `Vec<i32>`, and the type annotation isn’t necessary. Next, we’ll look at how\nto modify a vector.\n\n### Updating a Vector\n\nTo create a vector and then add elements to it, we can use the `push` method,\nas shown in Listing 8-3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-3: Using the `push` method to add values to a\nvector</span>\n\nAs with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type `i32`, and Rust infers this from the data, so\nwe don’t need the `Vec<i32>` annotation.\n\n### Reading Elements of Vectors\n\nThere are two ways to reference a value stored in a vector: via indexing or\nusing the `get` method. In the following examples, we’ve annotated the types of\nthe values that are returned from these functions for extra clarity.\n\nListing 8-4 shows both methods of accessing a value in a vector, with indexing\nsyntax and the `get` method.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-4: Using indexing syntax or the `get` method to\naccess an item in a vector</span>\n\nNote a few details here. We use the index value of `2` to get the third element\nbecause vectors are indexed by number, starting at zero. Using `&` and `[]`\ngives us a reference to the element at the index value. When we use the `get`\nmethod with the index passed as an argument, we get an `Option<&T>` that we can\nuse with `match`.\n\nThe reason Rust provides these two ways to reference an element is so you can\nchoose how the program behaves when you try to use an index value outside the\nrange of existing elements. As an example, let’s see what happens when we have\na vector of five elements and then we try to access an element at index 100\nwith each technique, as shown in Listing 8-5.\n\n```rust,should_panic,panics\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-5: Attempting to access the element at index\n100 in a vector containing five elements</span>\n\nWhen we run this code, the first `[]` method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there’s an attempt to access an element past the\nend of the vector.\n\nWhen the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking. You would use this method if accessing an element\nbeyond the range of the vector may happen occasionally under normal\ncircumstances. Your code will then have logic to handle having either\n`Some(&element)` or `None`, as discussed in Chapter 6. For example, the index\ncould be coming from a person entering a number. If they accidentally enter a\nnumber that’s too large and the program gets a `None` value, you could tell the\nuser how many items are in the current vector and give them another chance to\nenter a valid value. That would be more user-friendly than crashing the program\ndue to a typo!\n\nWhen the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can’t have mutable and immutable references in the same\nscope. That rule applies in Listing 8-6, where we hold an immutable reference\nto the first element in a vector and try to add an element to the end. This\nprogram won’t work if we also try to refer to that element later in the\nfunction:\n\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-6: Attempting to add an element to a vector\nwhile holding a reference to an item</span>\n\nCompiling this code will result in this error:\n\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-06/output.txt}}\n```\n\nThe code in Listing 8-6 might look like it should work: why should a reference\nto the first element care about changes at the end of the vector? This error is\ndue to the way vectors work: because vectors put the values next to each other\nin memory, adding a new element onto the end of the vector might require\nallocating new memory and copying the old elements to the new space, if there\nisn’t enough room to put all the elements next to each other where the vector\nis currently stored. In that case, the reference to the first element would be\npointing to deallocated memory. The borrowing rules prevent programs from\nending up in that situation.\n\n> Note: For more on the implementation details of the `Vec<T>` type, see [“The\n> Rustonomicon”][nomicon].\n\n### Iterating over the Values in a Vector\n\nTo access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time. Listing 8-7 shows how\nto use a `for` loop to get immutable references to each element in a vector of\n`i32` values and print them.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-7: Printing each element in a vector by\niterating over the elements using a `for` loop</span>\n\nWe can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The `for` loop in Listing 8-8\nwill add `50` to each element.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-8: Iterating over mutable references to\nelements in a vector</span>\n\nTo change the value that the mutable reference refers to, we have to use the\n`*` dereference operator to get to the value in `i` before we can use the `+=`\noperator. We’ll talk more about the dereference operator in the [“Following the\nPointer to the Value with the Dereference Operator”][deref]<!-- ignore -->\nsection of Chapter 15.\n\nIterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker's rules. If we attempted to insert or remove items in the `for`\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the `for` loop holds prevents simultaneous modification of the\nwhole vector.\n\n### Using an Enum to Store Multiple Types\n\nVectors can only store values that are the same type. This can be inconvenient;\nthere are definitely use cases for needing to store a list of items of\ndifferent types. Fortunately, the variants of an enum are defined under the\nsame enum type, so when we need one type to represent elements of different\ntypes, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and all the enum variants will be considered the same type: that\nof the enum. Then we can create a vector to hold that enum and so, ultimately,\nholds different types. We’ve demonstrated this in Listing 8-9.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-9: Defining an `enum` to store values of\ndifferent types in one vector</span>\n\nRust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. We\nmust also be explicit about what types are allowed in this vector. If Rust\nallowed a vector to hold any type, there would be a chance that one or more of\nthe types would cause errors with the operations performed on the elements of\nthe vector. Using an enum plus a `match` expression means that Rust will ensure\nat compile time that every possible case is handled, as discussed in Chapter 6.\n\nIf you don’t know the exhaustive set of types a program will get at runtime to\nstore in a vector, the enum technique won’t work. Instead, you can use a trait\nobject, which we’ll cover in Chapter 17.\n\nNow that we’ve discussed some of the most common ways to use vectors, be sure\nto review [the API documentation][vec-api]<!-- ignore --> for all the many\nuseful methods defined on `Vec<T>` by the standard library. For example, in\naddition to `push`, a `pop` method removes and returns the last element.\n\n### Dropping a Vector Drops Its Elements\n\nLike any other `struct`, a vector is freed when it goes out of scope, as\nannotated in Listing 8-10.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-10: Showing where the vector and its elements\nare dropped</span>\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.\n\nLet’s move on to the next collection type: `String`!\n\n[data-types]: ch03-02-data-types.html#data-types\n[nomicon]: ../nomicon/vec/vec.html\n[vec-api]: ../std/vec/struct.Vec.html\n[deref]: ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator\n",
					"qas": [
						{
							"question": "What are the methods to reference the values of the vector?",
							"id": 189,
							"answers": [
								{
									"text": "There are two ways to reference a value stored in a vector: via indexing or\nusing the `get` method. In the following examples",
									"answer_start": 2816
								}
							],
							"is_impossible": false
						},
						{
							"question": "Why Rust use two techniques to reference the element of vector?",
							"id": 190,
							"answers": [
								{
									"text": "The reason Rust provides these two ways to reference an element is so you can\nchoose how the program behaves when you try to use an index value outside the\nrange of existing elements. As an example, let’s see what happens when we have\na vector of five elements",
									"answer_start": 3700
								}
							],
							"is_impossible": false
						},
						{
							"question": "Why iterating over a vector, whether immutably or mutably, is safe?",
							"id": 194,
							"answers": [
								{
									"text": "Iterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker's rules. If we attempted to insert or remove items in the `for`\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the `for` loop holds prevents simultaneous modification of the\nwhole vector.\n",
									"answer_start": 8216
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Packages and Crates\n\nThe first parts of the module system we’ll cover are packages and crates.\n\nA *crate* is the smallest amount of code that the Rust compiler considers at a\ntime. Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in the “Writing and Running a Rust Program”\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we’ll see in the coming sections.\n\nA crate can come in one of two forms: a binary crate or a library crate.\n*Binary crates* are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we’ve\ncreated so far have been binary crates.\n\n*Library crates* don’t have a `main` function, and they don’t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]<!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say “crate”, they mean library crate, and they\nuse “crate” interchangeably with the general programming concept of a “library\".\n\nThe *crate root* is a source file that the Rust compiler starts from and makes\nup the root module of your crate (we’ll explain modules in depth in the\n[“Defining Modules to Control Scope and Privacy”][modules]<!-- ignore -->\nsection).\n\nA *package* is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a *Cargo.toml* file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command-line tool you’ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand-line tool uses.\n\nA package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that’s a\nlibrary or binary crate.\n\nLet’s walk through what happens when we create a package. First, we enter the\ncommand `cargo new`:\n\n```console\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n```\n\nAfter we run `cargo new`, we use `ls` to see what Cargo creates. In the project\ndirectory, there’s a *Cargo.toml* file, giving us a package. There’s also a\n*src* directory that contains *main.rs*. Open *Cargo.toml* in your text editor,\nand note there’s no mention of *src/main.rs*. Cargo follows a convention that\n*src/main.rs* is the crate root of a binary crate with the same name as the\npackage. Likewise, Cargo knows that if the package directory contains\n*src/lib.rs*, the package contains a library crate with the same name as the\npackage, and *src/lib.rs* is its crate root. Cargo passes the crate root files\nto `rustc` to build the library or binary.\n\nHere, we have a package that only contains *src/main.rs*, meaning it only\ncontains a binary crate named `my-project`. If a package contains *src/main.rs*\nand *src/lib.rs*, it has two crates: a binary and a library, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the *src/bin* directory: each file will be a separate binary crate.\n\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n",
					"qas": [
						{
							"question": "What is characteristic to \"binary crates\"?",
							"id": 122,
							"answers": [
								{
									"text": "*Binary crates* are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we’ve\ncreated so far have been binary crates.",
									"answer_start": 625
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Treating Smart Pointers Like Regular References with the `Deref` Trait\n\nImplementing the `Deref` trait allows you to customize the behavior of the\n*dereference operator* `*` (not to be confused with the multiplication or glob\noperator). By implementing `Deref` in such a way that a smart pointer can be\ntreated like a regular reference, you can write code that operates on\nreferences and use that code with smart pointers too.\n\nLet’s first look at how the dereference operator works with regular references.\nThen we’ll try to define a custom type that behaves like `Box<T>`, and see why\nthe dereference operator doesn’t work like a reference on our newly defined\ntype. We’ll explore how implementing the `Deref` trait makes it possible for\nsmart pointers to work in ways similar to references. Then we’ll look at\nRust’s *deref coercion* feature and how it lets us work with either references\nor smart pointers.\n\n> Note: there’s one big difference between the `MyBox<T>` type we’re about to\n> build and the real `Box<T>`: our version will not store its data on the heap.\n> We are focusing this example on `Deref`, so where the data is actually stored\n> is less important than the pointer-like behavior.\n\n<!-- Old link, do not remove -->\n<a id=\"following-the-pointer-to-the-value-with-the-dereference-operator\"></a>\n\n### Following the Pointer to the Value\n\nA regular reference is a type of pointer, and one way to think of a pointer is\nas an arrow to a value stored somewhere else. In Listing 15-6, we create a\nreference to an `i32` value and then use the dereference operator to follow the\nreference to the value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-6: Using the dereference operator to follow a\nreference to an `i32` value</span>\n\nThe variable `x` holds an `i32` value `5`. We set `y` equal to a reference to\n`x`. We can assert that `x` is equal to `5`. However, if we want to make an\nassertion about the value in `y`, we have to use `*y` to follow the reference\nto the value it’s pointing to (hence *dereference*) so the compiler can compare\nthe actual value. Once we dereference `y`, we have access to the integer value\n`y` is pointing to that we can compare with `5`.\n\nIf we tried to write `assert_eq!(5, y);` instead, we would get this compilation\nerror:\n\n```console\n{{#include ../listings/ch15-smart-pointers/output-only-01-comparing-to-reference/output.txt}}\n```\n\nComparing a number and a reference to a number isn’t allowed because they’re\ndifferent types. We must use the dereference operator to follow the reference\nto the value it’s pointing to.\n\n### Using `Box<T>` Like a Reference\n\nWe can rewrite the code in Listing 15-6 to use a `Box<T>` instead of a\nreference; the dereference operator used on the `Box<T>` in Listing 15-7\nfunctions in the same way as the dereference operator used on the reference in\nListing 15-6:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-7: Using the dereference operator on a\n`Box<i32>`</span>\n\nThe main difference between Listing 15-7 and Listing 15-6 is that here we set\n`y` to be an instance of a `Box<T>` pointing to a copied value of `x` rather\nthan a reference pointing to the value of `x`. In the last assertion, we can\nuse the dereference operator to follow the pointer of the `Box<T>` in the same\nway that we did when `y` was a reference. Next, we’ll explore what is special\nabout `Box<T>` that enables us to use the dereference operator by defining our\nown type.\n\n### Defining Our Own Smart Pointer\n\nLet’s build a smart pointer similar to the `Box<T>` type provided by the\nstandard library to experience how smart pointers behave differently from\nreferences by default. Then we’ll look at how to add the ability to use the\ndereference operator.\n\nThe `Box<T>` type is ultimately defined as a tuple struct with one element, so\nListing 15-8 defines a `MyBox<T>` type in the same way. We’ll also define a\n`new` function to match the `new` function defined on `Box<T>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-8: Defining a `MyBox<T>` type</span>\n\nWe define a struct named `MyBox` and declare a generic parameter `T`, because\nwe want our type to hold values of any type. The `MyBox` type is a tuple struct\nwith one element of type `T`. The `MyBox::new` function takes one parameter of\ntype `T` and returns a `MyBox` instance that holds the value passed in.\n\nLet’s try adding the `main` function in Listing 15-7 to Listing 15-8 and\nchanging it to use the `MyBox<T>` type we’ve defined instead of `Box<T>`. The\ncode in Listing 15-9 won’t compile because Rust doesn’t know how to dereference\n`MyBox`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-9: Attempting to use `MyBox<T>` in the same\nway we used references and `Box<T>`</span>\n\nHere’s the resulting compilation error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-09/output.txt}}\n```\n\nOur `MyBox<T>` type can’t be dereferenced because we haven’t implemented that\nability on our type. To enable dereferencing with the `*` operator, we\nimplement the `Deref` trait.\n\n### Treating a Type Like a Reference by Implementing the `Deref` Trait\n\nAs discussed in the [“Implementing a Trait on a Type”][impl-trait]<!-- ignore\n--> section of Chapter 10, to implement a trait, we need to provide\nimplementations for the trait’s required methods. The `Deref` trait, provided\nby the standard library, requires us to implement one method named `deref` that\nborrows `self` and returns a reference to the inner data. Listing 15-10\ncontains an implementation of `Deref` to add to the definition of `MyBox`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-10: Implementing `Deref` on `MyBox<T>`</span>\n\nThe `type Target = T;` syntax defines an associated type for the `Deref`\ntrait to use. Associated types are a slightly different way of declaring a\ngeneric parameter, but you don’t need to worry about them for now; we’ll cover\nthem in more detail in Chapter 19.\n\nWe fill in the body of the `deref` method with `&self.0` so `deref` returns a\nreference to the value we want to access with the `*` operator; recall from the\n[“Using Tuple Structs without Named Fields to Create Different\nTypes”][tuple-structs]<!-- ignore --> section of Chapter 5 that `.0` accesses\nthe first value in a tuple struct. The `main` function in Listing 15-9 that\ncalls `*` on the `MyBox<T>` value now compiles, and the assertions pass!\n\nWithout the `Deref` trait, the compiler can only dereference `&` references.\nThe `deref` method gives the compiler the ability to take a value of any type\nthat implements `Deref` and call the `deref` method to get a `&` reference that\nit knows how to dereference.\n\nWhen we entered `*y` in Listing 15-9, behind the scenes Rust actually ran this\ncode:\n\n```rust,ignore\n*(y.deref())\n```\n\nRust substitutes the `*` operator with a call to the `deref` method and then a\nplain dereference so we don’t have to think about whether or not we need to\ncall the `deref` method. This Rust feature lets us write code that functions\nidentically whether we have a regular reference or a type that implements\n`Deref`.\n\nThe reason the `deref` method returns a reference to a value, and that the\nplain dereference outside the parentheses in `*(y.deref())` is still necessary,\nis to do with the ownership system. If the `deref` method returned the value\ndirectly instead of a reference to the value, the value would be moved out of\n`self`. We don’t want to take ownership of the inner value inside `MyBox<T>` in\nthis case or in most cases where we use the dereference operator.\n\nNote that the `*` operator is replaced with a call to the `deref` method and\nthen a call to the `*` operator just once, each time we use a `*` in our code.\nBecause the substitution of the `*` operator does not recurse infinitely, we\nend up with data of type `i32`, which matches the `5` in `assert_eq!` in\nListing 15-9.\n\n### Implicit Deref Coercions with Functions and Methods\n\n*Deref coercion* converts a reference to a type that implements the `Deref`\ntrait into a reference to another type. For example, deref coercion can convert\n`&String` to `&str` because `String` implements the `Deref` trait such that it\nreturns `&str`. Deref coercion is a convenience Rust performs on arguments to\nfunctions and methods, and works only on types that implement the `Deref`\ntrait. It happens automatically when we pass a reference to a particular type’s\nvalue as an argument to a function or method that doesn’t match the parameter\ntype in the function or method definition. A sequence of calls to the `deref`\nmethod converts the type we provided into the type the parameter needs.\n\nDeref coercion was added to Rust so that programmers writing function and\nmethod calls don’t need to add as many explicit references and dereferences\nwith `&` and `*`. The deref coercion feature also lets us write more code that\ncan work for either references or smart pointers.\n\nTo see deref coercion in action, let’s use the `MyBox<T>` type we defined in\nListing 15-8 as well as the implementation of `Deref` that we added in Listing\n15-10. Listing 15-11 shows the definition of a function that has a string slice\nparameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-11: A `hello` function that has the parameter\n`name` of type `&str`</span>\n\nWe can call the `hello` function with a string slice as an argument, such as\n`hello(\"Rust\");` for example. Deref coercion makes it possible to call `hello`\nwith a reference to a value of type `MyBox<String>`, as shown in Listing 15-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-12: Calling `hello` with a reference to a\n`MyBox<String>` value, which works because of deref coercion</span>\n\nHere we’re calling the `hello` function with the argument `&m`, which is a\nreference to a `MyBox<String>` value. Because we implemented the `Deref` trait\non `MyBox<T>` in Listing 15-10, Rust can turn `&MyBox<String>` into `&String`\nby calling `deref`. The standard library provides an implementation of `Deref`\non `String` that returns a string slice, and this is in the API documentation\nfor `Deref`. Rust calls `deref` again to turn the `&String` into `&str`, which\nmatches the `hello` function’s definition.\n\nIf Rust didn’t implement deref coercion, we would have to write the code in\nListing 15-13 instead of the code in Listing 15-12 to call `hello` with a value\nof type `&MyBox<String>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-13: The code we would have to write if Rust\ndidn’t have deref coercion</span>\n\nThe `(*m)` dereferences the `MyBox<String>` into a `String`. Then the `&` and\n`[..]` take a string slice of the `String` that is equal to the whole string to\nmatch the signature of `hello`. This code without deref coercions is harder to\nread, write, and understand with all of these symbols involved. Deref coercion\nallows Rust to handle these conversions for us automatically.\n\nWhen the `Deref` trait is defined for the types involved, Rust will analyze the\ntypes and use `Deref::deref` as many times as necessary to get a reference to\nmatch the parameter’s type. The number of times that `Deref::deref` needs to be\ninserted is resolved at compile time, so there is no runtime penalty for taking\nadvantage of deref coercion!\n\n### How Deref Coercion Interacts with Mutability\n\nSimilar to how you use the `Deref` trait to override the `*` operator on\nimmutable references, you can use the `DerefMut` trait to override the `*`\noperator on mutable references.\n\nRust does deref coercion when it finds types and trait implementations in three\ncases:\n\n* From `&T` to `&U` when `T: Deref<Target=U>`\n* From `&mut T` to `&mut U` when `T: DerefMut<Target=U>`\n* From `&mut T` to `&U` when `T: Deref<Target=U>`\n\nThe first two cases are the same as each other except that the second\nimplements mutability. The first case states that if you have a `&T`, and `T`\nimplements `Deref` to some type `U`, you can get a `&U` transparently. The\nsecond case states that the same deref coercion happens for mutable references.\n\nThe third case is trickier: Rust will also coerce a mutable reference to an\nimmutable one. But the reverse is *not* possible: immutable references will\nnever coerce to mutable references. Because of the borrowing rules, if you have\na mutable reference, that mutable reference must be the only reference to that\ndata (otherwise, the program wouldn’t compile). Converting one mutable\nreference to one immutable reference will never break the borrowing rules.\nConverting an immutable reference to a mutable reference would require that the\ninitial immutable reference is the only immutable reference to that data, but\nthe borrowing rules don’t guarantee that. Therefore, Rust can’t make the\nassumption that converting an immutable reference to a mutable reference is\npossible.\n\n[impl-trait]: ch10-02-traits.html#implementing-a-trait-on-a-type\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\n",
					"qas": [
						{
							"question": "Why deref coercion is used?",
							"id": 46,
							"answers": [
								{
									"text": "Deref coercion was added to Rust so that programmers writing function and\nmethod calls don’t need to add as many explicit references and dereferences\nwith `&` and `*`.",
									"answer_start": 9265
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Method Syntax\n\n*Methods* are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat’s run when the method is called from somewhere else. Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]<!-- ignore --> and [Chapter\n17][trait-objects]<!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on.\n\n### Defining Methods\n\nLet’s change the `area` function that has a `Rectangle` instance as a parameter\nand instead make an `area` method defined on the `Rectangle` struct, as shown\nin Listing 5-13.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-13: Defining an `area` method on the\n`Rectangle` struct</span>\n\nTo define the function within the context of `Rectangle`, we start an `impl`\n(implementation) block for `Rectangle`. Everything within this `impl` block\nwill be associated with the `Rectangle` type. Then we move the `area` function\nwithin the `impl` curly brackets and change the first (and in this case, only)\nparameter to be `self` in the signature and everywhere within the body. In\n`main`, where we called the `area` function and passed `rect1` as an argument,\nwe can instead use *method syntax* to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.\n\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`.\nThe `&self` is actually short for `self: &Self`. Within an `impl` block, the\ntype `Self` is an alias for the type that the `impl` block is for. Methods must\nhave a parameter named `self` of type `Self` for their first parameter, so Rust\nlets you abbreviate this with only the name `self` in the first parameter spot.\nNote that we still need to use the `&` in front of the `self` shorthand to\nindicate that this method borrows the `Self` instance, just as we did in\n`rectangle: &Rectangle`. Methods can take ownership of `self`, borrow `self`\nimmutably, as we’ve done here, or borrow `self` mutably, just as they can any\nother parameter.\n\nWe chose `&self` here for the same reason we used `&Rectangle` in the function\nversion: we don’t want to take ownership, and we just want to read the data in\nthe struct, not write to it. If we wanted to change the instance that we’ve\ncalled the method on as part of what the method does, we’d use `&mut self` as\nthe first parameter. Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation.\n\nThe main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod’s signature, is for organization. We’ve put all the things we can do\nwith an instance of a type in one `impl` block rather than making future users\nof our code search for capabilities of `Rectangle` in various places in the\nlibrary we provide.\n\nNote that we can choose to give a method the same name as one of the struct’s\nfields. For example, we can define a method on `Rectangle` that is also named\n`width`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-06-method-field-interaction/src/main.rs:here}}\n```\n\nHere, we’re choosing to make the `width` method return `true` if the value in\nthe instance’s `width` field is greater than `0` and `false` if the value is\n`0`: we can use a field within a method of the same name for any purpose. In\n`main`, when we follow `rect1.width` with parentheses, Rust knows we mean the\nmethod `width`. When we don’t use parentheses, Rust knows we mean the field\n`width`.\n\nOften, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*, and Rust does not implement them automatically for struct\nfields as some other languages do. Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type’s public API. We will discuss what public and private\nare and how to designate a field or method as public or private in [Chapter\n7][public]<!-- ignore -->.\n\n> ### Where’s the `->` Operator?\n>\n> In C and C++, two different operators are used for calling methods: you use\n> `.` if you’re calling a method on the object directly and `->` if you’re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn’t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.\n>\n> Here’s how it works: when you call a method with `object.something()`, Rust\n> automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of\n> the method. In other words, the following are the same:\n>\n> <!-- CAN'T EXTRACT SEE BUG https://github.com/rust-lang/mdBook/issues/1127 -->\n> ```rust\n> # #[derive(Debug,Copy,Clone)]\n> # struct Point {\n> #     x: f64,\n> #     y: f64,\n> # }\n> #\n> # impl Point {\n> #    fn distance(&self, other: &Point) -> f64 {\n> #        let x_squared = f64::powi(other.x - self.x, 2);\n> #        let y_squared = f64::powi(other.y - self.y, 2);\n> #\n> #        f64::sqrt(x_squared + y_squared)\n> #    }\n> # }\n> # let p1 = Point { x: 0.0, y: 0.0 };\n> # let p2 = Point { x: 5.0, y: 6.5 };\n> p1.distance(&p2);\n> (&p1).distance(&p2);\n> ```\n>\n> The first one looks much cleaner. This automatic referencing behavior works\n> because methods have a clear receiver—the type of `self`. Given the receiver\n> and name of a method, Rust can figure out definitively whether the method is\n> reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact\n> that Rust makes borrowing implicit for method receivers is a big part of\n> making ownership ergonomic in practice.\n\n### Methods with More Parameters\n\nLet’s practice using methods by implementing a second method on the `Rectangle`\nstruct. This time we want an instance of `Rectangle` to take another instance\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\nwithin `self` (the first `Rectangle`); otherwise, it should return `false`.\nThat is, once we’ve defined the `can_hold` method, we want to be able to write\nthe program shown in Listing 5-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-14: Using the as-yet-unwritten `can_hold`\nmethod</span>\n\nThe expected output would look like the following because both dimensions of\n`rect2` are smaller than the dimensions of `rect1`, but `rect3` is wider than\n`rect1`:\n\n```text\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n```\n\nWe know we want to define a method, so it will be within the `impl Rectangle`\nblock. The method name will be `can_hold`, and it will take an immutable borrow\nof another `Rectangle` as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\nread `rect2` (rather than write, which would mean we’d need a mutable borrow),\nand we want `main` to retain ownership of `rect2` so we can use it again after\ncalling the `can_hold` method. The return value of `can_hold` will be a\nBoolean, and the implementation will check whether the width and height of\n`self` are greater than the width and height of the other `Rectangle`,\nrespectively. Let’s add the new `can_hold` method to the `impl` block from\nListing 5-13, shown in Listing 5-15.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-15: Implementing the `can_hold` method on\n`Rectangle` that takes another `Rectangle` instance as a parameter</span>\n\nWhen we run this code with the `main` function in Listing 5-14, we’ll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the `self` parameter, and those parameters work just like\nparameters in functions.\n\n### Associated Functions\n\nAll functions defined within an `impl` block are called *associated functions*\nbecause they’re associated with the type named after the `impl`. We can define\nassociated functions that don’t have `self` as their first parameter (and thus\nare not methods) because they don’t need an instance of the type to work with.\nWe’ve already used one function like this: the `String::from` function that’s\ndefined on the `String` type.\n\nAssociated functions that aren’t methods are often used for constructors that\nwill return a new instance of the struct. These are often called `new`, but\n`new` isn’t a special name and isn’t built into the language. For example, we\ncould choose to provide an associated function named `square` that would have\none dimension parameter and use that as both width and height, thus making it\neasier to create a square `Rectangle` rather than having to specify the same\nvalue twice:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-03-associated-functions/src/main.rs:here}}\n```\n\nThe `Self` keywords in the return type and in the body of the function are\naliases for the type that appears after the `impl` keyword, which in this case\nis `Rectangle`.\n\nTo call this associated function, we use the `::` syntax with the struct name;\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\nthe struct: the `::` syntax is used for both associated functions and\nnamespaces created by modules. We’ll discuss modules in [Chapter\n7][modules]<!-- ignore -->.\n\n### Multiple `impl` Blocks\n\nEach struct is allowed to have multiple `impl` blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method in\nits own `impl` block.\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-16: Rewriting Listing 5-15 using multiple `impl`\nblocks</span>\n\nThere’s no reason to separate these methods into multiple `impl` blocks here,\nbut this is valid syntax. We’ll see a case in which multiple `impl` blocks are\nuseful in Chapter 10, where we discuss generic types and traits.\n\n## Summary\n\nStructs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.\n\nBut structs aren’t the only way you can create custom types: let’s turn to\nRust’s enum feature to add another tool to your toolbox.\n\n[enums]: ch06-00-enums.html\n[trait-objects]: ch17-02-trait-objects.md\n[public]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n",
					"qas": [
						{
							"question": "What is an usage of getters?",
							"id": 74,
							"answers": [
								{
									"text": "Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type’s public API.",
									"answer_start": 4477
								}
							],
							"is_impossible": false
						},
						{
							"question": "What can I define in 'impl' blocks?",
							"id": 80,
							"answers": [
								{
									"text": "In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.",
									"answer_start": 11544
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Defining an Enum\n\nWhere structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum.\n\nLet’s look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. Because these are the only possibilities for an\nIP address that our program will come across, we can *enumerate* all possible\nvariants, which is where enumeration gets its name.\n\nAny IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate because an enum value can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address.\n\nWe can express this concept in code by defining an `IpAddrKind` enumeration and\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\nvariants of the enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:def}}\n```\n\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\n\n### Enum Values\n\nWe can create instances of each of the two variants of `IpAddrKind` like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:instance}}\n```\n\nNote that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. This is useful because now both values\n`IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`. We\ncan then, for instance, define a function that takes any `IpAddrKind`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn}}\n```\n\nAnd we can call this function with either variant:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn_call}}\n```\n\nUsing enums has even more advantages. Thinking more about our IP address type,\nat the moment we don’t have a way to store the actual IP address *data*; we\nonly know what *kind* it is. Given that you just learned about structs in\nChapter 5, you might be tempted to tackle this problem with structs as shown in\nListing 6-1.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-1: Storing the data and `IpAddrKind` variant of\nan IP address using a `struct`</span>\n\nHere, we’ve defined a struct `IpAddr` that has two fields: a `kind` field that\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\nof type `String`. We have two instances of this struct. The first is `home`,\nand it has the value `IpAddrKind::V4` as its `kind` with associated address\ndata of `127.0.0.1`. The second instance is `loopback`. It has the other\nvariant of `IpAddrKind` as its `kind` value, `V6`, and has address `::1`\nassociated with it. We’ve used a struct to bundle the `kind` and `address`\nvalues together, so now the variant is associated with the value.\n\nHowever, representing the same concept using just an enum is more concise:\nrather than an enum inside a struct, we can put data directly into each enum\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\nvariants will have associated `String` values:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-02-enum-with-data/src/main.rs:here}}\n```\n\nWe attach data to each variant of the enum directly, so there is no need for an\nextra struct. Here, it’s also easier to see another detail of how enums work:\nthe name of each enum variant that we define also becomes a function that\nconstructs an instance of the enum. That is, `IpAddr::V4()` is a function call\nthat takes a `String` argument and returns an instance of the `IpAddr` type. We\nautomatically get this constructor function defined as a result of defining the\nenum.\n\nThere’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\nstill express `V6` addresses as one `String` value, we wouldn’t be able to with\na struct. Enums handle this case with ease:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-03-variants-with-different-data/src/main.rs:here}}\n```\n\nWe’ve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that [the standard\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let’s look at how\nthe standard library defines `IpAddr`: it has the exact enum and variants that\nwe’ve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:\n\n```rust\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n```\n\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.\n\nNote that even though the standard library contains a definition for `IpAddr`,\nwe can still create and use our own definition without conflict because we\nhaven’t brought the standard library’s definition into our scope. We’ll talk\nmore about bringing types into scope in Chapter 7.\n\nLet’s look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-2: A `Message` enum whose variants each store\ndifferent amounts and types of values</span>\n\nThis enum has four variants with different types:\n\n* `Quit` has no data associated with it at all.\n* `Move` has named fields, like a struct does.\n* `Write` includes a single `String`.\n* `ChangeColor` includes three `i32` values.\n\nDefining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn’t use the\n`struct` keyword and all the variants are grouped together under the `Message`\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-04-structs-similar-to-message-enum/src/main.rs:here}}\n```\n\nBut if we used the different structs, each of which has its own type, we\ncouldn’t as easily define a function to take any of these kinds of messages as\nwe could with the `Message` enum defined in Listing 6-2, which is a single type.\n\nThere is one more similarity between enums and structs: just as we’re able to\ndefine methods on structs using `impl`, we’re also able to define methods on\nenums. Here’s a method named `call` that we could define on our `Message` enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-05-methods-on-enums/src/main.rs:here}}\n```\n\nThe body of the method would use `self` to get the value that we called the\nmethod on. In this example, we’ve created a variable `m` that has the value\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\nbody of the `call` method when `m.call()` runs.\n\nLet’s look at another enum in the standard library that is very common and\nuseful: `Option`.\n\n### The `Option` Enum and Its Advantages Over Null Values\n\nThis section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing.\n\nFor example, if you request the first item in a non-empty list, you would get\na value. If you request the first item in an empty list, you would get nothing.\nExpressing this concept in terms of the type system means the compiler can\ncheck whether you’ve handled all the cases you should be handling; this\nfunctionality can prevent bugs that are extremely common in other programming\nlanguages.\n\nProgramming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn’t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.\n\nIn his 2009 presentation “Null References: The Billion Dollar Mistake,” Tony\nHoare, the inventor of null, has this to say:\n\n> I call it my billion-dollar mistake. At that time, I was designing the first\n> comprehensive type system for references in an object-oriented language. My\n> goal was to ensure that all use of references should be absolutely safe, with\n> checking performed automatically by the compiler. But I couldn’t resist the\n> temptation to put in a null reference, simply because it was so easy to\n> implement. This has led to innumerable errors, vulnerabilities, and system\n> crashes, which have probably caused a billion dollars of pain and damage in\n> the last forty years.\n\nThe problem with null values is that if you try to use a null value as a\nnot-null value, you’ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it’s extremely easy to make this kind of error.\n\nHowever, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason.\n\nThe problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\nas follows:\n\n```rust\nenum Option<T> {\n    None,\n    Some(T),\n}\n```\n\nThe `Option<T>` enum is so useful that it’s even included in the prelude; you\ndon’t need to bring it into scope explicitly. Its variants are also included in\nthe prelude: you can use `Some` and `None` directly without the `Option::`\nprefix. The `Option<T>` enum is still just a regular enum, and `Some(T)` and\n`None` are still variants of type `Option<T>`.\n\nThe `<T>` syntax is a feature of Rust we haven’t talked about yet. It’s a\ngeneric type parameter, and we’ll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that `<T>` means that the `Some` variant of\nthe `Option` enum can hold one piece of data of any type, and that each\nconcrete type that gets used in place of `T` makes the overall `Option<T>` type\na different type. Here are some examples of using `Option` values to hold\nnumber types and string types:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-06-option-examples/src/main.rs:here}}\n```\n\nThe type of `some_number` is `Option<i32>`. The type of `some_char` is\n`Option<char>`, which is a different type. Rust can infer these types because\nwe’ve specified a value inside the `Some` variant. For `absent_number`, Rust\nrequires us to annotate the overall `Option` type: the compiler can’t infer the\ntype that the corresponding `Some` variant will hold by looking only at a\n`None` value. Here, we tell Rust that we mean for `absent_number` to be of type\n`Option<i32>`.\n\nWhen we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null: we don’t have a valid value. So why is having `Option<T>`\nany better than having null?\n\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won’t let us use an `Option<T>` value as if it were\ndefinitely a valid value. For example, this code won’t compile, because it’s\ntrying to add an `i8` to an `Option<i8>`:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}\n```\n\nIntense! In effect, this error message means that Rust doesn’t understand how\nto add an `i8` and an `Option<i8>`, because they’re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option<i8>` (or\nwhatever type of value we’re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option<T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn’t null when it actually is.\n\nEliminating the risk of incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn’t an\n`Option<T>`, you *can* safely assume that the value isn’t null. This was a\ndeliberate design decision for Rust to limit null’s pervasiveness and increase\nthe safety of Rust code.\n\nSo how do you get the `T` value out of a `Some` variant when you have a value\nof type `Option<T>` so that you can use that value? The `Option<T>` enum has a\nlarge number of methods that are useful in a variety of situations; you can\ncheck them out in [its documentation][docs]<!-- ignore -->. Becoming familiar\nwith the methods on `Option<T>` will be extremely useful in your journey with\nRust.\n\nIn general, in order to use an `Option<T>` value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\nother code to run only if you have a `None` value, and that code doesn’t have a\n`T` value available. The `match` expression is a control flow construct that\ndoes just this when used with enums: it will run different code depending on\nwhich variant of the enum it has, and that code can use the data inside the\nmatching value.\n\n[IpAddr]: ../std/net/enum.IpAddr.html\n[option]: ../std/option/enum.Option.html\n[docs]: ../std/option/enum.Option.html\n",
					"qas": [
						{
							"question": "What compensates for the lack of the null type in rust?",
							"id": 92,
							"answers": [
								{
									"text": "The problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option‹T>`, and it is [defined by the standard library][option]‹!-- ignore -->\nas follows:",
									"answer_start": 10448
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is an advantage to use enum instead of struct?",
							"id": 84,
							"answers": [
								{
									"text": "There’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. ",
									"answer_start": 4538
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Storing Keys with Associated Values in Hash Maps\n\nThe last of our common collections is the *hash map*. The type `HashMap<K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a\n*hashing function*, which determines how it places these keys and values into\nmemory. Many programming languages support this kind of data structure, but\nthey often use a different name, such as hash, map, object, hash table,\ndictionary, or associative array, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score.\n\nWe’ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\nAs always, check the standard library documentation for more information.\n\n### Creating a New Hash Map\n\nOne way to create an empty hash map is using `new` and adding elements with\n`insert`. In Listing 8-20, we’re keeping track of the scores of two teams whose\nnames are *Blue* and *Yellow*. The Blue team starts with 10 points, and the\nYellow team starts with 50.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-20/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span>\n\nNote that we need to first `use` the `HashMap` from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it’s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there’s no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type as each other, and all of\nthe values must have the same type.\n\n### Accessing Values in a Hash Map\n\nWe can get a value out of the hash map by providing its key to the `get`\nmethod, as shown in Listing 8-21.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-21: Accessing the score for the Blue team\nstored in the hash map</span>\n\nHere, `score` will have the value that’s associated with the Blue team, and the\nresult will be `10`. The `get` method returns an `Option<&V>`; if there’s no\nvalue for that key in the hash map, `get` will return `None`. This program\nhandles the `Option` by calling `copied` to get an `Option<i32>` rather than an\n`Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn't\nhave an entry for the key.\n\nWe can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-03-iterate-over-hashmap/src/main.rs:here}}\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n```\n\n### Hash Maps and Ownership\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied\ninto the hash map. For owned values like `String`, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they’re inserted</span>\n\nWe aren’t able to use the variables `field_name` and `field_value` after\nthey’ve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won’t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We’ll talk more about these issues in\nthe [“Validating References with\nLifetimes”][validating-references-with-lifetimes]<!-- ignore --> section in\nChapter 10.\n\n### Updating a Hash Map\n\nAlthough the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have value 10 stored in\nthe `scores` hash map).\n\nWhen you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey *doesn’t* already have a value. Or you could combine the old value and the\nnew value. Let’s look at how to do each of these!\n\n#### Overwriting a Value\n\nIf we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls `insert` twice, the hash map will\nonly contain one key/value pair because we’re inserting the value for the Blue\nteam’s key both times.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-23: Replacing a value stored with a particular\nkey</span>\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been\noverwritten.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a>\n\n#### Adding a Key and Value Only If a Key Isn’t Present\n\nIt’s common to check whether a particular key already exists in the hash map\nwith a value then take the following actions: if the key does exist in the hash\nmap, the existing value should remain the way it is. If the key doesn’t exist,\ninsert it and a value for it.\n\nHash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. Let’s say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn’t, we want to insert the value 50, and the same for the\nBlue team. Using the `entry` API, the code looks like Listing 8-24.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-24: Using the `entry` method to only insert if\nthe key does not already have a value</span>\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to\nthe value for the corresponding `Entry` key if that key exists, and if not,\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The\nfirst call to `entry` will insert the key for the Yellow team with the value\n50 because the Yellow team doesn’t have a value already. The second call to\n`entry` will not change the hash map because the Blue team already has the\nvalue 10.\n\n#### Updating a Value Based on the Old Value\n\nAnother common use case for hash maps is to look up a key’s value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we’ve\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\nthe value 0.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-25: Counting occurrences of words using a hash\nmap that stores words and counts</span>\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see\nthe same key/value pairs printed in a different order: recall from the\n[“Accessing Values in a Hash Map”][access]<!-- ignore --> section that\niterating over a hash map happens in an arbitrary order.\n\nThe `split_whitespace` method returns an iterator over sub-slices, separated by\nwhitespace, of the value in `text`. The `or_insert` method returns a mutable\nreference (`&mut V`) to the value for the specified key. Here we store that\nmutable reference in the `count` variable, so in order to assign to that value,\nwe must first dereference `count` using the asterisk (`*`). The mutable\nreference goes out of scope at the end of the `for` loop, so all of these\nchanges are safe and allowed by the borrowing rules.\n\n### Hashing Functions\n\nBy default, `HashMap` uses a hashing function called *SipHash* that can provide\nresistance to Denial of Service (DoS) attacks involving hash\ntables[^siphash]<!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A *hasher* is a type that implements the\n`BuildHasher` trait. We’ll talk about traits and how to implement them in\nChapter 10. You don’t necessarily have to implement your own hasher from\nscratch; [crates.io](https://crates.io/)<!-- ignore --> has libraries shared by\nother Rust users that provide hashers implementing many common hashing\nalgorithms.\n\n[^siphash]: [https://en.wikipedia.org/wiki/SipHash](https://en.wikipedia.org/wiki/SipHash)\n\n## Summary\n\nVectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:\n\n* Given a list of integers, use a vector and return the median (when sorted,\n  the value in the middle position) and mode (the value that occurs most often;\n  a hash map will be helpful here) of the list.\n* Convert strings to pig latin. The first consonant of each word is moved to\n  the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words\n  that start with a vowel have “hay” added to the end instead (“apple” becomes\n  “apple-hay”). Keep in mind the details about UTF-8 encoding!\n* Using a hash map and vectors, create a text interface to allow a user to add\n  employee names to a department in a company. For example, “Add Sally to\n  Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\n  people in a department or all people in the company by department, sorted\n  alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!\n\nWe’re getting into more complex programs in which operations can fail, so, it’s\na perfect time to discuss error handling. We’ll do that next!\n\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[access]: #accessing-values-in-a-hash-map\n",
					"qas": [
						{
							"question": "What does it mean that hash maps are homogeneous?",
							"id": 221,
							"answers": [
								{
									"text": "Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type as each other, and all of\nthe values must have the same type.",
									"answer_start": 2052
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## What Is Ownership?\n\n*Ownership* is a set of rules that govern how a Rust program manages memory.\nAll programs have to manage the way they use a computer’s memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won’t compile. None of the features\nof ownership will slow down your program while it’s running.\n\nBecause ownership is a new concept for many programmers, it does take some time\nto get used to. The good news is that the more experienced you become with Rust\nand the rules of the ownership system, the easier you’ll find it to naturally\ndevelop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you’ll have a solid foundation for understanding\nthe features that make Rust unique. In this chapter, you’ll learn ownership by\nworking through some examples that focus on a very common data structure:\nstrings.\n\n> ### The Stack and the Heap\n>\n> Many programming languages don’t require you to think about the stack and the\n> heap very often. But in a systems programming language like Rust, whether a\n> value is on the stack or the heap affects how the language behaves and why\n> you have to make certain decisions. Parts of ownership will be described in\n> relation to the stack and the heap later in this chapter, so here is a brief\n> explanation in preparation.\n>\n> Both the stack and the heap are parts of memory available to your code to use\n> at runtime, but they are structured in different ways. The stack stores\n> values in the order it gets them and removes the values in the opposite\n> order. This is referred to as *last in, first out*. Think of a stack of\n> plates: when you add more plates, you put them on top of the pile, and when\n> you need a plate, you take one off the top. Adding or removing plates from\n> the middle or bottom wouldn’t work as well! Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*. All\n> data stored on the stack must have a known, fixed size. Data with an unknown\n> size at compile time or a size that might change must be stored on the heap\n> instead.\n>\n> The heap is less organized: when you put data on the heap, you request a\n> certain amount of space. The memory allocator finds an empty spot in the heap\n> that is big enough, marks it as being in use, and returns a *pointer*, which\n> is the address of that location. This process is called *allocating on the\n> heap* and is sometimes abbreviated as just *allocating* (pushing values onto\n> the stack is not considered allocating). Because the pointer to the heap is a\n> known, fixed size, you can store the pointer on the stack, but when you want\n> the actual data, you must follow the pointer. Think of being seated at a\n> restaurant. When you enter, you state the number of people in your group, and\n> the host finds an empty table that fits everyone and leads you there. If\n> someone in your group comes late, they can ask where you’ve been seated to\n> find you.\n>\n> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that location is\n> always at the top of the stack. Comparatively, allocating space on the heap\n> requires more work because the allocator must first find a big enough space\n> to hold the data and then perform bookkeeping to prepare for the next\n> allocation.\n>\n> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It’s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that’s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap).\n>\n> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function’s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.\n>\n> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don’t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won’t need to think about the\n> stack and the heap very often, but knowing that the main purpose of ownership\n> is to manage heap data can help explain why it works the way it does.\n\n### Ownership Rules\n\nFirst, let’s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.\n\n### Variable Scope\n\nNow that we’re past basic Rust syntax, we won’t include all the `fn main() {`\ncode in examples, so if you’re following along, make sure to put the following\nexamples inside a `main` function manually. As a result, our examples will be a\nbit more concise, letting us focus on the actual details rather than\nboilerplate code.\n\nAs a first example of ownership, we’ll look at the *scope* of some variables. A\nscope is the range within a program for which an item is valid. Take the\nfollowing variable:\n\n```rust\nlet s = \"hello\";\n```\n\nThe variable `s` refers to a string literal, where the value of the string is\nhardcoded into the text of our program. The variable is valid from the point at\nwhich it’s declared until the end of the current *scope*. Listing 4-1 shows a\nprogram with comments annotating where the variable `s` would be valid.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-1: A variable and the scope in which it is\nvalid</span>\n\nIn other words, there are two important points in time here:\n\n* When `s` comes *into* scope, it is valid.\n* It remains valid until it goes *out of* scope.\n\nAt this point, the relationship between scopes and when variables are valid is\nsimilar to that in other programming languages. Now we’ll build on top of this\nunderstanding by introducing the `String` type.\n\n### The `String` Type\n\nTo illustrate the rules of ownership, we need a data type that is more complex\nthan those we covered in the [“Data Types”][data-types]<!-- ignore --> section\nof Chapter 3. The types covered previously are of a known size, can be stored\non the stack and popped off the stack when their scope is over, and can be\nquickly and trivially copied to make a new, independent instance if another\npart of code needs to use the same value in a different scope. But we want to\nlook at data that is stored on the heap and explore how Rust knows when to\nclean up that data, and the `String` type is a great example.\n\nWe’ll concentrate on the parts of `String` that relate to ownership. These\naspects also apply to other complex data types, whether they are provided by\nthe standard library or created by you. We’ll discuss `String` in more depth in\n[Chapter 8][ch8]<!-- ignore -->.\n\nWe’ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren’t suitable for every\nsituation in which we may want to use text. One reason is that they’re\nimmutable. Another is that not every string value can be known when we write\nour code: for example, what if we want to take user input and store it? For\nthese situations, Rust has a second string type, `String`. This type manages\ndata allocated on the heap and as such is able to store an amount of text that\nis unknown to us at compile time. You can create a `String` from a string\nliteral using the `from` function, like so:\n\n```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon `::` operator allows us to namespace this particular `from`\nfunction under the `String` type rather than using some sort of name like\n`string_from`. We’ll discuss this syntax more in the [“Method\nSyntax”][method-syntax]<!-- ignore --> section of Chapter 5, and when we talk\nabout namespacing with modules in [“Paths for Referring to an Item in the\nModule Tree”][paths-module-tree]<!-- ignore --> in Chapter 7.\n\nThis kind of string *can* be mutated:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-01-can-mutate-string/src/main.rs:here}}\n```\n\nSo, what’s the difference here? Why can `String` be mutated but literals\ncannot? The difference is in how these two types deal with memory.\n\n### Memory and Allocation\n\nIn the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient. But these properties only come from the string\nliteral’s immutability. Unfortunately, we can’t put a blob of memory into the\nbinary for each piece of text whose size is unknown at compile time and whose\nsize might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text,\nwe need to allocate an amount of memory on the heap, unknown at compile time,\nto hold the contents. This means:\n\n* The memory must be requested from the memory allocator at runtime.\n* We need a way of returning this memory to the allocator when we’re done with\n  our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation\nrequests the memory it needs. This is pretty much universal in programming\nlanguages.\n\nHowever, the second part is different. In languages with a *garbage collector\n(GC)*, the GC keeps track of and cleans up memory that isn’t being used\nanymore, and we don’t need to think about it. In most languages without a GC,\nit’s our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe’ll waste memory. If we do it too early, we’ll have an invalid variable. If\nwe do it twice, that’s a bug too. We need to pair exactly one `allocate` with\nexactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the\nvariable that owns it goes out of scope. Here’s a version of our scope example\nfrom Listing 4-1 using a `String` instead of a string literal:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-02-string-scope/src/main.rs:here}}\n```\n\nThere is a natural point at which we can return the memory our `String` needs\nto the allocator: when `s` goes out of scope. When a variable goes out of\nscope, Rust calls a special function for us. This function is called\n[`drop`][drop]<!-- ignore -->, and it’s where the author of `String` can put\nthe code to return the memory. Rust calls `drop` automatically at the closing\ncurly bracket.\n\n> Note: In C++, this pattern of deallocating resources at the end of an item’s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you’ve used RAII\n> patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem\nsimple right now, but the behavior of code can be unexpected in more\ncomplicated situations when we want to have multiple variables use the data\nwe’ve allocated on the heap. Let’s explore some of those situations now.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-move\"></a>\n\n#### Variables and Data Interacting with Move\n\nMultiple variables can interact with the same data in different ways in Rust.\nLet’s look at an example using an integer in Listing 4-2.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-2: Assigning the integer value of variable `x`\nto `y`</span>\n\nWe can probably guess what this is doing: “bind the value `5` to `x`; then make\na copy of the value in `x` and bind it to `y`.” We now have two variables, `x`\nand `y`, and both equal `5`. This is indeed what is happening, because integers\nare simple values with a known, fixed size, and these two `5` values are pushed\nonto the stack.\n\nNow let’s look at the `String` version:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-03-string-move/src/main.rs:here}}\n```\n\nThis looks very similar, so we might assume that the way it works would be the\nsame: that is, the second line would make a copy of the value in `s1` and bind\nit to `s2`. But this isn’t quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the\ncovers. A `String` is made up of three parts, shown on the left: a pointer to\nthe memory that holds the contents of the string, a length, and a capacity.\nThis group of data is stored on the stack. On the right is the memory on the\nheap that holds the contents.\n\n<img alt=\"Two tables: the first table contains the representation of s1 on the\nstack, consisting of its length (5), capacity (5), and a pointer to the first\nvalue in the second table. The second table contains the representation of the\nstring data on the heap, byte by byte.\" src=\"img/trpl04-01.svg\" class=\"center\"\nstyle=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-1: Representation in memory of a `String`\nholding the value `\"hello\"` bound to `s1`</span>\n\nThe length is how much memory, in bytes, the contents of the `String` are\ncurrently using. The capacity is the total amount of memory, in bytes, that the\n`String` has received from the allocator. The difference between length and\ncapacity matters, but not in this context, so for now, it’s fine to ignore the\ncapacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the\npointer, the length, and the capacity that are on the stack. We do not copy the\ndata on the heap that the pointer refers to. In other words, the data\nrepresentation in memory looks like Figure 4-2.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\"\nsrc=\"img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-2: Representation in memory of the variable `s2`\nthat has a copy of the pointer, length, and capacity of `s1`</span>\n\nThe representation does *not* look like Figure 4-3, which is what memory would\nlook like if Rust instead copied the heap data as well. If Rust did this, the\noperation `s2 = s1` could be very expensive in terms of runtime performance if\nthe data on the heap were large.\n\n<img alt=\"Four tables: two tables representing the stack data for s1 and s2,\nand each points to its own copy of string data on the heap.\"\nsrc=\"img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-3: Another possibility for what `s2 = s1` might\ndo if Rust copied the heap data as well</span>\n\nEarlier, we said that when a variable goes out of scope, Rust automatically\ncalls the `drop` function and cleans up the heap memory for that variable. But\nFigure 4-2 shows both data pointers pointing to the same location. This is a\nproblem: when `s2` and `s1` go out of scope, they will both try to free the\nsame memory. This is known as a *double free* error and is one of the memory\nsafety bugs we mentioned previously. Freeing memory twice can lead to memory\ncorruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, after the line `let s2 = s1;`, Rust considers `s1` as\nno longer valid. Therefore, Rust doesn’t need to free anything when `s1` goes\nout of scope. Check out what happens when you try to use `s1` after `s2` is\ncreated; it won’t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/src/main.rs:here}}\n```\n\nYou’ll get an error like this because Rust prevents you from using the\ninvalidated reference:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/output.txt}}\n```\n\nIf you’ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it’s known as a *move*. In this example, we would say that `s1`\nwas *moved* into `s2`. So, what actually happens is shown in Figure 4-4.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\nTable s1 is grayed out be-cause s1 is no longer valid; only s2 can be used to\naccess the heap data.\" src=\"img/trpl04-04.svg\" class=\"center\" style=\"width:\n50%;\" />\n\n<span class=\"caption\">Figure 4-4: Representation in memory after `s1` has been\ninvalidated</span>\n\nThat solves our problem! With only `s2` valid, when it goes out of scope it\nalone will free the memory, and we’re done.\n\nIn addition, there’s a design choice that’s implied by this: Rust will never\nautomatically create “deep” copies of your data. Therefore, any *automatic*\ncopying can be assumed to be inexpensive in terms of runtime performance.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-clone\"></a>\n\n#### Variables and Data Interacting with Clone\n\nIf we *do* want to deeply copy the heap data of the `String`, not just the\nstack data, we can use a common method called `clone`. We’ll discuss method\nsyntax in Chapter 5, but because methods are a common feature in many\nprogramming languages, you’ve probably seen them before.\n\nHere’s an example of the `clone` method in action:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-05-clone/src/main.rs:here}}\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3,\nwhere the heap data *does* get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being\nexecuted and that code may be expensive. It’s a visual indicator that something\ndifferent is going on.\n\n#### Stack-Only Data: Copy\n\nThere’s another wrinkle we haven’t talked about yet. This code using\nintegers—part of which was shown in Listing 4-2—works and is valid:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-06-copy/src/main.rs:here}}\n```\n\nBut this code seems to contradict what we just learned: we don’t have a call to\n`clone`, but `x` is still valid and wasn’t moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile\ntime are stored entirely on the stack, so copies of the actual values are quick\nto make. That means there’s no reason we would want to prevent `x` from being\nvalid after we create the variable `y`. In other words, there’s no difference\nbetween deep and shallow copying here, so calling `clone` wouldn’t do anything\ndifferent from the usual shallow copying, and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on\ntypes that are stored on the stack, as integers are (we’ll talk more about\ntraits in [Chapter 10][traits]<!-- ignore -->). If a type implements the `Copy`\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.\n\nRust won’t let us annotate a type with `Copy` if the type, or any of its parts,\nhas implemented the `Drop` trait. If the type needs something special to happen\nwhen the value goes out of scope and we add the `Copy` annotation to that type,\nwe’ll get a compile-time error. To learn about how to add the `Copy` annotation\nto your type to implement the trait, see [“Derivable\nTraits”][derivable-traits]<!-- ignore --> in Appendix C.\n\nSo, what types implement the `Copy` trait? You can check the documentation for\nthe given type to be sure, but as a general rule, any group of simple scalar\nvalues can implement `Copy`, and nothing that requires allocation or is some\nform of resource can implement `Copy`. Here are some of the types that\nimplement `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating-point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that also implement `Copy`. For example,\n  `(i32, i32)` implements `Copy`, but `(i32, String)` does not.\n\n### Ownership and Functions\n\nThe mechanics of passing a value to a function are similar to those when\nassigning a value to a variable. Passing a variable to a function will move or\ncopy, just as assignment does. Listing 4-3 has an example with some annotations\nshowing where variables go into and out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-3: Functions with ownership and scope\nannotated</span>\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a\ncompile-time error. These static checks protect us from mistakes. Try adding\ncode to `main` that uses `s` and `x` to see where you can use them and where\nthe ownership rules prevent you from doing so.\n\n### Return Values and Scope\n\nReturning values can also transfer ownership. Listing 4-4 shows an example of a\nfunction that returns some value, with similar annotations as those in Listing\n4-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-4: Transferring ownership of return\nvalues</span>\n\nThe ownership of a variable follows the same pattern every time: assigning a\nvalue to another variable moves it. When a variable that includes data on the\nheap goes out of scope, the value will be cleaned up by `drop` unless ownership\nof the data has been moved to another variable.\n\nWhile this works, taking ownership and then returning ownership with every\nfunction is a bit tedious. What if we want to let a function use a value but\nnot take ownership? It’s quite annoying that anything we pass in also needs to\nbe passed back if we want to use it again, in addition to any data resulting\nfrom the body of the function that we might want to return as well.\n\nRust does let us return multiple values using a tuple, as shown in Listing 4-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-5: Returning ownership of parameters</span>\n\nBut this is too much ceremony and a lot of work for a concept that should be\ncommon. Luckily for us, Rust has a feature for using a value without\ntransferring ownership, called *references*.\n\n[data-types]: ch03-02-data-types.html#data-types\n[ch8]: ch08-02-strings.html\n[traits]: ch10-02-traits.html\n[derivable-traits]: appendix-03-derivable-traits.html\n[method-syntax]: ch05-03-method-syntax.html#method-syntax\n[paths-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[drop]: ../std/ops/trait.Drop.html#tymethod.drop\n",
					"qas": [
						{
							"question": "What is the memory management concept used by rust?",
							"id": 2,
							"answers": [
								{
									"text": "All programs have to manage the way they use a computer’s memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won’t compile. None of the features\nof ownership will slow down your program while it’s running.",
									"answer_start": 100
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "# Programming a Guessing Game\n\nLet’s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You’ll learn about `let`, `match`, methods, associated\nfunctions, external crates, and more! In the following chapters, we’ll explore\nthese ideas in more detail. In this chapter, you’ll just practice the\nfundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.\n\n## Setting Up a New Project\n\nTo set up a new project, go to the *projects* directory that you created in\nChapter 1 and make a new project using Cargo, like so:\n\n```console\n$ cargo new guessing_game\n$ cd guessing_game\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`)\nas the first argument. The second command changes to the new project’s\ndirectory.\n\nLook at the generated *Cargo.toml* file:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}}\n```\n\nAs you saw in Chapter 1, `cargo new` generates a “Hello, world!” program for\nyou. Check out the *src/main.rs* file:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}}\n```\n\nNow let’s compile this “Hello, world!” program and run it in the same step\nusing the `cargo run` command:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}}\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project,\nas we’ll do in this game, quickly testing each iteration before moving on to\nthe next one.\n\nReopen the *src/main.rs* file. You’ll be writing all the code in this file.\n\n## Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we’ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n*src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span>\n\nThis code contains a lot of information, so let’s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n`io` input/output library into scope. The `io` library comes from the standard\nlibrary, known as `std`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}}\n```\n\nBy default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the *prelude*, and\nyou can see everything in it [in the standard library documentation][prelude].\n\nIf a type you want to use isn’t in the prelude, you have to bring that type\ninto scope explicitly with a `use` statement. Using the `std::io` library\nprovides you with a number of useful features, including the ability to accept\nuser input.\n\nAs you saw in Chapter 1, the `main` function is the entry point into the\nprogram:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}}\n```\n\nThe `fn` syntax declares a new function; the parentheses, `()`, indicate there\nare no parameters; and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to\nthe screen:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}}\n```\n\nThis code is printing a prompt stating what the game is and requesting input\nfrom the user.\n\n### Storing Values with Variables\n\nNext, we’ll create a *variable* to store the user input, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}}\n```\n\nNow the program is getting interesting! There’s a lot going on in this little\nline. We use the `let` statement to create the variable. Here’s another example:\n\n```rust,ignore\nlet apples = 5;\n```\n\nThis line creates a new variable named `apples` and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won’t change. We’ll be discussing this concept in detail in\nthe [“Variables and Mutability”][variables-and-mutability]<!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add `mut` before the\nvariable name:\n\n```rust,ignore\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n```\n\n> Note: The `//` syntax starts a comment that continues until the end of the\n> line. Rust ignores everything in comments. We’ll discuss comments in more\n> detail in [Chapter 3][comments]<!-- ignore -->.\n\nReturning to the guessing game program, you now know that `let mut guess` will\nintroduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that `guess` is bound to, which is the result of calling\n`String::new`, a function that returns a new instance of a `String`.\n[`String`][string]<!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an associated\nfunction of the `String` type. An *associated function* is a function that’s\nimplemented on a type, in this case `String`. This `new` function creates a\nnew, empty string. You’ll find a `new` function on many types because it’s a\ncommon name for a function that makes a new value of some kind.\n\nIn full, the `let mut guess = String::new();` line has created a mutable\nvariable that is currently bound to a new, empty instance of a `String`. Whew!\n\n### Receiving User Input\n\nRecall that we included the input/output functionality from the standard\nlibrary with `use std::io;` on the first line of the program. Now we’ll call\nthe `stdin` function from the `io` module, which will allow us to handle user\ninput:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}}\n```\n\nIf we hadn’t imported the `io` library with `use std::io;` at the beginning of\nthe program, we could still use the function by writing this function call as\n`std::io::stdin`. The `stdin` function returns an instance of\n[`std::io::Stdin`][iostdin]<!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal.\n\nNext, the line `.read_line(&mut guess)` calls the [`read_line`][read_line]<!--\nignore --> method on the standard input handle to get input from the user.\nWe’re also passing `&mut guess` as the argument to `read_line` to tell it what\nstring to store the user input in. The full job of `read_line` is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring’s content.\n\nThe `&` indicates that this argument is a *reference*, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust’s major advantages is how safe and easy it is to use\nreferences. You don’t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write `&mut guess` rather than\n`&guess` to make it mutable. (Chapter 4 will explain references more\nthoroughly.)\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"handling-potential-failure-with-the-result-type\"></a>\n\n### Handling Potential Failure with `Result`\n\nWe’re still working on this line of code. We’re now discussing a third line of\ntext, but note that it’s still part of a single logical line of code. The next\npart is this method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}}\n```\n\nWe could have written this code as:\n\n```rust,ignore\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it. It’s\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the `.method_name()` syntax. Now let’s\ndiscuss what this line does.\n\nAs mentioned earlier, `read_line` puts whatever the user enters into the string\nwe pass to it, but it also returns a `Result` value. [`Result`][result]<!--\nignore --> is an [*enumeration*][enums]<!-- ignore -->, often called an *enum*,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a *variant*.\n\n[Chapter 6][enums]<!-- ignore --> will cover enums in more detail. The purpose\nof these `Result` types is to encode error-handling information.\n\n`Result`’s variants are `Ok` and `Err`. The `Ok` variant indicates the\noperation was successful, and inside `Ok` is the successfully generated value.\nThe `Err` variant means the operation failed, and `Err` contains information\nabout how or why the operation failed.\n\nValues of the `Result` type, like values of any type, have methods defined on\nthem. An instance of `Result` has an [`expect` method][expect]<!-- ignore -->\nthat you can call. If this instance of `Result` is an `Err` value, `expect`\nwill cause the program to crash and display the message that you passed as an\nargument to `expect`. If the `read_line` method returns an `Err`, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of `Result` is an `Ok` value, `expect` will take the return\nvalue that `Ok` is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user’s input.\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}}\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`,\nindicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use `expect`. You’ll learn about recovering from errors in [Chapter\n9][recover]<!-- ignore -->.\n\n### Printing Values with `println!` Placeholders\n\nAside from the closing curly bracket, there’s only one more line to discuss in\nthe code so far:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}}\n```\n\nThis line prints the string that now contains the user’s input. The `{}` set of\ncurly brackets is a placeholder: think of `{}` as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n```\n\nThis code would print `x = 5 and y + 2 = 12`.\n\n### Testing the First Part\n\nLet’s test the first part of the guessing game. Run it using `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we’re getting input from the\nkeyboard and then printing it.\n\n## Generating a Secret Number\n\nNext, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We’ll use a random number between 1 and 100 so the game isn’t too\ndifficult. Rust doesn’t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a [`rand` crate][randcrate] with\nsaid functionality.\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files. The project\nwe’ve been building is a *binary crate*, which is an executable. The `rand`\ncrate is a *library crate*, which contains code that is intended to be used in\nother programs and can’t be executed on its own.\n\nCargo’s coordination of external crates is where Cargo really shines. Before we\ncan write code that uses `rand`, we need to modify the *Cargo.toml* file to\ninclude the `rand` crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the `[dependencies]` section header that\nCargo created for you. Be sure to specify `rand` exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}}\n```\n\nIn the *Cargo.toml* file, everything that follows a header is part of that\nsection that continues until another section starts. In `[dependencies]` you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the `rand` crate with the\nsemantic version specifier `0.8.5`. Cargo understands [Semantic\nVersioning][semver]<!-- ignore --> (sometimes called *SemVer*), which is a\nstandard for writing version numbers. The specifier `0.8.5` is actually\nshorthand for `^0.8.5`, which means any version that is at least 0.8.5 but\nbelow 0.9.0.\n\nCargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you’ll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use.\n\nNow, without changing any of the code, let’s build the project, as shown in\nListing 2-2.\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n```\n\n<span class=\"caption\">Listing 2-2: The output from running `cargo build` after\nadding the rand crate as a dependency</span>\n\nYou may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order.\n\nWhen we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the *registry*, which is a copy of data\nfrom [Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and\ndownloads any crates listed that aren’t already downloaded. In this case,\nalthough we only listed `rand` as a dependency, Cargo also grabbed other crates\nthat `rand` depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you\nwon’t get any output aside from the `Finished` line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven’t changed anything\nabout them in your *Cargo.toml* file. Cargo also knows that you haven’t changed\nanything about your code, so it doesn’t recompile that either. With nothing to\ndo, it simply exits.\n\nIf you open the *src/main.rs* file, make a trivial change, and then save it and\nbuild again, you’ll only see two lines of output:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show that Cargo only updates the build with your tiny change to the\n*src/main.rs* file. Your dependencies haven’t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those.\n\n#### Ensuring Reproducible Builds with the *Cargo.lock* File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the `rand` crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the *Cargo.lock* file the first\ntime you run `cargo build`, so we now have this in the *guessing_game*\ndirectory.\n\nWhen you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n*Cargo.lock* file. When you build your project in the future, Cargo will see\nthat the *Cargo.lock* file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the *Cargo.lock* file.\nBecause the *Cargo.lock* file is important for reproducible builds, it’s often\nchecked into source control with the rest of the code in your project.\n\n#### Updating a Crate to Get a New Version\n\nWhen you *do* want to update a crate, Cargo provides the command `update`,\nwhich will ignore the *Cargo.lock* file and figure out all the latest versions\nthat fit your specifications in *Cargo.toml*. Cargo will then write those\nversions to the *Cargo.lock* file. Otherwise, by default, Cargo will only look\nfor versions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran `cargo update`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n\n```console\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n```\n\nCargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your *Cargo.lock* file noting that the version of the `rand` crate you are\nnow using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9.*x*\nseries, you’d have to update the *Cargo.toml* file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.9.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates\navailable and reevaluate your `rand` requirements according to the new version\nyou have specified.\n\nThere’s a lot more to say about [Cargo][doccargo]<!-- ignore --> and [its\necosystem][doccratesio]<!-- ignore -->, which we’ll discuss in Chapter 14, but\nfor now, that’s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.\n\n### Generating a Random Number\n\nLet’s start using `rand` to generate a number to guess. The next step is to\nupdate *src/main.rs*, as shown in Listing 2-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span>\n\nFirst we add the line `use rand::Rng;`. The `Rng` trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail.\n\nNext, we’re adding two lines in the middle. In the first line, we call the\n`rand::thread_rng` function that gives us the particular random number\ngenerator we’re going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the `gen_range`\nmethod on the random number generator. This method is defined by the `Rng`\ntrait that we brought into scope with the `use rand::Rng;` statement. The\n`gen_range` method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we’re using here takes\nthe form `start..=end` and is inclusive on the lower and upper bounds, so we\nneed to specify `1..=100` to request a number between 1 and 100.\n\n> Note: You won’t just know which traits to use and which methods and functions\n> to call from a crate, so each crate has documentation with instructions for\n> using it. Another neat feature of Cargo is that running the `cargo doc\n> --open` command will build documentation provided by all your dependencies\n> locally and open it in your browser. If you’re interested in other\n> functionality in the `rand` crate, for example, run `cargo doc --open` and\n> click `rand` in the sidebar on the left.\n\nThe second new line prints the secret number. This is useful while we’re\ndeveloping the program to be able to test it, but we’ll delete it from the\nfinal version. It’s not much of a game if the program prints the answer as soon\nas it starts!\n\nTry running the program a few times:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n```\n\nYou should get different random numbers, and they should all be numbers between\n1 and 100. Great job!\n\n## Comparing the Guess to the Secret Number\n\nNow that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won’t compile just yet, as we will\nexplain.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span>\n\nFirst we add another `use` statement, bringing a type called\n`std::cmp::Ordering` into scope from the standard library. The `Ordering` type\nis another enum and has the variants `Less`, `Greater`, and `Equal`. These are\nthe three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The\n`cmp` method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it’s\ncomparing `guess` to `secret_number`. Then it returns a variant of the\n`Ordering` enum we brought into scope with the `use` statement. We use a\n[`match`][match]<!-- ignore --> expression to decide what to do next based on\nwhich variant of `Ordering` was returned from the call to `cmp` with the values\nin `guess` and `secret_number`.\n\nA `match` expression is made up of *arms*. An arm consists of a *pattern* to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm’s pattern. Rust takes the value given to `match` and looks\nthrough each arm’s pattern in turn. Patterns and the `match` construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet’s walk through an example with the `match` expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38.\n\nWhen the code compares 50 to 38, the `cmp` method will return\n`Ordering::Greater` because 50 is greater than 38. The `match` expression gets\nthe `Ordering::Greater` value and starts checking each arm’s pattern. It looks\nat the first arm’s pattern, `Ordering::Less`, and sees that the value\n`Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in\nthat arm and moves to the next arm. The next arm’s pattern is\n`Ordering::Greater`, which *does* match `Ordering::Greater`! The associated\ncode in that arm will execute and print `Too big!` to the screen. The `match`\nexpression ends after the first successful match, so it won’t look at the last\narm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}}\n```\n\nThe core of the error states that there are *mismatched types*. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n`let mut guess = String::new()`, Rust was able to infer that `guess` should be\na `String` and didn’t make us write the type. The `secret_number`, on the other\nhand, is a number type. A few of Rust’s number types can have a value between 1\nand 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan `i32`, which is the type of `secret_number` unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a\nreal number type so we can compare it numerically to the secret number. We do\nso by adding this line to the `main` function body:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}}\n```\n\nThe line is:\n\n```rust,ignore\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have\na variable named `guess`? It does, but helpfully Rust allows us to shadow the\nprevious value of `guess` with a new one. *Shadowing* lets us reuse the `guess`\nvariable name rather than forcing us to create two unique variables, such as\n`guess_str` and `guess`, for example. We’ll cover this in more detail in\n[Chapter 3][shadowing]<!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type.\n\nWe bind this new variable to the expression `guess.trim().parse()`. The `guess`\nin the expression refers to the original `guess` variable that contained the\ninput as a string. The `trim` method on a `String` instance will eliminate any\nwhitespace at the beginning and end, which we must do to be able to compare the\nstring to the `u32`, which can only contain numerical data. The user must press\n<span class=\"keystroke\">enter</span> to satisfy `read_line` and input their\nguess, which adds a newline character to the string. For example, if the user\ntypes <span class=\"keystroke\">5</span> and presses <span\nclass=\"keystroke\">enter</span>, `guess` looks like this: `5\\n`. The `\\n`\nrepresents “newline.” (On Windows, pressing <span\nclass=\"keystroke\">enter</span> results in a carriage return and a newline,\n`\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting in just `5`.\n\nThe [`parse` method on strings][parse]<!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using `let guess: u32`. The colon\n(`:`) after `guess` tells Rust we’ll annotate the variable’s type. Rust has a\nfew built-in number types; the `u32` seen here is an unsigned, 32-bit integer.\nIt’s a good default choice for a small positive number. You’ll learn about\nother number types in [Chapter 3][integers]<!-- ignore -->.\n\nAdditionally, the `u32` annotation in this example program and the comparison\nwith `secret_number` means Rust will infer that `secret_number` should be a\n`u32` as well. So now the comparison will be between two values of the same\ntype!\n\nThe `parse` method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained `A👍%`, there would be no way to convert that to a number. Because it\nmight fail, the `parse` method returns a `Result` type, much as the `read_line`\nmethod does (discussed earlier in [“Handling Potential Failure with\n`Result`”](#handling-potential-failure-with-result)<!-- ignore-->). We’ll treat\nthis `Result` the same way by using the `expect` method again. If `parse`\nreturns an `Err` `Result` variant because it couldn’t create a number from the\nstring, the `expect` call will crash the game and print the message we give it.\nIf `parse` can successfully convert the string to a number, it will return the\n`Ok` variant of `Result`, and `expect` will return the number that we want from\nthe `Ok` value.\n\nLet’s run the program now:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess.\nLet’s change that by adding a loop!\n\n## Allowing Multiple Guesses with Looping\n\nThe `loop` keyword creates an infinite loop. We’ll add a loop to give users\nmore chances at guessing the number:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}}\n```\n\nAs you can see, we’ve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut\n<span class=\"keystroke\">ctrl-c</span>. But there’s another way to escape this\ninsatiable monster, as mentioned in the `parse` discussion in [“Comparing the\nGuess to the Secret Number”](#comparing-the-guess-to-the-secret-number)<!--\nignore -->: if the user enters a non-number answer, the program will crash. We\ncan take advantage of that to allow the user to quit, as shown here:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nTyping `quit` will quit the game, but as you’ll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game’s behavior, rather than crashing the program when\nthe user inputs a non-number, let’s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where `guess`\nis converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span>\n\nWe switch from an `expect` call to a `match` expression to move from crashing\non an error to handling the error. Remember that `parse` returns a `Result`\ntype and `Result` is an enum that has the variants `Ok` and `Err`. We’re using\na `match` expression here, as we did with the `Ordering` result of the `cmp`\nmethod.\n\nIf `parse` is able to successfully turn the string into a number, it will\nreturn an `Ok` value that contains the resultant number. That `Ok` value will\nmatch the first arm’s pattern, and the `match` expression will just return the\n`num` value that `parse` produced and put inside the `Ok` value. That number\nwill end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is *not* able to turn the string into a number, it will return an\n`Err` value that contains more information about the error. The `Err` value\ndoes not match the `Ok(num)` pattern in the first `match` arm, but it does\nmatch the `Err(_)` pattern in the second arm. The underscore, `_`, is a\ncatchall value; in this example, we’re saying we want to match all `Err`\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm’s code, `continue`, which tells the program to go to the\nnext iteration of the `loop` and ask for another guess. So, effectively, the\nprogram ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let’s delete the `println!` that outputs the\nsecret number. Listing 2-6 shows the final code.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 2-6: Complete guessing game code</span>\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\n## Summary\n\nThis project was a hands-on way to introduce you to many new Rust concepts:\n`let`, `match`, functions, the use of external crates, and more. In the next\nfew chapters, you’ll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work.\n\n[prelude]: ../std/prelude/index.html\n[variables-and-mutability]: ch03-01-variables-and-mutability.html#variables-and-mutability\n[comments]: ch03-04-comments.html\n[string]: ../std/string/struct.String.html\n[iostdin]: ../std/io/struct.Stdin.html\n[read_line]: ../std/io/struct.Stdin.html#method.read_line\n[result]: ../std/result/enum.Result.html\n[enums]: ch06-00-enums.html\n[expect]: ../std/result/enum.Result.html#method.expect\n[recover]: ch09-02-recoverable-errors-with-result.html\n[randcrate]: https://crates.io/crates/rand\n[semver]: http://semver.org\n[cratesio]: https://crates.io/\n[doccargo]: http://doc.crates.io\n[doccratesio]: http://doc.crates.io/crates-io.html\n[match]: ch06-02-match.html\n[shadowing]: ch03-01-variables-and-mutability.html#shadowing\n[parse]: ../std/primitive.str.html#method.parse\n[integers]: ch03-02-data-types.html#integer-types\n",
					"qas": [
						{
							"question": "From where is cargo fetching everything?",
							"id": 303,
							"answers": [
								{
									"text": "registry",
									"answer_start": 16614
								}
							],
							"is_impossible": false
						},
						{
							"question": "Does Rust have a random number generator by default?",
							"id": 299,
							"answers": [
								{
									"text": "Rust doesn’t yet include random number functionality in its standard\nlibrary",
									"answer_start": 13122
								}
							],
							"is_impossible": false
						},
						{
							"question": "With what operator can I pass an argument as reference?",
							"id": 296,
							"answers": [
								{
									"text": "&",
									"answer_start": 7774
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Macros\n\nWe’ve used macros like `println!` throughout this book, but we haven’t fully\nexplored what a macro is and how it works. The term *macro* refers to a family\nof features in Rust: *declarative* macros with `macro_rules!` and three kinds\nof *procedural* macros:\n\n* Custom `#[derive]` macros that specify code added with the `derive` attribute\n  used on structs and enums\n* Attribute-like macros that define custom attributes usable on any item\n* Function-like macros that look like function calls but operate on the tokens\n  specified as their argument\n\nWe’ll talk about each of these in turn, but first, let’s look at why we even\nneed macros when we already have functions.\n\n### The Difference Between Macros and Functions\n\nFundamentally, macros are a way of writing code that writes other code, which\nis known as *metaprogramming*. In Appendix C, we discuss the `derive`\nattribute, which generates an implementation of various traits for you. We’ve\nalso used the `println!` and `vec!` macros throughout the book. All of these\nmacros *expand* to produce more code than the code you’ve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don’t.\n\nA function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call `println!(\"hello\")` with one argument or\n`println!(\"hello {}\", name)` with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can’t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.\n\nThe downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you’re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.\n\nAnother important difference between macros and functions is that you must\ndefine macros or bring them into scope *before* you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.\n\n### Declarative Macros with `macro_rules!` for General Metaprogramming\n\nThe most widely used form of macros in Rust is the *declarative macro*. These\nare also sometimes referred to as “macros by example,” “`macro_rules!` macros,”\nor just plain “macros.” At their core, declarative macros allow you to write\nsomething similar to a Rust `match` expression. As discussed in Chapter 6,\n`match` expressions are control structures that take an expression, compare the\nresulting value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation.\n\nTo define a macro, you use the `macro_rules!` construct. Let’s explore how to\nuse `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8\ncovered how we can use the `vec!` macro to create a new vector with particular\nvalues. For example, the following macro creates a new vector containing three\nintegers:\n\n```rust\nlet v: Vec<u32> = vec![1, 2, 3];\n```\n\nWe could also use the `vec!` macro to make a vector of two integers or a vector\nof five string slices. We wouldn’t be able to use a function to do the same\nbecause we wouldn’t know the number or type of values up front.\n\nListing 19-28 shows a slightly simplified definition of the `vec!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-28/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-28: A simplified version of the `vec!` macro\ndefinition</span>\n\n> Note: The actual definition of the `vec!` macro in the standard library\n> includes code to preallocate the correct amount of memory up front. That code\n> is an optimization that we don’t include here to make the example simpler.\n\nThe `#[macro_export]` annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can’t be brought into scope.\n\nWe then start the macro definition with `macro_rules!` and the name of the\nmacro we’re defining *without* the exclamation mark. The name, in this case\n`vec`, is followed by curly brackets denoting the body of the macro definition.\n\nThe structure in the `vec!` body is similar to the structure of a `match`\nexpression. Here we have one arm with the pattern `( $( $x:expr ),* )`,\nfollowed by `=>` and the block of code associated with this pattern. If the\npattern matches, the associated block of code will be emitted. Given that this\nis the only pattern in this macro, there is only one valid way to match; any\nother pattern will result in an error. More complex macros will have more than\none arm.\n\nValid pattern syntax in macro definitions is different than the pattern syntax\ncovered in Chapter 18 because macro patterns are matched against Rust code\nstructure rather than values. Let’s walk through what the pattern pieces in\nListing 19-28 mean; for the full macro pattern syntax, see the [Rust\nReference][ref].\n\nFirst, we use a set of parentheses to encompass the whole pattern. We use a\ndollar sign (`$`) to declare a variable in the macro system that will contain\nthe Rust code matching the pattern. The dollar sign makes it clear this is a\nmacro variable as opposed to a regular Rust variable. Next comes a set of\nparentheses that captures values that match the pattern within the parentheses\nfor use in the replacement code. Within `$()` is `$x:expr`, which matches any\nRust expression and gives the expression the name `$x`.\n\nThe comma following `$()` indicates that a literal comma separator character\ncould optionally appear after the code that matches the code in `$()`. The `*`\nspecifies that the pattern matches zero or more of whatever precedes the `*`.\n\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three\ntimes with the three expressions `1`, `2`, and `3`.\n\nNow let’s look at the pattern in the body of the code associated with this arm:\n`temp_vec.push()` within `$()*` is generated for each part that matches `$()`\nin the pattern zero or more times depending on how many times the pattern\nmatches. The `$x` is replaced with each expression matched. When we call this\nmacro with `vec![1, 2, 3];`, the code generated that replaces this macro call\nwill be the following:\n\n```rust,ignore\n{\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n}\n```\n\nWe’ve defined a macro that can take any number of arguments of any type and can\ngenerate code to create a vector containing the specified elements.\n\nTo learn more about how to write macros, consult the online documentation or\nother resources, such as [“The Little Book of Rust Macros”][tlborm] started by\nDaniel Keep and continued by Lukas Wirth.\n\n### Procedural Macros for Generating Code from Attributes\n\nThe second form of macros is the *procedural macro*, which acts more like a\nfunction (and is a type of procedure). Procedural macros accept some code as an\ninput, operate on that code, and produce some code as an output rather than\nmatching against patterns and replacing the code with other code as declarative\nmacros do. The three kinds of procedural macros are custom derive,\nattribute-like, and function-like, and all work in a similar fashion.\n\nWhen creating procedural macros, the definitions must reside in their own crate\nwith a special crate type. This is for complex technical reasons that we hope\nto eliminate in the future. In Listing 19-29, we show how to define a\nprocedural macro, where `some_attribute` is a placeholder for using a specific\nmacro variety.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\nuse proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n\n<span class=\"caption\">Listing 19-29: An example of defining a procedural\nmacro</span>\n\nThe function that defines a procedural macro takes a `TokenStream` as an input\nand produces a `TokenStream` as an output. The `TokenStream` type is defined by\nthe `proc_macro` crate that is included with Rust and represents a sequence of\ntokens. This is the core of the macro: the source code that the macro is\noperating on makes up the input `TokenStream`, and the code the macro produces\nis the output `TokenStream`. The function also has an attribute attached to it\nthat specifies which kind of procedural macro we’re creating. We can have\nmultiple kinds of procedural macros in the same crate.\n\nLet’s look at the different kinds of procedural macros. We’ll start with a\ncustom derive macro and then explain the small dissimilarities that make the\nother forms different.\n\n### How to Write a Custom `derive` Macro\n\nLet’s create a crate named `hello_macro` that defines a trait named\n`HelloMacro` with one associated function named `hello_macro`. Rather than\nmaking our users implement the `HelloMacro` trait for each of their types,\nwe’ll provide a procedural macro so users can annotate their type with\n`#[derive(HelloMacro)]` to get a default implementation of the `hello_macro`\nfunction. The default implementation will print `Hello, Macro! My name is\nTypeName!` where `TypeName` is the name of the type on which this trait has\nbeen defined. In other words, we’ll write a crate that enables another\nprogrammer to write code like Listing 19-30 using our crate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-30/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-30: The code a user of our crate will be able\nto write when using our procedural macro</span>\n\nThis code will print `Hello, Macro! My name is Pancakes!` when we’re done. The\nfirst step is to make a new library crate, like this:\n\n```console\n$ cargo new hello_macro --lib\n```\n\nNext, we’ll define the `HelloMacro` trait and its associated function:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/hello_macro/src/lib.rs}}\n```\n\nWe have a trait and its function. At this point, our crate user could implement\nthe trait to achieve the desired functionality, like so:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/pancakes/src/main.rs}}\n```\n\nHowever, they would need to write the implementation block for each type they\nwanted to use with `hello_macro`; we want to spare them from having to do this\nwork.\n\nAdditionally, we can’t yet provide the `hello_macro` function with default\nimplementation that will print the name of the type the trait is implemented\non: Rust doesn’t have reflection capabilities, so it can’t look up the type’s\nname at runtime. We need a macro to generate code at compile time.\n\nThe next step is to define the procedural macro. At the time of this writing,\nprocedural macros need to be in their own crate. Eventually, this restriction\nmight be lifted. The convention for structuring crates and macro crates is as\nfollows: for a crate named `foo`, a custom derive procedural macro crate is\ncalled `foo_derive`. Let’s start a new crate called `hello_macro_derive` inside\nour `hello_macro` project:\n\n```console\n$ cargo new hello_macro_derive --lib\n```\n\nOur two crates are tightly related, so we create the procedural macro crate\nwithin the directory of our `hello_macro` crate. If we change the trait\ndefinition in `hello_macro`, we’ll have to change the implementation of the\nprocedural macro in `hello_macro_derive` as well. The two crates will need to\nbe published separately, and programmers using these crates will need to add\nboth as dependencies and bring them both into scope. We could instead have the\n`hello_macro` crate use `hello_macro_derive` as a dependency and re-export the\nprocedural macro code. However, the way we’ve structured the project makes it\npossible for programmers to use `hello_macro` even if they don’t want the\n`derive` functionality.\n\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate.\nWe’ll also need functionality from the `syn` and `quote` crates, as you’ll see\nin a moment, so we need to add them as dependencies. Add the following to the\n*Cargo.toml* file for `hello_macro_derive`:\n\n<span class=\"filename\">Filename: hello_macro_derive/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/Cargo.toml:6:12}}\n```\n\nTo start defining the procedural macro, place the code in Listing 19-31 into\nyour *src/lib.rs* file for the `hello_macro_derive` crate. Note that this code\nwon’t compile until we add a definition for the `impl_hello_macro` function.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-31: Code that most procedural macro crates\nwill require in order to process Rust code</span>\n\nNotice that we’ve split the code into the `hello_macro_derive` function, which\nis responsible for parsing the `TokenStream`, and the `impl_hello_macro`\nfunction, which is responsible for transforming the syntax tree: this makes\nwriting a procedural macro more convenient. The code in the outer function\n(`hello_macro_derive` in this case) will be the same for almost every\nprocedural macro crate you see or create. The code you specify in the body of\nthe inner function (`impl_hello_macro` in this case) will be different\ndepending on your procedural macro’s purpose.\n\nWe’ve introduced three new crates: `proc_macro`, [`syn`], and [`quote`]. The\n`proc_macro` crate comes with Rust, so we didn’t need to add that to the\ndependencies in *Cargo.toml*. The `proc_macro` crate is the compiler’s API that\nallows us to read and manipulate Rust code from our code.\n\nThe `syn` crate parses Rust code from a string into a data structure that we\ncan perform operations on. The `quote` crate turns `syn` data structures back\ninto Rust code. These crates make it much simpler to parse any sort of Rust\ncode we might want to handle: writing a full parser for Rust code is no simple\ntask.\n\nThe `hello_macro_derive` function will be called when a user of our library\nspecifies `#[derive(HelloMacro)]` on a type. This is possible because we’ve\nannotated the `hello_macro_derive` function here with `proc_macro_derive` and\nspecified the name `HelloMacro`, which matches our trait name; this is the\nconvention most procedural macros follow.\n\nThe `hello_macro_derive` function first converts the `input` from a\n`TokenStream` to a data structure that we can then interpret and perform\noperations on. This is where `syn` comes into play. The `parse` function in\n`syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the\nparsed Rust code. Listing 19-32 shows the relevant parts of the `DeriveInput`\nstruct we get from parsing the `struct Pancakes;` string:\n\n```rust,ignore\nDeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: \"Pancakes\",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n```\n\n<span class=\"caption\">Listing 19-32: The `DeriveInput` instance we get when\nparsing the code that has the macro’s attribute in Listing 19-30</span>\n\nThe fields of this struct show that the Rust code we’ve parsed is a unit struct\nwith the `ident` (identifier, meaning the name) of `Pancakes`. There are more\nfields on this struct for describing all sorts of Rust code; check the [`syn`\ndocumentation for `DeriveInput`][syn-docs] for more information.\n\nSoon we’ll define the `impl_hello_macro` function, which is where we’ll build\nthe new Rust code we want to include. But before we do, note that the output\nfor our derive macro is also a `TokenStream`. The returned `TokenStream` is\nadded to the code that our crate users write, so when they compile their crate,\nthey’ll get the extra functionality that we provide in the modified\n`TokenStream`.\n\nYou might have noticed that we’re calling `unwrap` to cause the\n`hello_macro_derive` function to panic if the call to the `syn::parse` function\nfails here. It’s necessary for our procedural macro to panic on errors because\n`proc_macro_derive` functions must return `TokenStream` rather than `Result` to\nconform to the procedural macro API. We’ve simplified this example by using\n`unwrap`; in production code, you should provide more specific error messages\nabout what went wrong by using `panic!` or `expect`.\n\nNow that we have the code to turn the annotated Rust code from a `TokenStream`\ninto a `DeriveInput` instance, let’s generate the code that implements the\n`HelloMacro` trait on the annotated type, as shown in Listing 19-33.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-33/hello_macro/hello_macro_derive/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-33: Implementing the `HelloMacro` trait using\nthe parsed Rust code</span>\n\nWe get an `Ident` struct instance containing the name (identifier) of the\nannotated type using `ast.ident`. The struct in Listing 19-32 shows that when\nwe run the `impl_hello_macro` function on the code in Listing 19-30, the\n`ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus,\nthe `name` variable in Listing 19-33 will contain an `Ident` struct instance\nthat, when printed, will be the string `\"Pancakes\"`, the name of the struct in\nListing 19-30.\n\nThe `quote!` macro lets us define the Rust code that we want to return. The\ncompiler expects something different to the direct result of the `quote!`\nmacro’s execution, so we need to convert it to a `TokenStream`. We do this by\ncalling the `into` method, which consumes this intermediate representation and\nreturns a value of the required `TokenStream` type.\n\nThe `quote!` macro also provides some very cool templating mechanics: we can\nenter `#name`, and `quote!` will replace it with the value in the variable\n`name`. You can even do some repetition similar to the way regular macros work.\nCheck out [the `quote` crate’s docs][quote-docs] for a thorough introduction.\n\nWe want our procedural macro to generate an implementation of our `HelloMacro`\ntrait for the type the user annotated, which we can get by using `#name`. The\ntrait implementation has the one function `hello_macro`, whose body contains the\nfunctionality we want to provide: printing `Hello, Macro! My name is` and then\nthe name of the annotated type.\n\nThe `stringify!` macro used here is built into Rust. It takes a Rust\nexpression, such as `1 + 2`, and at compile time turns the expression into a\nstring literal, such as `\"1 + 2\"`. This is different than `format!` or\n`println!`, macros which evaluate the expression and then turn the result into\na `String`. There is a possibility that the `#name` input might be an\nexpression to print literally, so we use `stringify!`. Using `stringify!` also\nsaves an allocation by converting `#name` to a string literal at compile time.\n\nAt this point, `cargo build` should complete successfully in both `hello_macro`\nand `hello_macro_derive`. Let’s hook up these crates to the code in Listing\n19-30 to see the procedural macro in action! Create a new binary project in\nyour *projects* directory using `cargo new pancakes`. We need to add\n`hello_macro` and `hello_macro_derive` as dependencies in the `pancakes`\ncrate’s *Cargo.toml*. If you’re publishing your versions of `hello_macro` and\n`hello_macro_derive` to [crates.io](https://crates.io/), they would be regular\ndependencies; if not, you can specify them as `path` dependencies as follows:\n\n```toml\n{{#include ../listings/ch19-advanced-features/no-listing-21-pancakes/pancakes/Cargo.toml:7:9}}\n```\n\nPut the code in Listing 19-30 into *src/main.rs*, and run `cargo run`: it\nshould print `Hello, Macro! My name is Pancakes!` The implementation of the\n`HelloMacro` trait from the procedural macro was included without the\n`pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the\ntrait implementation.\n\nNext, let’s explore how the other kinds of procedural macros differ from custom\nderive macros.\n\n### Attribute-like macros\n\nAttribute-like macros are similar to custom derive macros, but instead of\ngenerating code for the `derive` attribute, they allow you to create new\nattributes. They’re also more flexible: `derive` only works for structs and\nenums; attributes can be applied to other items as well, such as functions.\nHere’s an example of using an attribute-like macro: say you have an attribute\nnamed `route` that annotates functions when using a web application framework:\n\n```rust,ignore\n#[route(GET, \"/\")]\nfn index() {\n```\n\nThis `#[route]` attribute would be defined by the framework as a procedural\nmacro. The signature of the macro definition function would look like this:\n\n```rust,ignore\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n```\n\nHere, we have two parameters of type `TokenStream`. The first is for the\ncontents of the attribute: the `GET, \"/\"` part. The second is the body of the\nitem the attribute is attached to: in this case, `fn index() {}` and the rest\nof the function’s body.\n\nOther than that, attribute-like macros work the same way as custom derive\nmacros: you create a crate with the `proc-macro` crate type and implement a\nfunction that generates the code you want!\n\n### Function-like macros\n\nFunction-like macros define macros that look like function calls. Similarly to\n`macro_rules!` macros, they’re more flexible than functions; for example, they\ncan take an unknown number of arguments. However, `macro_rules!` macros can be\ndefined only using the match-like syntax we discussed in the section\n[“Declarative Macros with `macro_rules!` for General\nMetaprogramming”][decl]<!-- ignore --> earlier. Function-like macros take a\n`TokenStream` parameter and their definition manipulates that `TokenStream`\nusing Rust code as the other two types of procedural macros do. An example of a\nfunction-like macro is an `sql!` macro that might be called like so:\n\n```rust,ignore\nlet sql = sql!(SELECT * FROM posts WHERE id=1);\n```\n\nThis macro would parse the SQL statement inside it and check that it’s\nsyntactically correct, which is much more complex processing than a\n`macro_rules!` macro can do. The `sql!` macro would be defined like this:\n\n```rust,ignore\n#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {\n```\n\nThis definition is similar to the custom derive macro’s signature: we receive\nthe tokens that are inside the parentheses and return the code we wanted to\ngenerate.\n\n## Summary\n\nWhew! Now you have some Rust features in your toolbox that you likely won’t use\noften, but you’ll know they’re available in very particular circumstances.\nWe’ve introduced several complex topics so that when you encounter them in\nerror message suggestions or in other peoples’ code, you’ll be able to\nrecognize these concepts and syntax. Use this chapter as a reference to guide\nyou to solutions.\n\nNext, we’ll put everything we’ve discussed throughout the book into practice\nand do one more project!\n\n[ref]: ../reference/macros-by-example.html\n[tlborm]: https://veykril.github.io/tlborm/\n[`syn`]: https://crates.io/crates/syn\n[`quote`]: https://crates.io/crates/quote\n[syn-docs]: https://docs.rs/syn/1.0/syn/struct.DeriveInput.html\n[quote-docs]: https://docs.rs/quote\n[decl]: #declarative-macros-with-macro_rules-for-general-metaprogramming\n",
					"qas": [
						{
							"question": "What does dollar sign (`$`) mean in macro definition? ",
							"id": 95,
							"answers": [
								{
									"text": "We use a\ndollar sign (`$`) to declare a variable in the macro system that will contain\nthe Rust code matching the pattern. The dollar sign makes it clear this is a\nmacro variable as opposed to a regular Rust variable.",
									"answer_start": 5747
								}
							],
							"is_impossible": false
						},
						{
							"question": "What will print the default HelloMacro implementation?",
							"id": 97,
							"answers": [
								{
									"text": "The default implementation will print `Hello, Macro! My name is\nTypeName!` where `TypeName` is the name of the type on which this trait has\nbeen defined.",
									"answer_start": 9738
								}
							],
							"is_impossible": false
						},
						{
							"question": "What differs attribute-like macros from custom derive macros?",
							"id": 99,
							"answers": [
								{
									"text": "Attribute-like macros are similar to custom derive macros, but instead of\ngenerating code for the `derive` attribute, they allow you to create new\nattributes. They’re also more flexible: `derive` only works for structs and\nenums; attributes can be applied to other items as well, such as functions.",
									"answer_start": 21101
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the downside to implementing a macro instead of a function?",
							"id": 90,
							"answers": [
								{
									"text": "The downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you’re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.\n",
									"answer_start": 1823
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Storing UTF-8 Encoded Text with Strings\n\nWe talked about strings in Chapter 4, but we’ll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust’s propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you’re\ncoming from other programming languages.\n\nWe discuss strings in the context of collections because strings are\nimplemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we’ll\ntalk about the operations on `String` that every collection type has, such as\ncreating, updating, and reading. We’ll also discuss the ways in which `String`\nis different from the other collections, namely how indexing into a `String` is\ncomplicated by the differences between how people and computers interpret\n`String` data.\n\n### What Is a String?\n\nWe’ll first define what we mean by the term *string*. Rust has only one string\ntype in the core language, which is the string slice `str` that is usually seen\nin its borrowed form `&str`. In Chapter 4, we talked about *string slices*,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program’s binary and are therefore\nstring slices.\n\nThe `String` type, which is provided by Rust’s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to “strings” in Rust, they might be\nreferring to either the `String` or the string slice `&str` types, not just one\nof those types. Although this section is largely about `String`, both types are\nused heavily in Rust’s standard library, and both `String` and string slices\nare UTF-8 encoded.\n\n### Creating a New String\n\nMany of the same operations available with `Vec<T>` are available with `String`\nas well, because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities. An example\nof a function that works the same way with `Vec<T>` and `String` is the `new`\nfunction to create an instance, shown in Listing 8-11.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-11: Creating a new, empty `String`</span>\n\nThis line creates a new empty string called `s`, which we can then load data\ninto. Often, we’ll have some initial data that we want to start the string\nwith. For that, we use the `to_string` method, which is available on any type\nthat implements the `Display` trait, as string literals do. Listing 8-12 shows\ntwo examples.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-12: Using the `to_string` method to create a\n`String` from a string literal</span>\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string\nliteral. The code in Listing 8-13 is equivalent to the code from Listing 8-12\nthat uses `to_string`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-13: Using the `String::from` function to create\na `String` from a string literal</span>\n\nBecause strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, `String::from` and\n`to_string` do the same thing, so which you choose is a matter of style and\nreadability.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-14: Storing greetings in different languages in\nstrings</span>\n\nAll of these are valid `String` values.\n\n### Updating a String\n\nA `String` can grow in size and its contents can change, just like the contents\nof a `Vec<T>`, if you push more data into it. In addition, you can conveniently\nuse the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### Appending to a String with `push_str` and `push`\n\nWe can grow a `String` by using the `push_str` method to append a string slice,\nas shown in Listing 8-15.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-15: Appending a string slice to a `String`\nusing the `push_str` method</span>\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a\nstring slice because we don’t necessarily want to take ownership of the\nparameter. For example, in the code in Listing 8-16, we want to be able to use\n`s2` after appending its contents to `s1`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-16: Using a string slice after appending its\ncontents to a `String`</span>\n\nIf the `push_str` method took ownership of `s2`, we wouldn’t be able to print\nits value on the last line. However, this code works as we’d expect!\n\nThe `push` method takes a single character as a parameter and adds it to the\n`String`. Listing 8-17 adds the letter “l” to a `String` using the `push`\nmethod.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-17/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-17: Adding one character to a `String` value\nusing `push`</span>\n\nAs a result, `s` will contain `lol`.\n\n#### Concatenation with the `+` Operator or the `format!` Macro\n\nOften, you’ll want to combine two existing strings. One way to do so is to use\nthe `+` operator, as shown in Listing 8-18.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-18: Using the `+` operator to combine two\n`String` values into a new `String` value</span>\n\nThe string `s3` will contain `Hello, world!`. The reason `s1` is no longer\nvalid after the addition, and the reason we used a reference to `s2`, has to do\nwith the signature of the method that’s called when we use the `+` operator.\nThe `+` operator uses the `add` method, whose signature looks something like\nthis:\n\n```rust,ignore\nfn add(self, s: &str) -> String {\n```\n\nIn the standard library, you'll see `add` defined using generics and associated\ntypes. Here, we’ve substituted in concrete types, which is what happens when we\ncall this method with `String` values. We’ll discuss generics in Chapter 10.\nThis signature gives us the clues we need to understand the tricky bits of the\n`+` operator.\n\nFirst, `s2` has an `&`, meaning that we’re adding a *reference* of the second\nstring to the first string. This is because of the `s` parameter in the `add`\nfunction: we can only add a `&str` to a `String`; we can’t add two `String`\nvalues together. But wait—the type of `&s2` is `&String`, not `&str`, as\nspecified in the second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we’re able to use `&s2` in the call to `add` is that the compiler\ncan *coerce* the `&String` argument into a `&str`. When we call the `add`\nmethod, Rust uses a *deref coercion*, which here turns `&s2` into `&s2[..]`.\nWe’ll discuss deref coercion in more depth in Chapter 15. Because `add` does\nnot take ownership of the `s` parameter, `s2` will still be a valid `String`\nafter this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self`,\nbecause `self` does *not* have an `&`. This means `s1` in Listing 8-18 will be\nmoved into the `add` call and will no longer be valid after that. So although\n`let s3 = s1 + &s2;` looks like it will copy both strings and create a new one,\nthis statement actually takes ownership of `s1`, appends a copy of the contents\nof `s2`, and then returns ownership of the result. In other words, it looks\nlike it’s making a lot of copies but isn’t; the implementation is more\nefficient than copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-01-concat-multiple-strings/src/main.rs:here}}\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"`\ncharacters, it’s difficult to see what’s going on. For more complicated string\ncombining, we can instead use the `format!` macro:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-02-format/src/main.rs:here}}\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works like\n`println!`, but instead of printing the output to the screen, it returns a\n`String` with the contents. The version of the code using `format!` is much\neasier to read, and the code generated by the `format!` macro uses references\nso that this call doesn’t take ownership of any of its parameters.\n\n### Indexing into Strings\n\nIn many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a `String` using indexing syntax in Rust, you’ll\nget an error. Consider the invalid code in Listing 8-19.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-19: Attempting to use indexing syntax with a\nString</span>\n\nThis code will result in the following error:\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-19/output.txt}}\n```\n\nThe error and the note tell the story: Rust strings don’t support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory.\n\n#### Internal Representation\n\nA `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:spanish}}\n```\n\nIn this case, `len` will be 4, which means the vector storing the string “Hola”\nis 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8. The\nfollowing line, however, may surprise you. (Note that this string begins with\nthe capital Cyrillic letter Ze, not the number 3.)\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:russian}}\n```\n\nAsked how long the string is, you might say 12. In fact, Rust’s answer is 24:\nthat’s the number of bytes it takes to encode “Здравствуйте” in UTF-8, because\neach Unicode scalar value in that string takes 2 bytes of storage. Therefore,\nan index into the string’s bytes will not always correlate to a valid Unicode\nscalar value. To demonstrate, consider this invalid Rust code:\n\n```rust,ignore,does_not_compile\nlet hello = \"Здравствуйте\";\nlet answer = &hello[0];\n```\n\nYou already know that `answer` will not be `З`, the first letter. When encoded\nin UTF-8, the first byte of `З` is `208` and the second is `151`, so it would\nseem that `answer` should in fact be `208`, but `208` is not a valid character\non its own. Returning `208` is likely not what a user would want if they asked\nfor the first letter of this string; however, that’s the only data that Rust\nhas at byte index 0. Users generally don’t want the byte value returned, even\nif the string contains only Latin letters: if `&\"hello\"[0]` were valid code\nthat returned the byte value, it would return `104`, not `h`.\n\nThe answer, then, is that to avoid returning an unexpected value and causing\nbugs that might not be discovered immediately, Rust doesn’t compile this code\nat all and prevents misunderstandings early in the development process.\n\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\n\nAnother point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust’s perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call *letters*).\n\nIf we look at the Hindi word “नमस्ते” written in the Devanagari script, it is\nstored as a vector of `u8` values that looks like this:\n\n```text\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n```\n\nThat’s 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust’s `char` type is, those\nbytes look like this:\n\n```text\n['न', 'म', 'स', '्', 'त', 'े']\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters:\nthey’re diacritics that don’t make sense on their own. Finally, if we look at\nthem as grapheme clusters, we’d get what a person would call the four letters\nthat make up the Hindi word:\n\n```text\n[\"न\", \"म\", \"स्\", \"ते\"]\n```\n\nRust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in.\n\nA final reason Rust doesn’t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn’t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.\n\n### Slicing Strings\n\nIndexing into a string is often a bad idea because it’s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. If you really need to use\nindices to create string slices, therefore, Rust asks you to be more specific.\n\nRather than indexing using `[]` with a single number, you can use `[]` with a\nrange to create a string slice containing particular bytes:\n\n```rust\nlet hello = \"Здравствуйте\";\n\nlet s = &hello[0..4];\n```\n\nHere, `s` will be a `&str` that contains the first 4 bytes of the string.\nEarlier, we mentioned that each of these characters was 2 bytes, which means\n`s` will be `Зд`.\n\nIf we were to try to slice only part of a character’s bytes with something like\n`&hello[0..1]`, Rust would panic at runtime in the same way as if an invalid\nindex were accessed in a vector:\n\n```console\n{{#include ../listings/ch08-common-collections/output-only-01-not-char-boundary/output.txt}}\n```\n\nYou should use ranges to create string slices with caution, because doing so\ncan crash your program.\n\n### Methods for Iterating Over Strings\n\nThe best way to operate on pieces of strings is to be explicit about whether\nyou want characters or bytes. For individual Unicode scalar values, use the\n`chars` method. Calling `chars` on “Зд” separates out and returns two values\nof type `char`, and you can iterate over the result to access each element:\n\n```rust\nfor c in \"Зд\".chars() {\n    println!(\"{c}\");\n}\n```\n\nThis code will print the following:\n\n```text\nЗ\nд\n```\n\nAlternatively, the `bytes` method returns each raw byte, which might be\nappropriate for your domain:\n\n```rust\nfor b in \"Зд\".bytes() {\n    println!(\"{b}\");\n}\n```\n\nThis code will print the four bytes that make up this string:\n\n```text\n208\n151\n208\n180\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more\nthan 1 byte.\n\nGetting grapheme clusters from strings as with the Devanagari script is\ncomplex, so this functionality is not provided by the standard library. Crates\nare available on [crates.io](https://crates.io/)<!-- ignore --> if this is the\nfunctionality you need.\n\n### Strings Are Not So Simple\n\nTo summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of `String` data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data upfront. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle.\n\nThe good news is that the standard library offers a lot of functionality built\noff the `String` and `&str` types to help handle these complex situations\ncorrectly. Be sure to check out the documentation for useful methods like\n`contains` for searching in a string and `replace` for substituting parts of a\nstring with another string.\n\nLet’s switch to something a bit less complex: hash maps!\n",
					"qas": [
						{
							"question": "How to create a string from a string literal?",
							"id": 202,
							"answers": [
								{
									"text": "We can also use the function `String::from` to create a `String` from a string\nliteral.",
									"answer_start": 3099
								}
							],
							"is_impossible": false
						},
						{
							"question": "Do rust strings support indexing?",
							"id": 211,
							"answers": [
								{
									"text": "Rust strings don’t support indexing.",
									"answer_start": 9917
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Appendix B: Operators and Symbols\n\nThis appendix contains a glossary of Rust’s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.\n\n### Operators\n\nTable B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.\n\n<span class=\"caption\">Table B-1: Operators</span>\n\n| Operator | Example | Explanation | Overloadable? |\n|----------|---------|-------------|---------------|\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion | |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `expr != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow | |\n| `&` | `&type`, `&mut type`, `&'a type`, `&'a mut type` | Borrowed pointer type | |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND | |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | `Deref` |\n| `*` | `*const type`, `*mut type` | Raw pointer | |\n| `+` | `trait + trait`, `'a + trait` | Compound type constraint | |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator | |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, <code>|;...|; -> type</code> | Function and closure return type | |\n| `.` | `expr.ident` | Member access | |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | `PartialOrd` |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | `PartialOrd` |\n| `..` | `..expr` | Struct literal update syntax | |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | “And the rest” pattern binding | |\n| `...` | `expr...expr` | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern | |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints | |\n| `:` | `ident: expr` | Struct field initializer | |\n| `:` | `'a: loop {...}` | Loop label | |\n| `;` | `expr;` | Statement and item terminator | |\n| `;` | `[...; len]` | Part of fixed-size array syntax | |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence | |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax | |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding | |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| <code>|;</code> | <code>pat |; pat</code> | Pattern alternatives | |\n| <code>|;</code> | <code>expr |; expr</code> | Bitwise OR | `BitOr` |\n| <code>|;=</code> | <code>var |;= expr</code> | Bitwise OR and assignment | `BitOrAssign` |\n| <code>|;|;</code> | <code>expr |;|; expr</code> | Short-circuiting logical OR | |\n| `?` | `expr?` | Error propagation | |\n\n### Non-operator Symbols\n\nThe following list contains all symbols that don’t function as operators; that\nis, they don’t behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.\n\n<span class=\"caption\">Table B-2: Stand-Alone Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs an array of bytes instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `'...'` | Character literal |\n| `b'...'` | ASCII byte literal |\n| <code>|;...|; expr</code> | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | “Ignored” pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.\n\n<span class=\"caption\">Table B-3: Path-Related Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path).\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it’s defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type\nparameters.\n\n<span class=\"caption\">Table B-4: Generics</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.\n\n<span class=\"caption\">Table B-5: Trait Bound Constraints</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: 'a` | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static` | Generic type `T` contains no borrowed references other than `'static` ones |\n| `'b: 'a` | Generic lifetime `'b` must outlive lifetime `'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.\n\n<span class=\"caption\">Table B-6: Macros and Attributes</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(…)…` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\n<span class=\"caption\">Table B-7: Comments</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\n<span class=\"caption\">Table B-8: Tuples</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\n<span class=\"caption\">Table B-9: Curly Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\n<span class=\"caption\">Table B-10: Square Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the “index” |\n",
					"qas": [
						{
							"question": "What operator can I use for arithmetic division and assignment?",
							"id": 77,
							"answers": [
								{
									"text": "/=",
									"answer_start": 2619
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the meaning of a '!' operator?",
							"id": 47,
							"answers": [
								{
									"text": "Macro expansion",
									"answer_start": 743
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can I use inner attribute?",
							"id": 133,
							"answers": [
								{
									"text": "#![meta]",
									"answer_start": 8099
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can I mark a numeric literal of 8-bit number?",
							"id": 99,
							"answers": [
								{
									"text": "...u8",
									"answer_start": 4599
								}
							],
							"is_impossible": false
						},
						{
							"question": "What data type is used for size of an array?",
							"id": 102,
							"answers": [
								{
									"text": "...usize",
									"answer_start": 4628
								}
							],
							"is_impossible": false
						},
						{
							"question": "With what operator can I get the member access?",
							"id": 70,
							"answers": [
								{
									"text": ".",
									"answer_start": 2102
								}
							],
							"is_impossible": false
						},
						{
							"question": "What operator means right-inclusive range literal?",
							"id": 72,
							"answers": [
								{
									"text": "`..`",
									"answer_start": 2142
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is '=>'?",
							"id": 89,
							"answers": [
								{
									"text": "Part of match arm syntax",
									"answer_start": 3358
								}
							],
							"is_impossible": false
						},
						{
							"question": "With what operator can I assign?",
							"id": 87,
							"answers": [
								{
									"text": "=",
									"answer_start": 3208
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is 'path<...>' doing?",
							"id": 119,
							"answers": [
								{
									"text": "Specifies parameters to generic type in a type (e.g., `Vec‹u8>`) ",
									"answer_start": 6445
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can we check if something is greater than another value?",
							"id": 90,
							"answers": [
								{
									"text": ">",
									"answer_start": 3390
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Publishing a Crate to Crates.io\n\nWe’ve used packages from [crates.io](https://crates.io/)<!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n[crates.io](https://crates.io/)<!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source.\n\nRust and Cargo have features that make your published package easier for people\nto find and use. We’ll talk about some of these features next and then explain\nhow to publish a package.\n\n### Making Useful Documentation Comments\n\nAccurately documenting your packages will help other users know how and when to\nuse them, so it’s worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, `//`. Rust also has\na particular kind of comment for documentation, known conveniently as a\n*documentation comment*, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to *use* your crate as opposed to how\nyour crate is *implemented*.\n\nDocumentation comments use three slashes, `///`, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they’re documenting. Listing 14-1 shows documentation comments\nfor an `add_one` function in a crate named `my_crate`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 14-1: A documentation comment for a\nfunction</span>\n\nHere, we give a description of what the `add_one` function does, start a\nsection with the heading `Examples`, and then provide code that demonstrates\nhow to use the `add_one` function. We can generate the HTML documentation from\nthis documentation comment by running `cargo doc`. This command runs the\n`rustdoc` tool distributed with Rust and puts the generated HTML documentation\nin the *target/doc* directory.\n\nFor convenience, running `cargo doc --open` will build the HTML for your\ncurrent crate’s documentation (as well as the documentation for all of your\ncrate’s dependencies) and open the result in a web browser. Navigate to the\n`add_one` function and you’ll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:\n\n<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-1: HTML documentation for the `add_one`\nfunction</span>\n\n#### Commonly Used Sections\n\nWe used the `# Examples` Markdown heading in Listing 14-1 to create a section\nin the HTML with the title “Examples.” Here are some other sections that crate\nauthors commonly use in their documentation:\n\n* **Panics**: The scenarios in which the function being documented could\n  panic. Callers of the function who don’t want their programs to panic should\n  make sure they don’t call the function in these situations.\n* **Errors**: If the function returns a `Result`, describing the kinds of\n  errors that might occur and what conditions might cause those errors to be\n  returned can be helpful to callers so they can write code to handle the\n  different kinds of errors in different ways.\n* **Safety**: If the function is `unsafe` to call (we discuss unsafety in\n  Chapter 19), there should be a section explaining why the function is unsafe\n  and covering the invariants that the function expects callers to uphold.\n\nMost documentation comments don’t need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code users will be\ninterested in knowing about.\n\n#### Documentation Comments as Tests\n\nAdding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running `cargo\ntest` will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don’t work because the code has changed since the documentation was\nwritten. If we run `cargo test` with the documentation for the `add_one`\nfunction from Listing 14-1, we will see a section in the test results like this:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->\n\n```text\n   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n```\n\nNow if we change either the function or the example so the `assert_eq!` in the\nexample panics and run `cargo test` again, we’ll see that the doc tests catch\nthat the example and the code are out of sync with each other!\n\n#### Commenting Contained Items\n\nThe style of doc comment `//!` adds documentation to the item that contains the\ncomments rather than to the items following the comments. We typically use\nthese doc comments inside the crate root file (*src/lib.rs* by convention) or\ninside a module to document the crate or the module as a whole.\n\nFor example, to add documentation that describes the purpose of the `my_crate`\ncrate that contains the `add_one` function, we add documentation comments that\nstart with `//!` to the beginning of the *src/lib.rs* file, as shown in Listing\n14-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-02/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-2: Documentation for the `my_crate` crate as a\nwhole</span>\n\nNotice there isn’t any code after the last line that begins with `//!`. Because\nwe started the comments with `//!` instead of `///`, we’re documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, that item is the *src/lib.rs* file, which is the crate root. These\ncomments describe the entire crate.\n\nWhen we run `cargo doc --open`, these comments will display on the front\npage of the documentation for `my_crate` above the list of public items in the\ncrate, as shown in Figure 14-2:\n\n<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-2: Rendered documentation for `my_crate`,\nincluding the comment describing the crate as a whole</span>\n\nDocumentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate’s organization.\n\n### Exporting a Convenient Public API with `pub use`\n\nThe structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy.\n\nIn Chapter 7, we covered how to make items public using the `pub` keyword, and\nbring items into a scope with the `use` keyword. However, the structure that\nmakes sense to you while you’re developing a crate might not be very convenient\nfor your users. You might want to organize your structs in a hierarchy\ncontaining multiple levels, but then people who want to use a type you’ve\ndefined deep in the hierarchy might have trouble finding out that type exists.\nThey might also be annoyed at having to enter `use`\n`my_crate::some_module::another_module::UsefulType;` rather than `use`\n`my_crate::UsefulType;`.\n\nThe good news is that if the structure *isn’t* convenient for others to use\nfrom another library, you don’t have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that’s different\nfrom your private structure by using `pub use`. Re-exporting takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead.\n\nFor example, say we made a library named `art` for modeling artistic concepts.\nWithin this library are two modules: a `kinds` module containing two enums\nnamed `PrimaryColor` and `SecondaryColor` and a `utils` module containing a\nfunction named `mix`, as shown in Listing 14-3:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-03/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-3: An `art` library with items organized into\n`kinds` and `utils` modules</span>\n\nFigure 14-3 shows what the front page of the documentation for this crate\ngenerated by `cargo doc` would look like:\n\n<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-3: Front page of the documentation for `art`\nthat lists the `kinds` and `utils` modules</span>\n\nNote that the `PrimaryColor` and `SecondaryColor` types aren’t listed on the\nfront page, nor is the `mix` function. We have to click `kinds` and `utils` to\nsee them.\n\nAnother crate that depends on this library would need `use` statements that\nbring the items from `art` into scope, specifying the module structure that’s\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n`PrimaryColor` and `mix` items from the `art` crate:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 14-4: A crate using the `art` crate’s items with\nits internal structure exported</span>\n\nThe author of the code in Listing 14-4, which uses the `art` crate, had to\nfigure out that `PrimaryColor` is in the `kinds` module and `mix` is in the\n`utils` module. The module structure of the `art` crate is more relevant to\ndevelopers working on the `art` crate than to those using it. The internal\nstructure doesn’t contain any useful information for someone trying to\nunderstand how to use the `art` crate, but rather causes confusion because\ndevelopers who use it have to figure out where to look, and must specify the\nmodule names in the `use` statements.\n\nTo remove the internal organization from the public API, we can modify the\n`art` crate code in Listing 14-3 to add `pub use` statements to re-export the\nitems at the top level, as shown in Listing 14-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-5: Adding `pub use` statements to re-export\nitems</span>\n\nThe API documentation that `cargo doc` generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n`PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find.\n\n<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-4: The front page of the documentation for `art`\nthat lists the re-exports</span>\n\nThe `art` crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-6: A program using the re-exported items from\nthe `art` crate</span>\n\nIn cases where there are many nested modules, re-exporting the types at the top\nlevel with `pub use` can make a significant difference in the experience of\npeople who use the crate. Another common use of `pub use` is to re-export\ndefinitions of a dependency in the current crate to make that crate's\ndefinitions part of your crate’s public API.\n\nCreating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing `pub\nuse` gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you’ve installed to see if their internal structure\ndiffers from their public API.\n\n### Setting Up a Crates.io Account\n\nBefore you can publish any crates, you need to create an account on\n[crates.io](https://crates.io/)<!-- ignore --> and get an API token. To do so,\nvisit the home page at [crates.io](https://crates.io/)<!-- ignore --> and log\nin via a GitHub account. (The GitHub account is currently a requirement, but\nthe site might support other ways of creating an account in the future.) Once\nyou’re logged in, visit your account settings at\n[https://crates.io/me/](https://crates.io/me/)<!-- ignore --> and retrieve your\nAPI key. Then run the `cargo login` command with your API key, like this:\n\n```console\n$ cargo login abcdefghijklmnopqrstuvwxyz012345\n```\n\nThis command will inform Cargo of your API token and store it locally in\n*~/.cargo/credentials*. Note that this token is a *secret*: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on [crates.io](https://crates.io/)<!-- ignore\n-->.\n\n### Adding Metadata to a New Crate\n\nLet’s say you have a crate you want to publish. Before publishing, you’ll need\nto add some metadata in the `[package]` section of the crate’s *Cargo.toml*\nfile.\n\nYour crate will need a unique name. While you’re working on a crate locally,\nyou can name a crate whatever you’d like. However, crate names on\n[crates.io](https://crates.io/)<!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use. If the name has been used, you will need to find another name and\nedit the `name` field in the *Cargo.toml* file under the `[package]` section to\nuse the new name for publishing, like so:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\n```\n\nEven if you’ve chosen a unique name, when you run `cargo publish` to publish\nthe crate at this point, you’ll get a warning and then an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo publish\ncopy just the relevant lines below\n-->\n\n```console\n$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n```\n\nThis errors because you’re missing some crucial information: a description and\nlicense are required so people will know what your crate does and under what\nterms they can use it. In *Cargo.toml*, add a description that's just a\nsentence or two, because it will appear with your crate in search results. For\nthe `license` field, you need to give a *license identifier value*. The [Linux\nFoundation’s Software Package Data Exchange (SPDX)][spdx] lists the identifiers\nyou can use for this value. For example, to specify that you’ve licensed your\ncrate using the MIT License, add the `MIT` identifier:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nlicense = \"MIT\"\n```\n\nIf you want to use a license that doesn’t appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse `license-file` to specify the name of that file instead of using the\n`license` key.\n\nGuidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby `OR` to have multiple licenses for your project.\n\nWith a unique name, the version, your description, and a license added, the\n*Cargo.toml* file for a project that is ready to publish might look like this:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]\n```\n\n[Cargo’s documentation](https://doc.rust-lang.org/cargo/) describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily.\n\n### Publishing to Crates.io\n\nNow that you’ve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you’re ready to publish!\nPublishing a crate uploads a specific version to\n[crates.io](https://crates.io/)<!-- ignore --> for others to use.\n\nBe careful, because a publish is *permanent*. The version can never be\noverwritten, and the code cannot be deleted. One major goal of\n[crates.io](https://crates.io/)<!-- ignore --> is to act as a permanent archive\nof code so that builds of all projects that depend on crates from\n[crates.io](https://crates.io/)<!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish.\n\nRun the `cargo publish` command again. It should succeed now:\n\n<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->\n\n```console\n$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n```\n\nCongratulations! You’ve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project.\n\n### Publishing a New Version of an Existing Crate\n\nWhen you’ve made changes to your crate and are ready to release a new version,\nyou change the `version` value specified in your *Cargo.toml* file and\nrepublish. Use the [Semantic Versioning rules][semver] to decide what an\nappropriate next version number is based on the kinds of changes you’ve made.\nThen run `cargo publish` to upload the new version.\n\n<!-- Old link, do not remove -->\n<a id=\"removing-versions-from-cratesio-with-cargo-yank\"></a>\n\n### Deprecating Versions from Crates.io with `cargo yank`\n\nAlthough you can’t remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports *yanking* a crate version.\n\nYanking a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue. Essentially, a\nyank means that all projects with a *Cargo.lock* will not break, and any future\n*Cargo.lock* files generated will not use the yanked version.\n\nTo yank a version of a crate, in the directory of the crate that you’ve\npreviously published, run `cargo yank` and specify which version you want to\nyank. For example, if we've published a crate named `guessing_game` version\n1.0.1 and we want to yank it, in the project directory for `guessing_game` we'd\nrun:\n\n<!-- manual-regeneration:\ncargo yank carol-test --version 2.1.0\ncargo yank carol-test --version 2.1.0 --undo\n-->\n\n```console\n$ cargo yank --vers 1.0.1\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n```\n\nBy adding `--undo` to the command, you can also undo a yank and allow projects\nto start depending on a version again:\n\n```console\n$ cargo yank --vers 1.0.1 --undo\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n```\n\nA yank *does not* delete any code. It cannot, for example, delete accidentally\nuploaded secrets. If that happens, you must reset those secrets immediately.\n\n[spdx]: http://spdx.org/licenses/\n[semver]: http://semver.org/\n",
					"qas": [
						{
							"question": "How many versions of crate can be created?",
							"id": 20,
							"answers": [
								{
									"text": "there is\nno limit to the number of crate versions you can publish.",
									"answer_start": 17806
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Separating Modules into Different Files\n\nSo far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.\n\nFor example, let’s start from the code in Listing 7-17 that had multiple\nrestaurant modules. We’ll extract modules into files instead of having all the\nmodules defined in the crate root file. In this case, the crate root file is\n*src/lib.rs*, but this procedure also works with binary crates whose crate root\nfile is *src/main.rs*.\n\nFirst, we’ll extract the `front_of_house` module to its own file. Remove the\ncode inside the curly brackets for the `front_of_house` module, leaving only\nthe `mod front_of_house;` declaration, so that *src/lib.rs* contains the code\nshown in Listing 7-21. Note that this won’t compile until we create the\n*src/front_of_house.rs* file in Listing 7-22.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-21: Declaring the `front_of_house` module whose\nbody will be in *src/front_of_house.rs*</span>\n\nNext, place the code that was in the curly brackets into a new file named\n*src/front_of_house.rs*, as shown in Listing 7-22. The compiler knows to look\nin this file because it came across the module declaration in the crate root\nwith the name `front_of_house`.\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}}\n```\n\n<span class=\"caption\">Listing 7-22: Definitions inside the `front_of_house`\nmodule in *src/front_of_house.rs*</span>\n\nNote that you only need to load a file using a `mod` declaration *once* in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you’ve put the `mod`\nstatement), other files in your project should refer to the loaded file’s code\nusing a path to where it was declared, as covered in the [“Paths for Referring\nto an Item in the Module Tree”][paths]<!-- ignore --> section. In other words,\n`mod` is *not* an “include” operation that you may have seen in other\nprogramming languages.\n\nNext, we’ll extract the `hosting` module to its own file. The process is a bit\ndifferent because `hosting` is a child module of `front_of_house`, not of the\nroot module. We’ll place the file for `hosting` in a new directory that will be\nnamed for its ancestors in the module tree, in this case *src/front_of_house/*.\n\nTo start moving `hosting`, we change *src/front_of_house.rs* to contain only the\ndeclaration of the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}}\n```\n\nThen we create a *src/front_of_house* directory and a file *hosting.rs* to\ncontain the definitions made in the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house/hosting.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}}\n```\n\nIf we instead put *hosting.rs* in the *src* directory, the compiler would\nexpect the *hosting.rs* code to be in a `hosting` module declared in the crate\nroot, and not declared as a child of the `front_of_house` module. The\ncompiler’s rules for which files to check for which modules’ code means the\ndirectories and files more closely match the module tree.\n\n> ### Alternate File Paths\n>\n> So far we’ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path. For a module named\n> `front_of_house` declared in the crate root, the compiler will look for the\n> module’s code in:\n>\n> * *src/front_of_house.rs* (what we covered)\n> * *src/front_of_house/mod.rs* (older style, still supported path)\n>\n> For a module named `hosting` that is a submodule of `front_of_house`, the\n> compiler will look for the module’s code in:\n>\n> * *src/front_of_house/hosting.rs* (what we covered)\n> * *src/front_of_house/hosting/mod.rs* (older style, still supported path)\n>\n> If you use both styles for the same module, you’ll get a compiler error. Using\n> a mix of both styles for different modules in the same project is allowed, but\n> might be confusing for people navigating your project.\n>\n> The main downside to the style that uses files named *mod.rs* is that your\n> project can end up with many files named *mod.rs*, which can get confusing\n> when you have them open in your editor at the same time.\n\nWe’ve moved each module’s code to a separate file, and the module tree remains\nthe same. The function calls in `eat_at_restaurant` will work without any\nmodification, even though the definitions live in different files. This\ntechnique lets you move modules to new files as they grow in size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in\n*src/lib.rs* also hasn’t changed, nor does `use` have any impact on what files\nare compiled as part of the crate. The `mod` keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module.\n\n## Summary\n\nRust lets you split a package into multiple crates and a crate into modules\nso you can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a `use` statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the `pub` keyword.\n\nIn the next chapter, we’ll look at some collection data structures in the\nstandard library that you can use in your neatly organized code.\n\n[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n",
					"qas": [
						{
							"question": "Does rust support older style of file paths?",
							"id": 172,
							"answers": [
								{
									"text": "> So far we’ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path.",
									"answer_start": 3757
								}
							],
							"is_impossible": false
						},
						{
							"question": "How many times I should load a file using a `mod` declaration in my module tree?",
							"id": 170,
							"answers": [
								{
									"text": "Note that you only need to load a file using a `mod` declaration *once* in your\nmodule tree.",
									"answer_start": 1812
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Recoverable Errors with `Result`\n\nMost errors aren’t serious enough to require the program to stop entirely.\nSometimes, when a function fails, it’s for a reason that you can easily\ninterpret and respond to. For example, if you try to open a file and that\noperation fails because the file doesn’t exist, you might want to create the\nfile instead of terminating the process.\n\nRecall from [“Handling Potential Failure with `Result`”][handle_failure]<!--\nignore --> in Chapter 2 that the `Result` enum is defined as having two\nvariants, `Ok` and `Err`, as follows:\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThe `T` and `E` are generic type parameters: we’ll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that `T` represents\nthe type of the value that will be returned in a success case within the `Ok`\nvariant, and `E` represents the type of the error that will be returned in a\nfailure case within the `Err` variant. Because `Result` has these generic type\nparameters, we can use the `Result` type and the functions defined on it in\nmany different situations where the successful value and error value we want to\nreturn may differ.\n\nLet’s call a function that returns a `Result` value because the function could\nfail. In Listing 9-3 we try to open a file.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-3: Opening a file</span>\n\nThe return type of `File::open` is a `Result<T, E>`. The generic parameter `T`\nhas been filled in by the implementation of `File::open` with the type of the\nsuccess value, `std::fs::File`, which is a file handle. The type of `E` used in\nthe error value is `std::io::Error`. This return type means the call to\n`File::open` might succeed and return a file handle that we can read from or\nwrite to. The function call also might fail: for example, the file might not\nexist, or we might not have permission to access the file. The `File::open`\nfunction needs to have a way to tell us whether it succeeded or failed and at\nthe same time give us either the file handle or error information. This\ninformation is exactly what the `Result` enum conveys.\n\nIn the case where `File::open` succeeds, the value in the variable\n`greeting_file_result` will be an instance of `Ok` that contains a file handle.\nIn the case where it fails, the value in `greeting_file_result` will be an\ninstance of `Err` that contains more information about the kind of error that\nhappened.\n\nWe need to add to the code in Listing 9-3 to take different actions depending\non the value `File::open` returns. Listing 9-4 shows one way to handle the\n`Result` using a basic tool, the `match` expression that we discussed in\nChapter 6.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-4: Using a `match` expression to handle the\n`Result` variants that might be returned</span>\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been\nbrought into scope by the prelude, so we don’t need to specify `Result::`\nbefore the `Ok` and `Err` variants in the `match` arms.\n\nWhen the result is `Ok`, this code will return the inner `file` value out of\nthe `Ok` variant, and we then assign that file handle value to the variable\n`greeting_file`. After the `match`, we can use the file handle for reading or\nwriting.\n\nThe other arm of the `match` handles the case where we get an `Err` value from\n`File::open`. In this example, we’ve chosen to call the `panic!` macro. If\nthere’s no file named *hello.txt* in our current directory and we run this\ncode, we’ll see the following output from the `panic!` macro:\n\n```console\n{{#include ../listings/ch09-error-handling/listing-09-04/output.txt}}\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### Matching on Different Errors\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed.\nHowever, we want to take different actions for different failure reasons: if\n`File::open` failed because the file doesn’t exist, we want to create the file\nand return the handle to the new file. If `File::open` failed for any other\nreason—for example, because we didn’t have permission to open the file—we still\nwant the code to `panic!` in the same way as it did in Listing 9-4. For this we\nadd an inner `match` expression, shown in Listing 9-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-5: Handling different kinds of errors in\ndifferent ways</span>\n\nThe type of the value that `File::open` returns inside the `Err` variant is\n`io::Error`, which is a struct provided by the standard library. This struct\nhas a method `kind` that we can call to get an `io::ErrorKind` value. The enum\n`io::ErrorKind` is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an `io`\noperation. The variant we want to use is `ErrorKind::NotFound`, which indicates\nthe file we’re trying to open doesn’t exist yet. So we match on\n`greeting_file_result`, but we also have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned\nby `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is,\nwe try to create the file with `File::create`. However, because `File::create`\ncould also fail, we need a second arm in the inner `match` expression. When the\nfile can’t be created, a different error message is printed. The second arm of\nthe outer `match` stays the same, so the program panics on any error besides\nthe missing file error.\n\n> ### Alternatives to Using `match` with `Result<T, E>`\n>\n> That’s a lot of `match`! The `match` expression is very useful but also very\n> much a primitive. In Chapter 13, you’ll learn about closures, which are used\n> with many of the methods defined on `Result<T, E>`. These methods can be more\n> concise than using `match` when handling `Result<T, E>` values in your code.\n>\n> For example, here’s another way to write the same logic as shown in Listing\n> 9-5, this time using closures and the `unwrap_or_else` method:\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore\n> use std::fs::File;\n> use std::io::ErrorKind;\n>\n> fn main() {\n>     let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| {\n>         if error.kind() == ErrorKind::NotFound {\n>             File::create(\"hello.txt\").unwrap_or_else(|error| {\n>                 panic!(\"Problem creating the file: {:?}\", error);\n>             })\n>         } else {\n>             panic!(\"Problem opening the file: {:?}\", error);\n>         }\n>     });\n> }\n> ```\n>\n> Although this code has the same behavior as Listing 9-5, it doesn’t contain\n> any `match` expressions and is cleaner to read. Come back to this example\n> after you’ve read Chapter 13, and look up the `unwrap_or_else` method in the\n> standard library documentation. Many more of these methods can clean up huge\n> nested `match` expressions when you’re dealing with errors.\n\n### Shortcuts for Panic on Error: `unwrap` and `expect`\n\nUsing `match` works well enough, but it can be a bit verbose and doesn’t always\ncommunicate intent well. The `Result<T, E>` type has many helper methods\ndefined on it to do various, more specific tasks. The `unwrap` method is a\nshortcut method implemented just like the `match` expression we wrote in\nListing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return\nthe value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will\ncall the `panic!` macro for us. Here is an example of `unwrap` in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-04-unwrap/src/main.rs}}\n```\n\nIf we run this code without a *hello.txt* file, we’ll see an error message from\nthe `panic!` call that the `unwrap` method makes:\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-04-unwrap\ncargo run\ncopy and paste relevant text\n-->\n\n```text\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:4:49\n```\n\nSimilarly, the `expect` method lets us also choose the `panic!` error message.\nUsing `expect` instead of `unwrap` and providing good error messages can convey\nyour intent and make tracking down the source of a panic easier. The syntax of\n`expect` looks like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-05-expect/src/main.rs}}\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call\nthe `panic!` macro. The error message used by `expect` in its call to `panic!`\nwill be the parameter that we pass to `expect`, rather than the default\n`panic!` message that `unwrap` uses. Here’s what it looks like:\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-05-expect\ncargo run\ncopy and paste relevant text\n-->\n\n```text\nthread 'main' panicked at 'hello.txt should be included in this project: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:5:10\n```\n\nIn production-quality code, most Rustaceans choose `expect` rather than\n`unwrap` and give more context about why the operation is expected to always\nsucceed. That way, if your assumptions are ever proven wrong, you have more\ninformation to use in debugging.\n\n### Propagating Errors\n\nWhen a function’s implementation calls something that might fail, instead of\nhandling the error within the function itself, you can return the error to the\ncalling code so that it can decide what to do. This is known as *propagating*\nthe error and gives more control to the calling code, where there might be more\ninformation or logic that dictates how the error should be handled than what\nyou have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn’t exist or can’t be read, this function will return those errors\nto the code that called the function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-6: A function that returns errors to the\ncalling code using `match`</span>\n\nThis function can be written in a much shorter way, but we’re going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe’ll show the shorter way. Let’s look at the return type of the function\nfirst: `Result<String, io::Error>`. This means the function is returning a\nvalue of the type `Result<T, E>` where the generic parameter `T` has been\nfilled in with the concrete type `String`, and the generic type `E` has been\nfilled in with the concrete type `io::Error`.\n\nIf this function succeeds without any problems, the code that calls this\nfunction will receive an `Ok` value that holds a `String`—the username that\nthis function read from the file. If this function encounters any problems, the\ncalling code will receive an `Err` value that holds an instance of `io::Error`\nthat contains more information about what the problems were. We chose\n`io::Error` as the return type of this function because that happens to be the\ntype of the error value returned from both of the operations we’re calling in\nthis function’s body that might fail: the `File::open` function and the\n`read_to_string` method.\n\nThe body of the function starts by calling the `File::open` function. Then we\nhandle the `Result` value with a `match` similar to the `match` in Listing 9-4.\nIf `File::open` succeeds, the file handle in the pattern variable `file`\nbecomes the value in the mutable variable `username_file` and the function\ncontinues. In the `Err` case, instead of calling `panic!`, we use the `return`\nkeyword to return early out of the function entirely and pass the error value\nfrom `File::open`, now in the pattern variable `e`, back to the calling code as\nthis function’s error value.\n\nSo if we have a file handle in `username_file`, the function then creates a new\n`String` in variable `username` and calls the `read_to_string` method on\nthe file handle in `username_file` to read the contents of the file into\n`username`. The `read_to_string` method also returns a `Result` because it\nmight fail, even though `File::open` succeeded. So we need another `match` to\nhandle that `Result`: if `read_to_string` succeeds, then our function has\nsucceeded, and we return the username from the file that’s now in `username`\nwrapped in an `Ok`. If `read_to_string` fails, we return the error value in the\nsame way that we returned the error value in the `match` that handled the\nreturn value of `File::open`. However, we don’t need to explicitly say\n`return`, because this is the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value\nthat contains a username or an `Err` value that contains an `io::Error`. It’s\nup to the calling code to decide what to do with those values. If the calling\ncode gets an `Err` value, it could call `panic!` and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don’t have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator `?` to make this easier.\n\n#### A Shortcut for Propagating Errors: the `?` Operator\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the\nsame functionality as in Listing 9-6, but this implementation uses the\n`?` operator.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-7: A function that returns errors to the\ncalling code using the `?` operator</span>\n\nThe `?` placed after a `Result` value is defined to work in almost the same way\nas the `match` expressions we defined to handle the `Result` values in Listing\n9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will\nget returned from this expression, and the program will continue. If the value\nis an `Err`, the `Err` will be returned from the whole function as if we had\nused the `return` keyword so the error value gets propagated to the calling\ncode.\n\nThere is a difference between what the `match` expression from Listing 9-6 does\nand what the `?` operator does: error values that have the `?` operator called\non them go through the `from` function, defined in the `From` trait in the\nstandard library, which is used to convert values from one type into another.\nWhen the `?` operator calls the `from` function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent\nall the ways a function might fail, even if parts might fail for many different\nreasons.\n\nFor example, we could change the `read_username_from_file` function in Listing\n9-7 to return a custom error type named `OurError` that we define. If we also\ndefine `impl From<io::Error> for OurError` to construct an instance of\n`OurError` from an `io::Error`, then the `?` operator calls in the body of\n`read_username_from_file` will call `from` and convert the error types without\nneeding to add any more code to the function.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will\nreturn the value inside an `Ok` to the variable `username_file`. If an error\noccurs, the `?` operator will return early out of the whole function and give\nany `Err` value to the calling code. The same thing applies to the `?` at the\nend of the `read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function’s\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the `?`, as shown in Listing 9-8.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-8: Chaining method calls after the `?`\noperator</span>\n\nWe’ve moved the creation of the new `String` in `username` to the beginning of\nthe function; that part hasn’t changed. Instead of creating a variable\n`username_file`, we’ve chained the call to `read_to_string` directly onto the\nresult of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the\n`read_to_string` call, and we still return an `Ok` value containing `username`\nwhen both `File::open` and `read_to_string` succeed rather than returning\nerrors. The functionality is again the same as in Listing 9-6 and Listing 9-7;\nthis is just a different, more ergonomic way to write it.\n\nListing 9-9 shows a way to make this even shorter using `fs::read_to_string`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-9: Using `fs::read_to_string` instead of\nopening and then reading the file</span>\n\nReading a file into a string is a fairly common operation, so the standard\nlibrary provides the convenient `fs::read_to_string` function that opens the\nfile, creates a new `String`, reads the contents of the file, puts the contents\ninto that `String`, and returns it. Of course, using `fs::read_to_string`\ndoesn’t give us the opportunity to explain all the error handling, so we did it\nthe longer way first.\n\n#### Where The `?` Operator Can Be Used\n\nThe `?` operator can only be used in functions whose return type is compatible\nwith the value the `?` is used on. This is because the `?` operator is defined\nto perform an early return of a value out of the function, in the same manner\nas the `match` expression we defined in Listing 9-6. In Listing 9-6, the\n`match` was using a `Result` value, and the early return arm returned an\n`Err(e)` value. The return type of the function has to be a `Result` so that\nit’s compatible with this `return`.\n\nIn Listing 9-10, let’s look at the error we’ll get if we use the `?` operator\nin a `main` function with a return type incompatible with the type of the value\nwe use `?` on:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-10: Attempting to use the `?` in the `main`\nfunction that returns `()` won’t compile</span>\n\nThis code opens a file, which might fail. The `?` operator follows the `Result`\nvalue returned by `File::open`, but this `main` function has the return type of\n`()`, not `Result`. When we compile this code, we get the following error\nmessage:\n\n```console\n{{#include ../listings/ch09-error-handling/listing-09-10/output.txt}}\n```\n\nThis error points out that we’re only allowed to use the `?` operator in a\nfunction that returns `Result`, `Option`, or another type that implements\n`FromResidual`.\n\nTo fix the error, you have two choices. One choice is to change the return type\nof your function to be compatible with the value you’re using the `?` operator\non as long as you have no restrictions preventing that. The other technique is\nto use a `match` or one of the `Result<T, E>` methods to handle the `Result<T,\nE>` in whatever way is appropriate.\n\nThe error message also mentioned that `?` can be used with `Option<T>` values\nas well. As with using `?` on `Result`, you can only use `?` on `Option` in a\nfunction that returns an `Option`. The behavior of the `?` operator when called\non an `Option<T>` is similar to its behavior when called on a `Result<T, E>`:\nif the value is `None`, the `None` will be returned early from the function at\nthat point. If the value is `Some`, the value inside the `Some` is the\nresulting value of the expression and the function continues. Listing 9-11 has\nan example of a function that finds the last character of the first line in the\ngiven text:\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-11: Using the `?` operator on an `Option<T>`\nvalue</span>\n\nThis function returns `Option<char>` because it’s possible that there is a\ncharacter there, but it’s also possible that there isn’t. This code takes the\n`text` string slice argument and calls the `lines` method on it, which returns\nan iterator over the lines in the string. Because this function wants to\nexamine the first line, it calls `next` on the iterator to get the first value\nfrom the iterator. If `text` is the empty string, this call to `next` will\nreturn `None`, in which case we use `?` to stop and return `None` from\n`last_char_of_first_line`. If `text` is not the empty string, `next` will\nreturn a `Some` value containing a string slice of the first line in `text`.\n\nThe `?` extracts the string slice, and we can call `chars` on that string slice\nto get an iterator of its characters. We’re interested in the last character in\nthis first line, so we call `last` to return the last item in the iterator.\nThis is an `Option` because it’s possible that the first line is the empty\nstring, for example if `text` starts with a blank line but has characters on\nother lines, as in `\"\\nhi\"`. However, if there is a last character on the first\nline, it will be returned in the `Some` variant. The `?` operator in the middle\ngives us a concise way to express this logic, allowing us to implement the\nfunction in one line. If we couldn’t use the `?` operator on `Option`, we’d\nhave to implement this logic using more method calls or a `match` expression.\n\nNote that you can use the `?` operator on a `Result` in a function that returns\n`Result`, and you can use the `?` operator on an `Option` in a function that\nreturns `Option`, but you can’t mix and match. The `?` operator won’t\nautomatically convert a `Result` to an `Option` or vice versa; in those cases,\nyou can use methods like the `ok` method on `Result` or the `ok_or` method on\n`Option` to do the conversion explicitly.\n\nSo far, all the `main` functions we’ve used return `()`. The `main` function is\nspecial because it’s the entry and exit point of executable programs, and there\nare restrictions on what its return type can be for the programs to behave as\nexpected.\n\nLuckily, `main` can also return a `Result<(), E>`. Listing 9-12 has the\ncode from Listing 9-10 but we’ve changed the return type of `main` to be\n`Result<(), Box<dyn Error>>` and added a return value `Ok(())` to the end. This\ncode will now compile:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-12: Changing `main` to return `Result<(), E>`\nallows the use of the `?` operator on `Result` values</span>\n\nThe `Box<dyn Error>` type is a *trait object*, which we’ll talk about in the\n[“Using Trait Objects that Allow for Values of Different\nTypes”][trait-objects]<!-- ignore --> section in Chapter 17. For now, you can\nread `Box<dyn Error>` to mean “any kind of error.” Using `?` on a `Result`\nvalue in a `main` function with the error type `Box<dyn Error>` is allowed,\nbecause it allows any `Err` value to be returned early. Even though the body of\nthis `main` function will only ever return errors of type `std::io::Error`, by\nspecifying `Box<dyn Error>`, this signature will continue to be correct even if\nmore code that returns other errors is added to the body of `main`.\n\nWhen a `main` function returns a `Result<(), E>`, the executable will\nexit with a value of `0` if `main` returns `Ok(())` and will exit with a\nnonzero value if `main` returns an `Err` value. Executables written in C return\nintegers when they exit: programs that exit successfully return the integer\n`0`, and programs that error return some integer other than `0`. Rust also\nreturns integers from executables to be compatible with this convention.\n\nThe `main` function may return any types that implement [the\n`std::process::Termination` trait][termination]<!-- ignore -->, which contains\na function `report` that returns an `ExitCode`. Consult the standard library\ndocumentation for more information on implementing the `Termination` trait for\nyour own types.\n\nNow that we’ve discussed the details of calling `panic!` or returning `Result`,\nlet’s return to the topic of how to decide which is appropriate to use in which\ncases.\n\n[handle_failure]: ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\n[trait-objects]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[termination]: ../std/process/trait.Termination.html\n",
					"qas": [
						{
							"question": "What type 'File::open' returns for Err variant?",
							"id": 2144,
							"answers": [
								{
									"text": "io::Error",
									"answer_start": 4964
								}
							],
							"is_impossible": false
						},
						{
							"question": "What does 'T' mean in generics?",
							"id": 2008,
							"answers": [
								{
									"text": "`T` represents\nthe type of the value that will be returned in a success case within the `Ok`\nvariant,",
									"answer_start": 761
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the purpose of unwrap method of Result?",
							"id": 2149,
							"answers": [
								{
									"text": "If the `Result` value is the `Ok` variant, `unwrap` will return\nthe value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will\ncall the `panic!` macro for us.",
									"answer_start": 7800
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Test Organization\n\nAs mentioned at the start of the chapter, testing is a complex discipline, and\ndifferent people use different terminology and organization. The Rust community\nthinks about tests in terms of two main categories: unit tests and integration\ntests. *Unit tests* are small and more focused, testing one module in isolation\nat a time, and can test private interfaces. *Integration tests* are entirely\nexternal to your library and use your code in the same way any other external\ncode would, using only the public interface and potentially exercising multiple\nmodules per test.\n\nWriting both kinds of tests is important to ensure that the pieces of your\nlibrary are doing what you expect them to, separately and together.\n\n### Unit Tests\n\nThe purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn’t working as\nexpected. You’ll put unit tests in the *src* directory in each file with the\ncode that they’re testing. The convention is to create a module named `tests`\nin each file to contain the test functions and to annotate the module with\n`cfg(test)`.\n\n#### The Tests Module and `#[cfg(test)]`\n\nThe `#[cfg(test)]` annotation on the tests module tells Rust to compile and run\nthe test code only when you run `cargo test`, not when you run `cargo build`.\nThis saves compile time when you only want to build the library and saves space\nin the resulting compiled artifact because the tests are not included. You’ll\nsee that because integration tests go in a different directory, they don’t need\nthe `#[cfg(test)]` annotation. However, because unit tests go in the same files\nas the code, you’ll use `#[cfg(test)]` to specify that they shouldn’t be\nincluded in the compiled result.\n\nRecall that when we generated the new `adder` project in the first section of\nthis chapter, Cargo generated this code for us:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}\n```\n\nThis code is the automatically generated test module. The attribute `cfg`\nstands for *configuration* and tells Rust that the following item should only\nbe included given a certain configuration option. In this case, the\nconfiguration option is `test`, which is provided by Rust for compiling and\nrunning tests. By using the `cfg` attribute, Cargo compiles our test code only\nif we actively run the tests with `cargo test`. This includes any helper\nfunctions that might be within this module, in addition to the functions\nannotated with `#[test]`.\n\n#### Testing Private Functions\n\nThere’s debate within the testing community about whether or not private\nfunctions should be tested directly, and other languages make it difficult or\nimpossible to test private functions. Regardless of which testing ideology you\nadhere to, Rust’s privacy rules do allow you to test private functions.\nConsider the code in Listing 11-12 with the private function `internal_adder`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-12: Testing a private function</span>\n\nNote that the `internal_adder` function is not marked as `pub`. Tests are just\nRust code, and the `tests` module is just another module. As we discussed in\nthe [“Paths for Referring to an Item in the Module Tree”][paths]<!-- ignore -->\nsection, items in child modules can use the items in their ancestor modules. In\nthis test, we bring all of the `test` module’s parent’s items into scope with\n`use super::*`, and then the test can call `internal_adder`. If you don’t think\nprivate functions should be tested, there’s nothing in Rust that will compel\nyou to do so.\n\n### Integration Tests\n\nIn Rust, integration tests are entirely external to your library. They use your\nlibrary in the same way any other code would, which means they can only call\nfunctions that are part of your library’s public API. Their purpose is to test\nwhether many parts of your library work together correctly. Units of code that\nwork correctly on their own could have problems when integrated, so test\ncoverage of the integrated code is important as well. To create integration\ntests, you first need a *tests* directory.\n\n#### The *tests* Directory\n\nWe create a *tests* directory at the top level of our project directory, next\nto *src*. Cargo knows to look for integration test files in this directory. We\ncan then make as many test files as we want, and Cargo will compile each of the\nfiles as an individual crate.\n\nLet’s create an integration test. With the code in Listing 11-12 still in the\n*src/lib.rs* file, make a *tests* directory, and create a new file named\n*tests/integration_test.rs*. Your directory structure should look like this:\n\n```text\nadder\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    └── integration_test.rs\n```\n\nEnter the code in Listing 11-13 into the *tests/integration_test.rs* file:\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-13/tests/integration_test.rs}}\n```\n\n<span class=\"caption\">Listing 11-13: An integration test of a function in the\n`adder` crate</span>\n\nEach file in the `tests` directory is a separate crate, so we need to bring our\nlibrary into each test crate’s scope. For that reason we add `use adder` at the\ntop of the code, which we didn’t need in the unit tests.\n\nWe don’t need to annotate any code in *tests/integration_test.rs* with\n`#[cfg(test)]`. Cargo treats the `tests` directory specially and compiles files\nin this directory only when we run `cargo test`. Run `cargo test` now:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-13/output.txt}}\n```\n\nThe three sections of output include the unit tests, the integration test, and\nthe doc tests. Note that if any test in a section fails, the following sections\nwill not be run. For example, if a unit test fails, there won’t be any output\nfor integration and doc tests because those tests will only be run if all unit\ntests are passing.\n\nThe first section for the unit tests is the same as we’ve been seeing: one line\nfor each unit test (one named `internal` that we added in Listing 11-12) and\nthen a summary line for the unit tests.\n\nThe integration tests section starts with the line `Running\ntests/integration_test.rs`. Next, there is a line for each test function in\nthat integration test and a summary line for the results of the integration\ntest just before the `Doc-tests adder` section starts.\n\nEach integration test file has its own section, so if we add more files in the\n*tests* directory, there will be more integration test sections.\n\nWe can still run a particular integration test function by specifying the test\nfunction’s name as an argument to `cargo test`. To run all the tests in a\nparticular integration test file, use the `--test` argument of `cargo test`\nfollowed by the name of the file:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-05-single-integration/output.txt}}\n```\n\nThis command runs only the tests in the *tests/integration_test.rs* file.\n\n#### Submodules in Integration Tests\n\nAs you add more integration tests, you might want to make more files in the\n*tests* directory to help organize them; for example, you can group the test\nfunctions by the functionality they’re testing. As mentioned earlier, each file\nin the *tests* directory is compiled as its own separate crate, which is useful\nfor creating separate scopes to more closely imitate the way end users will be\nusing your crate. However, this means files in the *tests* directory don’t\nshare the same behavior as files in *src* do, as you learned in Chapter 7\nregarding how to separate code into modules and files.\n\nThe different behavior of *tests* directory files is most noticeable when you\nhave a set of helper functions to use in multiple integration test files and\nyou try to follow the steps in the [“Separating Modules into Different\nFiles”][separating-modules-into-files]<!-- ignore --> section of Chapter 7 to\nextract them into a common module. For example, if we create *tests/common.rs*\nand place a function named `setup` in it, we can add some code to `setup` that\nwe want to call from multiple test functions in multiple test files:\n\n<span class=\"filename\">Filename: tests/common.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/tests/common.rs}}\n```\n\nWhen we run the tests again, we’ll see a new section in the test output for the\n*common.rs* file, even though this file doesn’t contain any test functions nor\ndid we call the `setup` function from anywhere:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/output.txt}}\n```\n\nHaving `common` appear in the test results with `running 0 tests` displayed for\nit is not what we wanted. We just wanted to share some code with the other\nintegration test files.\n\nTo avoid having `common` appear in the test output, instead of creating\n*tests/common.rs*, we’ll create *tests/common/mod.rs*. The project directory\nnow looks like this:\n\n```text\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    ├── common\n    │   └── mod.rs\n    └── integration_test.rs\n```\n\nThis is the older naming convention that Rust also understands that we\nmentioned in the [“Alternate File Paths”][alt-paths]<!-- ignore --> section of\nChapter 7. Naming the file this way tells Rust not to treat the `common` module\nas an integration test file. When we move the `setup` function code into\n*tests/common/mod.rs* and delete the *tests/common.rs* file, the section in the\ntest output will no longer appear. Files in subdirectories of the *tests*\ndirectory don’t get compiled as separate crates or have sections in the test\noutput.\n\nAfter we’ve created *tests/common/mod.rs*, we can use it from any of the\nintegration test files as a module. Here’s an example of calling the `setup`\nfunction from the `it_adds_two` test in *tests/integration_test.rs*:\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-13-fix-shared-test-code-problem/tests/integration_test.rs}}\n```\n\nNote that the `mod common;` declaration is the same as the module declaration\nwe demonstrated in Listing 7-21. Then in the test function, we can call the\n`common::setup()` function.\n\n#### Integration Tests for Binary Crates\n\nIf our project is a binary crate that only contains a *src/main.rs* file and\ndoesn’t have a *src/lib.rs* file, we can’t create integration tests in the\n*tests* directory and bring functions defined in the *src/main.rs* file into\nscope with a `use` statement. Only library crates expose functions that other\ncrates can use; binary crates are meant to be run on their own.\n\nThis is one of the reasons Rust projects that provide a binary have a\nstraightforward *src/main.rs* file that calls logic that lives in the\n*src/lib.rs* file. Using that structure, integration tests *can* test the\nlibrary crate with `use` to make the important functionality available.\nIf the important functionality works, the small amount of code in the\n*src/main.rs* file will work as well, and that small amount of code doesn’t\nneed to be tested.\n\n## Summary\n\nRust’s testing features provide a way to specify how code should function to\nensure it continues to work as you expect, even as you make changes. Unit tests\nexercise different parts of a library separately and can test private\nimplementation details. Integration tests check that many parts of the library\nwork together correctly, and they use the library’s public API to test the code\nin the same way external code will use it. Even though Rust’s type system and\nownership rules help prevent some kinds of bugs, tests are still important to\nreduce logic bugs having to do with how your code is expected to behave.\n\nLet’s combine the knowledge you learned in this chapter and in previous\nchapters to work on a project!\n\n[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[separating-modules-into-files]:\nch07-05-separating-modules-into-different-files.html\n[alt-paths]: ch07-05-separating-modules-into-different-files.html#alternate-file-paths\n",
					"qas": [
						{
							"question": "Is it possible to test private functions?",
							"id": 2171,
							"answers": [
								{
									"text": "Rust’s privacy rules do allow you to test private functions",
									"answer_start": 2885
								}
							],
							"is_impossible": false
						},
						{
							"question": "What are integration tests?",
							"id": 2165,
							"answers": [
								{
									"text": "using only the public interface and potentially exercising multiple\nmodules per test",
									"answer_start": 507
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the naming convention of tests in Rust?",
							"id": 2168,
							"answers": [
								{
									"text": "to create a module named `tests`\nin each file to contain the test functions and to annotate the module with\n`cfg(test)`.",
									"answer_start": 1025
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Appendix A: Keywords\n\nThe following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we’ll discuss in the “[Raw\nIdentifiers][raw-identifiers]<!-- ignore -->” section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes.\n\n[raw-identifiers]: #raw-identifiers\n\n### Keywords Currently in Use\n\nThe following is a list of keywords currently in use, with their functionality\ndescribed.\n\n* `as` - perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` statements\n* `async` -  return a `Future` instead of blocking the current thread\n* `await` - suspend execution until the result of a `Future` is ready\n* `break` - exit a loop immediately\n* `const` - define constant items or constant raw pointers\n* `continue` - continue to the next loop iteration\n* `crate` - in a module path, refers to the crate root\n* `dyn` - dynamic dispatch to a trait object\n* `else` - fallback for `if` and `if let` control flow constructs\n* `enum` - define an enumeration\n* `extern` - link an external function or variable\n* `false` - Boolean false literal\n* `fn` - define a function or the function pointer type\n* `for` - loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime\n* `if` - branch based on the result of a conditional expression\n* `impl` - implement inherent or trait functionality\n* `in` - part of `for` loop syntax\n* `let` - bind a variable\n* `loop` - loop unconditionally\n* `match` - match a value to patterns\n* `mod` - define a module\n* `move` - make a closure take ownership of all its captures\n* `mut` - denote mutability in references, raw pointers, or pattern bindings\n* `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n* `ref` - bind by reference\n* `return` - return from function\n* `Self` - a type alias for the type we are defining or implementing\n* `self` - method subject or current module\n* `static` - global variable or lifetime lasting the entire program execution\n* `struct` - define a structure\n* `super` - parent module of the current module\n* `trait` - define a trait\n* `true` - Boolean true literal\n* `type` - define a type alias or associated type\n* `union` - define a [union][union]<!-- ignore -->; is only a keyword when used\n  in a union declaration\n* `unsafe` - denote unsafe code, functions, traits, or implementations\n* `use` - bring symbols into scope\n* `where` - denote clauses that constrain a type\n* `while` - loop conditionally based on the result of an expression\n\n[union]: ../reference/items/unions.html\n\n### Keywords Reserved for Future Use\n\nThe following keywords do not yet have any functionality but are reserved by\nRust for potential future use.\n\n* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`\n\n### Raw Identifiers\n\n*Raw identifiers* are the syntax that lets you use keywords where they wouldn’t\nnormally be allowed. You use a raw identifier by prefixing a keyword with `r#`.\n\nFor example, `match` is a keyword. If you try to compile the following function\nthat uses `match` as its name:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n```\n\nyou’ll get this error:\n\n```text\nerror: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n```\n\nThe error shows that you can’t use the keyword `match` as the function\nidentifier. To use `match` as a function name, you need to use the raw\nidentifier syntax, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}\n```\n\nThis code will compile without any errors. Note the `r#` prefix on the function\nname in its definition as well as where the function is called in `main`.\n\nRaw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to\nchoose identifier names, as well as lets us integrate with programs written in\na language where these words aren’t keywords. In addition, raw identifiers\nallow you to use libraries written in a different Rust edition than your crate\nuses. For example, `try` isn’t a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that’s written using the 2015 edition and\nhas a `try` function, you’ll need to use the raw identifier syntax, `r#try` in\nthis case, to call that function from your 2018 edition code. See [Appendix\nE][appendix-e]<!-- ignore --> for more information on editions.\n\n[appendix-e]: appendix-05-editions.html\n",
					"qas": [
						{
							"question": "How can I bind a variable?",
							"id": 19,
							"answers": [
								{
									"text": "let",
									"answer_start": 1619
								}
							],
							"is_impossible": false
						},
						{
							"question": "What brings symbols into scope?",
							"id": 39,
							"answers": [
								{
									"text": "use",
									"answer_start": 2576
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the meaning if static?",
							"id": 30,
							"answers": [
								{
									"text": "global variable or lifetime lasting the entire program execution",
									"answer_start": 2143
								}
							],
							"is_impossible": false
						},
						{
							"question": "With what keyword can I refer to a parent module of the current module?",
							"id": 32,
							"answers": [
								{
									"text": "super",
									"answer_start": 2243
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is the meaning of 'await'?",
							"id": 5,
							"answers": [
								{
									"text": "suspend execution until the result of a `Future` is ready",
									"answer_start": 819
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Hello, Cargo!\n\nCargo is Rust’s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n*dependencies*.)\n\nThe simplest Rust programs, like the one we’ve written so far, don’t have any\ndependencies. If we had built the “Hello, world!” project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you’ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do.\n\nBecause the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you’re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n[“Installation”][installation]<!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:\n\n```console\n$ cargo --version\n```\n\nIf you see a version number, you have it! If you see an error, such as `command\nnot found`, look at the documentation for your method of installation to\ndetermine how to install Cargo separately.\n\n### Creating a Project with Cargo\n\nLet’s create a new project using Cargo and look at how it differs from our\noriginal “Hello, world!” project. Navigate back to your *projects* directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:\n\n```console\n$ cargo new hello_cargo\n$ cd hello_cargo\n```\n\nThe first command creates a new directory and project called *hello_cargo*.\nWe’ve named our project *hello_cargo*, and Cargo creates its files in a\ndirectory of the same name.\n\nGo into the *hello_cargo* directory and list the files. You’ll see that Cargo\nhas generated two files and one directory for us: a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside.\n\nIt has also initialized a new Git repository along with a *.gitignore* file.\nGit files won’t be generated if you run `cargo new` within an existing Git\nrepository; you can override this behavior by using `cargo new --vcs=git`.\n\n> Note: Git is a common version control system. You can change `cargo new` to\n> use a different version control system or no version control system by using\n> the `--vcs` flag. Run `cargo new --help` to see the available options.\n\nOpen *Cargo.toml* in your text editor of choice. It should look similar to the\ncode in Listing 1-2.\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\n<span class=\"caption\">Listing 1-2: Contents of *Cargo.toml* generated by `cargo\nnew`</span>\n\nThis file is in the [*TOML*][toml]<!-- ignore --> (*Tom’s Obvious, Minimal\nLanguage*) format, which is Cargo’s configuration format.\n\nThe first line, `[package]`, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we’ll add other sections.\n\nThe next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We’ll talk\nabout the `edition` key in [Appendix E][appendix-e]<!-- ignore -->.\n\nThe last line, `[dependencies]`, is the start of a section for you to list any\nof your project’s dependencies. In Rust, packages of code are referred to as\n*crates*. We won’t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we’ll use this dependencies section then.\n\nNow open *src/main.rs* and take a look:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo has generated a “Hello, world!” program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the *src* directory\nand we have a *Cargo.toml* configuration file in the top directory.\n\nCargo expects your source files to live inside the *src* directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There’s a place for everything, and\neverything is in its place.\n\nIf you started a project that doesn’t use Cargo, as we did with the “Hello,\nworld!” project, you can convert it to a project that does use Cargo. Move the\nproject code into the *src* directory and create an appropriate *Cargo.toml*\nfile.\n\n### Building and Running a Cargo Project\n\nNow let’s look at what’s different when we build and run the “Hello, world!”\nprogram with Cargo! From your *hello_cargo* directory, build your project by\nentering the following command:\n\n```console\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n```\n\nThis command creates an executable file in *target/debug/hello_cargo* (or\n*target\\debug\\hello_cargo.exe* on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named *debug*. You can run the executable with this command:\n\n```console\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n```\n\nIf all goes well, `Hello, world!` should print to the terminal. Running `cargo\nbuild` for the first time also causes Cargo to create a new file at the top\nlevel: *Cargo.lock*. This file keeps track of the exact versions of\ndependencies in your project. This project doesn’t have dependencies, so the\nfile is a bit sparse. You won’t ever need to change this file manually; Cargo\nmanages its contents for you.\n\nWe just built a project with `cargo build` and ran it with\n`./target/debug/hello_cargo`, but we can also use `cargo run` to compile the\ncode and then run the resultant executable all in one command:\n\n```console\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nUsing `cargo run` is more convenient than having to remember to run `cargo\nbuild` and then use the whole path to the binary, so most developers use `cargo\nrun`.\n\nNotice that this time we didn’t see output indicating that Cargo was compiling\n`hello_cargo`. Cargo figured out that the files hadn’t changed, so it didn’t\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:\n\n```console\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nCargo also provides a command called `cargo check`. This command quickly checks\nyour code to make sure it compiles but doesn’t produce an executable:\n\n```console\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n```\n\nWhy would you not want an executable? Often, `cargo check` is much faster than\n`cargo build` because it skips the step of producing an executable. If you’re\ncontinually checking your work while writing the code, using `cargo check` will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run `cargo check` periodically as they write their\nprogram to make sure it compiles. Then they run `cargo build` when they’re\nready to use the executable.\n\nLet’s recap what we’ve learned so far about Cargo:\n\n* We can create a project using `cargo new`.\n* We can build a project using `cargo build`.\n* We can build and run a project in one step using `cargo run`.\n* We can build a project without producing a binary to check for errors using\n  `cargo check`.\n* Instead of saving the result of the build in the same directory as our code,\n  Cargo stores it in the *target/debug* directory.\n\nAn additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you’re working on. So, at this point, we’ll no\nlonger provide specific instructions for Linux and macOS versus Windows.\n\n### Building for Release\n\nWhen your project is finally ready for release, you can use `cargo build\n--release` to compile it with optimizations. This command will create an\nexecutable in *target/release* instead of *target/debug*. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you’ll give to a user that won’t be rebuilt\nrepeatedly and that will run as fast as possible. If you’re benchmarking your\ncode’s running time, be sure to run `cargo build --release` and benchmark with\nthe executable in *target/release*.\n\n### Cargo as Convention\n\nWith simple projects, Cargo doesn’t provide a lot of value over just using\n`rustc`, but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it’s much easier to\nlet Cargo coordinate the build.\n\nEven though the `hello_cargo` project is simple, it now uses much of the real\ntooling you’ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project’s directory, and build:\n\n```console\n$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n```\n\nFor more information about Cargo, check out [its documentation][cargo].\n\n## Summary\n\nYou’re already off to a great start on your Rust journey! In this chapter,\nyou’ve learned how to:\n\n* Install the latest stable version of Rust using `rustup`\n* Update to a newer Rust version\n* Open locally installed documentation\n* Write and run a “Hello, world!” program using `rustc` directly\n* Create and run a new project using the conventions of Cargo\n\nThis is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we’ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2.\n\n[installation]: ch01-01-installation.html#installation\n[toml]: https://toml.io\n[appendix-e]: appendix-05-editions.html\n[cargo]: https://doc.rust-lang.org/cargo/\n",
					"qas": [
						{
							"question": "Is cargo generating new git repository?",
							"id": 260,
							"answers": [
								{
									"text": "It has also initialized a new Git repository along with a *.gitignore* file",
									"answer_start": 2042
								}
							],
							"is_impossible": false
						},
						{
							"question": "Where by default will be executable file created after build?",
							"id": 268,
							"answers": [
								{
									"text": "target/debug/hello_cargo",
									"answer_start": 5242
								}
							],
							"is_impossible": false
						},
						{
							"question": "How do we call libraries that our code is using?",
							"id": 254,
							"answers": [
								{
									"text": "dependencies",
									"answer_start": 325
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can I check if Cargo is installed?",
							"id": 256,
							"answers": [
								{
									"text": "cargo --version",
									"answer_start": 1105
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Running Code on Cleanup with the `Drop` Trait\n\nThe second trait important to the smart pointer pattern is `Drop`, which lets\nyou customize what happens when a value is about to go out of scope. You can\nprovide an implementation for the `Drop` trait on any type, and that code can\nbe used to release resources like files or network connections.\n\nWe’re introducing `Drop` in the context of smart pointers because the\nfunctionality of the `Drop` trait is almost always used when implementing a\nsmart pointer. For example, when a `Box<T>` is dropped it will deallocate the\nspace on the heap that the box points to.\n\nIn some languages, for some types, the programmer must call code to free memory\nor resources every time they finish using an instance of those types. Examples\ninclude file handles, sockets, or locks. If they forget, the system might\nbecome overloaded and crash. In Rust, you can specify that a particular bit of\ncode be run whenever a value goes out of scope, and the compiler will insert\nthis code automatically. As a result, you don’t need to be careful about\nplacing cleanup code everywhere in a program that an instance of a particular\ntype is finished with—you still won’t leak resources!\n\nYou specify the code to run when a value goes out of scope by implementing the\n`Drop` trait. The `Drop` trait requires you to implement one method named\n`drop` that takes a mutable reference to `self`. To see when Rust calls `drop`,\nlet’s implement `drop` with `println!` statements for now.\n\nListing 15-14 shows a `CustomSmartPointer` struct whose only custom\nfunctionality is that it will print `Dropping CustomSmartPointer!` when the\ninstance goes out of scope, to show when Rust runs the `drop` function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-14: A `CustomSmartPointer` struct that\nimplements the `Drop` trait where we would put our cleanup code</span>\n\nThe `Drop` trait is included in the prelude, so we don’t need to bring it into\nscope. We implement the `Drop` trait on `CustomSmartPointer` and provide an\nimplementation for the `drop` method that calls `println!`. The body of the\n`drop` function is where you would place any logic that you wanted to run when\nan instance of your type goes out of scope. We’re printing some text here to\ndemonstrate visually when Rust will call `drop`.\n\nIn `main`, we create two instances of `CustomSmartPointer` and then print\n`CustomSmartPointers created`. At the end of `main`, our instances of\n`CustomSmartPointer` will go out of scope, and Rust will call the code we put\nin the `drop` method, printing our final message. Note that we didn’t need to\ncall the `drop` method explicitly.\n\nWhen we run this program, we’ll see the following output:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-14/output.txt}}\n```\n\nRust automatically called `drop` for us when our instances went out of scope,\ncalling the code we specified. Variables are dropped in the reverse order of\ntheir creation, so `d` was dropped before `c`. This example’s purpose is to\ngive you a visual guide to how the `drop` method works; usually you would\nspecify the cleanup code that your type needs to run rather than a print\nmessage.\n\n### Dropping a Value Early with `std::mem::drop`\n\nUnfortunately, it’s not straightforward to disable the automatic `drop`\nfunctionality. Disabling `drop` isn’t usually necessary; the whole point of the\n`Drop` trait is that it’s taken care of automatically. Occasionally, however,\nyou might want to clean up a value early. One example is when using smart\npointers that manage locks: you might want to force the `drop` method that\nreleases the lock so that other code in the same scope can acquire the lock.\nRust doesn’t let you call the `Drop` trait’s `drop` method manually; instead\nyou have to call the `std::mem::drop` function provided by the standard library\nif you want to force a value to be dropped before the end of its scope.\n\nIf we try to call the `Drop` trait’s `drop` method manually by modifying the\n`main` function from Listing 15-14, as shown in Listing 15-15, we’ll get a\ncompiler error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-15: Attempting to call the `drop` method from\nthe `Drop` trait manually to clean up early</span>\n\nWhen we try to compile this code, we’ll get this error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-15/output.txt}}\n```\n\nThis error message states that we’re not allowed to explicitly call `drop`. The\nerror message uses the term *destructor*, which is the general programming term\nfor a function that cleans up an instance. A *destructor* is analogous to a\n*constructor*, which creates an instance. The `drop` function in Rust is one\nparticular destructor.\n\nRust doesn’t let us call `drop` explicitly because Rust would still\nautomatically call `drop` on the value at the end of `main`. This would cause a\n*double free* error because Rust would be trying to clean up the same value\ntwice.\n\nWe can’t disable the automatic insertion of `drop` when a value goes out of\nscope, and we can’t call the `drop` method explicitly. So, if we need to force\na value to be cleaned up early, we use the `std::mem::drop` function.\n\nThe `std::mem::drop` function is different from the `drop` method in the `Drop`\ntrait. We call it by passing as an argument the value we want to force drop.\nThe function is in the prelude, so we can modify `main` in Listing 15-15 to\ncall the `drop` function, as shown in Listing 15-16:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-16: Calling `std::mem::drop` to explicitly\ndrop a value before it goes out of scope</span>\n\nRunning this code will print the following:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-16/output.txt}}\n```\n\nThe text ```Dropping CustomSmartPointer with data `some data`!``` is printed\nbetween the `CustomSmartPointer created.` and `CustomSmartPointer dropped\nbefore the end of main.` text, showing that the `drop` method code is called to\ndrop `c` at that point.\n\nYou can use code specified in a `Drop` trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator! With the `Drop` trait and Rust’s ownership system, you\ndon’t have to remember to clean up because Rust does it automatically.\n\nYou also don’t have to worry about problems resulting from accidentally\ncleaning up values still in use: the ownership system that makes sure\nreferences are always valid also ensures that `drop` gets called only once when\nthe value is no longer being used.\n\nNow that we’ve examined `Box<T>` and some of the characteristics of smart\npointers, let’s look at a few other smart pointers defined in the standard\nlibrary.\n",
					"qas": [
						{
							"question": "How to force variable deletion?",
							"id": 53,
							"answers": [
								{
									"text": "Rust doesn’t let you call the `Drop` trait’s `drop` method manually; instead\nyou have to call the `std::mem::drop` function provided by the standard library\nif you want to force a value to be dropped before the end of its scope.",
									"answer_start": 3821
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Working with Environment Variables\n\nWe’ll improve `minigrep` by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but by instead making it an\nenvironment variable, we allow our users to set the environment variable once\nand have all their searches be case insensitive in that terminal session.\n\n### Writing a Failing Test for the Case-Insensitive `search` Function\n\nWe first add a new `search_case_insensitive` function that will be called when\nthe environment variable has a value. We’ll continue to follow the TDD process,\nso the first step is again to write a failing test. We’ll add a new test for\nthe new `search_case_insensitive` function and rename our old test from\n`one_result` to `case_sensitive` to clarify the differences between the two\ntests, as shown in Listing 12-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-20/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-20: Adding a new failing test for the\ncase-insensitive function we’re about to add</span>\n\nNote that we’ve edited the old test’s `contents` too. We’ve added a new line\nwith the text `\"Duct tape.\"` using a capital D that shouldn’t match the query\n`\"duct\"` when we’re searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don’t accidentally break the case-sensitive\nsearch functionality that we’ve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search.\n\nThe new test for the case-*insensitive* search uses `\"rUsT\"` as its query. In\nthe `search_case_insensitive` function we’re about to add, the query `\"rUsT\"`\nshould match the line containing `\"Rust:\"` with a capital R and match the line\n`\"Trust me.\"` even though both have different casing from the query. This is\nour failing test, and it will fail to compile because we haven’t yet defined\nthe `search_case_insensitive` function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the `search` function in Listing 12-16 to see the test compile and fail.\n\n### Implementing the `search_case_insensitive` Function\n\nThe `search_case_insensitive` function, shown in Listing 12-21, will be almost\nthe same as the `search` function. The only difference is that we’ll lowercase\nthe `query` and each `line` so whatever the case of the input arguments,\nthey’ll be the same case when we check whether the line contains the query.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-21/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-21: Defining the `search_case_insensitive`\nfunction to lowercase the query and the line before comparing them</span>\n\nFirst, we lowercase the `query` string and store it in a shadowed variable with\nthe same name. Calling `to_lowercase` on the query is necessary so no\nmatter whether the user’s query is `\"rust\"`, `\"RUST\"`, `\"Rust\"`, or `\"rUsT\"`,\nwe’ll treat the query as if it were `\"rust\"` and be insensitive to the case.\nWhile `to_lowercase` will handle basic Unicode, it won’t be 100% accurate. If\nwe were writing a real application, we’d want to do a bit more work here, but\nthis section is about environment variables, not Unicode, so we’ll leave it at\nthat here.\n\nNote that `query` is now a `String` rather than a string slice, because calling\n`to_lowercase` creates new data rather than referencing existing data. Say the\nquery is `\"rUsT\"`, as an example: that string slice doesn’t contain a lowercase\n`u` or `t` for us to use, so we have to allocate a new `String` containing\n`\"rust\"`. When we pass `query` as an argument to the `contains` method now, we\nneed to add an ampersand because the signature of `contains` is defined to take\na string slice.\n\nNext, we add a call to `to_lowercase` on each `line` to lowercase all\ncharacters. Now that we’ve converted `line` and `query` to lowercase, we’ll\nfind matches no matter what the case of the query is.\n\nLet’s see if this implementation passes the tests:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-21/output.txt}}\n```\n\nGreat! They passed. Now, let’s call the new `search_case_insensitive` function\nfrom the `run` function. First, we’ll add a configuration option to the\n`Config` struct to switch between case-sensitive and case-insensitive search.\nAdding this field will cause compiler errors because we aren’t initializing\nthis field anywhere yet:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:here}}\n```\n\nWe added the `ignore_case` field that holds a Boolean. Next, we need the `run`\nfunction to check the `ignore_case` field’s value and use that to decide\nwhether to call the `search` function or the `search_case_insensitive`\nfunction, as shown in Listing 12-22. This still won’t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:there}}\n```\n\n<span class=\"caption\">Listing 12-22: Calling either `search` or\n`search_case_insensitive` based on the value in `config.ignore_case`</span>\n\nFinally, we need to check for the environment variable. The functions for\nworking with environment variables are in the `env` module in the standard\nlibrary, so we bring that module into scope at the top of *src/lib.rs*. Then\nwe’ll use the `var` function from the `env` module to check to see if any value\nhas been set for an environment variable named `IGNORE_CASE`, as shown in\nListing 12-23.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-23/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-23: Checking for any value in an environment\nvariable named `IGNORE_CASE`</span>\n\nHere, we create a new variable `ignore_case`. To set its value, we call the\n`env::var` function and pass it the name of the `IGNORE_CASE` environment\nvariable. The `env::var` function returns a `Result` that will be the\nsuccessful `Ok` variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the `Err` variant\nif the environment variable is not set.\n\nWe’re using the `is_ok` method on the `Result` to check whether the environment\nvariable is set, which means the program should do a case-insensitive search.\nIf the `IGNORE_CASE` environment variable isn’t set to anything, `is_ok` will\nreturn false and the program will perform a case-sensitive search. We don’t\ncare about the *value* of the environment variable, just whether it’s set or\nunset, so we’re checking `is_ok` rather than using `unwrap`, `expect`, or any\nof the other methods we’ve seen on `Result`.\n\nWe pass the value in the `ignore_case` variable to the `Config` instance so the\n`run` function can read that value and decide whether to call\n`search_case_insensitive` or `search`, as we implemented in Listing 12-22.\n\nLet’s give it a try! First, we’ll run our program without the environment\nvariable set and with the query `to`, which should match any line that contains\nthe word “to” in all lowercase:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-23/output.txt}}\n```\n\nLooks like that still works! Now, let’s run the program with `IGNORE_CASE`\nset to `1` but with the same query `to`.\n\n```console\n$ IGNORE_CASE=1 cargo run -- to poem.txt\n```\n\nIf you’re using PowerShell, you will need to set the environment variable and\nrun the program as separate commands:\n\n```console\nPS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt\n```\n\nThis will make `IGNORE_CASE` persist for the remainder of your shell\nsession. It can be unset with the `Remove-Item` cmdlet:\n\n```console\nPS> Remove-Item Env:IGNORE_CASE\n```\n\nWe should get lines that contain “to” that might have uppercase letters:\n\n<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nIGNORE_CASE=1 cargo run -- to poem.txt\ncan't extract because of the environment variable\n-->\n\n```console\nAre you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n```\n\nExcellent, we also got lines containing “To”! Our `minigrep` program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables.\n\nSome programs allow arguments *and* environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case sensitivity\nthrough either a command line argument or an environment variable. Decide\nwhether the command line argument or the environment variable should take\nprecedence if the program is run with one set to case sensitive and one set to\nignore case.\n\nThe `std::env` module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available.\n",
					"qas": [
						{
							"question": "How to set up a environment variable in Powershell?",
							"id": 2205,
							"answers": [
								{
									"text": "```console\nPS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt\n```",
									"answer_start": 7890
								}
							],
							"is_impossible": false
						},
						{
							"question": "How to set up an environment variable?",
							"id": 2202,
							"answers": [
								{
									"text": "`env::var` function and pass it the name of the `IGNORE_CASE` environment\nvariable.",
									"answer_start": 6253
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "# Error Handling\n\nErrors are a fact of life in software, so Rust has a number of features for\nhandling situations in which something goes wrong. In many cases, Rust requires\nyou to acknowledge the possibility of an error and take some action before your\ncode will compile. This requirement makes your program more robust by ensuring\nthat you’ll discover errors and handle them appropriately before you’ve\ndeployed your code to production!\n\nRust groups errors into two major categories: *recoverable* and *unrecoverable*\nerrors. For a recoverable error, such as a *file not found* error, we most\nlikely just want to report the problem to the user and retry the operation.\nUnrecoverable errors are always symptoms of bugs, like trying to access a\nlocation beyond the end of an array, and so we want to immediately stop the\nprogram.\n\nMost languages don’t distinguish between these two kinds of errors and handle\nboth in the same way, using mechanisms such as exceptions. Rust doesn’t have\nexceptions. Instead, it has the type `Result<T, E>` for recoverable errors and\nthe `panic!` macro that stops execution when the program encounters an\nunrecoverable error. This chapter covers calling `panic!` first and then talks\nabout returning `Result<T, E>` values. Additionally, we’ll explore\nconsiderations when deciding whether to try to recover from an error or to stop\nexecution.\n",
					"qas": [
						{
							"question": "How does 'panic!' macro work?",
							"id": 2187,
							"answers": [
								{
									"text": "stops execution when the program encounters an\nunrecoverable error",
									"answer_start": 1089
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Refactoring to Improve Modularity and Error Handling\n\nTo improve our program, we’ll fix four problems that have to do with the\nprogram’s structure and how it’s handling potential errors. First, our `main`\nfunction now performs two tasks: it parses arguments and reads files. As our\nprogram grows, the number of separate tasks the `main` function handles will\nincrease. As a function gains responsibilities, it becomes more difficult to\nreason about, harder to test, and harder to change without breaking one of its\nparts. It’s best to separate functionality so each function is responsible for\none task.\n\nThis issue also ties into the second problem: although `query` and `file_path`\nare configuration variables to our program, variables like `contents` are used\nto perform the program’s logic. The longer `main` becomes, the more variables\nwe’ll need to bring into scope; the more variables we have in scope, the harder\nit will be to keep track of the purpose of each. It’s best to group the\nconfiguration variables into one structure to make their purpose clear.\n\nThe third problem is that we’ve used `expect` to print an error message when\nreading the file fails, but the error message just prints `Should have been\nable to read the file`. Reading a file can fail in a number of ways: for\nexample, the file could be missing, or we might not have permission to open it.\nRight now, regardless of the situation, we’d print the same error message for\neverything, which wouldn’t give the user any information!\n\nFourth, we use `expect` repeatedly to handle different errors, and if the user\nruns our program without specifying enough arguments, they’ll get an `index out\nof bounds` error from Rust that doesn’t clearly explain the problem. It would\nbe best if all the error-handling code were in one place so future maintainers\nhad only one place to consult the code if the error-handling logic needed to\nchange. Having all the error-handling code in one place will also ensure that\nwe’re printing messages that will be meaningful to our end users.\n\nLet’s address these four problems by refactoring our project.\n\n### Separation of Concerns for Binary Projects\n\nThe organizational problem of allocating responsibility for multiple tasks to\nthe `main` function is common to many binary projects. As a result, the Rust\ncommunity has developed guidelines for splitting the separate concerns of a\nbinary program when `main` starts getting large. This process has the following\nsteps:\n\n* Split your program into a *main.rs* and a *lib.rs* and move your program’s\n  logic to *lib.rs*.\n* As long as your command line parsing logic is small, it can remain in\n  *main.rs*.\n* When the command line parsing logic starts getting complicated, extract it\n  from *main.rs* and move it to *lib.rs*.\n\nThe responsibilities that remain in the `main` function after this process\nshould be limited to the following:\n\n* Calling the command line parsing logic with the argument values\n* Setting up any other configuration\n* Calling a `run` function in *lib.rs*\n* Handling the error if `run` returns an error\n\nThis pattern is about separating concerns: *main.rs* handles running the\nprogram, and *lib.rs* handles all the logic of the task at hand. Because you\ncan’t test the `main` function directly, this structure lets you test all of\nyour program’s logic by moving it into functions in *lib.rs*. The code that\nremains in *main.rs* will be small enough to verify its correctness by reading\nit. Let’s rework our program by following this process.\n\n#### Extracting the Argument Parser\n\nWe’ll extract the functionality for parsing arguments into a function that\n`main` will call to prepare for moving the command line parsing logic to\n*src/lib.rs*. Listing 12-5 shows the new start of `main` that calls a new\nfunction `parse_config`, which we’ll define in *src/main.rs* for the moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-5: Extracting a `parse_config` function from\n`main`</span>\n\nWe’re still collecting the command line arguments into a vector, but instead of\nassigning the argument value at index 1 to the variable `query` and the\nargument value at index 2 to the variable `file_path` within the `main`\nfunction, we pass the whole vector to the `parse_config` function. The\n`parse_config` function then holds the logic that determines which argument\ngoes in which variable and passes the values back to `main`. We still create\nthe `query` and `file_path` variables in `main`, but `main` no longer has the\nresponsibility of determining how the command line arguments and variables\ncorrespond.\n\nThis rework may seem like overkill for our small program, but we’re refactoring\nin small, incremental steps. After making this change, run the program again to\nverify that the argument parsing still works. It’s good to check your progress\noften, to help identify the cause of problems when they occur.\n\n#### Grouping Configuration Values\n\nWe can take another small step to improve the `parse_config` function further.\nAt the moment, we’re returning a tuple, but then we immediately break that\ntuple into individual parts again. This is a sign that perhaps we don’t have\nthe right abstraction yet.\n\nAnother indicator that shows there’s room for improvement is the `config` part\nof `parse_config`, which implies that the two values we return are related and\nare both part of one configuration value. We’re not currently conveying this\nmeaning in the structure of the data other than by grouping the two values into\na tuple; we’ll instead put the two values into one struct and give each of the\nstruct fields a meaningful name. Doing so will make it easier for future\nmaintainers of this code to understand how the different values relate to each\nother and what their purpose is.\n\nListing 12-6 shows the improvements to the `parse_config` function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-6: Refactoring `parse_config` to return an\ninstance of a `Config` struct</span>\n\nWe’ve added a struct named `Config` defined to have fields named `query` and\n`file_path`. The signature of `parse_config` now indicates that it returns a\n`Config` value. In the body of `parse_config`, where we used to return\nstring slices that reference `String` values in `args`, we now define `Config`\nto contain owned `String` values. The `args` variable in `main` is the owner of\nthe argument values and is only letting the `parse_config` function borrow\nthem, which means we’d violate Rust’s borrowing rules if `Config` tried to take\nownership of the values in `args`.\n\nThere are a number of ways we could manage the `String` data; the easiest,\nthough somewhat inefficient, route is to call the `clone` method on the values.\nThis will make a full copy of the data for the `Config` instance to own, which\ntakes more time and memory than storing a reference to the string data.\nHowever, cloning the data also makes our code very straightforward because we\ndon’t have to manage the lifetimes of the references; in this circumstance,\ngiving up a little performance to gain simplicity is a worthwhile trade-off.\n\n> ### The Trade-Offs of Using `clone`\n>\n> There’s a tendency among many Rustaceans to avoid using `clone` to fix\n> ownership problems because of its runtime cost. In\n> [Chapter 13][ch13]<!-- ignore -->, you’ll learn how to use more efficient\n> methods in this type of situation. But for now, it’s okay to copy a few\n> strings to continue making progress because you’ll make these copies only\n> once and your file path and query string are very small. It’s better to have\n> a working program that’s a bit inefficient than to try to hyperoptimize code\n> on your first pass. As you become more experienced with Rust, it’ll be\n> easier to start with the most efficient solution, but for now, it’s\n> perfectly acceptable to call `clone`.\n\nWe’ve updated `main` so it places the instance of `Config` returned by\n`parse_config` into a variable named `config`, and we updated the code that\npreviously used the separate `query` and `file_path` variables so it now uses\nthe fields on the `Config` struct instead.\n\nNow our code more clearly conveys that `query` and `file_path` are related and\nthat their purpose is to configure how the program will work. Any code that\nuses these values knows to find them in the `config` instance in the fields\nnamed for their purpose.\n\n#### Creating a Constructor for `Config`\n\nSo far, we’ve extracted the logic responsible for parsing the command line\narguments from `main` and placed it in the `parse_config` function. Doing so\nhelped us to see that the `query` and `file_path` values were related and that\nrelationship should be conveyed in our code. We then added a `Config` struct to\nname the related purpose of `query` and `file_path` and to be able to return the\nvalues’ names as struct field names from the `parse_config` function.\n\nSo now that the purpose of the `parse_config` function is to create a `Config`\ninstance, we can change `parse_config` from a plain function to a function\nnamed `new` that is associated with the `Config` struct. Making this change\nwill make the code more idiomatic. We can create instances of types in the\nstandard library, such as `String`, by calling `String::new`. Similarly, by\nchanging `parse_config` into a `new` function associated with `Config`, we’ll\nbe able to create instances of `Config` by calling `Config::new`. Listing 12-7\nshows the changes we need to make.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-7: Changing `parse_config` into\n`Config::new`</span>\n\nWe’ve updated `main` where we were calling `parse_config` to instead call\n`Config::new`. We’ve changed the name of `parse_config` to `new` and moved it\nwithin an `impl` block, which associates the `new` function with `Config`. Try\ncompiling this code again to make sure it works.\n\n### Fixing the Error Handling\n\nNow we’ll work on fixing our error handling. Recall that attempting to access\nthe values in the `args` vector at index 1 or index 2 will cause the program to\npanic if the vector contains fewer than three items. Try running the program\nwithout any arguments; it will look like this:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-07/output.txt}}\n```\n\nThe line `index out of bounds: the len is 1 but the index is 1` is an error\nmessage intended for programmers. It won’t help our end users understand what\nthey should do instead. Let’s fix that now.\n\n#### Improving the Error Message\n\nIn Listing 12-8, we add a check in the `new` function that will verify that the\nslice is long enough before accessing index 1 and 2. If the slice isn’t long\nenough, the program panics and displays a better error message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-8: Adding a check for the number of\narguments</span>\n\nThis code is similar to [the `Guess::new` function we wrote in Listing\n9-13][ch9-custom-types]<!-- ignore -->, where we called `panic!` when the\n`value` argument was out of the range of valid values. Instead of checking for\na range of values here, we’re checking that the length of `args` is at least 3\nand the rest of the function can operate under the assumption that this\ncondition has been met. If `args` has fewer than three items, this condition\nwill be true, and we call the `panic!` macro to end the program immediately.\n\nWith these extra few lines of code in `new`, let’s run the program without any\narguments again to see what the error looks like now:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-08/output.txt}}\n```\n\nThis output is better: we now have a reasonable error message. However, we also\nhave extraneous information we don’t want to give to our users. Perhaps using\nthe technique we used in Listing 9-13 isn’t the best to use here: a call to\n`panic!` is more appropriate for a programming problem than a usage problem,\n[as discussed in Chapter 9][ch9-error-guidelines]<!-- ignore -->. Instead,\nwe’ll use the other technique you learned about in Chapter 9—[returning a\n`Result`][ch9-result]<!-- ignore --> that indicates either success or an error.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"returning-a-result-from-new-instead-of-calling-panic\"></a>\n\n#### Returning a `Result` Instead of Calling `panic!`\n\nWe can instead return a `Result` value that will contain a `Config` instance in\nthe successful case and will describe the problem in the error case. We’re also\ngoing to change the function name from `new` to `build` because many\nprogrammers expect `new` functions to never fail. When `Config::build` is\ncommunicating to `main`, we can use the `Result` type to signal there was a\nproblem. Then we can change `main` to convert an `Err` variant into a more\npractical error for our users without the surrounding text about `thread\n'main'` and `RUST_BACKTRACE` that a call to `panic!` causes.\n\nListing 12-9 shows the changes we need to make to the return value of the\nfunction we’re now calling `Config::build` and the body of the function needed\nto return a `Result`. Note that this won’t compile until we update `main` as\nwell, which we’ll do in the next listing.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-9: Returning a `Result` from\n`Config::build`</span>\n\nOur `build` function returns a `Result` with a `Config` instance in the success\ncase and a `&'static str` in the error case. Our error values will always be\nstring literals that have the `'static` lifetime.\n\nWe’ve made two changes in the body of the function: instead of calling `panic!`\nwhen the user doesn’t pass enough arguments, we now return an `Err` value, and\nwe’ve wrapped the `Config` return value in an `Ok`. These changes make the\nfunction conform to its new type signature.\n\nReturning an `Err` value from `Config::build` allows the `main` function to\nhandle the `Result` value returned from the `build` function and exit the\nprocess more cleanly in the error case.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"calling-confignew-and-handling-errors\"></a>\n\n#### Calling `Config::build` and Handling Errors\n\nTo handle the error case and print a user-friendly message, we need to update\n`main` to handle the `Result` being returned by `Config::build`, as shown in\nListing 12-10. We’ll also take the responsibility of exiting the command line\ntool with a nonzero error code away from `panic!` and instead implement it by\nhand. A nonzero exit status is a convention to signal to the process that\ncalled our program that the program exited with an error state.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-10: Exiting with an error code if building a\n`Config` fails</span>\n\nIn this listing, we’ve used a method we haven’t covered in detail yet:\n`unwrap_or_else`, which is defined on `Result<T, E>` by the standard library.\nUsing `unwrap_or_else` allows us to define some custom, non-`panic!` error\nhandling. If the `Result` is an `Ok` value, this method’s behavior is similar\nto `unwrap`: it returns the inner value `Ok` is wrapping. However, if the value\nis an `Err` value, this method calls the code in the *closure*, which is an\nanonymous function we define and pass as an argument to `unwrap_or_else`. We’ll\ncover closures in more detail in [Chapter 13][ch13]<!-- ignore -->. For now,\nyou just need to know that `unwrap_or_else` will pass the inner value of the\n`Err`, which in this case is the static string `\"not enough arguments\"` that we\nadded in Listing 12-9, to our closure in the argument `err` that appears\nbetween the vertical pipes. The code in the closure can then use the `err`\nvalue when it runs.\n\nWe’ve added a new `use` line to bring `process` from the standard library into\nscope. The code in the closure that will be run in the error case is only two\nlines: we print the `err` value and then call `process::exit`. The\n`process::exit` function will stop the program immediately and return the\nnumber that was passed as the exit status code. This is similar to the\n`panic!`-based handling we used in Listing 12-8, but we no longer get all the\nextra output. Let’s try it:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-10/output.txt}}\n```\n\nGreat! This output is much friendlier for our users.\n\n### Extracting Logic from `main`\n\nNow that we’ve finished refactoring the configuration parsing, let’s turn to\nthe program’s logic. As we stated in [“Separation of Concerns for Binary\nProjects”](#separation-of-concerns-for-binary-projects)<!-- ignore -->, we’ll\nextract a function named `run` that will hold all the logic currently in the\n`main` function that isn’t involved with setting up configuration or handling\nerrors. When we’re done, `main` will be concise and easy to verify by\ninspection, and we’ll be able to write tests for all the other logic.\n\nListing 12-11 shows the extracted `run` function. For now, we’re just making\nthe small, incremental improvement of extracting the function. We’re still\ndefining the function in *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-11: Extracting a `run` function containing the\nrest of the program logic</span>\n\nThe `run` function now contains all the remaining logic from `main`, starting\nfrom reading the file. The `run` function takes the `Config` instance as an\nargument.\n\n#### Returning Errors from the `run` Function\n\nWith the remaining program logic separated into the `run` function, we can\nimprove the error handling, as we did with `Config::build` in Listing 12-9.\nInstead of allowing the program to panic by calling `expect`, the `run`\nfunction will return a `Result<T, E>` when something goes wrong. This will let\nus further consolidate the logic around handling errors into `main` in a\nuser-friendly way. Listing 12-12 shows the changes we need to make to the\nsignature and body of `run`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-12: Changing the `run` function to return\n`Result`</span>\n\nWe’ve made three significant changes here. First, we changed the return type of\nthe `run` function to `Result<(), Box<dyn Error>>`. This function previously\nreturned the unit type, `()`, and we keep that as the value returned in the\n`Ok` case.\n\nFor the error type, we used the *trait object* `Box<dyn Error>` (and we’ve\nbrought `std::error::Error` into scope with a `use` statement at the top).\nWe’ll cover trait objects in [Chapter 17][ch17]<!-- ignore -->. For now, just\nknow that `Box<dyn Error>` means the function will return a type that\nimplements the `Error` trait, but we don’t have to specify what particular type\nthe return value will be. This gives us flexibility to return error values that\nmay be of different types in different error cases. The `dyn` keyword is short\nfor “dynamic.”\n\nSecond, we’ve removed the call to `expect` in favor of the `?` operator, as we\ntalked about in [Chapter 9][ch9-question-mark]<!-- ignore -->. Rather than\n`panic!` on an error, `?` will return the error value from the current function\nfor the caller to handle.\n\nThird, the `run` function now returns an `Ok` value in the success case.\nWe’ve declared the `run` function’s success type as `()` in the signature,\nwhich means we need to wrap the unit type value in the `Ok` value. This\n`Ok(())` syntax might look a bit strange at first, but using `()` like this is\nthe idiomatic way to indicate that we’re calling `run` for its side effects\nonly; it doesn’t return a value we need.\n\nWhen you run this code, it will compile but will display a warning:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-12/output.txt}}\n```\n\nRust tells us that our code ignored the `Result` value and the `Result` value\nmight indicate that an error occurred. But we’re not checking to see whether or\nnot there was an error, and the compiler reminds us that we probably meant to\nhave some error-handling code here! Let’s rectify that problem now.\n\n#### Handling Errors Returned from `run` in `main`\n\nWe’ll check for errors and handle them using a technique similar to one we used\nwith `Config::build` in Listing 12-10, but with a slight difference:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-01-handling-errors-in-main/src/main.rs:here}}\n```\n\nWe use `if let` rather than `unwrap_or_else` to check whether `run` returns an\n`Err` value and call `process::exit(1)` if it does. The `run` function doesn’t\nreturn a value that we want to `unwrap` in the same way that `Config::build`\nreturns the `Config` instance. Because `run` returns `()` in the success case,\nwe only care about detecting an error, so we don’t need `unwrap_or_else` to\nreturn the unwrapped value, which would only be `()`.\n\nThe bodies of the `if let` and the `unwrap_or_else` functions are the same in\nboth cases: we print the error and exit.\n\n### Splitting Code into a Library Crate\n\nOur `minigrep` project is looking good so far! Now we’ll split the\n*src/main.rs* file and put some code into the *src/lib.rs* file. That way we\ncan test the code and have a *src/main.rs* file with fewer responsibilities.\n\nLet’s move all the code that isn’t the `main` function from *src/main.rs* to\n*src/lib.rs*:\n\n* The `run` function definition\n* The relevant `use` statements\n* The definition of `Config`\n* The `Config::build` function definition\n\nThe contents of *src/lib.rs* should have the signatures shown in Listing 12-13\n(we’ve omitted the bodies of the functions for brevity). Note that this won’t\ncompile until we modify *src/main.rs* in Listing 12-14.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-13: Moving `Config` and `run` into\n*src/lib.rs*</span>\n\nWe’ve made liberal use of the `pub` keyword: on `Config`, on its fields and its\n`build` method, and on the `run` function. We now have a library crate that has\na public API we can test!\n\nNow we need to bring the code we moved to *src/lib.rs* into the scope of the\nbinary crate in *src/main.rs*, as shown in Listing 12-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-14: Using the `minigrep` library crate in\n*src/main.rs*</span>\n\nWe add a `use minigrep::Config` line to bring the `Config` type from the\nlibrary crate into the binary crate’s scope, and we prefix the `run` function\nwith our crate name. Now all the functionality should be connected and should\nwork. Run the program with `cargo run` and make sure everything works\ncorrectly.\n\nWhew! That was a lot of work, but we’ve set ourselves up for success in the\nfuture. Now it’s much easier to handle errors, and we’ve made the code more\nmodular. Almost all of our work will be done in *src/lib.rs* from here on out.\n\nLet’s take advantage of this newfound modularity by doing something that would\nhave been difficult with the old code but is easy with the new code: we’ll\nwrite some tests!\n\n[ch13]: ch13-00-functional-features.html\n[ch9-custom-types]: ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation\n[ch9-error-guidelines]: ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling\n[ch9-result]: ch09-02-recoverable-errors-with-result.html\n[ch17]: ch17-00-oop.html\n[ch9-question-mark]: ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n",
					"qas": [
						{
							"question": "Are there any guidelines how to split program properly?",
							"id": 2175,
							"answers": [
								{
									"text": "Split your program into a *main.rs* and a *lib.rs* and move your program’s\n  logic to *lib.rs*.\n* As long as your command line parsing logic is small, it can remain in\n  *main.rs*.\n* When the command line parsing logic starts getting complicated, extract it\n  from *main.rs* and move it to *lib.rs*.",
									"answer_start": 2482
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Data Types\n\nEvery value in Rust is of a certain *data type*, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We’ll look at\ntwo data type subsets: scalar and compound.\n\nKeep in mind that Rust is a *statically typed* language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a `String` to a numeric\ntype using `parse` in the [“Comparing the Guess to the Secret\nNumber”][comparing-the-guess-to-the-secret-number]<!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don’t add the `: u32` type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/output-only-01-no-type-annotations/output.txt}}\n```\n\nYou’ll see different type annotations for other data types.\n\n### Scalar Types\n\nA *scalar* type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let’s jump into how they work in Rust.\n\n#### Integer Types\n\nAn *integer* is a number without a fractional component. We used one integer\ntype in Chapter 2, the `u32` type. This type declaration indicates that the\nvalue it’s associated with should be an unsigned integer (signed integer types\nstart with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value.\n\n<span class=\"caption\">Table 3-1: Integer Types in Rust</span>\n\n| Length  | Signed  | Unsigned |\n|---------|---------|----------|\n| 8-bit   | `i8`    | `u8`     |\n| 16-bit  | `i16`   | `u16`    |\n| 32-bit  | `i32`   | `u32`    |\n| 64-bit  | `i64`   | `u64`    |\n| 128-bit | `i128`  | `u128`   |\n| arch    | `isize` | `usize`  |\n\nEach variant can be either signed or unsigned and has an explicit size.\n*Signed* and *unsigned* refer to whether it’s possible for the number to be\nnegative—in other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It’s like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it’s safe to assume the number is positive, it’s shown with no sign.\nSigned numbers are stored using [two’s complement][twos-complement]<!-- ignore\n--> representation.\n\nEach signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where *n* is the number of bits that variant uses. So an\n`i8` can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a `u8` can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the architecture of the\ncomputer your program is running on, which is denoted in the table as “arch”:\n64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit\narchitecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as `57u8`, to designate the type. Number literals can also use `_` as a\nvisual separator to make the number easier to read, such as `1_000`, which will\nhave the same value as if you had specified `1000`.\n\n<span class=\"caption\">Table 3-2: Integer Literals in Rust</span>\n\n| Number literals  | Example       |\n|------------------|---------------|\n| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |\n\nSo how do you know which type of integer to use? If you’re unsure, Rust’s\ndefaults are generally good places to start: integer types default to `i32`.\nThe primary situation in which you’d use `isize` or `usize` is when indexing\nsome sort of collection.\n\n> ##### Integer Overflow\n>\n> Let’s say you have a variable of type `u8` that can hold values between 0 and\n> 255. If you try to change the variable to a value outside that range, such as\n> 256, *integer overflow* will occur, which can result in one of two behaviors.\n> When you’re compiling in debug mode, Rust includes checks for integer overflow\n> that cause your program to *panic* at runtime if this behavior occurs. Rust\n> uses the term *panicking* when a program exits with an error; we’ll discuss\n> panics in more depth in the [“Unrecoverable Errors with\n> `panic!`”][unrecoverable-errors-with-panic]<!-- ignore --> section in Chapter\n> 9.\n>\n> When you’re compiling in release mode with the `--release` flag, Rust does\n> *not* include checks for integer overflow that cause panics. Instead, if\n> overflow occurs, Rust performs *two’s complement wrapping*. In short, values\n> greater than the maximum value the type can hold “wrap around” to the minimum\n> of the values the type can hold. In the case of a `u8`, the value 256 becomes\n> 0, the value 257 becomes 1, and so on. The program won’t panic, but the\n> variable will have a value that probably isn’t what you were expecting it to\n> have. Relying on integer overflow’s wrapping behavior is considered an error.\n>\n> To explicitly handle the possibility of overflow, you can use these families\n> of methods provided by the standard library for primitive numeric types:\n>\n> * Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n> * Return the `None` value if there is overflow with the `checked_*` methods.\n> * Return the value and a boolean indicating whether there was overflow with\n>   the `overflowing_*` methods.\n> * Saturate at the value’s minimum or maximum values with the `saturating_*`\n>   methods.\n\n#### Floating-Point Types\n\nRust also has two primitive types for *floating-point numbers*, which are\nnumbers with decimal points. Rust’s floating-point types are `f32` and `f64`,\nwhich are 32 bits and 64 bits in size, respectively. The default type is `f64`\nbecause on modern CPUs, it’s roughly the same speed as `f32` but is capable of\nmore precision. All floating-point types are signed.\n\nHere’s an example that shows floating-point numbers in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-06-floating-point/src/main.rs}}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The\n`f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you’d expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you’d use each numeric operation in a `let` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-07-numeric-operations/src/main.rs}}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. [Appendix\nB][appendix_b]<!-- ignore --> contains a list of all operators that Rust\nprovides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible\nvalues: `true` and `false`. Booleans are one byte in size. The Boolean type in\nRust is specified using `bool`. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-08-boolean/src/main.rs}}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if`\nexpression. We’ll cover how `if` expressions work in Rust in the [“Control\nFlow”][control-flow]<!-- ignore --> section.\n\n#### The Character Type\n\nRust’s `char` type is the language’s most primitive alphabetic type. Here are\nsome examples of declaring `char` values:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-09-char/src/main.rs}}\n```\n\nNote that we specify `char` literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust’s `char` type is four bytes in size and\nrepresents a Unicode Scalar Value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid `char` values in Rust. Unicode Scalar\nValues range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive.\nHowever, a “character” isn’t really a concept in Unicode, so your human\nintuition for what a “character” is may not match up with what a `char` is in\nRust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with\nStrings”][strings]<!-- ignore --> in Chapter 8.\n\n### Compound Types\n\n*Compound types* can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA *tuple* is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don’t have to be the same. We’ve added optional\ntype annotations in this example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-10-tuples/src/main.rs}}\n```\n\nThe variable `tup` binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-11-destructuring-tuples/src/main.rs}}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then\nuses a pattern with `let` to take `tup` and turn it into three separate\nvariables, `x`, `y`, and `z`. This is called *destructuring* because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n`y`, which is `6.4`.\n\nWe can also access a tuple element directly by using a period (`.`) followed by\nthe index of the value we want to access. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-12-tuple-indexing/src/main.rs}}\n```\n\nThis program creates the tuple `x` and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0.\n\nThe tuple without any values has a special name, *unit*. This value and its\ncorresponding type are both written `()` and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don’t\nreturn any other value.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an *array*. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length.\n\nWe write the values in an array as a comma-separated list inside square\nbrackets:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-13-arrays/src/main.rs}}\n```\n\nArrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in [Chapter\n4][stack-and-heap]<!-- ignore -->) or when you want to ensure you always have a\nfixed number of elements. An array isn’t as flexible as the vector type,\nthough. A *vector* is a similar collection type provided by the standard\nlibrary that *is* allowed to grow or shrink in size. If you’re unsure whether\nto use an array or a vector, chances are you should use a vector. [Chapter\n8][vectors]<!-- ignore --> discusses vectors in more detail.\n\nHowever, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou write an array’s type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5`\nindicates the array contains five elements.\n\nYou can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value\n`3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a\nmore concise way.\n\n##### Accessing Array Elements\n\nAn array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-14-array-indexing/src/main.rs}}\n```\n\nIn this example, the variable named `first` will get the value `1` because that\nis the value at index `[0]` in the array. The variable named `second` will get\nthe value `2` from index `[1]` in the array.\n\n##### Invalid Array Element Access\n\nLet’s see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,panics\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access/src/main.rs}}\n```\n\nThis code compiles successfully. If you run this code using `cargo run` and\nenter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as `10`, you’ll see output like this:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->\n\n```console\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nThe program resulted in a *runtime* error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn’t execute the final `println!` statement. When you attempt to access an\nelement using indexing, Rust will check that the index you’ve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can’t possibly know what value a user will enter when they\nrun the code later.\n\nThis is an example of Rust’s memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust’s error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[twos-complement]: https://en.wikipedia.org/wiki/Two%27s_complement\n[control-flow]: ch03-05-control-flow.html#control-flow\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[stack-and-heap]: ch04-01-what-is-ownership.html#the-stack-and-the-heap\n[vectors]: ch08-01-vectors.html\n[unrecoverable-errors-with-panic]: ch09-01-unrecoverable-errors-with-panic.html\n[appendix_b]: appendix-02-operators.md\n",
					"qas": [
						{
							"question": "What is an integer?",
							"id": 361,
							"answers": [
								{
									"text": "number without a fractional component.",
									"answer_start": 1470
								}
							],
							"is_impossible": false
						},
						{
							"question": "What are the possible values of a boolean variable?",
							"id": 369,
							"answers": [
								{
									"text": "`true` and `false`",
									"answer_start": 7823
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Hello, World!\n\nNow that you’ve installed Rust, it’s time to write your first Rust program.\nIt’s traditional when learning a new language to write a little program that\nprints the text `Hello, world!` to the screen, so we’ll do the same here!\n\n> Note: This book assumes basic familiarity with the command line. Rust makes\n> no specific demands about your editing or tooling or where your code lives, so\n> if you prefer to use an integrated development environment (IDE) instead of\n> the command line, feel free to use your favorite IDE. Many IDEs now have some\n> degree of Rust support; check the IDE’s documentation for details. The Rust\n> team has been focusing on enabling great IDE support via `rust-analyzer`. See\n> [Appendix D][devtools]<!-- ignore --> for more details.\n\n### Creating a Project Directory\n\nYou’ll start by making a directory to store your Rust code. It doesn’t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a *projects* directory in your home directory and keeping all\nyour projects there.\n\nOpen a terminal and enter the following commands to make a *projects* directory\nand a directory for the “Hello, world!” project within the *projects* directory.\n\nFor Linux, macOS, and PowerShell on Windows, enter this:\n\n```console\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n```\n\nFor Windows CMD, enter this:\n\n```cmd\n> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world\n```\n\n### Writing and Running a Rust Program\n\nNext, make a new source file and call it *main.rs*. Rust files always end with\nthe *.rs* extension. If you’re using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n*hello_world.rs* rather than *helloworld.rs*.\n\nNow open the *main.rs* file you just created and enter the code in Listing 1-1.\n\n<span class=\"filename\">Filename: main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n<span class=\"caption\">Listing 1-1: A program that prints `Hello, world!`</span>\n\nSave the file and go back to your terminal window in the\n*~/projects/hello_world* directory. On Linux or macOS, enter the following\ncommands to compile and run the file:\n\n```console\n$ rustc main.rs\n$ ./main\nHello, world!\n```\n\nOn Windows, enter the command `.\\main.exe` instead of `./main`:\n\n```powershell\n> rustc main.rs\n> .\\main.exe\nHello, world!\n```\n\nRegardless of your operating system, the string `Hello, world!` should print to\nthe terminal. If you don’t see this output, refer back to the\n[“Troubleshooting”][troubleshooting]<!-- ignore --> part of the Installation\nsection for ways to get help.\n\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust\nprogram. That makes you a Rust programmer—welcome!\n\n### Anatomy of a Rust Program\n\nLet’s review this “Hello, world!” program in detail. Here’s the first piece of\nthe puzzle:\n\n```rust\nfn main() {\n\n}\n```\n\nThese lines define a function named `main`. The `main` function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named `main` that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses `()`.\n\nThe function body is wrapped in `{}`. Rust requires curly brackets around all\nfunction bodies. It’s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.\n\n> Note: If you want to stick to a standard style across Rust projects, you can\n> use an automatic formatter tool called `rustfmt` to format your code in a\n> particular style (more on `rustfmt` in\n> [Appendix D][devtools]<!-- ignore -->). The Rust team has included this tool\n> with the standard Rust distribution, as `rustc` is, so it should already be\n> installed on your computer!\n\nThe body of the `main` function holds the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here.\n\nFirst, Rust style is to indent with four spaces, not a tab.\n\nSecond, `println!` calls a Rust macro. If it had called a function instead, it\nwould be entered as `println` (without the `!`). We’ll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a `!`\nmeans that you’re calling a macro instead of a normal function and that macros\ndon’t always follow the same rules as functions.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument\nto `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon.\n\n### Compiling and Running Are Separate Steps\n\nYou’ve just run a newly created program, so let’s examine each step in the\nprocess.\n\nBefore running a Rust program, you must compile it using the Rust compiler by\nentering the `rustc` command and passing it the name of your source file, like\nthis:\n\n```console\n$ rustc main.rs\n```\n\nIf you have a C or C++ background, you’ll notice that this is similar to `gcc`\nor `clang`. After compiling successfully, Rust outputs a binary executable.\n\nOn Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the `ls` command in your shell:\n\n```console\n$ ls\nmain  main.rs\n```\n\nOn Linux and macOS, you’ll see two files. With PowerShell on Windows, you’ll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:\n\n```cmd\n> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n```\n\nThis shows the source code file with the *.rs* extension, the executable file\n(*main.exe* on Windows, but *main* on all other platforms), and, when using\nWindows, a file containing debugging information with the *.pdb* extension.\nFrom here, you run the *main* or *main.exe* file, like this:\n\n```console\n$ ./main # or .\\main.exe on Windows\n```\n\nIf your *main.rs* is your “Hello, world!” program, this line prints `Hello,\nworld!` to your terminal.\n\nIf you’re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an *ahead-of-time compiled* language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a *.rb*, *.py*, or\n*.js* file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design.\n\nJust compiling with `rustc` is fine for simple programs, but as your project\ngrows, you’ll want to manage all the options and make it easy to share your\ncode. Next, we’ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs.\n\n[troubleshooting]: ch01-01-installation.html#troubleshooting\n[devtools]: appendix-04-useful-development-tools.md\n",
					"qas": [
						{
							"question": "How can I define function named 'main'?",
							"id": 240,
							"answers": [
								{
									"text": "fn main() {\n\n}",
									"answer_start": 2976
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## How to Write Tests\n\nTests are Rust functions that verify that the non-test code is functioning in\nthe expected manner. The bodies of test functions typically perform these three\nactions:\n\n1. Set up any needed data or state.\n2. Run the code you want to test.\n3. Assert the results are what you expect.\n\nLet’s look at the features Rust provides specifically for writing tests that\ntake these actions, which include the `test` attribute, a few macros, and the\n`should_panic` attribute.\n\n### The Anatomy of a Test Function\n\nAt its simplest, a test in Rust is a function that’s annotated with the `test`\nattribute. Attributes are metadata about pieces of Rust code; one example is\nthe `derive` attribute we used with structs in Chapter 5. To change a function\ninto a test function, add `#[test]` on the line before `fn`. When you run your\ntests with the `cargo test` command, Rust builds a test runner binary that runs\nthe annotated functions and reports on whether each\ntest function passes or fails.\n\nWhenever we make a new library project with Cargo, a test module with a test\nfunction in it is automatically generated for us. This module gives you a\ntemplate for writing your tests so you don’t have to look up the exact\nstructure and syntax every time you start a new project. You can add as many\nadditional test functions and as many test modules as you want!\n\nWe’ll explore some aspects of how tests work by experimenting with the template\ntest before we actually test any code. Then we’ll write some real-world tests\nthat call some code that we’ve written and assert that its behavior is correct.\n\nLet’s create a new library project called `adder` that will add two numbers:\n\n```console\n$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder\n```\n\nThe contents of the *src/lib.rs* file in your `adder` library should look like\nListing 11-1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<!-- manual-regeneration\ncd listings/ch11-writing-automated-tests\nrm -rf listing-11-01\ncargo new listing-11-01 --lib --name adder\ncd listing-11-01\ncargo test\ngit co output.txt\ncd ../../..\n-->\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-1: The test module and function generated\nautomatically by `cargo new`</span>\n\nFor now, let’s ignore the top two lines and focus on the function. Note the\n`#[test]` annotation: this attribute indicates this is a test function, so the\ntest runner knows to treat this function as a test. We might also have non-test\nfunctions in the `tests` module to help set up common scenarios or perform\ncommon operations, so we always need to indicate which functions are tests.\n\nThe example function body uses the `assert_eq!` macro to assert that `result`,\nwhich contains the result of adding 2 and 2, equals 4. This assertion serves as\nan example of the format for a typical test. Let’s run it to see that this test\npasses.\n\nThe `cargo test` command runs all tests in our project, as shown in Listing\n11-2.\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-01/output.txt}}\n```\n\n<span class=\"caption\">Listing 11-2: The output from running the automatically\ngenerated test</span>\n\nCargo compiled and ran the test. We see the line `running 1 test`. The next\nline shows the name of the generated test function, called `it_works`, and that\nthe result of running that test is `ok`. The overall summary `test result: ok.`\nmeans that all the tests passed, and the portion that reads `1 passed; 0\nfailed` totals the number of tests that passed or failed.\n\nIt’s possible to mark a test as ignored so it doesn’t run in a particular\ninstance; we’ll cover that in the [“Ignoring Some Tests Unless Specifically\nRequested”][ignoring]<!-- ignore --> section later in this chapter. Because we\nhaven’t done that here, the summary shows `0 ignored`. We can also pass an\nargument to the `cargo test` command to run only tests whose name matches a\nstring; this is called *filtering* and we’ll cover that in the [“Running a\nSubset of Tests by Name”][subset]<!-- ignore --> section. We also haven’t\nfiltered the tests being run, so the end of the summary shows `0 filtered out`.\n\nThe `0 measured` statistic is for benchmark tests that measure performance.\nBenchmark tests are, as of this writing, only available in nightly Rust. See\n[the documentation about benchmark tests][bench] to learn more.\n\nThe next part of the test output starting at `Doc-tests adder` is for the\nresults of any documentation tests. We don’t have any documentation tests yet,\nbut Rust can compile any code examples that appear in our API documentation.\nThis feature helps keep your docs and your code in sync! We’ll discuss how to\nwrite documentation tests in the [“Documentation Comments as\nTests”][doc-comments]<!-- ignore --> section of Chapter 14. For now, we’ll\nignore the `Doc-tests` output.\n\nLet’s start to customize the test to our own needs. First change the name of\nthe `it_works` function to a different name, such as `exploration`, like so:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/src/lib.rs}}\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of\n`it_works`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/output.txt}}\n```\n\nNow we’ll add another test, but this time we’ll make a test that fails! Tests\nfail when something in the test function panics. Each test is run in a new\nthread, and when the main thread sees that a test thread has died, the test is\nmarked as failed. In Chapter 9, we talked about how the simplest way to panic\nis to call the `panic!` macro. Enter the new test as a function named\n`another`, so your *src/lib.rs* file looks like Listing 11-3.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-03/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-3: Adding a second test that will fail because\nwe call the `panic!` macro</span>\n\nRun the tests again using `cargo test`. The output should look like Listing\n11-4, which shows that our `exploration` test passed and `another` failed.\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 11-4: Test results when one test passes and one\ntest fails</span>\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new\nsections appear between the individual results and the summary: the first\ndisplays the detailed reason for each test failure. In this case, we get the\ndetails that `another` failed because it `panicked at 'Make this test fail'` on\nline 10 in the *src/lib.rs* file. The next section lists just the names of all\nthe failing tests, which is useful when there are lots of tests and lots of\ndetailed failing test output. We can use the name of a failing test to run just\nthat test to more easily debug it; we’ll talk more about ways to run tests in\nthe [“Controlling How Tests Are Run”][controlling-how-tests-are-run]<!-- ignore\n--> section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`. We\nhad one test pass and one test fail.\n\nNow that you’ve seen what the test results look like in different scenarios,\nlet’s look at some macros other than `panic!` that are useful in tests.\n\n### Checking Results with the `assert!` Macro\n\nThe `assert!` macro, provided by the standard library, is useful when you want\nto ensure that some condition in a test evaluates to `true`. We give the\n`assert!` macro an argument that evaluates to a Boolean. If the value is\n`true`, nothing happens and the test passes. If the value is `false`, the\n`assert!` macro calls `panic!` to cause the test to fail. Using the `assert!`\nmacro helps us check that our code is functioning in the way we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold`\nmethod, which are repeated here in Listing 11-5. Let’s put this code in the\n*src/lib.rs* file, then write some tests for it using the `assert!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-5: Using the `Rectangle` struct and its\n`can_hold` method from Chapter 5</span>\n\nThe `can_hold` method returns a Boolean, which means it’s a perfect use case\nfor the `assert!` macro. In Listing 11-6, we write a test that exercises the\n`can_hold` method by creating a `Rectangle` instance that has a width of 8 and\na height of 7 and asserting that it can hold another `Rectangle` instance that\nhas a width of 5 and a height of 1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-06/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-6: A test for `can_hold` that checks whether a\nlarger rectangle can indeed hold a smaller rectangle</span>\n\nNote that we’ve added a new line inside the `tests` module: `use super::*;`.\nThe `tests` module is a regular module that follows the usual visibility rules\nwe covered in Chapter 7 in the [“Paths for Referring to an Item in the Module\nTree”][paths-for-referring-to-an-item-in-the-module-tree]<!-- ignore -->\nsection. Because the `tests` module is an inner module, we need to bring the\ncode under test in the outer module into the scope of the inner module. We use\na glob here so anything we define in the outer module is available to this\n`tests` module.\n\nWe’ve named our test `larger_can_hold_smaller`, and we’ve created the two\n`Rectangle` instances that we need. Then we called the `assert!` macro and\npassed it the result of calling `larger.can_hold(&smaller)`. This expression is\nsupposed to return `true`, so our test should pass. Let’s find out!\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-06/output.txt}}\n```\n\nIt does pass! Let’s add another test, this time asserting that a smaller\nrectangle cannot hold a larger rectangle:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/src/lib.rs:here}}\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`,\nwe need to negate that result before we pass it to the `assert!` macro. As a\nresult, our test will pass if `can_hold` returns `false`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/output.txt}}\n```\n\nTwo tests that pass! Now let’s see what happens to our test results when we\nintroduce a bug in our code. We’ll change the implementation of the `can_hold`\nmethod by replacing the greater-than sign with a less-than sign when it\ncompares the widths:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/src/lib.rs:here}}\n```\n\nRunning the tests now produces the following:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/output.txt}}\n```\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is\n5, the comparison of the widths in `can_hold` now returns `false`: 8 is not\nless than 5.\n\n### Testing Equality with the `assert_eq!` and `assert_ne!` Macros\n\nA common way to verify functionality is to test for equality between the result\nof the code under test and the value you expect the code to return. You could\ndo this using the `assert!` macro and passing it an expression using the `==`\noperator. However, this is such a common test that the standard library\nprovides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test\nmore conveniently. These macros compare two arguments for equality or\ninequality, respectively. They’ll also print the two values if the assertion\nfails, which makes it easier to see *why* the test failed; conversely, the\n`assert!` macro only indicates that it got a `false` value for the `==`\nexpression, without printing the values that led to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its\nparameter, then we test this function using the `assert_eq!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-07/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-7: Testing the function `add_two` using the\n`assert_eq!` macro</span>\n\nLet’s check that it passes!\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-07/output.txt}}\n```\n\nWe pass `4` as the argument to `assert_eq!`, which is equal to the result of\ncalling `add_two(2)`. The line for this test is `test tests::it_adds_two ...\nok`, and the `ok` text indicates that our test passed!\n\nLet’s introduce a bug into our code to see what `assert_eq!` looks like when it\nfails. Change the implementation of the `add_two` function to instead add `3`:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/src/lib.rs:here}}\n```\n\nRun the tests again:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/output.txt}}\n```\n\nOur test caught the bug! The `it_adds_two` test failed, and the message tells\nus that the assertion that fails was `` assertion failed: `(left == right)` ``\nand what the `left` and `right` values are. This message helps us start\ndebugging: the `left` argument was `4` but the `right` argument, where we had\n`add_two(2)`, was `5`. You can imagine that this would be especially helpful\nwhen we have a lot of tests going on.\n\nNote that in some languages and test frameworks, the parameters to equality\nassertion functions are called `expected` and `actual`, and the order in which\nwe specify the arguments matters. However, in Rust, they’re called `left` and\n`right`, and the order in which we specify the value we expect and the value\nthe code produces doesn’t matter. We could write the assertion in this test as\n`assert_eq!(add_two(2), 4)`, which would result in the same failure message\nthat displays `` assertion failed: `(left == right)` ``.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and\nfail if they’re equal. This macro is most useful for cases when we’re not sure\nwhat a value *will* be, but we know what the value definitely *shouldn’t* be.\nFor example, if we’re testing a function that is guaranteed to change its input\nin some way, but the way in which the input is changed depends on the day of\nthe week that we run our tests, the best thing to assert might be that the\noutput of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators\n`==` and `!=`, respectively. When the assertions fail, these macros print their\narguments using debug formatting, which means the values being compared must\nimplement the `PartialEq` and `Debug` traits. All primitive types and most of\nthe standard library types implement these traits. For structs and enums that\nyou define yourself, you’ll need to implement `PartialEq` to assert equality of\nthose types. You’ll also need to implement `Debug` to print the values when the\nassertion fails. Because both traits are derivable traits, as mentioned in\nListing 5-12 in Chapter 5, this is usually as straightforward as adding the\n`#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See\nAppendix C, [“Derivable Traits,”][derivable-traits]<!-- ignore --> for more\ndetails about these and other derivable traits.\n\n### Adding Custom Failure Messages\n\nYou can also add a custom message to be printed with the failure message as\noptional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any\narguments specified after the required arguments are passed along to the\n`format!` macro (discussed in Chapter 8 in the [“Concatenation with the `+`\nOperator or the `format!`\nMacro”][concatenation-with-the--operator-or-the-format-macro]<!-- ignore -->\nsection), so you can pass a format string that contains `{}` placeholders and\nvalues to go in those placeholders. Custom messages are useful for documenting\nwhat an assertion means; when a test fails, you’ll have a better idea of what\nthe problem is with the code.\n\nFor example, let’s say we have a function that greets people by name and we\nwant to test that the name we pass into the function appears in the output:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-05-greeter/src/lib.rs}}\n```\n\nThe requirements for this program haven’t been agreed upon yet, and we’re\npretty sure the `Hello` text at the beginning of the greeting will change. We\ndecided we don’t want to have to update the test when the requirements change,\nso instead of checking for exact equality to the value returned from the\n`greeting` function, we’ll just assert that the output contains the text of the\ninput parameter.\n\nNow let’s introduce a bug into this code by changing `greeting` to exclude\n`name` to see what the default test failure looks like:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/src/lib.rs:here}}\n```\n\nRunning this test produces the following:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/output.txt}}\n```\n\nThis result just indicates that the assertion failed and which line the\nassertion is on. A more useful failure message would print the value from the\n`greeting` function. Let’s add a custom failure message composed of a format\nstring with a placeholder filled in with the actual value we got from the\n`greeting` function:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/src/lib.rs:here}}\n```\n\nNow when we run the test, we’ll get a more informative error message:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/output.txt}}\n```\n\nWe can see the value we actually got in the test output, which would help us\ndebug what happened instead of what we were expecting to happen.\n\n### Checking for Panics with `should_panic`\n\nIn addition to checking return values, it’s important to check that our code\nhandles error conditions as we expect. For example, consider the `Guess` type\nthat we created in Chapter 9, Listing 9-13. Other code that uses `Guess`\ndepends on the guarantee that `Guess` instances will contain only values\nbetween 1 and 100. We can write a test that ensures that attempting to create a\n`Guess` instance with a value outside that range panics.\n\nWe do this by adding the attribute `should_panic` to our test function. The\ntest passes if the code inside the function panics; the test fails if the code\ninside the function doesn’t panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new`\nhappen when we expect them to.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-08/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-8: Testing that a condition will cause a\n`panic!`</span>\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and\nbefore the test function it applies to. Let’s look at the result when this test\npasses:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-08/output.txt}}\n```\n\nLooks good! Now let’s introduce a bug in our code by removing the condition\nthat the `new` function will panic if the value is greater than 100:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/src/lib.rs:here}}\n```\n\nWhen we run the test in Listing 11-8, it will fail:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/output.txt}}\n```\n\nWe don’t get a very helpful message in this case, but when we look at the test\nfunction, we see that it’s annotated with `#[should_panic]`. The failure we got\nmeans that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise. A `should_panic` test would\npass even if the test panics for a different reason from the one we were\nexpecting. To make `should_panic` tests more precise, we can add an optional\n`expected` parameter to the `should_panic` attribute. The test harness will\nmake sure that the failure message contains the provided text. For example,\nconsider the modified code for `Guess` in Listing 11-9 where the `new` function\npanics with different messages depending on whether the value is too small or\ntoo large.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-09/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-9: Testing for a `panic!` with a panic message\ncontaining a specified substring</span>\n\nThis test will pass because the value we put in the `should_panic` attribute’s\n`expected` parameter is a substring of the message that the `Guess::new`\nfunction panics with. We could have specified the entire panic message that we\nexpect, which in this case would be `Guess value must be less than or equal to\n100, got 200.` What you choose to specify depends on how much of the panic\nmessage is unique or dynamic and how precise you want your test to be. In this\ncase, a substring of the panic message is enough to ensure that the code in the\ntest function executes the `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message\nfails, let’s again introduce a bug into our code by swapping the bodies of the\n`if value < 1` and the `else if value > 100` blocks:\n\n```rust,ignore,not_desired_behavior\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/src/lib.rs:here}}\n```\n\nThis time when we run the `should_panic` test, it will fail:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/output.txt}}\n```\n\nThe failure message indicates that this test did indeed panic as we expected,\nbut the panic message did not include the expected string `'Guess value must be\nless than or equal to 100'`. The panic message that we did get in this case was\n`Guess value must be greater than or equal to 1, got 200.` Now we can start\nfiguring out where our bug is!\n\n### Using `Result<T, E>` in Tests\n\nOur tests so far all panic when they fail. We can also write tests that use\n`Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use `Result<T,\nE>` and return an `Err` instead of panicking:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-10-result-in-tests/src/lib.rs}}\n```\n\nThe `it_works` function now has the `Result<(), String>` return type. In the\nbody of the function, rather than calling the `assert_eq!` macro, we return\n`Ok(())` when the test passes and an `Err` with a `String` inside when the test\nfails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question\nmark operator in the body of tests, which can be a convenient way to write\ntests that should fail if any operation within them returns an `Err` variant.\n\nYou can’t use the `#[should_panic]` annotation on tests that use `Result<T,\nE>`. To assert that an operation returns an `Err` variant, *don’t* use the\nquestion mark operator on the `Result<T, E>` value. Instead, use\n`assert!(value.is_err())`.\n\nNow that you know several ways to write tests, let’s look at what is happening\nwhen we run our tests and explore the different options we can use with `cargo\ntest`.\n\n[concatenation-with-the--operator-or-the-format-macro]:\nch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro\n[bench]: ../unstable-book/library-features/test.html\n[ignoring]: ch11-02-running-tests.html#ignoring-some-tests-unless-specifically-requested\n[subset]: ch11-02-running-tests.html#running-a-subset-of-tests-by-name\n[controlling-how-tests-are-run]:\nch11-02-running-tests.html#controlling-how-tests-are-run\n[derivable-traits]: appendix-03-derivable-traits.html\n[doc-comments]: ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests\n[paths-for-referring-to-an-item-in-the-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n",
					"qas": [
						{
							"question": "How do tests work?",
							"id": 2074,
							"answers": [
								{
									"text": "1. Set up any needed data or state.\n2. Run the code you want to test.\n3. Assert the results are what you expect.",
									"answer_start": 191
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can I check if result given by tested function is different than some value?",
							"id": 2086,
							"answers": [
								{
									"text": "`assert_ne!`",
									"answer_start": 11940
								}
							],
							"is_impossible": false
						},
						{
							"question": "What does 'cargo test' command do?",
							"id": 2079,
							"answers": [
								{
									"text": "runs\nthe annotated functions and reports on whether each\ntest function passes or fails",
									"answer_start": 912
								}
							],
							"is_impossible": false
						},
						{
							"question": "What happens when test result is different than expected?",
							"id": 2083,
							"answers": [
								{
									"text": "`assert!` macro calls `panic!` to cause the test to fail",
									"answer_start": 7863
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## `Rc<T>`, the Reference Counted Smart Pointer\n\nIn the majority of cases, ownership is clear: you know exactly which variable\nowns a given value. However, there are cases when a single value might have\nmultiple owners. For example, in graph data structures, multiple edges might\npoint to the same node, and that node is conceptually owned by all of the edges\nthat point to it. A node shouldn’t be cleaned up unless it doesn’t have any\nedges pointing to it and so has no owners.\n\nYou have to enable multiple ownership explicitly by using the Rust type\n`Rc<T>`, which is an abbreviation for *reference counting*. The `Rc<T>` type\nkeeps track of the number of references to a value to determine whether or not\nthe value is still in use. If there are zero references to a value, the value\ncan be cleaned up without any references becoming invalid.\n\nImagine `Rc<T>` as a TV in a family room. When one person enters to watch TV,\nthey turn it on. Others can come into the room and watch the TV. When the last\nperson leaves the room, they turn off the TV because it’s no longer being used.\nIf someone turns off the TV while others are still watching it, there would be\nuproar from the remaining TV watchers!\n\nWe use the `Rc<T>` type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can’t determine at compile time\nwhich part will finish using the data last. If we knew which part would finish\nlast, we could just make that part the data’s owner, and the normal ownership\nrules enforced at compile time would take effect.\n\nNote that `Rc<T>` is only for use in single-threaded scenarios. When we discuss\nconcurrency in Chapter 16, we’ll cover how to do reference counting in\nmultithreaded programs.\n\n### Using `Rc<T>` to Share Data\n\nLet’s return to our cons list example in Listing 15-5. Recall that we defined\nit using `Box<T>`. This time, we’ll create two lists that both share ownership\nof a third list. Conceptually, this looks similar to Figure 15-3:\n\n<img alt=\"Two lists that share ownership of a third list\" src=\"img/trpl15-03.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-3: Two lists, `b` and `c`, sharing ownership of\na third list, `a`</span>\n\nWe’ll create list `a` that contains 5 and then 10. Then we’ll make two more\nlists: `b` that starts with 3 and `c` that starts with 4. Both `b` and `c`\nlists will then continue on to the first `a` list containing 5 and 10. In other\nwords, both lists will share the first list containing 5 and 10.\n\nTrying to implement this scenario using our definition of `List` with `Box<T>`\nwon’t work, as shown in Listing 15-17:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-17/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-17: Demonstrating we’re not allowed to have\ntwo lists using `Box<T>` that try to share ownership of a third list</span>\n\nWhen we compile this code, we get this error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-17/output.txt}}\n```\n\nThe `Cons` variants own the data they hold, so when we create the `b` list, `a`\nis moved into `b` and `b` owns `a`. Then, when we try to use `a` again when\ncreating `c`, we’re not allowed to because `a` has been moved.\n\nWe could change the definition of `Cons` to hold references instead, but then\nwe would have to specify lifetime parameters. By specifying lifetime\nparameters, we would be specifying that every element in the list will live at\nleast as long as the entire list. This is the case for the elements and lists\nin Listing 15-17, but not in every scenario.\n\nInstead, we’ll change our definition of `List` to use `Rc<T>` in place of\n`Box<T>`, as shown in Listing 15-18. Each `Cons` variant will now hold a value\nand an `Rc<T>` pointing to a `List`. When we create `b`, instead of taking\nownership of `a`, we’ll clone the `Rc<List>` that `a` is holding, thereby\nincreasing the number of references from one to two and letting `a` and `b`\nshare ownership of the data in that `Rc<List>`. We’ll also clone `a` when\ncreating `c`, increasing the number of references from two to three. Every time\nwe call `Rc::clone`, the reference count to the data within the `Rc<List>` will\nincrease, and the data won’t be cleaned up unless there are zero references to\nit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-18/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-18: A definition of `List` that uses\n`Rc<T>`</span>\n\nWe need to add a `use` statement to bring `Rc<T>` into scope because it’s not\nin the prelude. In `main`, we create the list holding 5 and 10 and store it in\na new `Rc<List>` in `a`. Then when we create `b` and `c`, we call the\n`Rc::clone` function and pass a reference to the `Rc<List>` in `a` as an\nargument.\n\nWe could have called `a.clone()` rather than `Rc::clone(&a)`, but Rust’s\nconvention is to use `Rc::clone` in this case. The implementation of\n`Rc::clone` doesn’t make a deep copy of all the data like most types’\nimplementations of `clone` do. The call to `Rc::clone` only increments the\nreference count, which doesn’t take much time. Deep copies of data can take a\nlot of time. By using `Rc::clone` for reference counting, we can visually\ndistinguish between the deep-copy kinds of clones and the kinds of clones that\nincrease the reference count. When looking for performance problems in the\ncode, we only need to consider the deep-copy clones and can disregard calls to\n`Rc::clone`.\n\n### Cloning an `Rc<T>` Increases the Reference Count\n\nLet’s change our working example in Listing 15-18 so we can see the reference\ncounts changing as we create and drop references to the `Rc<List>` in `a`.\n\nIn Listing 15-19, we’ll change `main` so it has an inner scope around list `c`;\nthen we can see how the reference count changes when `c` goes out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-19: Printing the reference count</span>\n\nAt each point in the program where the reference count changes, we print the\nreference count, which we get by calling the `Rc::strong_count` function. This\nfunction is named `strong_count` rather than `count` because the `Rc<T>` type\nalso has a `weak_count`; we’ll see what `weak_count` is used for in the\n[“Preventing Reference Cycles: Turning an `Rc<T>` into a\n`Weak<T>`”][preventing-ref-cycles]<!-- ignore --> section.\n\nThis code prints the following:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-19/output.txt}}\n```\n\nWe can see that the `Rc<List>` in `a` has an initial reference count of 1; then\neach time we call `clone`, the count goes up by 1. When `c` goes out of scope,\nthe count goes down by 1. We don’t have to call a function to decrease the\nreference count like we have to call `Rc::clone` to increase the reference\ncount: the implementation of the `Drop` trait decreases the reference count\nautomatically when an `Rc<T>` value goes out of scope.\n\nWhat we can’t see in this example is that when `b` and then `a` go out of scope\nat the end of `main`, the count is then 0, and the `Rc<List>` is cleaned up\ncompletely. Using `Rc<T>` allows a single value to have multiple owners, and\nthe count ensures that the value remains valid as long as any of the owners\nstill exist.\n\nVia immutable references, `Rc<T>` allows you to share data between multiple\nparts of your program for reading only. If `Rc<T>` allowed you to have multiple\nmutable references too, you might violate one of the borrowing rules discussed\nin Chapter 4: multiple mutable borrows to the same place can cause data races\nand inconsistencies. But being able to mutate data is very useful! In the next\nsection, we’ll discuss the interior mutability pattern and the `RefCell<T>`\ntype that you can use in conjunction with an `Rc<T>` to work with this\nimmutability restriction.\n\n[preventing-ref-cycles]: ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\n",
					"qas": [
						{
							"question": "How to get Rc's current reference count?",
							"id": 60,
							"answers": [
								{
									"text": "we get by calling the `Rc::strong_count` function",
									"answer_start": 6257
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Appendix G - How Rust is Made and “Nightly Rust”\n\nThis appendix is about how Rust is made and how that affects you as a Rust\ndeveloper.\n\n### Stability Without Stagnation\n\nAs a language, Rust cares a *lot* about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can’t\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things.\n\nOur solution to this problem is what we call “stability without stagnation”,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times.\n\n### Choo, Choo! Release Channels and Riding the Trains\n\nRust development operates on a *train schedule*. That is, all development is\ndone on the `master` branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three *release channels* for Rust:\n\n* Nightly\n* Beta\n* Stable\n\nMost Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta.\n\nHere’s an example of how the development and release process works: let’s\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the `master`\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:\n\n```text\nnightly: * - - * - - *\n```\n\nEvery six weeks, it’s time to prepare a new release! The `beta` branch of the\nRust repository branches off from the `master` branch used by nightly. Now,\nthere are two releases:\n\n```text\nnightly: * - - * - - *\n                     |\nbeta:                *\n```\n\nMost Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere’s still a nightly release every night:\n\n```text\nnightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n```\n\nLet’s say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto `master`, so that nightly is fixed, and then the fix is backported to the\n`beta` branch, and a new release of beta is produced:\n\n```text\nnightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n```\n\nSix weeks after the first beta was created, it’s time for a stable release! The\n`stable` branch is produced from the `beta` branch:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n```\n\nHooray! Rust 1.5 is done! However, we’ve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the *next* version of Rust, 1.6.\nSo after `stable` branches off of `beta`, the next version of `beta` branches\noff of `nightly` again:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n```\n\nThis is called the “train model” because every six weeks, a release “leaves the\nstation”, but still has to take a journey through the beta channel before it\narrives as a stable release.\n\nRust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it’s six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there’s no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline.\n\nThanks to this process, you can always check out the next build of Rust and\nverify for yourself that it’s easy to upgrade to: if a beta release doesn’t\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n`rustc` is still a piece of software, and bugs do exist.\n\n### Unstable Features\n\nThere’s one more catch with this release model: unstable features. Rust uses a\ntechnique called “feature flags” to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n`master`, and therefore, in nightly, but behind a *feature flag*. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in.\n\nIf you’re using a beta or stable release of Rust, you can’t use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won’t break. Stability without stagnation.\n\nThis book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they’ll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online.\n\n### Rustup and the Role of Rust Nightly\n\nRustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you’ll have stable Rust installed. To\ninstall nightly, for example:\n\n```console\n$ rustup toolchain install nightly\n```\n\nYou can see all of the *toolchains* (releases of Rust and associated\ncomponents) you have installed with `rustup` as well. Here’s an example on one\nof your authors’ Windows computer:\n\n```powershell\n> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n```\n\nAs you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use `rustup override` in that project’s directory to set the\nnightly toolchain as the one `rustup` should use when you’re in that directory:\n\n```console\n$ cd ~/projects/needs-nightly\n$ rustup override set nightly\n```\n\nNow, every time you call `rustc` or `cargo` inside of\n*~/projects/needs-nightly*, `rustup` will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!\n\n### The RFC Process and Teams\n\nSo how do you learn about these new features? Rust’s development model follows\na *Request For Comments (RFC) process*. If you’d like an improvement in Rust,\nyou can write up a proposal, called an RFC.\n\nAnyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There’s\na full list of the teams [on Rust’s\nwebsite](https://www.rust-lang.org/governance), which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere’s consensus to accept or reject the feature.\n\nIf the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the `master` branch behind a feature gate, as we discussed\nin the [“Unstable Features”](#unstable-features)<!-- ignore --> section.\n\nAfter some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it’s\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust.\n",
					"qas": [
						{
							"question": "How many release channels does rust have?",
							"id": 206,
							"answers": [
								{
									"text": "three",
									"answer_start": 1132
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.\n\nA path can take two forms:\n\n* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).\n\nReturning to Listing 7-1, say we want to call the `add_to_waitlist` function.\nThis is the same as asking: what’s the path of the `add_to_waitlist` function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved.\n\nWe’ll show two ways to call the `add_to_waitlist` function from a new function\n`eat_at_restaurant` defined in the crate root. These paths are correct, but\nthere’s another problem remaining that will prevent this example from compiling\nas-is. We’ll explain why in a bit.\n\nThe `eat_at_restaurant` function is part of our library crate’s public API, so\nwe mark it with the `pub` keyword. In the [“Exposing Paths with the `pub`\nKeyword”][pub]<!-- ignore --> section, we’ll go into more detail about `pub`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-03/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-3: Calling the `add_to_waitlist` function using\nabsolute and relative paths</span>\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`,\nwe use an absolute path. The `add_to_waitlist` function is defined in the same\ncrate as `eat_at_restaurant`, which means we can use the `crate` keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to `add_to_waitlist`. You can imagine a filesystem with the same\nstructure: we’d specify the path `/front_of_house/hosting/add_to_waitlist` to\nrun the `add_to_waitlist` program; using the `crate` name to start from the\ncrate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a\nrelative path. The path starts with `front_of_house`, the name of the module\ndefined at the same level of the module tree as `eat_at_restaurant`. Here the\nfilesystem equivalent would be using the path\n`front_of_house/hosting/add_to_waitlist`. Starting with a module name means\nthat the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project, and depends on whether you’re more likely to move item\ndefinition code separately from or together with the code that uses the item.\nFor example, if we move the `front_of_house` module and the `eat_at_restaurant`\nfunction into a module named `customer_experience`, we’d need to update the\nabsolute path to `add_to_waitlist`, but the relative path would still be valid.\nHowever, if we moved the `eat_at_restaurant` function separately into a module\nnamed `dining`, the absolute path to the `add_to_waitlist` call would stay the\nsame, but the relative path would need to be updated. Our preference in general\nis to specify absolute paths because it’s more likely we’ll want to move code\ndefinitions and item calls independently of each other.\n\nLet’s try to compile Listing 7-3 and find out why it won’t compile yet! The\nerror we get is shown in Listing 7-4.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span>\n\nThe error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.\n\nItems in a parent module can’t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they’re defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate.\n\nRust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules’ code to outer ancestor\nmodules by using the `pub` keyword to make an item public.\n\n### Exposing Paths with the `pub` Keyword\n\nLet’s return to the error in Listing 7-4 that told us the `hosting` module is\nprivate. We want the `eat_at_restaurant` function in the parent module to have\naccess to the `add_to_waitlist` function in the child module, so we mark the\n`hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-05/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-5: Declaring the `hosting` module as `pub` to\nuse it from `eat_at_restaurant`</span>\n\nUnfortunately, the code in Listing 7-5 still results in an error, as shown in\nListing 7-6.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-05/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span>\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the\nmodule public. With this change, if we can access `front_of_house`, we can\naccess `hosting`. But the *contents* of `hosting` are still private; making the\nmodule public doesn’t make its contents public. The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there’s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.\n\nLet’s also make the `add_to_waitlist` function public by adding the `pub`\nkeyword before its definition, as in Listing 7-7.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-07/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-7: Adding the `pub` keyword to `mod hosting`\nand `fn add_to_waitlist` lets us call the function from\n`eat_at_restaurant`</span>\n\nNow the code will compile! To see why adding the `pub` keyword lets us use\nthese paths in `add_to_waitlist` with respect to the privacy rules, let’s look\nat the absolute and the relative paths.\n\nIn the absolute path, we start with `crate`, the root of our crate’s module\ntree. The `front_of_house` module is defined in the crate root. While\n`front_of_house` isn’t public, because the `eat_at_restaurant` function is\ndefined in the same module as `front_of_house` (that is, `eat_at_restaurant`\nand `front_of_house` are siblings), we can refer to `front_of_house` from\n`eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can\naccess the parent module of `hosting`, so we can access `hosting`. Finally, the\n`add_to_waitlist` function is marked with `pub` and we can access its parent\nmodule, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n`front_of_house`. The `front_of_house` module is defined within the same module\nas `eat_at_restaurant`, so the relative path starting from the module in which\n`eat_at_restaurant` is defined works. Then, because `hosting` and\n`add_to_waitlist` are marked with `pub`, the rest of the path works, and this\nfunction call is valid!\n\nIf you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are out of the scope of this book; if you’re\ninterested in this topic, see [The Rust API Guidelines][api-guidelines].\n\n> #### Best Practices for Packages with a Binary and a Library\n>\n> We mentioned a package can contain both a *src/main.rs* binary crate root as\n> well as a *src/lib.rs* library crate root, and both crates will have the\n> package name by default. Typically, packages with this pattern of containing\n> both a library and a binary crate will have just enough code in the binary\n> crate to start an executable that calls code with the library crate. This\n> lets other projects benefit from the most functionality that the package\n> provides, because the library crate’s code can be shared.\n>\n> The module tree should be defined in *src/lib.rs*. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you’re also a\n> client!\n>\n> In [Chapter 12][ch12]<!-- ignore -->, we’ll demonstrate this organizational\n> practice with a command-line program that will contain both a binary crate\n> and a library crate.\n\n### Starting Relative Paths with `super`\n\nWe can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax. Using\n`super` allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent, but the parent might be moved elsewhere in the module\ntree someday.\n\nConsider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction `fix_incorrect_order` defined in the `back_of_house` module calls the\nfunction `deliver_order` defined in the parent module by specifying the path to\n`deliver_order` starting with `super`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-08/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with `super`</span>\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can\nuse `super` to go to the parent module of `back_of_house`, which in this case\nis `crate`, the root. From there, we look for `deliver_order` and find it.\nSuccess! We think the `back_of_house` module and the `deliver_order` function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate’s module tree. Therefore, we\nused `super` so we’ll have fewer places to update code in the future if this\ncode gets moved to a different module.\n\n### Making Structs and Enums Public\n\nWe can also use `pub` to designate structs and enums as public, but there are a\nfew details extra to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct’s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what’s in season and in stock. The available fruit changes quickly, so\ncustomers can’t choose the fruit or even see which fruit they’ll get.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-09/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span>\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public,\nin `eat_at_restaurant` we can write and read to the `toast` field using dot\nnotation. Notice that we can’t use the `seasonal_fruit` field in\n`eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the\nline modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t\nhave such a function, we couldn’t create an instance of `Breakfast` in\n`eat_at_restaurant` because we couldn’t set the value of the private\n`seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-10/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span>\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad`\nvariants in `eat_at_restaurant`.\n\nEnums aren’t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`.\n\nThere’s one more situation involving `pub` that we haven’t covered, and that is\nour last module system feature: the `use` keyword. We’ll cover `use` by itself\nfirst, and then we’ll show how to combine `pub` and `use`.\n\n[pub]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[api-guidelines]: https://rust-lang.github.io/api-guidelines/\n[ch12]: ch12-00-an-io-project.html\n",
					"qas": [
						{
							"question": "Where should be defined module tree?",
							"id": 147,
							"answers": [
								{
									"text": "> The module tree should be defined in *src/lib.rs*. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you’re also a\n> client!\n>",
									"answer_start": 9763
								}
							],
							"is_impossible": false
						},
						{
							"question": "Are struct fields public or private by default?",
							"id": 152,
							"answers": [
								{
									"text": "Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`.",
									"answer_start": 14672
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Characteristics of Object-Oriented Languages\n\nThere is no consensus in the programming community about what features a\nlanguage must have to be considered object-oriented. Rust is influenced by many\nprogramming paradigms, including OOP; for example, we explored the features\nthat came from functional programming in Chapter 13. Arguably, OOP languages\nshare certain common characteristics, namely objects, encapsulation, and\ninheritance. Let’s look at what each of those characteristics means and whether\nRust supports it.\n\n### Objects Contain Data and Behavior\n\nThe book *Design Patterns: Elements of Reusable Object-Oriented Software* by\nErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley\nProfessional, 1994), colloquially referred to as *The Gang of Four* book, is a\ncatalog of object-oriented design patterns. It defines OOP this way:\n\n> Object-oriented programs are made up of objects. An *object* packages both\n> data and the procedures that operate on that data. The procedures are\n> typically called *methods* or *operations*.\n\nUsing this definition, Rust is object-oriented: structs and enums have data,\nand `impl` blocks provide methods on structs and enums. Even though structs and\nenums with methods aren’t *called* objects, they provide the same\nfunctionality, according to the Gang of Four’s definition of objects.\n\n### Encapsulation that Hides Implementation Details\n\nAnother aspect commonly associated with OOP is the idea of *encapsulation*,\nwhich means that the implementation details of an object aren’t accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn’t be able to reach into\nthe object’s internals and change data or behavior directly. This enables the\nprogrammer to change and refactor an object’s internals without needing to\nchange the code that uses the object.\n\nWe discussed how to control encapsulation in Chapter 7: we can use the `pub`\nkeyword to decide which modules, types, functions, and methods in our code\nshould be public, and by default everything else is private. For example, we\ncan define a struct `AveragedCollection` that has a field containing a vector\nof `i32` values. The struct can also have a field that contains the average of\nthe values in the vector, meaning the average doesn’t have to be computed\non demand whenever anyone needs it. In other words, `AveragedCollection` will\ncache the calculated average for us. Listing 17-1 has the definition of the\n`AveragedCollection` struct:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-1: An `AveragedCollection` struct that\nmaintains a list of integers and the average of the items in the\ncollection</span>\n\nThe struct is marked `pub` so that other code can use it, but the fields within\nthe struct remain private. This is important in this case because we want to\nensure that whenever a value is added or removed from the list, the average is\nalso updated. We do this by implementing `add`, `remove`, and `average` methods\non the struct, as shown in Listing 17-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-02/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-2: Implementations of the public methods\n`add`, `remove`, and `average` on `AveragedCollection`</span>\n\nThe public methods `add`, `remove`, and `average` are the only ways to access\nor modify data in an instance of `AveragedCollection`. When an item is added\nto `list` using the `add` method or removed using the `remove` method, the\nimplementations of each call the private `update_average` method that handles\nupdating the `average` field as well.\n\nWe leave the `list` and `average` fields private so there is no way for\nexternal code to add or remove items to or from the `list` field directly;\notherwise, the `average` field might become out of sync when the `list`\nchanges. The `average` method returns the value in the `average` field,\nallowing external code to read the `average` but not modify it.\n\nBecause we’ve encapsulated the implementation details of the struct\n`AveragedCollection`, we can easily change aspects, such as the data structure,\nin the future. For instance, we could use a `HashSet<i32>` instead of a\n`Vec<i32>` for the `list` field. As long as the signatures of the `add`,\n`remove`, and `average` public methods stay the same, code using\n`AveragedCollection` wouldn’t need to change. If we made `list` public instead,\nthis wouldn’t necessarily be the case: `HashSet<i32>` and `Vec<i32>` have\ndifferent methods for adding and removing items, so the external code would\nlikely have to change if it were modifying `list` directly.\n\nIf encapsulation is a required aspect for a language to be considered\nobject-oriented, then Rust meets that requirement. The option to use `pub` or\nnot for different parts of code enables encapsulation of implementation details.\n\n### Inheritance as a Type System and as Code Sharing\n\n*Inheritance* is a mechanism whereby an object can inherit elements from\nanother object’s definition, thus gaining the parent object’s data and behavior\nwithout you having to define them again.\n\nIf a language must have inheritance to be an object-oriented language, then\nRust is not one. There is no way to define a struct that inherits the parent\nstruct’s fields and method implementations without using a macro.\n\nHowever, if you’re used to having inheritance in your programming toolbox, you\ncan use other solutions in Rust, depending on your reason for reaching for\ninheritance in the first place.\n\nYou would choose inheritance for two main reasons. One is for reuse of code:\nyou can implement particular behavior for one type, and inheritance enables you\nto reuse that implementation for a different type. You can do this in a limited\nway in Rust code using default trait method implementations, which you saw in\nListing 10-14 when we added a default implementation of the `summarize` method\non the `Summary` trait. Any type implementing the `Summary` trait would have\nthe `summarize` method available on it without any further code. This is\nsimilar to a parent class having an implementation of a method and an\ninheriting child class also having the implementation of the method. We can\nalso override the default implementation of the `summarize` method when we\nimplement the `Summary` trait, which is similar to a child class overriding the\nimplementation of a method inherited from a parent class.\n\nThe other reason to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type. This is also\ncalled *polymorphism*, which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics.\n\n> ### Polymorphism\n>\n> To many people, polymorphism is synonymous with inheritance. But it’s\n> actually a more general concept that refers to code that can work with data\n> of multiple types. For inheritance, those types are generally subclasses.\n>\n> Rust instead uses generics to abstract over different possible types and\n> trait bounds to impose constraints on what those types must provide. This is\n> sometimes called *bounded parametric polymorphism*.\n\nInheritance has recently fallen out of favor as a programming design solution\nin many programming languages because it’s often at risk of sharing more code\nthan necessary. Subclasses shouldn’t always share all characteristics of their\nparent class but will do so with inheritance. This can make a program’s design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don’t make sense or that cause errors because the methods don’t\napply to the subclass. In addition, some languages will only allow single\ninheritance (meaning a subclass can only inherit from one class), further\nrestricting the flexibility of a program’s design.\n\nFor these reasons, Rust takes the different approach of using trait objects\ninstead of inheritance. Let’s look at how trait objects enable polymorphism in\nRust.\n",
					"qas": [
						{
							"question": "How does book 'Gang of four' define object orientated programming?",
							"id": 1,
							"answers": [
								{
									"text": "> Object-oriented programs are made up of objects. An *object* packages both\n> data and the procedures that operate on that data. The procedures are\n> typically called *methods* or *operations*.",
									"answer_start": 869
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Processing a Series of Items with Iterators\n\nThe iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished. When you use iterators, you don’t\nhave to reimplement that logic yourself.\n\nIn Rust, iterators are *lazy*, meaning they have no effect until you call\nmethods that consume the iterator to use it up. For example, the code in\nListing 13-10 creates an iterator over the items in the vector `v1` by calling\nthe `iter` method defined on `Vec<T>`. This code by itself doesn’t do anything\nuseful.\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-10: Creating an iterator</span>\n\nThe iterator is stored in the `v1_iter` variable. Once we’ve created an\niterator, we can use it in a variety of ways. In Listing 3-5 in Chapter 3, we\niterated over an array using a `for` loop to execute some code on each of its\nitems. Under the hood this implicitly created and then consumed an iterator,\nbut we glossed over how exactly that works until now.\n\nIn the example in Listing 13-11, we separate the creation of the iterator from\nthe use of the iterator in the `for` loop. When the `for` loop is called using\nthe iterator in `v1_iter`, each element in the iterator is used in one\niteration of the loop, which prints out each value.\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-11: Using an iterator in a `for` loop</span>\n\nIn languages that don’t have iterators provided by their standard libraries,\nyou would likely write this same functionality by starting a variable at index\n0, using that variable to index into the vector to get a value, and\nincrementing the variable value in a loop until it reached the total number of\nitems in the vector.\n\nIterators handle all that logic for you, cutting down on repetitive code you\ncould potentially mess up. Iterators give you more flexibility to use the same\nlogic with many different kinds of sequences, not just data structures you can\nindex into, like vectors. Let’s examine how iterators do that.\n\n### The `Iterator` Trait and the `next` Method\n\nAll iterators implement a trait named `Iterator` that is defined in the\nstandard library. The definition of the trait looks like this:\n\n```rust\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n\n    // methods with default implementations elided\n}\n```\n\nNotice this definition uses some new syntax: `type Item` and `Self::Item`,\nwhich are defining an *associated type* with this trait. We’ll talk about\nassociated types in depth in Chapter 19. For now, all you need to know is that\nthis code says implementing the `Iterator` trait requires that you also define\nan `Item` type, and this `Item` type is used in the return type of the `next`\nmethod. In other words, the `Item` type will be the type returned from the\niterator.\n\nThe `Iterator` trait only requires implementors to define one method: the\n`next` method, which returns one item of the iterator at a time wrapped in\n`Some` and, when iteration is over, returns `None`.\n\nWe can call the `next` method on iterators directly; Listing 13-12 demonstrates\nwhat values are returned from repeated calls to `next` on the iterator created\nfrom the vector.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-12/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-12: Calling the `next` method on an\niterator</span>\n\nNote that we needed to make `v1_iter` mutable: calling the `next` method on an\niterator changes internal state that the iterator uses to keep track of where\nit is in the sequence. In other words, this code *consumes*, or uses up, the\niterator. Each call to `next` eats up an item from the iterator. We didn’t need\nto make `v1_iter` mutable when we used a `for` loop because the loop took\nownership of `v1_iter` and made it mutable behind the scenes.\n\nAlso note that the values we get from the calls to `next` are immutable\nreferences to the values in the vector. The `iter` method produces an iterator\nover immutable references. If we want to create an iterator that takes\nownership of `v1` and returns owned values, we can call `into_iter` instead of\n`iter`. Similarly, if we want to iterate over mutable references, we can call\n`iter_mut` instead of `iter`.\n\n### Methods that Consume the Iterator\n\nThe `Iterator` trait has a number of different methods with default\nimplementations provided by the standard library; you can find out about these\nmethods by looking in the standard library API documentation for the `Iterator`\ntrait. Some of these methods call the `next` method in their definition, which\nis why you’re required to implement the `next` method when implementing the\n`Iterator` trait.\n\nMethods that call `next` are called *consuming adaptors*, because calling them\nuses up the iterator. One example is the `sum` method, which takes ownership of\nthe iterator and iterates through the items by repeatedly calling `next`, thus\nconsuming the iterator. As it iterates through, it adds each item to a running\ntotal and returns the total when iteration is complete. Listing 13-13 has a\ntest illustrating a use of the `sum` method:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-13: Calling the `sum` method to get the total\nof all items in the iterator</span>\n\nWe aren’t allowed to use `v1_iter` after the call to `sum` because `sum` takes\nownership of the iterator we call it on.\n\n### Methods that Produce Other Iterators\n\n*Iterator adaptors* are methods defined on the `Iterator` trait that don’t\nconsume the iterator. Instead, they produce different iterators by changing\nsome aspect of the original iterator.\n\nListing 13-14 shows an example of calling the iterator adaptor method `map`,\nwhich takes a closure to call on each item as the items are iterated through.\nThe `map` method returns a new iterator that produces the modified items. The\nclosure here creates a new iterator in which each item from the vector will be\nincremented by 1:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,not_desired_behavior\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-14: Calling the iterator adaptor `map` to\ncreate a new iterator</span>\n\nHowever, this code produces a warning:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-14/output.txt}}\n```\n\nThe code in Listing 13-14 doesn’t do anything; the closure we’ve specified\nnever gets called. The warning reminds us why: iterator adaptors are lazy, and\nwe need to consume the iterator here.\n\nTo fix this warning and consume the iterator, we’ll use the `collect` method,\nwhich we used in Chapter 12 with `env::args` in Listing 12-1. This method\nconsumes the iterator and collects the resulting values into a collection data\ntype.\n\nIn Listing 13-15, we collect the results of iterating over the iterator that’s\nreturned from the call to `map` into a vector. This vector will end up\ncontaining each item from the original vector incremented by 1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-15: Calling the `map` method to create a new\niterator and then calling the `collect` method to consume the new iterator and\ncreate a vector</span>\n\nBecause `map` takes a closure, we can specify any operation we want to perform\non each item. This is a great example of how closures let you customize some\nbehavior while reusing the iteration behavior that the `Iterator` trait\nprovides.\n\nYou can chain multiple calls to iterator adaptors to perform complex actions in\na readable way. But because all iterators are lazy, you have to call one of the\nconsuming adaptor methods to get results from calls to iterator adaptors.\n\n### Using Closures that Capture Their Environment\n\nMany iterator adapters take closures as arguments, and commonly the closures\nwe’ll specify as arguments to iterator adapters will be closures that capture\ntheir environment.\n\nFor this example, we’ll use the `filter` method that takes a closure. The\nclosure gets an item from the iterator and returns a `bool`. If the closure\nreturns `true`, the value will be included in the iteration produced by\n`filter`. If the closure returns `false`, the value won’t be included.\n\nIn Listing 13-16, we use `filter` with a closure that captures the `shoe_size`\nvariable from its environment to iterate over a collection of `Shoe` struct\ninstances. It will return only shoes that are the specified size.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-16/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 13-16: Using the `filter` method with a closure\nthat captures `shoe_size`</span>\n\nThe `shoes_in_size` function takes ownership of a vector of shoes and a shoe\nsize as parameters. It returns a vector containing only shoes of the specified\nsize.\n\nIn the body of `shoes_in_size`, we call `into_iter` to create an iterator\nthat takes ownership of the vector. Then we call `filter` to adapt that\niterator into a new iterator that only contains elements for which the closure\nreturns `true`.\n\nThe closure captures the `shoe_size` parameter from the environment and\ncompares the value with each shoe’s size, keeping only shoes of the size\nspecified. Finally, calling `collect` gathers the values returned by the\nadapted iterator into a vector that’s returned by the function.\n\nThe test shows that when we call `shoes_in_size`, we get back only shoes\nthat have the same size as the value we specified.\n",
					"qas": [
						{
							"question": "What is an iterator?",
							"id": 113,
							"answers": [
								{
									"text": "The iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished.",
									"answer_start": 48
								}
							],
							"is_impossible": false
						},
						{
							"question": "How can iterator be consumed?",
							"id": 3,
							"answers": [
								{
									"text": "use the `collect` method",
									"answer_start": 7054
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Functions\n\nFunctions are prevalent in Rust code. You’ve already seen one of the most\nimportant functions in the language: the `main` function, which is the entry\npoint of many programs. You’ve also seen the `fn` keyword, which allows you to\ndeclare new functions.\n\nRust code uses *snake case* as the conventional style for function and variable\nnames, in which all letters are lowercase and underscores separate words.\nHere’s a program that contains an example function definition:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-16-functions/src/main.rs}}\n```\n\nWe define a function in Rust by entering `fn` followed by a function name and a\nset of parentheses. The curly brackets tell the compiler where the function\nbody begins and ends.\n\nWe can call any function we’ve defined by entering its name followed by a set\nof parentheses. Because `another_function` is defined in the program, it can be\ncalled from inside the `main` function. Note that we defined `another_function`\n*after* the `main` function in the source code; we could have defined it before\nas well. Rust doesn’t care where you define your functions, only that they’re\ndefined somewhere in a scope that can be seen by the caller.\n\nLet’s start a new binary project named *functions* to explore functions\nfurther. Place the `another_function` example in *src/main.rs* and run it. You\nshould see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-16-functions/output.txt}}\n```\n\nThe lines execute in the order in which they appear in the `main` function.\nFirst the “Hello, world!” message prints, and then `another_function` is called\nand its message is printed.\n\n### Parameters\n\nWe can define functions to have *parameters*, which are special variables that\nare part of a function’s signature. When a function has parameters, you can\nprovide it with concrete values for those parameters. Technically, the concrete\nvalues are called *arguments*, but in casual conversation, people tend to use\nthe words *parameter* and *argument* interchangeably for either the variables\nin a function’s definition or the concrete values passed in when you call a\nfunction.\n\nIn this version of `another_function` we add a parameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/src/main.rs}}\n```\n\nTry running this program; you should get the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/output.txt}}\n```\n\nThe declaration of `another_function` has one parameter named `x`. The type of\n`x` is specified as `i32`. When we pass `5` in to `another_function`, the\n`println!` macro puts `5` where the pair of curly brackets containing `x` was\nin the format string.\n\nIn function signatures, you *must* declare the type of each parameter. This is\na deliberate decision in Rust’s design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what type you mean. The compiler is also able to give\nmore helpful error messages if it knows what types the function expects.\n\nWhen defining multiple parameters, separate the parameter declarations with\ncommas, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/src/main.rs}}\n```\n\nThis example creates a function named `print_labeled_measurement` with two\nparameters. The first parameter is named `value` and is an `i32`. The second is\nnamed `unit_label` and is type `char`. The function then prints text containing\nboth the `value` and the `unit_label`.\n\nLet’s try running this code. Replace the program currently in your *functions*\nproject’s *src/main.rs* file with the preceding example and run it using `cargo\nrun`:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/output.txt}}\n```\n\nBecause we called the function with `5` as the value for `value` and `'h'` as\nthe value for `unit_label`, the program output contains those values.\n\n### Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an\nexpression. So far, the functions we’ve covered haven’t included an ending\nexpression, but you have seen an expression as part of a statement. Because\nRust is an expression-based language, this is an important distinction to\nunderstand. Other languages don’t have the same distinctions, so let’s look at\nwhat statements and expressions are and how their differences affect the bodies\nof functions.\n\n* **Statements** are instructions that perform some action and do not return\n  a value.\n* **Expressions** evaluate to a resultant value. Let’s look at some examples.\n\nWe’ve actually already used statements and expressions. Creating a variable and\nassigning a value to it with the `let` keyword is a statement. In Listing 3-1,\n`let y = 6;` is a statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-1: A `main` function declaration containing one statement</span>\n\nFunction definitions are also statements; the entire preceding example is a\nstatement in itself.\n\nStatements do not return values. Therefore, you can’t assign a `let` statement\nto another variable, as the following code tries to do; you’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/src/main.rs}}\n```\n\nWhen you run this program, the error you’ll get looks like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/output.txt}}\n```\n\nThe `let y = 6` statement does not return a value, so there isn’t anything for\n`x` to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write `x = y = 6` and have both `x` and `y` have the value\n`6`; that is not the case in Rust.\n\nExpressions evaluate to a value and make up most of the rest of the code that\nyou’ll write in Rust. Consider a math operation, such as `5 + 6`, which is an\nexpression that evaluates to the value `11`. Expressions can be part of\nstatements: in Listing 3-1, the `6` in the statement `let y = 6;` is an\nexpression that evaluates to the value `6`. Calling a function is an\nexpression. Calling a macro is an expression. A new scope block created with\ncurly brackets is an expression, for example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-20-blocks-are-expressions/src/main.rs}}\n```\n\nThis expression:\n\n```rust,ignore\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to `y`\nas part of the `let` statement. Note that the `x + 1` line doesn’t have a\nsemicolon at the end, which is unlike most of the lines you’ve seen so far.\nExpressions do not include ending semicolons. If you add a semicolon to the end\nof an expression, you turn it into a statement, and it will then not return a\nvalue. Keep this in mind as you explore function return values and expressions\nnext.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don’t name return\nvalues, but we must declare their type after an arrow (`->`). In Rust, the\nreturn value of the function is synonymous with the value of the final\nexpression in the block of the body of a function. You can return early from a\nfunction by using the `return` keyword and specifying a value, but most\nfunctions return the last expression implicitly. Here’s an example of a\nfunction that returns a value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/src/main.rs}}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five`\nfunction—just the number `5` by itself. That’s a perfectly valid function in\nRust. Note that the function’s return type is specified too, as `-> i32`. Try\nrunning this code; the output should look like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/output.txt}}\n```\n\nThe `5` in `five` is the function’s return value, which is why the return type\nis `i32`. Let’s examine this in more detail. There are two important bits:\nfirst, the line `let x = five();` shows that we’re using the return value of a\nfunction to initialize a variable. Because the function `five` returns a `5`,\nthat line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the\nreturn value, but the body of the function is a lonely `5` with no semicolon\nbecause it’s an expression whose value we want to return.\n\nLet’s look at another example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-22-function-parameter-and-return/src/main.rs}}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a\nsemicolon at the end of the line containing `x + 1`, changing it from an\nexpression to a statement, we’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/src/main.rs}}\n```\n\nCompiling this code produces an error, as follows:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/output.txt}}\n```\n\nThe main error message, `mismatched types`, reveals the core issue with this\ncode. The definition of the function `plus_one` says that it will return an\n`i32`, but statements don’t evaluate to a value, which is expressed by `()`,\nthe unit type. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error.\n",
					"qas": [
						{
							"question": "What is the purpose of {} with the function?",
							"id": 329,
							"answers": [
								{
									"text": "The curly brackets tell the compiler where the function\nbody begins and ends",
									"answer_start": 754
								}
							],
							"is_impossible": false
						},
						{
							"question": "How should I separate parameters in the function declaration?",
							"id": 334,
							"answers": [
								{
									"text": "ith\ncommas",
									"answer_start": 3410
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Defining and Instantiating Structs\n\nStructs are similar to tuples, discussed in [“The Tuple Type”][tuples]<!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types. Unlike with tuples, in a struct\nyou’ll name each piece of data so it’s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don’t have to rely\non the order of the data to specify or access the values of an instance.\n\nTo define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct’s name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call *fields*. For example, Listing 5-1 shows a\nstruct that stores information about a user account.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-1: A `User` struct definition</span>\n\nTo use a struct after we’ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing *key:\nvalue* pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don’t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-2: Creating an instance of the `User`\nstruct</span>\n\nTo get a specific value from a struct, we use dot notation. For example, to\naccess this user’s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field. Listing 5-3 shows how to change the value in the `email`\nfield of a mutable `User` instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-3: Changing the value in the `email` field of a\n`User` instance</span>\n\nNote that the entire instance must be mutable; Rust doesn’t allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance.\n\nListing 5-4 shows a `build_user` function that returns a `User` instance with\nthe given email and username. The `active` field gets the value of `true`, and\nthe `sign_in_count` gets a value of `1`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-4: A `build_user` function that takes an email\nand username and returns a `User` instance</span>\n\nIt makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the `email` and `username` field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there’s a convenient shorthand!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\"></a>\n\n### Using the Field Init Shorthand\n\nBecause the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the *field init shorthand* syntax to rewrite\n`build_user` so it behaves exactly the same but doesn’t have the repetition of\n`username` and `email`, as shown in Listing 5-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-5: A `build_user` function that uses field init\nshorthand because the `username` and `email` parameters have the same name as\nstruct fields</span>\n\nHere, we’re creating a new instance of the `User` struct, which has a field\nnamed `email`. We want to set the `email` field’s value to the value in the\n`email` parameter of the `build_user` function. Because the `email` field and\nthe `email` parameter have the same name, we only need to write `email` rather\nthan `email: email`.\n\n### Creating Instances from Other Instances with Struct Update Syntax\n\nIt’s often useful to create a new instance of a struct that includes most of\nthe values from another instance, but changes some. You can do this using\n*struct update syntax*.\n\nFirst, in Listing 5-6 we show how to create a new `User` instance in `user2`\nregularly, without the update syntax. We set a new value for `email` but\notherwise use the same values from `user1` that we created in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-6: Creating a new `User` instance using one of\nthe values from `user1`</span>\n\nUsing struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax `..` specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-7: Using struct update syntax to set a new\n`email` value for a `User` instance but to use the rest of the values from\n`user1`</span>\n\nThe code in Listing 5-7 also creates an instance in `user2` that has a\ndifferent value for `email` but has the same values for the `username`,\n`active`, and `sign_in_count` fields from `user1`. The `..user1` must come last\nto specify that any remaining fields should get their values from the\ncorresponding fields in `user1`, but we can choose to specify values for as\nmany fields as we want in any order, regardless of the order of the fields in\nthe struct’s definition.\n\nNote that the struct update syntax uses `=` like an assignment; this is because\nit moves the data, just as we saw in the [“Variables and Data Interacting with\nMove”][move]<!-- ignore --> section. In this example, we can no longer use\n`user1` as a whole after creating `user2` because the `String` in the\n`username` field of `user1` was moved into `user2`. If we had given `user2` new\n`String` values for both `email` and `username`, and thus only used the\n`active` and `sign_in_count` values from `user1`, then `user1` would still be\nvalid after creating `user2`. Both `active` and `sign_in_count` are types that\nimplement the `Copy` trait, so the behavior we discussed in the [“Stack-Only\nData: Copy”][copy]<!-- ignore --> section would apply.\n\n### Using Tuple Structs Without Named Fields to Create Different Types\n\nRust also supports structs that look similar to tuples, called *tuple structs*.\nTuple structs have the added meaning the struct name provides but don’t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.\n\nTo define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple. For example, here we define and use two\ntuple structs named `Color` and `Point`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-01-tuple-structs/src/main.rs}}\n```\n\nNote that the `black` and `origin` values are different types because they’re\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct might have the same types. For\nexample, a function that takes a parameter of type `Color` cannot take a\n`Point` as an argument, even though both types are made up of three `i32`\nvalues. Otherwise, tuple struct instances are similar to tuples in that you can\ndestructure them into their individual pieces, and you can use a `.` followed\nby the index to access an individual value.\n\n### Unit-Like Structs Without Any Fields\n\nYou can also define structs that don’t have any fields! These are called\n*unit-like structs* because they behave similarly to `()`, the unit type that\nwe mentioned in [“The Tuple Type”][tuples]<!-- ignore --> section. Unit-like\nstructs can be useful when you need to implement a trait on some type but don’t\nhave any data that you want to store in the type itself. We’ll discuss traits\nin Chapter 10. Here’s an example of declaring and instantiating a unit struct\nnamed `AlwaysEqual`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-04-unit-like-structs/src/main.rs}}\n```\n\nTo define `AlwaysEqual`, we use the `struct` keyword, the name we want, and\nthen a semicolon. No need for curly brackets or parentheses! Then we can get an\ninstance of `AlwaysEqual` in the `subject` variable in a similar way: using the\nname we defined, without any curly brackets or parentheses. Imagine that later\nwe’ll implement behavior for this type such that every instance of\n`AlwaysEqual` is always equal to every instance of any other type, perhaps to\nhave a known result for testing purposes. We wouldn’t need any data to\nimplement that behavior! You’ll see in Chapter 10 how to define traits and\nimplement them on any type, including unit-like structs.\n\n> ### Ownership of Struct Data\n>\n> In the `User` struct definition in Listing 5-1, we used the owned `String`\n> type rather than the `&str` string slice type. This is a deliberate choice\n> because we want each instance of this struct to own all of its data and for\n> that data to be valid for as long as the entire struct is valid.\n>\n> It’s also possible for structs to store references to data owned by something\n> else, but to do so requires the use of *lifetimes*, a Rust feature that we’ll\n> discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is. Let’s say you try to store a reference\n> in a struct without specifying lifetimes, like the following; this won’t work:\n>\n> <span class=\"filename\">Filename: src/main.rs</span>\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore,does_not_compile\n> struct User {\n>     active: bool,\n>     username: &str,\n>     email: &str,\n>     sign_in_count: u64,\n> }\n>\n> fn main() {\n>     let user1 = User {\n>         active: true,\n>         username: \"someusername123\",\n>         email: \"someone@example.com\",\n>         sign_in_count: 1,\n>     };\n> }\n> ```\n>\n> The compiler will complain that it needs lifetime specifiers:\n>\n> ```console\n> $ cargo run\n>    Compiling structs v0.1.0 (file:///projects/structs)\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:3:15\n>   |\n> 3 |     username: &str,\n>   |               ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 ~     username: &'a str,\n>   |\n>\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:4:12\n>   |\n> 4 |     email: &str,\n>   |            ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 |     username: &str,\n> 4 ~     email: &'a str,\n>   |\n>\n> For more information about this error, try `rustc --explain E0106`.\n> error: could not compile `structs` due to 2 previous errors\n> ```\n>\n> In Chapter 10, we’ll discuss how to fix these errors so you can store\n> references in structs, but for now, we’ll fix errors like these using owned\n> types like `String` instead of references like `&str`.\n\n<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->\n\n[tuples]: ch03-02-data-types.html#the-tuple-type\n[move]: ch04-01-what-is-ownership.html#variables-and-data-interacting-with-move\n[copy]: ch04-01-what-is-ownership.html#stack-only-data-copy\n",
					"qas": [
						{
							"question": "How to get a specific value of the struct?",
							"id": 50,
							"answers": [
								{
									"text": "To get a specific value from a struct, we use dot notation. For example, to\naccess this user’s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field.",
									"answer_start": 2059
								}
							],
							"is_impossible": false
						},
						{
							"question": "Can I mark only certain fields as mutable?",
							"id": 51,
							"answers": [
								{
									"text": "Rust doesn’t allow us to mark\nonly certain fields as mutable.",
									"answer_start": 2726
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Control Flow\n\nThe ability to run some code depending on whether a condition is `true` and to\nrun some code repeatedly while a condition is `true` are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are `if` expressions and loops.\n\n### `if` Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, “If this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.”\n\nCreate a new project called *branches* in your *projects* directory to explore\nthe `if` expression. In the *src/main.rs* file, input the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/src/main.rs}}\n```\n\nAll `if` expressions start with the keyword `if`, followed by a condition. In\nthis case, the condition checks whether or not the variable `number` has a\nvalue less than 5. We place the block of code to execute if the condition is\n`true` immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in `if` expressions are sometimes called *arms*,\njust like the arms in `match` expressions that we discussed in the [“Comparing\nthe Guess to the Secret Number”][comparing-the-guess-to-the-secret-number]<!--\nignore --> section of Chapter 2.\n\nOptionally, we can also include an `else` expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to `false`. If you don’t provide an `else` expression and\nthe condition is `false`, the program will just skip the `if` block and move on\nto the next bit of code.\n\nTry running this code; you should see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/output.txt}}\n```\n\nLet’s try changing the value of `number` to a value that makes the condition\n`false` to see what happens:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/src/main.rs:here}}\n```\n\nRun the program again, and look at the output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/output.txt}}\n```\n\nIt’s also worth noting that the condition in this code *must* be a `bool`. If\nthe condition isn’t a `bool`, we’ll get an error. For example, try running the\nfollowing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/src/main.rs}}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an\nerror:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/output.txt}}\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n`if` with a Boolean as its condition. If we want the `if` code block to run\nonly when a number is not equal to `0`, for example, we can change the `if`\nexpression to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-29-if-not-equal-0/src/main.rs}}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### Handling Multiple Conditions with `else if`\n\nYou can use multiple conditions by combining `if` and `else` in an `else if`\nexpression. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/src/main.rs}}\n```\n\nThis program has four possible paths it can take. After running it, you should\nsee the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/output.txt}}\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes\nthe first body for which the condition evaluates to `true`. Note that even\nthough 6 is divisible by 2, we don’t see the output `number is divisible by 2`,\nnor do we see the `number is not divisible by 4, 3, or 2` text from the `else`\nblock. That’s because Rust only executes the block for the first `true`\ncondition, and once it finds one, it doesn’t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called `match` for these cases.\n\n#### Using `if` in a `let` Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let`\nstatement to assign the outcome to a variable, as in Listing 3-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-2: Assigning the result of an `if` expression\nto a variable</span>\n\nThe `number` variable will be bound to a value based on the outcome of the `if`\nexpression. Run this code to see what happens:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-02/output.txt}}\n```\n\nRemember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole `if` expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the `if` must be\nthe same type; in Listing 3-2, the results of both the `if` arm and the `else`\narm were `i32` integers. If the types are mismatched, as in the following\nexample, we’ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/src/main.rs}}\n```\n\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/output.txt}}\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in\nthe `else` block evaluates to a string. This won’t work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n`number` variable is, definitively. Knowing the type of `number` lets the\ncompiler verify the type is valid everywhere we use `number`. Rust wouldn’t be\nable to do that if the type of `number` was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable.\n\n### Repetition with Loops\n\nIt’s often useful to execute a block of code more than once. For this task,\nRust provides several *loops*, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let’s make a new project called *loops*.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\n\n#### Repeating Code with `loop`\n\nThe `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.\n\nAs an example, change the *src/main.rs* file in your *loops* directory to look\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-loop/src/main.rs}}\n```\n\nWhen we run this program, we’ll see `again!` printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard\nshortcut <span class=\"keystroke\">ctrl-c</span> to interrupt a program that is\nstuck in a continual loop. Give it a try:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n```\n\nThe symbol `^C` represents where you pressed <span\nclass=\"keystroke\">ctrl-c</span>. You may or may not see the word `again!`\nprinted after the `^C`, depending on where the code was in the loop when it\nreceived the interrupt signal.\n\nFortunately, Rust also provides a way to break out of a loop using code. You\ncan place the `break` keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n[“Quitting After a Correct Guess”][quitting-after-a-correct-guess]<!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.\n\nWe also used `continue` in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration.\n\n#### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the `break` expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-33-return-value-from-loop/src/main.rs}}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to\n`0`. Then we declare a variable named `result` to hold the value returned from\nthe loop. On every iteration of the loop, we add `1` to the `counter` variable,\nand then check whether the `counter` is equal to `10`. When it is, we use the\n`break` keyword with the value `counter * 2`. After the loop, we use a\nsemicolon to end the statement that assigns the value to `result`. Finally, we\nprint the value in `result`, which in this case is `20`.\n\n#### Loop Labels to Disambiguate Between Multiple Loops\n\nIf you have loops within loops, `break` and `continue` apply to the innermost\nloop at that point. You can optionally specify a *loop label* on a loop that\nyou can then use with `break` or `continue` to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here’s an example with two nested loops:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/src/main.rs}}\n```\n\nThe outer loop has the label `'counting_up`, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first `break` that\ndoesn’t specify a label will exit the inner loop only. The `break\n'counting_up;` statement will exit the outer loop. This code prints:\n\n```console\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/output.txt}}\n```\n\n#### Conditional Loops with `while`\n\nA program will often need to evaluate a condition within a loop. While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop. It’s possible to implement behavior\nlike this using a combination of `loop`, `if`, `else`, and `break`; you could\ntry that now in a program, if you’d like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a `while` loop. In\nListing 3-3, we use `while` to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-3: Using a `while` loop to run code while a\ncondition holds true</span>\n\nThis construct eliminates a lot of nesting that would be necessary if you used\n`loop`, `if`, `else`, and `break`, and it’s clearer. While a condition\nevaluates to `true`, the code runs; otherwise, it exits the loop.\n\n#### Looping Through a Collection with `for`\n\nYou can choose to use the `while` construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array `a`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a `while` loop</span>\n\nHere, the code counts up through the elements in the array. It starts at index\n`0`, and then loops until it reaches the final index in the array (that is,\nwhen `index < 5` is no longer `true`). Running this code will print every\nelement in the array:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-04/output.txt}}\n```\n\nAll five array values appear in the terminal, as expected. Even though `index`\nwill reach a value of `5` at some point, the loop stops executing before trying\nto fetch a sixth value from the array.\n\nHowever, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the `a` array to have four elements but forgot to update the\ncondition to `while index < 4`, the code would panic. It’s also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code\nfor each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a `for` loop</span>\n\nWhen we run this code, we’ll see the same output as in Listing 3-4. More\nimportantly, we’ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.\n\nUsing the `for` loop, you wouldn’t need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a `while` loop\nin Listing 3-3, most Rustaceans would use a `for` loop. The way to do that\nwould be to use a `Range`, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber.\n\nHere’s what the countdown would look like using a `for` loop and another method\nwe’ve not yet talked about, `rev`, to reverse the range:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-34-for-range/src/main.rs}}\n```\n\nThis code is a bit nicer, isn’t it?\n\n## Summary\n\nYou made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, `if` expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:\n\n* Convert temperatures between Fahrenheit and Celsius.\n* Generate the *n*th Fibonacci number.\n* Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”\n  taking advantage of the repetition in the song.\n\nWhen you’re ready to move on, we’ll talk about a concept in Rust that *doesn’t*\ncommonly exist in other programming languages: ownership.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[quitting-after-a-correct-guess]:\nch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\n",
					"qas": [
						{
							"question": "What is 'if' for?",
							"id": 341,
							"answers": [
								{
									"text": "allows you to branch your code depending on conditions",
									"answer_start": 363
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## An Example Program Using Structs\n\nTo understand when we might want to use structs, let’s write a program that\ncalculates the area of a rectangle. We’ll start by using single variables, and\nthen refactor the program until we’re using structs instead.\n\nLet’s make a new binary project with Cargo called *rectangles* that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project’s *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 5-8: Calculating the area of a rectangle\nspecified by separate width and height variables</span>\n\nNow, run this program using `cargo run`:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}}\n```\n\nThis code succeeds in figuring out the area of the rectangle by calling the\n`area` function with each dimension, but we can do more to make this code clear\nand readable.\n\nThe issue with this code is evident in the signature of `area`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}}\n```\n\nThe `area` function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters, and it’s not clear anywhere in our\nprogram that the parameters are related. It would be more readable and more\nmanageable to group width and height together. We’ve already discussed one way\nwe might do that in [“The Tuple Type”][the-tuple-type]<!-- ignore --> section\nof Chapter 3: by using tuples.\n\n### Refactoring with Tuples\n\nListing 5-9 shows another version of our program that uses tuples.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-9: Specifying the width and height of the\nrectangle with a tuple</span>\n\nIn one way, this program is better. Tuples let us add a bit of structure, and\nwe’re now passing just one argument. But in another way, this version is less\nclear: tuples don’t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.\n\nMixing up the width and height wouldn’t matter for the area calculation, but if\nwe want to draw the rectangle on the screen, it would matter! We would have to\nkeep in mind that `width` is the tuple index `0` and `height` is the tuple\nindex `1`. This would be even harder for someone else to figure out and keep in\nmind if they were to use our code. Because we haven’t conveyed the meaning of\nour data in our code, it’s now easier to introduce errors.\n\n### Refactoring with Structs: Adding More Meaning\n\nWe use structs to add meaning by labeling the data. We can transform the tuple\nwe’re using into a struct with a name for the whole as well as names for the\nparts, as shown in Listing 5-10.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-10: Defining a `Rectangle` struct</span>\n\nHere we’ve defined a struct and named it `Rectangle`. Inside the curly\nbrackets, we defined the fields as `width` and `height`, both of which have\ntype `u32`. Then, in `main`, we created a particular instance of `Rectangle`\nthat has a width of `30` and a height of `50`.\n\nOur `area` function is now defined with one parameter, which we’ve named\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, `main` retains its ownership and can continue\nusing `rect1`, which is the reason we use the `&` in the function signature and\nwhere we call the function.\n\nThe `area` function accesses the `width` and `height` fields of the `Rectangle`\ninstance (note that accessing fields of a borrowed struct instance does not\nmove the field values, which is why you often see borrows of structs). Our\nfunction signature for `area` now says exactly what we mean: calculate the area\nof `Rectangle`, using its `width` and `height` fields. This conveys that the\nwidth and height are related to each other, and it gives descriptive names to\nthe values rather than using the tuple index values of `0` and `1`. This is a\nwin for clarity.\n\n### Adding Useful Functionality with Derived Traits\n\nIt’d be useful to be able to print an instance of `Rectangle` while we’re\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the [`println!` macro][println]<!-- ignore --> as we have used in\nprevious chapters. This won’t work, however.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-11: Attempting to print a `Rectangle`\ninstance</span>\n\nWhen we compile this code, we get an error with this core message:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}}\n```\n\nThe `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we’ve seen so far\nimplement `Display` by default because there’s only one way you’d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn’t try to guess what we want, and structs don’t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder.\n\nIf we continue reading the errors, we’ll find this helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}}\n```\n\nLet’s try it! The `println!` macro call will now look like `println!(\"rect1 is\n{:?}\", rect1);`. Putting the specifier `:?` inside the curly brackets tells\n`println!` we want to use an output format called `Debug`. The `Debug` trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we’re debugging our code.\n\nCompile the code with this change. Drat! We still get an error:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}}\n```\n\nBut again, the compiler gives us a helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}}\n```\n\nRust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition, as shown in Listing 5-12.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-12: Adding the attribute to derive the `Debug`\ntrait and printing the `Rectangle` instance using debug formatting</span>\n\nNow when we run the program, we won’t get any errors, and we’ll see the\nfollowing output:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}}\n```\n\nNice! It’s not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it’s useful to have output that’s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string. In\nthis example, using the `{:#?}` style will output the following:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}}\n```\n\nAnother way to print out a value using the `Debug` format is to use the [`dbg!`\nmacro][dbg]<!-- ignore -->, which takes ownership of an expression (as opposed\nto `println!`, which takes a reference), prints the file and line number of\nwhere that `dbg!` macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value.\n\n> Note: Calling the `dbg!` macro prints to the standard error console stream\n> (`stderr`), as opposed to `println!`, which prints to the standard output\n> console stream (`stdout`). We’ll talk more about `stderr` and `stdout` in the\n> [“Writing Error Messages to Standard Error Instead of Standard Output”\n> section in Chapter 12][err]<!-- ignore -->.\n\nHere’s an example where we’re interested in the value that gets assigned to the\n`width` field, as well as the value of the whole struct in `rect1`:\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}}\n```\n\nWe can put `dbg!` around the expression `30 * scale` and, because `dbg!`\nreturns ownership of the expression’s value, the `width` field will get the\nsame value as if we didn’t have the `dbg!` call there. We don’t want `dbg!` to\ntake ownership of `rect1`, so we use a reference to `rect1` in the next call.\nHere’s what the output of this example looks like:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}}\n```\n\nWe can see the first bit of output came from *src/main.rs* line 10 where we’re\ndebugging the expression `30 * scale`, and its resultant value is `60` (the\n`Debug` formatting implemented for integers is to print only their value). The\n`dbg!` call on line 14 of *src/main.rs* outputs the value of `&rect1`, which is\nthe `Rectangle` struct. This output uses the pretty `Debug` formatting of the\n`Rectangle` type. The `dbg!` macro can be really helpful when you’re trying to\nfigure out what your code is doing!\n\nIn addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes. Those traits and their behaviors are listed in [Appendix C][app-c]<!--\nignore -->. We’ll cover how to implement these traits with custom behavior as\nwell as how to create your own traits in Chapter 10. There are also many\nattributes other than `derive`; for more information, see [the “Attributes”\nsection of the Rust Reference][attributes].\n\nOur `area` function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our `Rectangle` struct\nbecause it won’t work with any other type. Let’s look at how we can continue to\nrefactor this code by turning the `area` function into an `area` *method*\ndefined on our `Rectangle` type.\n\n[the-tuple-type]: ch03-02-data-types.html#the-tuple-type\n[app-c]: appendix-03-derivable-traits.md\n[println]: ../std/macro.println.html\n[dbg]: ../std/macro.dbg.html\n[err]: ch12-06-writing-to-stderr-instead-of-stdout.html\n[attributes]: ../reference/attributes.html\n",
					"qas": [
						{
							"question": "Which macro can be useful if I want to figure out what my code is doing?\n",
							"id": 65,
							"answers": [
								{
									"text": "The `dbg!` macro can be really helpful when you’re trying to\nfigure out what your code is doing!\n",
									"answer_start": 10224
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Appendix C: Derivable Traits\n\nIn various places in the book, we’ve discussed the `derive` attribute, which\nyou can apply to a struct or enum definition. The `derive` attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you’ve annotated with the `derive` syntax.\n\nIn this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with `derive`. Each section covers:\n\n* What operators and methods deriving this trait will enable\n* What the implementation of the trait provided by `derive` does\n* What implementing the trait signifies about the type\n* The conditions in which you’re allowed or not allowed to implement the trait\n* Examples of operations that require the trait\n\nIf you want different behavior from that provided by the `derive` attribute,\nconsult the [standard library documentation](../std/index.html)<!-- ignore -->\nfor each trait for details of how to manually implement them.\n\nThese traits listed here are the only ones defined by the standard library that\ncan be implemented on your types using `derive`. Other traits defined in the\nstandard library don’t have sensible default behavior, so it’s up to you to\nimplement them in the way that makes sense for what you’re trying to accomplish.\n\nAn example of a trait that can’t be derived is `Display`, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn’t have this insight, so\nit can’t provide appropriate default behavior for you.\n\nThe list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement `derive` for their own traits, making the list of\ntraits you can use `derive` with truly open-ended. Implementing `derive`\ninvolves using a procedural macro, which is covered in the\n[“Macros”][macros]<!-- ignore --> section of Chapter 19.\n\n### `Debug` for Programmer Output\n\nThe `Debug` trait enables debug formatting in format strings, which you\nindicate by adding `:?` within `{}` placeholders.\n\nThe `Debug` trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program’s execution.\n\nThe `Debug` trait is required, for example, in use of the `assert_eq!` macro.\nThis macro prints the values of instances given as arguments if the equality\nassertion fails so programmers can see why the two instances weren’t equal.\n\n### `PartialEq` and `Eq` for Equality Comparisons\n\nThe `PartialEq` trait allows you to compare instances of a type to check for\nequality and enables use of the `==` and `!=` operators.\n\nDeriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on\nstructs, two instances are equal only if *all* fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants.\n\nThe `PartialEq` trait is required, for example, with the use of the\n`assert_eq!` macro, which needs to be able to compare two instances of a type\nfor equality.\n\nThe `Eq` trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The `Eq` trait can only be\napplied to types that also implement `PartialEq`, although not all types that\nimplement `PartialEq` can implement `Eq`. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (`NaN`) value are not equal to each other.\n\nAn example of when `Eq` is required is for keys in a `HashMap<K, V>` so the\n`HashMap<K, V>` can tell whether two keys are the same.\n\n### `PartialOrd` and `Ord` for Ordering Comparisons\n\nThe `PartialOrd` trait allows you to compare instances of a type for sorting\npurposes. A type that implements `PartialOrd` can be used with the `<`, `>`,\n`<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types\nthat also implement `PartialEq`.\n\nDeriving `PartialOrd` implements the `partial_cmp` method, which returns an\n`Option<Ordering>` that will be `None` when the values given don’t produce an\nordering. An example of a value that doesn’t produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (`NaN`) floating\npoint value. Calling `partial_cmp` with any floating point number and the `NaN`\nfloating point value will return `None`.\n\nWhen derived on structs, `PartialOrd` compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later.\n\nThe `PartialOrd` trait is required, for example, for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression.\n\nThe `Ord` trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The `Ord` trait implements the `cmp` method,\nwhich returns an `Ordering` rather than an `Option<Ordering>` because a valid\nordering will always be possible. You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When\nderived on structs and enums, `cmp` behaves the same way as the derived\nimplementation for `partial_cmp` does with `PartialOrd`.\n\nAn example of when `Ord` is required is when storing values in a `BTreeSet<T>`,\na data structure that stores data based on the sort order of the values.\n\n### `Clone` and `Copy` for Duplicating Values\n\nThe `Clone` trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See the [“Ways Variables and Data Interact:\nClone”][ways-variables-and-data-interact-clone]<!-- ignore --> section in\nChapter 4 for more information on `Clone`.\n\nDeriving `Clone` implements the `clone` method, which when implemented for the\nwhole type, calls `clone` on each of the parts of the type. This means all the\nfields or values in the type must also implement `Clone` to derive `Clone`.\n\nAn example of when `Clone` is required is when calling the `to_vec` method on a\nslice. The slice doesn’t own the type instances it contains, but the vector\nreturned from `to_vec` will need to own its instances, so `to_vec` calls\n`clone` on each item. Thus, the type stored in the slice must implement `Clone`.\n\nThe `Copy` trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See the [“Stack-Only Data:\nCopy”][stack-only-data-copy]<!-- ignore --> section in Chapter 4 for more\ninformation on `Copy`.\n\nThe `Copy` trait doesn’t define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast.\n\nYou can derive `Copy` on any type whose parts all implement `Copy`. A type that\nimplements `Copy` must also implement `Clone`, because a type that implements\n`Copy` has a trivial implementation of `Clone` that performs the same task as\n`Copy`.\n\nThe `Copy` trait is rarely required; types that implement `Copy` have\noptimizations available, meaning you don’t have to call `clone`, which makes\nthe code more concise.\n\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.\n\n### `Hash` for Mapping a Value to a Value of Fixed Size\n\nThe `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n`Hash` implements the `hash` method. The derived implementation of the `hash`\nmethod combines the result of calling `hash` on each of the parts of the type,\nmeaning all fields or values must also implement `Hash` to derive `Hash`.\n\nAn example of when `Hash` is required is in storing keys in a `HashMap<K, V>`\nto store data efficiently.\n\n### `Default` for Default Values\n\nThe `Default` trait allows you to create a default value for a type. Deriving\n`Default` implements the `default` function. The derived implementation of the\n`default` function calls the `default` function on each part of the type,\nmeaning all fields or values in the type must also implement `Default` to\nderive `Default`.\n\nThe `Default::default` function is commonly used in combination with the struct\nupdate syntax discussed in the [“Creating Instances From Other Instances With\nStruct Update\nSyntax”][creating-instances-from-other-instances-with-struct-update-syntax]<!-- ignore -->\nsection in Chapter 5. You can customize a few fields of a struct and then\nset and use a default value for the rest of the fields by using\n`..Default::default()`.\n\nThe `Default` trait is required when you use the method `unwrap_or_default` on\n`Option<T>` instances, for example. If the `Option<T>` is `None`, the method\n`unwrap_or_default` will return the result of `Default::default` for the type\n`T` stored in the `Option<T>`.\n\n[creating-instances-from-other-instances-with-struct-update-syntax]:\nch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\n[stack-only-data-copy]:\nch04-01-what-is-ownership.html#stack-only-data-copy\n[ways-variables-and-data-interact-clone]:\nch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\n[macros]: ch19-06-macros.html#macros\n",
					"qas": [
						{
							"question": "How can 'Copy' trait allow to duplicate value?",
							"id": 179,
							"answers": [
								{
									"text": "copying bits stored on\nthe stack",
									"answer_start": 6782
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is 'PartialEq' trait for?",
							"id": 166,
							"answers": [
								{
									"text": "to compare instances of a type to check for\nequality",
									"answer_start": 2746
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Controlling How Tests Are Run\n\nJust as `cargo run` compiles your code and then runs the resulting binary,\n`cargo test` compiles your code in test mode and runs the resulting test\nbinary. The default behavior of the binary produced by `cargo test` is to run\nall the tests in parallel and capture output generated during test runs,\npreventing the output from being displayed and making it easier to read the\noutput related to the test results. You can, however, specify command line\noptions to change this default behavior.\n\nSome command line options go to `cargo test`, and some go to the resulting test\nbinary. To separate these two types of arguments, you list the arguments that\ngo to `cargo test` followed by the separator `--` and then the ones that go to\nthe test binary. Running `cargo test --help` displays the options you can use\nwith `cargo test`, and running `cargo test -- --help` displays the options you\ncan use after the separator.\n\n### Running Tests in Parallel or Consecutively\n\nWhen you run multiple tests, by default they run in parallel using threads,\nmeaning they finish running faster and you get feedback quicker. Because the\ntests are running at the same time, you must make sure your tests don’t depend\non each other or on any shared state, including a shared environment, such as\nthe current working directory or environment variables.\n\nFor example, say each of your tests runs some code that creates a file on disk\nnamed *test-output.txt* and writes some data to that file. Then each test reads\nthe data in that file and asserts that the file contains a particular value,\nwhich is different in each test. Because the tests run at the same time, one\ntest might overwrite the file in the time between another test writing and\nreading the file. The second test will then fail, not because the code is\nincorrect but because the tests have interfered with each other while running\nin parallel. One solution is to make sure each test writes to a different file;\nanother solution is to run the tests one at a time.\n\nIf you don’t want to run the tests in parallel or if you want more fine-grained\ncontrol over the number of threads used, you can send the `--test-threads` flag\nand the number of threads you want to use to the test binary. Take a look at\nthe following example:\n\n```console\n$ cargo test -- --test-threads=1\n```\n\nWe set the number of test threads to `1`, telling the program not to use any\nparallelism. Running the tests using one thread will take longer than running\nthem in parallel, but the tests won’t interfere with each other if they share\nstate.\n\n### Showing Function Output\n\nBy default, if a test passes, Rust’s test library captures anything printed to\nstandard output. For example, if we call `println!` in a test and the test\npasses, we won’t see the `println!` output in the terminal; we’ll see only the\nline that indicates the test passed. If a test fails, we’ll see whatever was\nprinted to standard output with the rest of the failure message.\n\nAs an example, Listing 11-10 has a silly function that prints the value of its\nparameter and returns 10, as well as a test that passes and a test that fails.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-10/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-10: Tests for a function that calls\n`println!`</span>\n\nWhen we run these tests with `cargo test`, we’ll see the following output:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-10/output.txt}}\n```\n\nNote that nowhere in this output do we see `I got the value 4`, which is what\nis printed when the test that passes runs. That output has been captured. The\noutput from the test that failed, `I got the value 8`, appears in the section\nof the test summary output, which also shows the cause of the test failure.\n\nIf we want to see printed values for passing tests as well, we can tell Rust\nto also show the output of successful tests with `--show-output`.\n\n```console\n$ cargo test -- --show-output\n```\n\nWhen we run the tests in Listing 11-10 again with the `--show-output` flag, we\nsee the following output:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-01-show-output/output.txt}}\n```\n\n### Running a Subset of Tests by Name\n\nSometimes, running a full test suite can take a long time. If you’re working on\ncode in a particular area, you might want to run only the tests pertaining to\nthat code. You can choose which tests to run by passing `cargo test` the name\nor names of the test(s) you want to run as an argument.\n\nTo demonstrate how to run a subset of tests, we’ll first create three tests for\nour `add_two` function, as shown in Listing 11-11, and choose which ones to run.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-11/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-11: Three tests with three different\nnames</span>\n\nIf we run the tests without passing any arguments, as we saw earlier, all the\ntests will run in parallel:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-11/output.txt}}\n```\n\n#### Running Single Tests\n\nWe can pass the name of any test function to `cargo test` to run only that test:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-02-single-test/output.txt}}\n```\n\nOnly the test with the name `one_hundred` ran; the other two tests didn’t match\nthat name. The test output lets us know we had more tests that didn’t run by\ndisplaying `2 filtered out` at the end.\n\nWe can’t specify the names of multiple tests in this way; only the first value\ngiven to `cargo test` will be used. But there is a way to run multiple tests.\n\n#### Filtering to Run Multiple Tests\n\nWe can specify part of a test name, and any test whose name matches that value\nwill be run. For example, because two of our tests’ names contain `add`, we can\nrun those two by running `cargo test add`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-03-multiple-tests/output.txt}}\n```\n\nThis command ran all tests with `add` in the name and filtered out the test\nnamed `one_hundred`. Also note that the module in which a test appears becomes\npart of the test’s name, so we can run all the tests in a module by filtering\non the module’s name.\n\n### Ignoring Some Tests Unless Specifically Requested\n\nSometimes a few specific tests can be very time-consuming to execute, so you\nmight want to exclude them during most runs of `cargo test`. Rather than\nlisting as arguments all tests you do want to run, you can instead annotate the\ntime-consuming tests using the `ignore` attribute to exclude them, as shown\nhere:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/src/lib.rs}}\n```\n\nAfter `#[test]` we add the `#[ignore]` line to the test we want to exclude. Now\nwhen we run our tests, `it_works` runs, but `expensive_test` doesn’t:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/output.txt}}\n```\n\nThe `expensive_test` function is listed as `ignored`. If we want to run only\nthe ignored tests, we can use `cargo test -- --ignored`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-04-running-ignored/output.txt}}\n```\n\nBy controlling which tests run, you can make sure your `cargo test` results\nwill be fast. When you’re at a point where it makes sense to check the results\nof the `ignored` tests and you have time to wait for the results, you can run\n`cargo test -- --ignored` instead. If you want to run all tests whether they’re\nignored or not, you can run `cargo test -- --include-ignored`.\n",
					"qas": [
						{
							"question": "What does 'cargo run' do?",
							"id": 2094,
							"answers": [
								{
									"text": "compiles your code and then runs the resulting binary",
									"answer_start": 54
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Advanced Types\n\nThe Rust type system has some features that we’ve so far mentioned but haven’t\nyet discussed. We’ll start by discussing newtypes in general as we examine why\nnewtypes are useful as types. Then we’ll move on to type aliases, a feature\nsimilar to newtypes but with slightly different semantics. We’ll also discuss\nthe `!` type and dynamically sized types.\n\n### Using the Newtype Pattern for Type Safety and Abstraction\n\n> Note: This section assumes you’ve read the earlier section [“Using the\n> Newtype Pattern to Implement External Traits on External\n> Types.”][using-the-newtype-pattern]<!-- ignore -->\n\nThe newtype pattern is also useful for tasks beyond those we’ve discussed so\nfar, including statically enforcing that values are never confused and\nindicating the units of a value. You saw an example of using newtypes to\nindicate units in Listing 19-15: recall that the `Millimeters` and `Meters`\nstructs wrapped `u32` values in a newtype. If we wrote a function with a\nparameter of type `Millimeters`, we couldn’t compile a program that\naccidentally tried to call that function with a value of type `Meters` or a\nplain `u32`.\n\nWe can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type.\n\nNewtypes can also hide internal implementation. For example, we could provide a\n`People` type to wrap a `HashMap<i32, String>` that stores a person’s ID\nassociated with their name. Code using `People` would only interact with the\npublic API we provide, such as a method to add a name string to the `People`\ncollection; that code wouldn’t need to know that we assign an `i32` ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation\nto hide implementation details, which we discussed in the [“Encapsulation that\nHides Implementation\nDetails”][encapsulation-that-hides-implementation-details]<!-- ignore -->\nsection of Chapter 17.\n\n### Creating Type Synonyms with Type Aliases\n\nRust provides the ability to declare a *type alias* to give an existing type\nanother name. For this we use the `type` keyword. For example, we can create\nthe alias `Kilometers` to `i32` like so:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:here}}\n```\n\nNow, the alias `Kilometers` is a *synonym* for `i32`; unlike the `Millimeters`\nand `Meters` types we created in Listing 19-15, `Kilometers` is not a separate,\nnew type. Values that have the type `Kilometers` will be treated the same as\nvalues of type `i32`:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:there}}\n```\n\nBecause `Kilometers` and `i32` are the same type, we can add values of both\ntypes and we can pass `Kilometers` values to functions that take `i32`\nparameters. However, using this method, we don’t get the type checking benefits\nthat we get from the newtype pattern discussed earlier. In other words, if we\nmix up `Kilometers` and `i32` values somewhere, the compiler will not give us\nan error.\n\nThe main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:\n\n```rust,ignore\nBox<dyn Fn() + Send + 'static>\n```\n\nWriting this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 19-24.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-24: Using a long type in many places</span>\n\nA type alias makes this code more manageable by reducing the repetition. In\nListing 19-25, we’ve introduced an alias named `Thunk` for the verbose type and\ncan replace all uses of the type with the shorter alias `Thunk`.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-25: Introducing a type alias `Thunk` to reduce\nrepetition</span>\n\nThis code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (*thunk* is a word for code\nto be evaluated at a later time, so it’s an appropriate name for a closure that\ngets stored).\n\nType aliases are also commonly used with the `Result<T, E>` type for reducing\nrepetition. Consider the `std::io` module in the standard library. I/O\noperations often return a `Result<T, E>` to handle situations when operations\nfail to work. This library has a `std::io::Error` struct that represents all\npossible I/O errors. Many of the functions in `std::io` will be returning\n`Result<T, E>` where the `E` is `std::io::Error`, such as these functions in\nthe `Write` trait:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-05-write-trait/src/lib.rs}}\n```\n\nThe `Result<..., Error>` is repeated a lot. As such, `std::io` has this type\nalias declaration:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:here}}\n```\n\nBecause this declaration is in the `std::io` module, we can use the fully\nqualified alias `std::io::Result<T>`; that is, a `Result<T, E>` with the `E`\nfilled in as `std::io::Error`. The `Write` trait function signatures end up\nlooking like this:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:there}}\n```\n\nThe type alias helps in two ways: it makes code easier to write *and* it gives\nus a consistent interface across all of `std::io`. Because it’s an alias, it’s\njust another `Result<T, E>`, which means we can use any methods that work on\n`Result<T, E>` with it, as well as special syntax like the `?` operator.\n\n### The Never Type that Never Returns\n\nRust has a special type named `!` that’s known in type theory lingo as the\n*empty type* because it has no values. We prefer to call it the *never type*\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-07-never-type/src/lib.rs:here}}\n```\n\nThis code is read as “the function `bar` returns never.” Functions that return\nnever are called *diverging functions*. We can’t create values of the type `!`\nso `bar` can never possibly return.\n\nBut what use is a type you can never create values for? Recall the code from\nListing 2-5, part of the number guessing game; we’ve reproduced a bit of it\nhere in Listing 19-26.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:ch19}}\n```\n\n<span class=\"caption\">Listing 19-26: A `match` with an arm that ends in\n`continue`</span>\n\nAt the time, we skipped over some details in this code. In Chapter 6 in [“The\n`match` Control Flow Operator”][the-match-control-flow-operator]<!-- ignore -->\nsection, we discussed that `match` arms must all return the same type. So, for\nexample, the following code doesn’t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-08-match-arms-different-types/src/main.rs:here}}\n```\n\nThe type of `guess` in this code would have to be an integer *and* a string,\nand Rust requires that `guess` have only one type. So what does `continue`\nreturn? How were we allowed to return a `u32` from one arm and have another arm\nthat ends with `continue` in Listing 19-26?\n\nAs you might have guessed, `continue` has a `!` value. That is, when Rust\ncomputes the type of `guess`, it looks at both match arms, the former with a\nvalue of `u32` and the latter with a `!` value. Because `!` can never have a\nvalue, Rust decides that the type of `guess` is `u32`.\n\nThe formal way of describing this behavior is that expressions of type `!` can\nbe coerced into any other type. We’re allowed to end this `match` arm with\n`continue` because `continue` doesn’t return a value; instead, it moves control\nback to the top of the loop, so in the `Err` case, we never assign a value to\n`guess`.\n\nThe never type is useful with the `panic!` macro as well. Recall the `unwrap`\nfunction that we call on `Option<T>` values to produce a value or panic with\nthis definition:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-09-unwrap-definition/src/lib.rs:here}}\n```\n\nIn this code, the same thing happens as in the `match` in Listing 19-26: Rust\nsees that `val` has the type `T` and `panic!` has the type `!`, so the result\nof the overall `match` expression is `T`. This code works because `panic!`\ndoesn’t produce a value; it ends the program. In the `None` case, we won’t be\nreturning a value from `unwrap`, so this code is valid.\n\nOne final expression that has the type `!` is a `loop`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-10-loop-returns-never/src/main.rs:here}}\n```\n\nHere, the loop never ends, so `!` is the value of the expression. However, this\nwouldn’t be true if we included a `break`, because the loop would terminate\nwhen it got to the `break`.\n\n### Dynamically Sized Types and the `Sized` Trait\n\nRust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of *dynamically sized types*.\nSometimes referred to as *DSTs* or *unsized types*, these types let us write\ncode using values whose size we can know only at runtime.\n\nLet’s dig into the details of a dynamically sized type called `str`, which\nwe’ve been using throughout the book. That’s right, not `&str`, but `str` on\nits own, is a DST. We can’t know how long the string is until runtime, meaning\nwe can’t create a variable of type `str`, nor can we take an argument of type\n`str`. Consider the following code, which does not work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-11-cant-create-str/src/main.rs:here}}\n```\n\nRust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two `str` values would need to take up the\nsame amount of space. But they have different lengths: `s1` needs 12 bytes of\nstorage and `s2` needs 15. This is why it’s not possible to create a variable\nholding a dynamically sized type.\n\nSo what do we do? In this case, you already know the answer: we make the types\nof `s1` and `s2` a `&str` rather than a `str`. Recall from the [“String\nSlices”][string-slices]<!-- ignore --> section of Chapter 4 that the slice data\nstructure just stores the starting position and the length of the slice. So\nalthough a `&T` is a single value that stores the memory address of where the\n`T` is located, a `&str` is *two* values: the address of the `str` and its\nlength. As such, we can know the size of a `&str` value at compile time: it’s\ntwice the length of a `usize`. That is, we always know the size of a `&str`, no\nmatter how long the string it refers to is. In general, this is the way in\nwhich dynamically sized types are used in Rust: they have an extra bit of\nmetadata that stores the size of the dynamic information. The golden rule of\ndynamically sized types is that we must always put values of dynamically sized\ntypes behind a pointer of some kind.\n\nWe can combine `str` with all kinds of pointers: for example, `Box<str>` or\n`Rc<str>`. In fact, you’ve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In Chapter 17 in the [“Using Trait Objects That\nAllow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section, we mentioned that to use traits as trait objects, we must\nput them behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn\nTrait>` would work too).\n\nTo work with DSTs, Rust provides the `Sized` trait to determine whether or not\na type’s size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on `Sized` to every generic function. That is, a\ngeneric function definition like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-12-generic-fn-definition/src/lib.rs}}\n```\n\nis actually treated as though we had written this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-13-generic-implicit-sized-bound/src/lib.rs}}\n```\n\nBy default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-14-generic-maybe-sized/src/lib.rs}}\n```\n\nA trait bound on `?Sized` means “`T` may or may not be `Sized`” and this\nnotation overrides the default that generic types must have a known size at\ncompile time. The `?Trait` syntax with this meaning is only available for\n`Sized`, not any other traits.\n\nAlso note that we switched the type of the `t` parameter from `T` to `&T`.\nBecause the type might not be `Sized`, we need to use it behind some kind of\npointer. In this case, we’ve chosen a reference.\n\nNext, we’ll talk about functions and closures!\n\n[encapsulation-that-hides-implementation-details]:\nch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details\n[string-slices]: ch04-03-slices.html#string-slices\n[the-match-control-flow-operator]:\nch06-02-match.html#the-match-control-flow-operator\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[using-the-newtype-pattern]: ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\n",
					"qas": [
						{
							"question": "Can I give to an existing type another name?",
							"id": 81,
							"answers": [
								{
									"text": "Rust provides the ability to declare a *type alias* to give an existing type\nanother name. For this we use the `type` keyword.",
									"answer_start": 2048
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "# Smart Pointers\n\nA *pointer* is a general concept for a variable that contains an address in\nmemory. This address refers to, or “points at,” some other data. The most\ncommon kind of pointer in Rust is a reference, which you learned about in\nChapter 4. References are indicated by the `&` symbol and borrow the value they\npoint to. They don’t have any special capabilities other than referring to\ndata, and have no overhead.\n\n*Smart pointers*, on the other hand, are data structures that act like a\npointer but also have additional metadata and capabilities. The concept of\nsmart pointers isn’t unique to Rust: smart pointers originated in C++ and exist\nin other languages as well. Rust has a variety of smart pointers defined in the\nstandard library that provide functionality beyond that provided by references.\nTo explore the general concept, we’ll look at a couple of different examples of\nsmart pointers, including a *reference counting* smart pointer type. This\npointer enables you to allow data to have multiple owners by keeping track of\nthe number of owners and, when no owners remain, cleaning up the data.\n\nRust, with its concept of ownership and borrowing, has an additional difference\nbetween references and smart pointers: while references only borrow data, in\nmany cases, smart pointers *own* the data they point to.\n\nThough we didn’t call them as such at the time, we’ve already encountered a few\nsmart pointers in this book, including `String` and `Vec<T>` in Chapter 8. Both\nthese types count as smart pointers because they own some memory and allow you\nto manipulate it. They also have metadata and extra capabilities or guarantees.\n`String`, for example, stores its capacity as metadata and has the extra\nability to ensure its data will always be valid UTF-8.\n\nSmart pointers are usually implemented using structs. Unlike an ordinary\nstruct, smart pointers implement the `Deref` and `Drop` traits. The `Deref`\ntrait allows an instance of the smart pointer struct to behave like a reference\nso you can write your code to work with either references or smart pointers.\nThe `Drop` trait allows you to customize the code that’s run when an instance\nof the smart pointer goes out of scope. In this chapter, we’ll discuss both\ntraits and demonstrate why they’re important to smart pointers.\n\nGiven that the smart pointer pattern is a general design pattern used\nfrequently in Rust, this chapter won’t cover every existing smart pointer. Many\nlibraries have their own smart pointers, and you can even write your own. We’ll\ncover the most common smart pointers in the standard library:\n\n* `Box<T>` for allocating values on the heap\n* `Rc<T>`, a reference counting type that enables multiple ownership\n* `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces\n  the borrowing rules at runtime instead of compile time\n\nIn addition, we’ll cover the *interior mutability* pattern where an immutable\ntype exposes an API for mutating an interior value. We’ll also discuss\n*reference cycles*: how they can leak memory and how to prevent them.\n\nLet’s dive in!\n",
					"qas": [
						{
							"question": "What is smart pointer?",
							"id": 34,
							"answers": [
								{
									"text": "*Smart pointers*, on the other hand, are data structures that act like a\npointer but also have additional metadata and capabilities.",
									"answer_start": 426
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "# Generic Types, Traits, and Lifetimes\n\nEvery programming language has tools for effectively handling the duplication\nof concepts. In Rust, one such tool is *generics*: abstract stand-ins for\nconcrete types or other properties. We can express the behavior of generics or\nhow they relate to other generics without knowing what will be in their place\nwhen compiling and running the code.\n\nFunctions can take parameters of some generic type, instead of a concrete type\nlike `i32` or `String`, in the same way a function takes parameters with\nunknown values to run the same code on multiple concrete values. In fact, we’ve\nalready used generics in Chapter 6 with `Option<T>`, Chapter 8 with `Vec<T>`\nand `HashMap<K, V>`, and Chapter 9 with `Result<T, E>`. In this chapter, you’ll\nexplore how to define your own types, functions, and methods with generics!\n\nFirst, we’ll review how to extract a function to reduce code duplication. We’ll\nthen use the same technique to make a generic function from two functions that\ndiffer only in the types of their parameters. We’ll also explain how to use\ngeneric types in struct and enum definitions.\n\nThen you’ll learn how to use *traits* to define behavior in a generic way. You\ncan combine traits with generic types to constrain a generic type to accept\nonly those types that have a particular behavior, as opposed to just any type.\n\nFinally, we’ll discuss *lifetimes*: a variety of generics that give the\ncompiler information about how references relate to each other. Lifetimes allow\nus to give the compiler enough information about borrowed values so that it can\nensure references will be valid in more situations than it could without our\nhelp.\n\n## Removing Duplication by Extracting a Function\n\nGenerics allow us to replace specific types with a placeholder that represents\nmultiple types to remove code duplication. Before diving into generics syntax,\nthen, let’s first look at how to remove duplication in a way that doesn’t\ninvolve generic types by extracting a function that replaces specific values\nwith a placeholder that represents multiple values. Then we’ll apply the same\ntechnique to extract a generic function! By looking at how to recognize\nduplicated code you can extract into a function, you’ll start to recognize\nduplicated code that can use generics.\n\nWe begin with the short program in Listing 10-1 that finds the largest number\nin a list.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-1: Finding the largest number in a list of\nnumbers</span>\n\nWe store a list of integers in the variable `number_list` and place a reference\nto the first number in the list in a variable named `largest`. We then iterate\nthrough all the numbers in the list, and if the current number is greater than\nthe number stored in `largest`, replace the reference in that variable.\nHowever, if the current number is less than or equal to the largest number seen\nso far, the variable doesn’t change, and the code moves on to the next number\nin the list. After considering all the numbers in the list, `largest` should\nrefer to the largest number, which in this case is 100.\n\nWe've now been tasked with finding the largest number in two different lists of\nnumbers. To do so, we can choose to duplicate the code in Listing 10-1 and use\nthe same logic at two different places in the program, as shown in Listing 10-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-2: Code to find the largest number in *two*\nlists of numbers</span>\n\nAlthough this code works, duplicating code is tedious and error prone. We also\nhave to remember to update the code in multiple places when we want to change\nit.\n\nTo eliminate this duplication, we’ll create an abstraction by defining a\nfunction that operates on any list of integers passed in a parameter. This\nsolution makes our code clearer and lets us express the concept of finding the\nlargest number in a list abstractly.\n\nIn Listing 10-3, we extract the code that finds the largest number into a\nfunction named `largest`. Then we call the function to find the largest number\nin the two lists from Listing 10-2. We could also use the function on any other\nlist of `i32` values we might have in the future.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-3: Abstracted code to find the largest number\nin two lists</span>\n\nThe `largest` function has a parameter called `list`, which represents any\nconcrete slice of `i32` values we might pass into the function. As a result,\nwhen we call the function, the code runs on the specific values that we pass\nin.\n\nIn summary, here are the steps we took to change the code from Listing 10-2 to\nListing 10-3:\n\n1. Identify duplicate code.\n2. Extract the duplicate code into the body of the function and specify the\n   inputs and return values of that code in the function signature.\n3. Update the two instances of duplicated code to call the function instead.\n\nNext, we’ll use these same steps with generics to reduce code duplication. In\nthe same way that the function body can operate on an abstract `list` instead\nof specific values, generics allow code to operate on abstract types.\n\nFor example, say we had two functions: one that finds the largest item in a\nslice of `i32` values and one that finds the largest item in a slice of `char`\nvalues. How would we eliminate that duplication? Let’s find out!\n",
					"qas": [
						{
							"question": "What are generics?",
							"id": 2013,
							"answers": [
								{
									"text": "abstract stand-ins for\nconcrete types or other properties",
									"answer_start": 169
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Using Trait Objects That Allow for Values of Different Types\n\nIn Chapter 8, we mentioned that one limitation of vectors is that they can\nstore elements of only one type. We created a workaround in Listing 8-9 where\nwe defined a `SpreadsheetCell` enum that had variants to hold integers, floats,\nand text. This meant we could store different types of data in each cell and\nstill have a vector that represented a row of cells. This is a perfectly good\nsolution when our interchangeable items are a fixed set of types that we know\nwhen our code is compiled.\n\nHowever, sometimes we want our library user to be able to extend the set of\ntypes that are valid in a particular situation. To show how we might achieve\nthis, we’ll create an example graphical user interface (GUI) tool that iterates\nthrough a list of items, calling a `draw` method on each one to draw it to the\nscreen—a common technique for GUI tools. We’ll create a library crate called\n`gui` that contains the structure of a GUI library. This crate might include\nsome types for people to use, such as `Button` or `TextField`. In addition,\n`gui` users will want to create their own types that can be drawn: for\ninstance, one programmer might add an `Image` and another might add a\n`SelectBox`.\n\nWe won’t implement a fully fledged GUI library for this example but will show\nhow the pieces would fit together. At the time of writing the library, we can’t\nknow and define all the types other programmers might want to create. But we do\nknow that `gui` needs to keep track of many values of different types, and it\nneeds to call a `draw` method on each of these differently typed values. It\ndoesn’t need to know exactly what will happen when we call the `draw` method,\njust that the value will have that method available for us to call.\n\nTo do this in a language with inheritance, we might define a class named\n`Component` that has a method named `draw` on it. The other classes, such as\n`Button`, `Image`, and `SelectBox`, would inherit from `Component` and thus\ninherit the `draw` method. They could each override the `draw` method to define\ntheir custom behavior, but the framework could treat all of the types as if\nthey were `Component` instances and call `draw` on them. But because Rust\ndoesn’t have inheritance, we need another way to structure the `gui` library to\nallow users to extend it with new types.\n\n### Defining a Trait for Common Behavior\n\nTo implement the behavior we want `gui` to have, we’ll define a trait named\n`Draw` that will have one method named `draw`. Then we can define a vector that\ntakes a *trait object*. A trait object points to both an instance of a type\nimplementing our specified trait and a table used to look up trait methods on\nthat type at runtime. We create a trait object by specifying some sort of\npointer, such as a `&` reference or a `Box<T>` smart pointer, then the `dyn`\nkeyword, and then specifying the relevant trait. (We’ll talk about the reason\ntrait objects must use a pointer in Chapter 19 in the section [“Dynamically\nSized Types and the `Sized` Trait.”][dynamically-sized]<!-- ignore -->) We can\nuse trait objects in place of a generic or concrete type. Wherever we use a\ntrait object, Rust’s type system will ensure at compile time that any value\nused in that context will implement the trait object’s trait. Consequently, we\ndon’t need to know all the possible types at compile time.\n\nWe’ve mentioned that, in Rust, we refrain from calling structs and enums\n“objects” to distinguish them from other languages’ objects. In a struct or\nenum, the data in the struct fields and the behavior in `impl` blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object. However, trait objects *are* more like\nobjects in other languages in the sense that they combine data and behavior.\nBut trait objects differ from traditional objects in that we can’t add data to\na trait object. Trait objects aren’t as generally useful as objects in other\nlanguages: their specific purpose is to allow abstraction across common\nbehavior.\n\nListing 17-3 shows how to define a trait named `Draw` with one method named\n`draw`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-03/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-3: Definition of the `Draw` trait</span>\n\nThis syntax should look familiar from our discussions on how to define traits\nin Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named\n`Screen` that holds a vector named `components`. This vector is of type\n`Box<dyn Draw>`, which is a trait object; it’s a stand-in for any type inside\na `Box` that implements the `Draw` trait.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-04/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-4: Definition of the `Screen` struct with a\n`components` field holding a vector of trait objects that implement the `Draw`\ntrait</span>\n\nOn the `Screen` struct, we’ll define a method named `run` that will call the\n`draw` method on each of its `components`, as shown in Listing 17-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-5: A `run` method on `Screen` that calls the\n`draw` method on each component</span>\n\nThis works differently from defining a struct that uses a generic type\nparameter with trait bounds. A generic type parameter can only be substituted\nwith one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime. For example, we\ncould have defined the `Screen` struct using a generic type and a trait bound\nas in Listing 17-6:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-06/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-6: An alternate implementation of the `Screen`\nstruct and its `run` method using generics and trait bounds</span>\n\nThis restricts us to a `Screen` instance that has a list of components all of\ntype `Button` or all of type `TextField`. If you’ll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types.\n\nOn the other hand, with the method using trait objects, one `Screen` instance\ncan hold a `Vec<T>` that contains a `Box<Button>` as well as a\n`Box<TextField>`. Let’s look at how this works, and then we’ll talk about the\nruntime performance implications.\n\n### Implementing the Trait\n\nNow we’ll add some types that implement the `Draw` trait. We’ll provide the\n`Button` type. Again, actually implementing a GUI library is beyond the scope\nof this book, so the `draw` method won’t have any useful implementation in its\nbody. To imagine what the implementation might look like, a `Button` struct\nmight have fields for `width`, `height`, and `label`, as shown in Listing 17-7:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-07/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-7: A `Button` struct that implements the\n`Draw` trait</span>\n\nThe `width`, `height`, and `label` fields on `Button` will differ from the\nfields on other components; for example, a `TextField` type might have those\nsame fields plus a `placeholder` field. Each of the types we want to draw on\nthe screen will implement the `Draw` trait but will use different code in the\n`draw` method to define how to draw that particular type, as `Button` has here\n(without the actual GUI code, as mentioned). The `Button` type, for instance,\nmight have an additional `impl` block containing methods related to what\nhappens when a user clicks the button. These kinds of methods won’t apply to\ntypes like `TextField`.\n\nIf someone using our library decides to implement a `SelectBox` struct that has\n`width`, `height`, and `options` fields, they implement the `Draw` trait on the\n`SelectBox` type as well, as shown in Listing 17-8:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-8: Another crate using `gui` and implementing\nthe `Draw` trait on a `SelectBox` struct</span>\n\nOur library’s user can now write their `main` function to create a `Screen`\ninstance. To the `Screen` instance, they can add a `SelectBox` and a `Button`\nby putting each in a `Box<T>` to become a trait object. They can then call the\n`run` method on the `Screen` instance, which will call `draw` on each of the\ncomponents. Listing 17-9 shows this implementation:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-9: Using trait objects to store values of\ndifferent types that implement the same trait</span>\n\nWhen we wrote the library, we didn’t know that someone might add the\n`SelectBox` type, but our `Screen` implementation was able to operate on the\nnew type and draw it because `SelectBox` implements the `Draw` trait, which\nmeans it implements the `draw` method.\n\nThis concept—of being concerned only with the messages a value responds to\nrather than the value’s concrete type—is similar to the concept of *duck\ntyping* in dynamically typed languages: if it walks like a duck and quacks\nlike a duck, then it must be a duck! In the implementation of `run` on `Screen`\nin Listing 17-5, `run` doesn’t need to know what the concrete type of each\ncomponent is. It doesn’t check whether a component is an instance of a `Button`\nor a `SelectBox`, it just calls the `draw` method on the component. By\nspecifying `Box<dyn Draw>` as the type of the values in the `components`\nvector, we’ve defined `Screen` to need values that we can call the `draw`\nmethod on.\n\nThe advantage of using trait objects and Rust’s type system to write code\nsimilar to code using duck typing is that we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn’t implement a method but we call it anyway. Rust won’t compile\nour code if the values don’t implement the traits that the trait objects need.\n\nFor example, Listing 17-10 shows what happens if we try to create a `Screen`\nwith a `String` as a component:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch17-oop/listing-17-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 17-10: Attempting to use a type that doesn’t\nimplement the trait object’s trait</span>\n\nWe’ll get this error because `String` doesn’t implement the `Draw` trait:\n\n```console\n{{#include ../listings/ch17-oop/listing-17-10/output.txt}}\n```\n\nThis error lets us know that either we’re passing something to `Screen` we\ndidn’t mean to pass and so should pass a different type or we should implement\n`Draw` on `String` so that `Screen` is able to call `draw` on it.\n\n### Trait Objects Perform Dynamic Dispatch\n\nRecall in the [“Performance of Code Using\nGenerics”][performance-of-code-using-generics]<!-- ignore --> section in\nChapter 10 our discussion on the monomorphization process performed by the\ncompiler when we use trait bounds on generics: the compiler generates\nnongeneric implementations of functions and methods for each concrete type that\nwe use in place of a generic type parameter. The code that results from\nmonomorphization is doing *static dispatch*, which is when the compiler knows\nwhat method you’re calling at compile time. This is opposed to *dynamic\ndispatch*, which is when the compiler can’t tell at compile time which method\nyou’re calling. In dynamic dispatch cases, the compiler emits code that at\nruntime will figure out which method to call.\n\nWhen we use trait objects, Rust must use dynamic dispatch. The compiler doesn’t\nknow all the types that might be used with the code that’s using trait objects,\nso it doesn’t know which method implemented on which type to call. Instead, at\nruntime, Rust uses the pointers inside the trait object to know which method to\ncall. This lookup incurs a runtime cost that doesn’t occur with static\ndispatch. Dynamic dispatch also prevents the compiler from choosing to inline a\nmethod’s code, which in turn prevents some optimizations. However, we did get\nextra flexibility in the code that we wrote in Listing 17-5 and were able to\nsupport in Listing 17-9, so it’s a trade-off to consider.\n\n[performance-of-code-using-generics]:\nch10-01-syntax.html#performance-of-code-using-generics\n[dynamically-sized]: ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n",
					"qas": [
						{
							"question": "What does compilerdo during monomorphization process when we use trait bounds on generics?",
							"id": 20,
							"answers": [
								{
									"text": "the compiler generates\nnongeneric implementations of functions and methods for each concrete type that\nwe use in place of a generic type parameter",
									"answer_start": 11541
								}
							],
							"is_impossible": false
						},
						{
							"question": "What is duck typing?",
							"id": 18,
							"answers": [
								{
									"text": "if it walks like a duck and quacks\nlike a duck, then it must be a duck!",
									"answer_start": 9616
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Pattern Syntax\n\nIn this section, we gather all the syntax valid in patterns and discuss why and\nwhen you might want to use each one.\n\n### Matching Literals\n\nAs you saw in Chapter 6, you can match patterns against literals directly. The\nfollowing code gives some examples:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-01-literals/src/main.rs:here}}\n```\n\nThis code prints `one` because the value in `x` is 1. This syntax is useful\nwhen you want your code to take an action if it gets a particular concrete\nvalue.\n\n### Matching Named Variables\n\nNamed variables are irrefutable patterns that match any value, and we’ve used\nthem many times in the book. However, there is a complication when you use\nnamed variables in `match` expressions. Because `match` starts a new scope,\nvariables declared as part of a pattern inside the `match` expression will\nshadow those with the same name outside the `match` construct, as is the case\nwith all variables. In Listing 18-11, we declare a variable named `x` with the\nvalue `Some(5)` and a variable `y` with the value `10`. We then create a\n`match` expression on the value `x`. Look at the patterns in the match arms and\n`println!` at the end, and try to figure out what the code will print before\nrunning this code or reading further.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-11: A `match` expression with an arm that\nintroduces a shadowed variable `y`</span>\n\nLet’s walk through what happens when the `match` expression runs. The pattern\nin the first match arm doesn’t match the defined value of `x`, so the code\ncontinues.\n\nThe pattern in the second match arm introduces a new variable named `y` that\nwill match any value inside a `Some` value. Because we’re in a new scope inside\nthe `match` expression, this is a new `y` variable, not the `y` we declared at\nthe beginning with the value 10. This new `y` binding will match any value\ninside a `Some`, which is what we have in `x`. Therefore, this new `y` binds to\nthe inner value of the `Some` in `x`. That value is `5`, so the expression for\nthat arm executes and prints `Matched, y = 5`.\n\nIf `x` had been a `None` value instead of `Some(5)`, the patterns in the first\ntwo arms wouldn’t have matched, so the value would have matched to the\nunderscore. We didn’t introduce the `x` variable in the pattern of the\nunderscore arm, so the `x` in the expression is still the outer `x` that hasn’t\nbeen shadowed. In this hypothetical case, the `match` would print `Default\ncase, x = None`.\n\nWhen the `match` expression is done, its scope ends, and so does the scope of\nthe inner `y`. The last `println!` produces `at the end: x = Some(5), y = 10`.\n\nTo create a `match` expression that compares the values of the outer `x` and\n`y`, rather than introducing a shadowed variable, we would need to use a match\nguard conditional instead. We’ll talk about match guards later in the [“Extra\nConditionals with Match Guards”](#extra-conditionals-with-match-guards)<!--\nignore --> section.\n\n### Multiple Patterns\n\nIn `match` expressions, you can match multiple patterns using the `|` syntax,\nwhich is the pattern *or* operator. For example, in the following code we match\nthe value of `x` against the match arms, the first of which has an *or* option,\nmeaning if the value of `x` matches either of the values in that arm, that\narm’s code will run:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-02-multiple-patterns/src/main.rs:here}}\n```\n\nThis code prints `one or two`.\n\n### Matching Ranges of Values with `..=`\n\nThe `..=` syntax allows us to match to an inclusive range of values. In the\nfollowing code, when a pattern matches any of the values within the given\nrange, that arm will execute:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-03-ranges/src/main.rs:here}}\n```\n\nIf `x` is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more\nconvenient for multiple match values than using the `|` operator to express the\nsame idea; if we were to use `|` we would have to specify `1 | 2 | 3 | 4 | 5`.\nSpecifying a range is much shorter, especially if we want to match, say, any\nnumber between 1 and 1,000!\n\nThe compiler checks that the range isn’t empty at compile time, and because the\nonly types for which Rust can tell if a range is empty or not are `char` and\nnumeric values, ranges are only allowed with numeric or `char` values.\n\nHere is an example using ranges of `char` values:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-04-ranges-of-char/src/main.rs:here}}\n```\n\nRust can tell that `'c'` is within the first pattern’s range and prints `early\nASCII letter`.\n\n### Destructuring to Break Apart Values\n\nWe can also use patterns to destructure structs, enums, and tuples to use\ndifferent parts of these values. Let’s walk through each value.\n\n#### Destructuring Structs\n\nListing 18-12 shows a `Point` struct with two fields, `x` and `y`, that we can\nbreak apart using a pattern with a `let` statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-12: Destructuring a struct’s fields into\nseparate variables</span>\n\nThis code creates the variables `a` and `b` that match the values of the `x`\nand `y` fields of the `p` struct. This example shows that the names of the\nvariables in the pattern don’t have to match the field names of the struct.\nHowever, it’s common to match the variable names to the field names to make it\neasier to remember which variables came from which fields. Because of this\ncommon usage, and because writing `let Point { x: x, y: y } = p;` contains a\nlot of duplication, Rust has a shorthand for patterns that match struct fields:\nyou only need to list the name of the struct field, and the variables created\nfrom the pattern will have the same names. Listing 18-13 behaves in the same\nway as the code in Listing 18-12, but the variables created in the `let`\npattern are `x` and `y` instead of `a` and `b`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-13: Destructuring struct fields using struct\nfield shorthand</span>\n\nThis code creates the variables `x` and `y` that match the `x` and `y` fields\nof the `p` variable. The outcome is that the variables `x` and `y` contain the\nvalues from the `p` struct.\n\nWe can also destructure with literal values as part of the struct pattern\nrather than creating variables for all the fields. Doing so allows us to test\nsome of the fields for particular values while creating variables to\ndestructure the other fields.\n\nIn Listing 18-14, we have a `match` expression that separates `Point` values\ninto three cases: points that lie directly on the `x` axis (which is true when\n`y = 0`), on the `y` axis (`x = 0`), or neither.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-14: Destructuring and matching literal values\nin one pattern</span>\n\nThe first arm will match any point that lies on the `x` axis by specifying that\nthe `y` field matches if its value matches the literal `0`. The pattern still\ncreates an `x` variable that we can use in the code for this arm.\n\nSimilarly, the second arm matches any point on the `y` axis by specifying that\nthe `x` field matches if its value is `0` and creates a variable `y` for the\nvalue of the `y` field. The third arm doesn’t specify any literals, so it\nmatches any other `Point` and creates variables for both the `x` and `y` fields.\n\nIn this example, the value `p` matches the second arm by virtue of `x`\ncontaining a 0, so this code will print `On the y axis at 7`.\n\nRemember that a `match` expression stops checking arms once it has found the\nfirst matching pattern, so even though `Point { x: 0, y: 0}` is on the `x` axis\nand the `y` axis, this code would only print `On the x axis at 0`.\n\n#### Destructuring Enums\n\nWe've destructured enums in this book (for example, Listing 6-5 in Chapter 6),\nbut haven’t yet explicitly discussed that the pattern to destructure an enum\ncorresponds to the way the data stored within the enum is defined. As an\nexample, in Listing 18-15 we use the `Message` enum from Listing 6-2 and write\na `match` with patterns that will destructure each inner value.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-15/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-15: Destructuring enum variants that hold\ndifferent kinds of values</span>\n\nThis code will print `Change the color to red 0, green 160, and blue 255`. Try\nchanging the value of `msg` to see the code from the other arms run.\n\nFor enum variants without any data, like `Message::Quit`, we can’t destructure\nthe value any further. We can only match on the literal `Message::Quit` value,\nand no variables are in that pattern.\n\nFor struct-like enum variants, such as `Message::Move`, we can use a pattern\nsimilar to the pattern we specify to match structs. After the variant name, we\nplace curly brackets and then list the fields with variables so we break apart\nthe pieces to use in the code for this arm. Here we use the shorthand form as\nwe did in Listing 18-13.\n\nFor tuple-like enum variants, like `Message::Write` that holds a tuple with one\nelement and `Message::ChangeColor` that holds a tuple with three elements, the\npattern is similar to the pattern we specify to match tuples. The number of\nvariables in the pattern must match the number of elements in the variant we’re\nmatching.\n\n#### Destructuring Nested Structs and Enums\n\nSo far, our examples have all been matching structs or enums one level deep,\nbut matching can work on nested items too! For example, we can refactor the\ncode in Listing 18-15 to support RGB and HSV colors in the `ChangeColor`\nmessage, as shown in Listing 18-16.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-16/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-16: Matching on nested enums</span>\n\nThe pattern of the first arm in the `match` expression matches a\n`Message::ChangeColor` enum variant that contains a `Color::Rgb` variant; then\nthe pattern binds to the three inner `i32` values. The pattern of the second\narm also matches a `Message::ChangeColor` enum variant, but the inner enum\nmatches `Color::Hsv` instead. We can specify these complex conditions in one\n`match` expression, even though two enums are involved.\n\n#### Destructuring Structs and Tuples\n\nWe can mix, match, and nest destructuring patterns in even more complex ways.\nThe following example shows a complicated destructure where we nest structs and\ntuples inside a tuple and destructure all the primitive values out:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-05-destructuring-structs-and-tuples/src/main.rs:here}}\n```\n\nThis code lets us break complex types into their component parts so we can use\nthe values we’re interested in separately.\n\nDestructuring with patterns is a convenient way to use pieces of values, such\nas the value from each field in a struct, separately from each other.\n\n### Ignoring Values in a Pattern\n\nYou’ve seen that it’s sometimes useful to ignore values in a pattern, such as\nin the last arm of a `match`, to get a catchall that doesn’t actually do\nanything but does account for all remaining possible values. There are a few\nways to ignore entire values or parts of values in a pattern: using the `_`\npattern (which you’ve seen), using the `_` pattern within another pattern,\nusing a name that starts with an underscore, or using `..` to ignore remaining\nparts of a value. Let’s explore how and why to use each of these patterns.\n\n#### Ignoring an Entire Value with `_`\n\nWe’ve used the underscore as a wildcard pattern that will match any value but\nnot bind to the value. This is especially useful as the last arm in a `match`\nexpression, but we can also use it in any pattern, including function\nparameters, as shown in Listing 18-17.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-17/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-17: Using `_` in a function signature</span>\n\nThis code will completely ignore the value `3` passed as the first argument,\nand will print `This code only uses the y parameter: 4`.\n\nIn most cases when you no longer need a particular function parameter, you\nwould change the signature so it doesn’t include the unused parameter. Ignoring\na function parameter can be especially useful in cases when, for example,\nyou're implementing a trait when you need a certain type signature but the\nfunction body in your implementation doesn’t need one of the parameters. You\nthen avoid getting a compiler warning about unused function parameters, as you\nwould if you used a name instead.\n\n#### Ignoring Parts of a Value with a Nested `_`\n\nWe can also use `_` inside another pattern to ignore just part of a value, for\nexample, when we want to test for only part of a value but have no use for the\nother parts in the corresponding code we want to run. Listing 18-18 shows code\nresponsible for managing a setting’s value. The business requirements are that\nthe user should not be allowed to overwrite an existing customization of a\nsetting but can unset the setting and give it a value if it is currently unset.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-18: Using an underscore within patterns that\nmatch `Some` variants when we don’t need to use the value inside the\n`Some`</span>\n\nThis code will print `Can't overwrite an existing customized value` and then\n`setting is Some(5)`. In the first match arm, we don’t need to match on or use\nthe values inside either `Some` variant, but we do need to test for the case\nwhen `setting_value` and `new_setting_value` are the `Some` variant. In that\ncase, we print the reason for not changing `setting_value`, and it doesn’t get\nchanged.\n\nIn all other cases (if either `setting_value` or `new_setting_value` are\n`None`) expressed by the `_` pattern in the second arm, we want to allow\n`new_setting_value` to become `setting_value`.\n\nWe can also use underscores in multiple places within one pattern to ignore\nparticular values. Listing 18-19 shows an example of ignoring the second and\nfourth values in a tuple of five items.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-19: Ignoring multiple parts of a tuple</span>\n\nThis code will print `Some numbers: 2, 8, 32`, and the values 4 and 16 will be\nignored.\n\n#### Ignoring an Unused Variable by Starting Its Name with `_`\n\nIf you create a variable but don’t use it anywhere, Rust will usually issue a\nwarning because an unused variable could be a bug. However, sometimes it’s\nuseful to be able to create a variable you won’t use yet, such as when you’re\nprototyping or just starting a project. In this situation, you can tell Rust\nnot to warn you about the unused variable by starting the name of the variable\nwith an underscore. In Listing 18-20, we create two unused variables, but when\nwe compile this code, we should only get a warning about one of them.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-20/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-20: Starting a variable name with an\nunderscore to avoid getting unused variable warnings</span>\n\nHere we get a warning about not using the variable `y`, but we don’t get a\nwarning about not using `_x`.\n\nNote that there is a subtle difference between using only `_` and using a name\nthat starts with an underscore. The syntax `_x` still binds the value to the\nvariable, whereas `_` doesn’t bind at all. To show a case where this\ndistinction matters, Listing 18-21 will provide us with an error.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-21: An unused variable starting with an\nunderscore still binds the value, which might take ownership of the value</span>\n\nWe’ll receive an error because the `s` value will still be moved into `_s`,\nwhich prevents us from using `s` again. However, using the underscore by itself\ndoesn’t ever bind to the value. Listing 18-22 will compile without any errors\nbecause `s` doesn’t get moved into `_`.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-22: Using an underscore does not bind the\nvalue</span>\n\nThis code works just fine because we never bind `s` to anything; it isn’t moved.\n\n#### Ignoring Remaining Parts of a Value with `..`\n\nWith values that have many parts, we can use the `..` syntax to use specific\nparts and ignore the rest, avoiding the need to list underscores for each\nignored value. The `..` pattern ignores any parts of a value that we haven’t\nexplicitly matched in the rest of the pattern. In Listing 18-23, we have a\n`Point` struct that holds a coordinate in three-dimensional space. In the\n`match` expression, we want to operate only on the `x` coordinate and ignore\nthe values in the `y` and `z` fields.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-23: Ignoring all fields of a `Point` except\nfor `x` by using `..`</span>\n\nWe list the `x` value and then just include the `..` pattern. This is quicker\nthan having to list `y: _` and `z: _`, particularly when we’re working with\nstructs that have lots of fields in situations where only one or two fields are\nrelevant.\n\nThe syntax `..` will expand to as many values as it needs to be. Listing 18-24\nshows how to use `..` with a tuple.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-24/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-24: Matching only the first and last values in\na tuple and ignoring all other values</span>\n\nIn this code, the first and last value are matched with `first` and `last`. The\n`..` will match and ignore everything in the middle.\n\nHowever, using `..` must be unambiguous. If it is unclear which values are\nintended for matching and which should be ignored, Rust will give us an error.\nListing 18-25 shows an example of using `..` ambiguously, so it will not\ncompile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-25/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-25: An attempt to use `..` in an ambiguous\nway</span>\n\nWhen we compile this example, we get this error:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-25/output.txt}}\n```\n\nIt’s impossible for Rust to determine how many values in the tuple to ignore\nbefore matching a value with `second` and then how many further values to\nignore thereafter. This code could mean that we want to ignore `2`, bind\n`second` to `4`, and then ignore `8`, `16`, and `32`; or that we want to ignore\n`2` and `4`, bind `second` to `8`, and then ignore `16` and `32`; and so forth.\nThe variable name `second` doesn’t mean anything special to Rust, so we get a\ncompiler error because using `..` in two places like this is ambiguous.\n\n### Extra Conditionals with Match Guards\n\nA *match guard* is an additional `if` condition, specified after the pattern in\na `match` arm, that must also match for that arm to be chosen. Match guards are\nuseful for expressing more complex ideas than a pattern alone allows.\n\nThe condition can use variables created in the pattern. Listing 18-26 shows a\n`match` where the first arm has the pattern `Some(x)` and also has a match\nguard of `if x % 2 == 0` (which will be true if the number is even).\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-26/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-26: Adding a match guard to a pattern</span>\n\nThis example will print `The number 4 is even`. When `num` is compared to the\npattern in the first arm, it matches, because `Some(4)` matches `Some(x)`. Then\nthe match guard checks whether the remainder of dividing `x` by 2 is equal to\n0, and because it is, the first arm is selected.\n\nIf `num` had been `Some(5)` instead, the match guard in the first arm would\nhave been false because the remainder of 5 divided by 2 is 1, which is not\nequal to 0. Rust would then go to the second arm, which would match because the\nsecond arm doesn’t have a match guard and therefore matches any `Some` variant.\n\nThere is no way to express the `if x % 2 == 0` condition within a pattern, so\nthe match guard gives us the ability to express this logic. The downside of\nthis additional expressiveness is that the compiler doesn't try to check for\nexhaustiveness when match guard expressions are involved.\n\nIn Listing 18-11, we mentioned that we could use match guards to solve our\npattern-shadowing problem. Recall that we created a new variable inside the\npattern in the `match` expression instead of using the variable outside the\n`match`. That new variable meant we couldn’t test against the value of the\nouter variable. Listing 18-27 shows how we can use a match guard to fix this\nproblem.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-27/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-27: Using a match guard to test for equality\nwith an outer variable</span>\n\nThis code will now print `Default case, x = Some(5)`. The pattern in the second\nmatch arm doesn’t introduce a new variable `y` that would shadow the outer `y`,\nmeaning we can use the outer `y` in the match guard. Instead of specifying the\npattern as `Some(y)`, which would have shadowed the outer `y`, we specify\n`Some(n)`. This creates a new variable `n` that doesn’t shadow anything because\nthere is no `n` variable outside the `match`.\n\nThe match guard `if n == y` is not a pattern and therefore doesn’t introduce\nnew variables. This `y` *is* the outer `y` rather than a new shadowed `y`, and\nwe can look for a value that has the same value as the outer `y` by comparing\n`n` to `y`.\n\nYou can also use the *or* operator `|` in a match guard to specify multiple\npatterns; the match guard condition will apply to all the patterns. Listing\n18-28 shows the precedence when combining a pattern that uses `|` with a match\nguard. The important part of this example is that the `if y` match guard\napplies to `4`, `5`, *and* `6`, even though it might look like `if y` only\napplies to `6`.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-28/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-28: Combining multiple patterns with a match\nguard</span>\n\nThe match condition states that the arm only matches if the value of `x` is\nequal to `4`, `5`, or `6` *and* if `y` is `true`. When this code runs, the\npattern of the first arm matches because `x` is `4`, but the match guard `if y`\nis false, so the first arm is not chosen. The code moves on to the second arm,\nwhich does match, and this program prints `no`. The reason is that the `if`\ncondition applies to the whole pattern `4 | 5 | 6`, not only to the last value\n`6`. In other words, the precedence of a match guard in relation to a pattern\nbehaves like this:\n\n```text\n(4 | 5 | 6) if y => ...\n```\n\nrather than this:\n\n```text\n4 | 5 | (6 if y) => ...\n```\n\nAfter running the code, the precedence behavior is evident: if the match guard\nwere applied only to the final value in the list of values specified using the\n`|` operator, the arm would have matched and the program would have printed\n`yes`.\n\n### `@` Bindings\n\nThe *at* operator `@` lets us create a variable that holds a value at the same\ntime as we’re testing that value for a pattern match. In Listing 18-29, we want\nto test that a `Message::Hello` `id` field is within the range `3..=7`. We also\nwant to bind the value to the variable `id_variable` so we can use it in the\ncode associated with the arm. We could name this variable `id`, the same as the\nfield, but for this example we’ll use a different name.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-29/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-29: Using `@` to bind to a value in a pattern\nwhile also testing it</span>\n\nThis example will print `Found an id in range: 5`. By specifying `id_variable\n@` before the range `3..=7`, we’re capturing whatever value matched the range\nwhile also testing that the value matched the range pattern.\n\nIn the second arm, where we only have a range specified in the pattern, the code\nassociated with the arm doesn’t have a variable that contains the actual value\nof the `id` field. The `id` field’s value could have been 10, 11, or 12, but\nthe code that goes with that pattern doesn’t know which it is. The pattern code\nisn’t able to use the value from the `id` field, because we haven’t saved the\n`id` value in a variable.\n\nIn the last arm, where we’ve specified a variable without a range, we do have\nthe value available to use in the arm’s code in a variable named `id`. The\nreason is that we’ve used the struct field shorthand syntax. But we haven’t\napplied any test to the value in the `id` field in this arm, as we did with the\nfirst two arms: any value would match this pattern.\n\nUsing `@` lets us test a value and save it in a variable within one pattern.\n\n## Summary\n\nRust’s patterns are very useful in distinguishing between different kinds of\ndata. When used in `match` expressions, Rust ensures your patterns cover every\npossible value, or your program won’t compile. Patterns in `let` statements and\nfunction parameters make those constructs more useful, enabling the\ndestructuring of values into smaller parts at the same time as assigning to\nvariables. We can create simple or complex patterns to suit our needs.\n\nNext, for the penultimate chapter of the book, we’ll look at some advanced\naspects of a variety of Rust’s features.\n",
					"qas": [
						{
							"question": "Is it possible to use underscores in multiple places of pattern?",
							"id": 48,
							"answers": [
								{
									"text": "We can also use underscores in multiple places within one pattern to ignore\nparticular values",
									"answer_start": 14659
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Writing Error Messages to Standard Error Instead of Standard Output\n\nAt the moment, we’re writing all of our output to the terminal using the\n`println!` macro. In most terminals, there are two kinds of output: *standard\noutput* (`stdout`) for general information and *standard error* (`stderr`) for\nerror messages. This distinction enables users to choose to direct the\nsuccessful output of a program to a file but still print error messages to the\nscreen.\n\nThe `println!` macro is only capable of printing to standard output, so we\nhave to use something else to print to standard error.\n\n### Checking Where Errors Are Written\n\nFirst, let’s observe how the content printed by `minigrep` is currently being\nwritten to standard output, including any error messages we want to write to\nstandard error instead. We’ll do that by redirecting the standard output stream\nto a file while intentionally causing an error. We won’t redirect the standard\nerror stream, so any content sent to standard error will continue to display on\nthe screen.\n\nCommand line programs are expected to send error messages to the standard error\nstream so we can still see error messages on the screen even if we redirect the\nstandard output stream to a file. Our program is not currently well-behaved:\nwe’re about to see that it saves the error message output to a file instead!\n\nTo demonstrate this behavior, we’ll run the program with `>` and the file path,\n*output.txt*, that we want to redirect the standard output stream to. We won’t\npass any arguments, which should cause an error:\n\n```console\n$ cargo run > output.txt\n```\n\nThe `>` syntax tells the shell to write the contents of standard output to\n*output.txt* instead of the screen. We didn’t see the error message we were\nexpecting printed to the screen, so that means it must have ended up in the\nfile. This is what *output.txt* contains:\n\n```text\nProblem parsing arguments: not enough arguments\n```\n\nYup, our error message is being printed to standard output. It’s much more\nuseful for error messages like this to be printed to standard error so only\ndata from a successful run ends up in the file. We’ll change that.\n\n### Printing Errors to Standard Error\n\nWe’ll use the code in Listing 12-24 to change how error messages are printed.\nBecause of the refactoring we did earlier in this chapter, all the code that\nprints error messages is in one function, `main`. The standard library provides\nthe `eprintln!` macro that prints to the standard error stream, so let’s change\nthe two places we were calling `println!` to print errors to use `eprintln!`\ninstead.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-24: Writing error messages to standard error\ninstead of standard output using `eprintln!`</span>\n\nLet’s now run the program again in the same way, without any arguments and\nredirecting standard output with `>`:\n\n```console\n$ cargo run > output.txt\nProblem parsing arguments: not enough arguments\n```\n\nNow we see the error onscreen and *output.txt* contains nothing, which is the\nbehavior we expect of command line programs.\n\nLet’s run the program again with arguments that don’t cause an error but still\nredirect standard output to a file, like so:\n\n```console\n$ cargo run -- to poem.txt > output.txt\n```\n\nWe won’t see any output to the terminal, and *output.txt* will contain our\nresults:\n\n<span class=\"filename\">Filename: output.txt</span>\n\n```text\nAre you nobody, too?\nHow dreary to be somebody!\n```\n\nThis demonstrates that we’re now using standard output for successful output\nand standard error for error output as appropriate.\n\n## Summary\n\nThis chapter recapped some of the major concepts you’ve learned so far and\ncovered how to perform common I/O operations in Rust. By using command line\narguments, files, environment variables, and the `eprintln!` macro for printing\nerrors, you’re now prepared to write command line applications. Combined with\nthe concepts in previous chapters, your code will be well organized, store data\neffectively in the appropriate data structures, handle errors nicely, and be\nwell tested.\n\nNext, we’ll explore some Rust features that were influenced by functional\nlanguages: closures and iterators.\n",
					"qas": [
						{
							"question": "What is stderr used for?",
							"id": 2130,
							"answers": [
								{
									"text": "for\nerror messages",
									"answer_start": 298
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Cargo Workspaces\n\nIn Chapter 12, we built a package that included a binary crate and a library\ncrate. As your project develops, you might find that the library crate\ncontinues to get bigger and you want to split your package further into\nmultiple library crates. Cargo offers a feature called *workspaces* that can\nhelp manage multiple related packages that are developed in tandem.\n\n### Creating a Workspace\n\nA *workspace* is a set of packages that share the same *Cargo.lock* and output\ndirectory. Let’s make a project using a workspace—we’ll use trivial code so we\ncan concentrate on the structure of the workspace. There are multiple ways to\nstructure a workspace, so we'll just show one common way. We’ll have a\nworkspace containing a binary and two libraries. The binary, which will provide\nthe main functionality, will depend on the two libraries. One library will\nprovide an `add_one` function, and a second library an `add_two` function.\nThese three crates will be part of the same workspace. We’ll start by creating\na new directory for the workspace:\n\n```console\n$ mkdir add\n$ cd add\n```\n\nNext, in the *add* directory, we create the *Cargo.toml* file that will\nconfigure the entire workspace. This file won’t have a `[package]` section.\nInstead, it will start with a `[workspace]` section that will allow us to add\nmembers to the workspace by specifying the path to the package with our binary\ncrate; in this case, that path is *adder*:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-01-workspace-with-adder-crate/add/Cargo.toml}}\n```\n\nNext, we’ll create the `adder` binary crate by running `cargo new` within the\n*add* directory:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-01-adder-crate/add\nrm -rf adder\ncargo new adder\ncopy output below\n-->\n\n```console\n$ cargo new adder\n     Created binary (application) `adder` package\n```\n\nAt this point, we can build the workspace by running `cargo build`. The files\nin your *add* directory should look like this:\n\n```text\n├── Cargo.lock\n├── Cargo.toml\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target\n```\n\nThe workspace has one *target* directory at the top level that the compiled\nartifacts will be placed into; the `adder` package doesn’t have its own\n*target* directory. Even if we were to run `cargo build` from inside the\n*adder* directory, the compiled artifacts would still end up in *add/target*\nrather than *add/adder/target*. Cargo structures the *target* directory in a\nworkspace like this because the crates in a workspace are meant to depend on\neach other. If each crate had its own *target* directory, each crate would have\nto recompile each of the other crates in the workspace to place the artifacts\nin its own *target* directory. By sharing one *target* directory, the crates\ncan avoid unnecessary rebuilding.\n\n### Creating the Second Package in the Workspace\n\nNext, let’s create another member package in the workspace and call it\n`add_one`. Change the top-level *Cargo.toml* to specify the *add_one* path in\nthe `members` list:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/Cargo.toml}}\n```\n\nThen generate a new library crate named `add_one`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-02-add-one/add\nrm -rf add_one\ncargo new add_one --lib\ncopy output below\n-->\n\n```console\n$ cargo new add_one --lib\n     Created library `add_one` package\n```\n\nYour *add* directory should now have these directories and files:\n\n```text\n├── Cargo.lock\n├── Cargo.toml\n├── add_one\n│   ├── Cargo.toml\n│   └── src\n│       └── lib.rs\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target\n```\n\nIn the *add_one/src/lib.rs* file, let’s add an `add_one` function:\n\n<span class=\"filename\">Filename: add_one/src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/add_one/src/lib.rs}}\n```\n\nNow we can have the `adder` package with our binary depend on the `add_one`\npackage that has our library. First, we’ll need to add a path dependency on\n`add_one` to *adder/Cargo.toml*.\n\n<span class=\"filename\">Filename: adder/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/adder/Cargo.toml:6:7}}\n```\n\nCargo doesn’t assume that crates in a workspace will depend on each other, so\nwe need to be explicit about the dependency relationships.\n\nNext, let’s use the `add_one` function (from the `add_one` crate) in the\n`adder` crate. Open the *adder/src/main.rs* file and add a `use` line at the\ntop to bring the new `add_one` library crate into scope. Then change the `main`\nfunction to call the `add_one` function, as in Listing 14-7.\n\n<span class=\"filename\">Filename: adder/src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-07/add/adder/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 14-7: Using the `add_one` library crate from the\n `adder` crate</span>\n\nLet’s build the workspace by running `cargo build` in the top-level *add*\ndirectory!\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n```\n\nTo run the binary crate from the *add* directory, we can specify which\npackage in the workspace we want to run by using the `-p` argument and the\npackage name with `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo run -p adder\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo run -p adder\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!\n```\n\nThis runs the code in *adder/src/main.rs*, which depends on the `add_one` crate.\n\n#### Depending on an External Package in a Workspace\n\nNotice that the workspace has only one *Cargo.lock* file at the top level,\nrather than having a *Cargo.lock* in each crate’s directory. This ensures that\nall crates are using the same version of all dependencies. If we add the `rand`\npackage to the *adder/Cargo.toml* and *add_one/Cargo.toml* files, Cargo will\nresolve both of those to one version of `rand` and record that in the one\n*Cargo.lock*. Making all crates in the workspace use the same dependencies\nmeans the crates will always be compatible with each other. Let’s add the\n`rand` crate to the `[dependencies]` section in the *add_one/Cargo.toml* file\nso we can use the `rand` crate in the `add_one` crate:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n-->\n\n<span class=\"filename\">Filename: add_one/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add/add_one/Cargo.toml:6:7}}\n```\n\nWe can now add `use rand;` to the *add_one/src/lib.rs* file, and building the\nwhole workspace by running `cargo build` in the *add* directory will bring in\nand compile the `rand` crate. We will get one warning because we aren’t\nreferring to the `rand` we brought into scope:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n   --snip--\n   Compiling rand v0.8.5\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand`\n --> add_one/src/lib.rs:1:5\n  |\n1 | use rand;\n  |     ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `add_one` (lib) generated 1 warning\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 10.18s\n```\n\nThe top-level *Cargo.lock* now contains information about the dependency of\n`add_one` on `rand`. However, even though `rand` is used somewhere in the\nworkspace, we can’t use it in other crates in the workspace unless we add\n`rand` to their *Cargo.toml* files as well. For example, if we add `use rand;`\nto the *adder/src/main.rs* file for the `adder` package, we’ll get an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-03-use-rand/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n --> adder/src/main.rs:2:5\n  |\n2 | use rand;\n  |     ^^^^ no external crate `rand`\n```\n\nTo fix this, edit the *Cargo.toml* file for the `adder` package and indicate\nthat `rand` is a dependency for it as well. Building the `adder` package will\nadd `rand` to the list of dependencies for `adder` in *Cargo.lock*, but no\nadditional copies of `rand` will be downloaded. Cargo has ensured that every\ncrate in every package in the workspace using the `rand` package will be using\nthe same version, saving us space and ensuring that the crates in the workspace\nwill be compatible with each other.\n\n#### Adding a Test to a Workspace\n\nFor another enhancement, let’s add a test of the `add_one::add_one` function\nwithin the `add_one` crate:\n\n<span class=\"filename\">Filename: add_one/src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add/add_one/src/lib.rs}}\n```\n\nNow run `cargo test` in the top-level *add* directory. Running `cargo test` in\na workspace structured like this one will run the tests for all the crates in\nthe workspace:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test\ncopy output below; the output updating script doesn't handle subdirectories in\npaths properly\n-->\n\n```console\n$ cargo test\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.27s\n     Running unittests src/lib.rs (target/debug/deps/add_one-f0253159197f7841)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/adder-49979ff40686fa8e)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n```\n\nThe first section of the output shows that the `it_works` test in the `add_one`\ncrate passed. The next section shows that zero tests were found in the `adder`\ncrate, and then the last section shows zero documentation tests were found in\nthe `add_one` crate.\n\nWe can also run tests for one particular crate in a workspace from the\ntop-level directory by using the `-p` flag and specifying the name of the crate\nwe want to test:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test -p add_one\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo test -p add_one\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests src/lib.rs (target/debug/deps/add_one-b3235fea9a156f74)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n```\n\nThis output shows `cargo test` only ran the tests for the `add_one` crate and\ndidn’t run the `adder` crate tests.\n\nIf you publish the crates in the workspace to [crates.io](https://crates.io/),\neach crate in the workspace will need to be published separately. Like `cargo\ntest`, we can publish a particular crate in our workspace by using the `-p`\nflag and specifying the name of the crate we want to publish.\n\nFor additional practice, add an `add_two` crate to this workspace in a similar\nway as the `add_one` crate!\n\nAs your project grows, consider using a workspace: it’s easier to understand\nsmaller, individual components than one big blob of code. Furthermore, keeping\nthe crates in a workspace can make coordination between crates easier if they\nare often changed at the same time.\n",
					"qas": [
						{
							"question": "How many cargo.lock files are in workspace?",
							"id": 136,
							"answers": [
								{
									"text": "the workspace has only one *Cargo.lock* file at the top level,\nrather than having a *Cargo.lock* in each crate’s directory",
									"answer_start": 6325
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Unsafe Rust\n\nAll the code we’ve discussed so far has had Rust’s memory safety guarantees\nenforced at compile time. However, Rust has a second language hidden inside it\nthat doesn’t enforce these memory safety guarantees: it’s called *unsafe Rust*\nand works just like regular Rust, but gives us extra superpowers.\n\nUnsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit’s better for it to reject some valid programs than to accept some invalid\nprograms. Although the code *might* be okay, if the Rust compiler doesn’t have\nenough information to be confident, it will reject the code. In these cases,\nyou can use unsafe code to tell the compiler, “Trust me, I know what I’m\ndoing.” Be warned, however, that you use unsafe Rust at your own risk: if you\nuse unsafe code incorrectly, problems can occur due to memory unsafety, such as\nnull pointer dereferencing.\n\nAnother reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn’t let you do unsafe operations, you\ncouldn’t do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let’s explore what we can do with unsafe\nRust and how to do it.\n\n### Unsafe Superpowers\n\nTo switch to unsafe Rust, use the `unsafe` keyword and then start a new block\nthat holds the unsafe code. You can take five actions in unsafe Rust that you\ncan’t in safe Rust, which we call *unsafe superpowers*. Those superpowers\ninclude the ability to:\n\n* Dereference a raw pointer\n* Call an unsafe function or method\n* Access or modify a mutable static variable\n* Implement an unsafe trait\n* Access fields of `union`s\n\nIt’s important to understand that `unsafe` doesn’t turn off the borrow checker\nor disable any other of Rust’s safety checks: if you use a reference in unsafe\ncode, it will still be checked. The `unsafe` keyword only gives you access to\nthese five features that are then not checked by the compiler for memory\nsafety. You’ll still get some degree of safety inside of an unsafe block.\n\nIn addition, `unsafe` does not mean the code inside the block is necessarily\ndangerous or that it will definitely have memory safety problems: the intent is\nthat as the programmer, you’ll ensure the code inside an `unsafe` block will\naccess memory in a valid way.\n\nPeople are fallible, and mistakes will happen, but by requiring these five\nunsafe operations to be inside blocks annotated with `unsafe` you’ll know that\nany errors related to memory safety must be within an `unsafe` block. Keep\n`unsafe` blocks small; you’ll be thankful later when you investigate memory\nbugs.\n\nTo isolate unsafe code as much as possible, it’s best to enclose unsafe code\nwithin a safe abstraction and provide a safe API, which we’ll discuss later in\nthe chapter when we examine unsafe functions and methods. Parts of the standard\nlibrary are implemented as safe abstractions over unsafe code that has been\naudited. Wrapping unsafe code in a safe abstraction prevents uses of `unsafe`\nfrom leaking out into all the places that you or your users might want to use\nthe functionality implemented with `unsafe` code, because using a safe\nabstraction is safe.\n\nLet’s look at each of the five unsafe superpowers in turn. We’ll also look at\nsome abstractions that provide a safe interface to unsafe code.\n\n### Dereferencing a Raw Pointer\n\nIn Chapter 4, in the [“Dangling References”][dangling-references]<!-- ignore\n--> section, we mentioned that the compiler ensures references are always\nvalid. Unsafe Rust has two new types called *raw pointers* that are similar to\nreferences. As with references, raw pointers can be immutable or mutable and\nare written as `*const T` and `*mut T`, respectively. The asterisk isn’t the\ndereference operator; it’s part of the type name. In the context of raw\npointers, *immutable* means that the pointer can’t be directly assigned to\nafter being dereferenced.\n\nDifferent from references and smart pointers, raw pointers:\n\n* Are allowed to ignore the borrowing rules by having both immutable and\n  mutable pointers or multiple mutable pointers to the same location\n* Aren’t guaranteed to point to valid memory\n* Are allowed to be null\n* Don’t implement any automatic cleanup\n\nBy opting out of having Rust enforce these guarantees, you can give up\nguaranteed safety in exchange for greater performance or the ability to\ninterface with another language or hardware where Rust’s guarantees don’t apply.\n\nListing 19-1 shows how to create an immutable and a mutable raw pointer from\nreferences.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-1: Creating raw pointers from references</span>\n\nNotice that we don’t include the `unsafe` keyword in this code. We can create\nraw pointers in safe code; we just can’t dereference raw pointers outside an\nunsafe block, as you’ll see in a bit.\n\nWe’ve created raw pointers by using `as` to cast an immutable and a mutable\nreference into their corresponding raw pointer types. Because we created them\ndirectly from references guaranteed to be valid, we know these particular raw\npointers are valid, but we can’t make that assumption about just any raw\npointer.\n\nTo demonstrate this, next we’ll create a raw pointer whose validity we can’t be\nso certain of. Listing 19-2 shows how to create a raw pointer to an arbitrary\nlocation in memory. Trying to use arbitrary memory is undefined: there might be\ndata at that address or there might not, the compiler might optimize the code\nso there is no memory access, or the program might error with a segmentation\nfault. Usually, there is no good reason to write code like this, but it is\npossible.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-2: Creating a raw pointer to an arbitrary\nmemory address</span>\n\nRecall that we can create raw pointers in safe code, but we can’t *dereference*\nraw pointers and read the data being pointed to. In Listing 19-3, we use the\ndereference operator `*` on a raw pointer that requires an `unsafe` block.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-3: Dereferencing raw pointers within an\n`unsafe` block</span>\n\nCreating a pointer does no harm; it’s only when we try to access the value that\nit points at that we might end up dealing with an invalid value.\n\nNote also that in Listing 19-1 and 19-3, we created `*const i32` and `*mut i32`\nraw pointers that both pointed to the same memory location, where `num` is\nstored. If we instead tried to create an immutable and a mutable reference to\n`num`, the code would not have compiled because Rust’s ownership rules don’t\nallow a mutable reference at the same time as any immutable references. With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race. Be careful!\n\nWith all of these dangers, why would you ever use raw pointers? One major use\ncase is when interfacing with C code, as you’ll see in the next section,\n[“Calling an Unsafe Function or\nMethod.”](#calling-an-unsafe-function-or-method)<!-- ignore --> Another case is\nwhen building up safe abstractions that the borrow checker doesn’t understand.\nWe’ll introduce unsafe functions and then look at an example of a safe\nabstraction that uses unsafe code.\n\n### Calling an Unsafe Function or Method\n\nThe second type of operation you can perform in an unsafe block is calling\nunsafe functions. Unsafe functions and methods look exactly like regular\nfunctions and methods, but they have an extra `unsafe` before the rest of the\ndefinition. The `unsafe` keyword in this context indicates the function has\nrequirements we need to uphold when we call this function, because Rust can’t\nguarantee we’ve met these requirements. By calling an unsafe function within an\n`unsafe` block, we’re saying that we’ve read this function’s documentation and\ntake responsibility for upholding the function’s contracts.\n\nHere is an unsafe function named `dangerous` that doesn’t do anything in its\nbody:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-01-unsafe-fn/src/main.rs:here}}\n```\n\nWe must call the `dangerous` function within a separate `unsafe` block. If we\ntry to call `dangerous` without the `unsafe` block, we’ll get an error:\n\n```console\n{{#include ../listings/ch19-advanced-features/output-only-01-missing-unsafe/output.txt}}\n```\n\nWith the `unsafe` block, we’re asserting to Rust that we’ve read the function’s\ndocumentation, we understand how to use it properly, and we’ve verified that\nwe’re fulfilling the contract of the function.\n\nBodies of unsafe functions are effectively `unsafe` blocks, so to perform other\nunsafe operations within an unsafe function, we don’t need to add another\n`unsafe` block.\n\n#### Creating a Safe Abstraction over Unsafe Code\n\nJust because a function contains unsafe code doesn’t mean we need to mark the\nentire function as unsafe. In fact, wrapping unsafe code in a safe function is\na common abstraction. As an example, let’s study the `split_at_mut` function\nfrom the standard library, which requires some unsafe code. We’ll explore how\nwe might implement it. This safe method is defined on mutable slices: it takes\none slice and makes it two by splitting the slice at the index given as an\nargument. Listing 19-4 shows how to use `split_at_mut`.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-4: Using the safe `split_at_mut`\nfunction</span>\n\nWe can’t implement this function using only safe Rust. An attempt might look\nsomething like Listing 19-5, which won’t compile. For simplicity, we’ll\nimplement `split_at_mut` as a function rather than a method and only for slices\nof `i32` values rather than for a generic type `T`.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-5: An attempted implementation of\n`split_at_mut` using only safe Rust</span>\n\nThis function first gets the total length of the slice. Then it asserts that\nthe index given as a parameter is within the slice by checking whether it’s\nless than or equal to the length. The assertion means that if we pass an index\nthat is greater than the length to split the slice at, the function will panic\nbefore it attempts to use that index.\n\nThen we return two mutable slices in a tuple: one from the start of the\noriginal slice to the `mid` index and another from `mid` to the end of the\nslice.\n\nWhen we try to compile the code in Listing 19-5, we’ll get an error.\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-05/output.txt}}\n```\n\nRust’s borrow checker can’t understand that we’re borrowing different parts of\nthe slice; it only knows that we’re borrowing from the same slice twice.\nBorrowing different parts of a slice is fundamentally okay because the two\nslices aren’t overlapping, but Rust isn’t smart enough to know this. When we\nknow code is okay, but Rust doesn’t, it’s time to reach for unsafe code.\n\nListing 19-6 shows how to use an `unsafe` block, a raw pointer, and some calls\nto unsafe functions to make the implementation of `split_at_mut` work.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-6: Using unsafe code in the implementation of\nthe `split_at_mut` function</span>\n\nRecall from [“The Slice Type”][the-slice-type]<!-- ignore --> section in\nChapter 4 that slices are a pointer to some data and the length of the slice.\nWe use the `len` method to get the length of a slice and the `as_mut_ptr`\nmethod to access the raw pointer of a slice. In this case, because we have a\nmutable slice to `i32` values, `as_mut_ptr` returns a raw pointer with the type\n`*mut i32`, which we’ve stored in the variable `ptr`.\n\nWe keep the assertion that the `mid` index is within the slice. Then we get to\nthe unsafe code: the `slice::from_raw_parts_mut` function takes a raw pointer\nand a length, and it creates a slice. We use this function to create a slice\nthat starts from `ptr` and is `mid` items long. Then we call the `add`\nmethod on `ptr` with `mid` as an argument to get a raw pointer that starts at\n`mid`, and we create a slice using that pointer and the remaining number of\nitems after `mid` as the length.\n\nThe function `slice::from_raw_parts_mut` is unsafe because it takes a raw\npointer and must trust that this pointer is valid. The `add` method on raw\npointers is also unsafe, because it must trust that the offset location is also\na valid pointer. Therefore, we had to put an `unsafe` block around our calls to\n`slice::from_raw_parts_mut` and `add` so we could call them. By looking at\nthe code and by adding the assertion that `mid` must be less than or equal to\n`len`, we can tell that all the raw pointers used within the `unsafe` block\nwill be valid pointers to data within the slice. This is an acceptable and\nappropriate use of `unsafe`.\n\nNote that we don’t need to mark the resulting `split_at_mut` function as\n`unsafe`, and we can call this function from safe Rust. We’ve created a safe\nabstraction to the unsafe code with an implementation of the function that uses\n`unsafe` code in a safe way, because it creates only valid pointers from the\ndata this function has access to.\n\nIn contrast, the use of `slice::from_raw_parts_mut` in Listing 19-7 would\nlikely crash when the slice is used. This code takes an arbitrary memory\nlocation and creates a slice 10,000 items long.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-7: Creating a slice from an arbitrary memory\nlocation</span>\n\nWe don’t own the memory at this arbitrary location, and there is no guarantee\nthat the slice this code creates contains valid `i32` values. Attempting to use\n`values` as though it’s a valid slice results in undefined behavior.\n\n#### Using `extern` Functions to Call External Code\n\nSometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has the keyword `extern` that facilitates the creation\nand use of a *Foreign Function Interface (FFI)*. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions.\n\nListing 19-8 demonstrates how to set up an integration with the `abs` function\nfrom the C standard library. Functions declared within `extern` blocks are\nalways unsafe to call from Rust code. The reason is that other languages don’t\nenforce Rust’s rules and guarantees, and Rust can’t check them, so\nresponsibility falls on the programmer to ensure safety.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-8: Declaring and calling an `extern` function\ndefined in another language</span>\n\nWithin the `extern \"C\"` block, we list the names and signatures of external\nfunctions from another language we want to call. The `\"C\"` part defines which\n*application binary interface (ABI)* the external function uses: the ABI\ndefines how to call the function at the assembly level. The `\"C\"` ABI is the\nmost common and follows the C programming language’s ABI.\n\n> #### Calling Rust Functions from Other Languages\n>\n> We can also use `extern` to create an interface that allows other languages\n> to call Rust functions. Instead of creating a whole `extern` block, we add\n> the `extern` keyword and specify the ABI to use just before the `fn` keyword\n> for the relevant function. We also need to add a `#[no_mangle]` annotation to\n> tell the Rust compiler not to mangle the name of this function. *Mangling* is\n> when a compiler changes the name we’ve given a function to a different name\n> that contains more information for other parts of the compilation process to\n> consume but is less human readable. Every programming language compiler\n> mangles names slightly differently, so for a Rust function to be nameable by\n> other languages, we must disable the Rust compiler’s name mangling.\n>\n> In the following example, we make the `call_from_c` function accessible from\n> C code, after it’s compiled to a shared library and linked from C:\n>\n> ```rust\n> #[no_mangle]\n> pub extern \"C\" fn call_from_c() {\n>     println!(\"Just called a Rust function from C!\");\n> }\n> ```\n>\n> This usage of `extern` does not require `unsafe`.\n\n### Accessing or Modifying a Mutable Static Variable\n\nIn this book, we’ve not yet talked about *global variables*, which Rust does\nsupport but can be problematic with Rust’s ownership rules. If two threads are\naccessing the same mutable global variable, it can cause a data race.\n\nIn Rust, global variables are called *static* variables. Listing 19-9 shows an\nexample declaration and use of a static variable with a string slice as a\nvalue.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-9: Defining and using an immutable static\nvariable</span>\n\nStatic variables are similar to constants, which we discussed in the\n[“Differences Between Variables and\nConstants”][differences-between-variables-and-constants]<!-- ignore --> section\nin Chapter 3. The names of static variables are in `SCREAMING_SNAKE_CASE` by\nconvention. Static variables can only store references with the `'static`\nlifetime, which means the Rust compiler can figure out the lifetime and we\naren’t required to annotate it explicitly. Accessing an immutable static\nvariable is safe.\n\nA subtle difference between constants and immutable static variables is that\nvalues in a static variable have a fixed address in memory. Using the value\nwill always access the same data. Constants, on the other hand, are allowed to\nduplicate their data whenever they’re used. Another difference is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n*unsafe*. Listing 19-10 shows how to declare, access, and modify a mutable\nstatic variable named `COUNTER`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-10: Reading from or writing to a mutable\nstatic variable is unsafe</span>\n\nAs with regular variables, we specify mutability using the `mut` keyword. Any\ncode that reads or writes from `COUNTER` must be within an `unsafe` block. This\ncode compiles and prints `COUNTER: 3` as we would expect because it’s single\nthreaded. Having multiple threads access `COUNTER` would likely result in data\nraces.\n\nWith mutable data that is globally accessible, it’s difficult to ensure there\nare no data races, which is why Rust considers mutable static variables to be\nunsafe. Where possible, it’s preferable to use the concurrency techniques and\nthread-safe smart pointers we discussed in Chapter 16 so the compiler checks\nthat data accessed from different threads is done safely.\n\n### Implementing an Unsafe Trait\n\nWe can use `unsafe` to implement an unsafe trait. A trait is unsafe when at\nleast one of its methods has some invariant that the compiler can’t verify. We\ndeclare that a trait is `unsafe` by adding the `unsafe` keyword before `trait`\nand marking the implementation of the trait as `unsafe` too, as shown in\nListing 19-11.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-11: Defining and implementing an unsafe\ntrait</span>\n\nBy using `unsafe impl`, we’re promising that we’ll uphold the invariants that\nthe compiler can’t verify.\n\nAs an example, recall the `Sync` and `Send` marker traits we discussed in the\n[“Extensible Concurrency with the `Sync` and `Send`\nTraits”][extensible-concurrency-with-the-sync-and-send-traits]<!-- ignore -->\nsection in Chapter 16: the compiler implements these traits automatically if\nour types are composed entirely of `Send` and `Sync` types. If we implement a\ntype that contains a type that is not `Send` or `Sync`, such as raw pointers,\nand we want to mark that type as `Send` or `Sync`, we must use `unsafe`. Rust\ncan’t verify that our type upholds the guarantees that it can be safely sent\nacross threads or accessed from multiple threads; therefore, we need to do\nthose checks manually and indicate as such with `unsafe`.\n\n### Accessing Fields of a Union\n\nThe final action that works only with `unsafe` is accessing fields of a\n*union*. A `union` is similar to a `struct`, but only one declared field is\nused in a particular instance at one time. Unions are primarily used to\ninterface with unions in C code. Accessing union fields is unsafe because Rust\ncan’t guarantee the type of the data currently being stored in the union\ninstance. You can learn more about unions in [the Rust Reference][reference].\n\n### When to Use Unsafe Code\n\nUsing `unsafe` to take one of the five actions (superpowers) just discussed\nisn’t wrong or even frowned upon. But it is trickier to get `unsafe` code\ncorrect because the compiler can’t help uphold memory safety. When you have a\nreason to use `unsafe` code, you can do so, and having the explicit `unsafe`\nannotation makes it easier to track down the source of problems when they occur.\n\n[dangling-references]:\nch04-02-references-and-borrowing.html#dangling-references\n[differences-between-variables-and-constants]:\nch03-01-variables-and-mutability.html#constants\n[extensible-concurrency-with-the-sync-and-send-traits]:\nch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits\n[the-slice-type]: ch04-03-slices.html#the-slice-type\n[reference]: ../reference/items/unions.html\n",
					"qas": [
						{
							"question": "What danger araises when using raw pointers?",
							"id": 60,
							"answers": [
								{
									"text": "With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race.",
									"answer_start": 7105
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Installation\n\nThe first step is to install Rust. We’ll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You’ll need\nan internet connection for the download.\n\n> Note: If you prefer not to use `rustup` for some reason, please see the\n> [Other Rust Installation Methods page][otherinstall] for more options.\n\nThe following steps install the latest stable version of the Rust compiler.\nRust’s stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book.\n\n> ### Command Line Notation\n>\n> In this chapter and throughout the book, we’ll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don’t need to type the `$` character; it’s the command line prompt shown to\n> indicate the start of each command. Lines that don’t start with `$` typically\n> show the output of the previous command. Additionally, PowerShell-specific\n> examples will use `>` rather than `$`.\n\n### Installing `rustup` on Linux or macOS\n\nIf you’re using Linux or macOS, open a terminal and enter the following command:\n\n```console\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\nThe command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n```\n\nYou will also need a *linker*, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler.\n\nOn macOS, you can get a C compiler by running:\n\n```console\n$ xcode-select --install\n```\n\nLinux users should generally install GCC or Clang, according to their\ndistribution’s documentation. For example, if you use Ubuntu, you can install\nthe `build-essential` package.\n\n### Installing `rustup` on Windows\n\nOn Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you’ll\nreceive a message explaining that you’ll also need the MSVC build tools for\nVisual Studio 2013 or later.\n\nTo acquire the build tools, you’ll need to install [Visual Studio\n2022][visualstudio]. When asked which workloads to install, include:\n\n* “Desktop Development with C++”\n* The Windows 10 or 11 SDK\n* The English language pack component, along with any other language pack of\n  your choosing\n\nThe rest of this book uses commands that work in both *cmd.exe* and PowerShell.\nIf there are specific differences, we’ll explain which to use.\n\n### Troubleshooting\n\nTo check whether you have Rust installed correctly, open a shell and enter this\nline:\n\n```console\n$ rustc --version\n```\n\nYou should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don’t\nsee this information, check that Rust is in your `%PATH%` system variable as\nfollows.\n\nIn Windows CMD, use:\n\n```console\n> echo %PATH%\n```\n\nIn PowerShell, use:\n\n```powershell\n> echo $env:Path\n```\n\nIn Linux and macOS, use:\n\n```console\n$ echo $PATH\n```\n\nIf that’s all correct and Rust still isn’t working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community].\n\n### Updating and Uninstalling\n\nOnce Rust is installed via `rustup`, updating to a newly released version is\neasy. From your shell, run the following update script:\n\n```console\n$ rustup update\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your\nshell:\n\n```console\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run `rustup doc` to open the local documentation\nin your browser.\n\nAny time a type or function is provided by the standard library and you’re not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!\n\n[otherinstall]: https://forge.rust-lang.org/infra/other-installation-methods.html\n[install]: https://www.rust-lang.org/tools/install\n[visualstudio]: https://visualstudio.microsoft.com/downloads/\n[community]: https://www.rust-lang.org/community\n",
					"qas": [
						{
							"question": "What can I do if rustc command is not working?",
							"id": 233,
							"answers": [
								{
									"text": "check that Rust is in your `%PATH%` system variable",
									"answer_start": 3553
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Using Threads to Run Code Simultaneously\n\nIn most current operating systems, an executed program’s code is run in a\n*process*, and the operating system will manage multiple processes at once.\nWithin a program, you can also have independent parts that run simultaneously.\nThe features that run these independent parts are called *threads*. For\nexample, a web server could have multiple threads so that it could respond to\nmore than one request at the same time.\n\nSplitting the computation in your program into multiple threads to run multiple\ntasks at the same time can improve performance, but it also adds complexity.\nBecause threads can run simultaneously, there’s no inherent guarantee about the\norder in which parts of your code on different threads will run. This can lead\nto problems, such as:\n\n* Race conditions, where threads are accessing data or resources in an\n  inconsistent order\n* Deadlocks, where two threads are waiting for each other, preventing both\n  threads from continuing\n* Bugs that happen only in certain situations and are hard to reproduce and fix\n  reliably\n\nRust attempts to mitigate the negative effects of using threads, but\nprogramming in a multithreaded context still takes careful thought and requires\na code structure that is different from that in programs running in a single\nthread.\n\nProgramming languages implement threads in a few different ways, and many\noperating systems provide an API the language can call for creating new\nthreads. The Rust standard library uses a *1:1* model of thread implementation,\nwhereby a program uses one operating system thread per one language thread.\nThere are crates that implement other models of threading that make different\ntradeoffs to the 1:1 model.\n\n### Creating a New Thread with `spawn`\n\nTo create a new thread, we call the `thread::spawn` function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread. The example in Listing 16-1 prints some text from a main\nthread and other text from a new thread:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-1: Creating a new thread to print one thing\nwhile the main thread prints something else</span>\n\nNote that when the main thread of a Rust program completes, all spawned threads\nare shut down, whether or not they have finished running. The output from this\nprogram might be a little different every time, but it will look similar to the\nfollowing:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\n```\n\nThe calls to `thread::sleep` force a thread to stop its execution for a short\nduration, allowing a different thread to run. The threads will probably take\nturns, but that isn’t guaranteed: it depends on how your operating system\nschedules the threads. In this run, the main thread printed first, even though\nthe print statement from the spawned thread appears first in the code. And even\nthough we told the spawned thread to print until `i` is 9, it only got to 5\nbefore the main thread shut down.\n\nIf you run this code and only see output from the main thread, or don’t see any\noverlap, try increasing the numbers in the ranges to create more opportunities\nfor the operating system to switch between the threads.\n\n### Waiting for All Threads to Finish Using `join` Handles\n\nThe code in Listing 16-1 not only stops the spawned thread prematurely most of\nthe time due to the main thread ending, but because there is no guarantee on\nthe order in which threads run, we also can’t guarantee that the spawned thread\nwill get to run at all!\n\nWe can fix the problem of the spawned thread not running or ending prematurely\nby saving the return value of `thread::spawn` in a variable. The return type of\n`thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we\ncall the `join` method on it, will wait for its thread to finish. Listing 16-2\nshows how to use the `JoinHandle` of the thread we created in Listing 16-1 and\ncall `join` to make sure the spawned thread finishes before `main` exits:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-2: Saving a `JoinHandle` from `thread::spawn`\nto guarantee the thread is run to completion</span>\n\nCalling `join` on the handle blocks the thread currently running until the\nthread represented by the handle terminates. *Blocking* a thread means that\nthread is prevented from performing work or exiting. Because we’ve put the call\nto `join` after the main thread’s `for` loop, running Listing 16-2 should\nproduce output similar to this:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\n```\n\nThe two threads continue alternating, but the main thread waits because of the\ncall to `handle.join()` and does not end until the spawned thread is finished.\n\nBut let’s see what happens when we instead move `handle.join()` before the\n`for` loop in `main`, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/no-listing-01-join-too-early/src/main.rs}}\n```\n\nThe main thread will wait for the spawned thread to finish and then run its\n`for` loop, so the output won’t be interleaved anymore, as shown here:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!\n```\n\nSmall details, such as where `join` is called, can affect whether or not your\nthreads run at the same time.\n\n### Using `move` Closures with Threads\n\nWe'll often use the `move` keyword with closures passed to `thread::spawn`\nbecause the closure will then take ownership of the values it uses from the\nenvironment, thus transferring ownership of those values from one thread to\nanother. In the [“Capturing References or Moving Ownership”][capture]<!-- ignore\n--> section of Chapter 13, we discussed `move` in the context of closures. Now,\nwe’ll concentrate more on the interaction between `move` and `thread::spawn`.\n\nNotice in Listing 16-1 that the closure we pass to `thread::spawn` takes no\narguments: we’re not using any data from the main thread in the spawned\nthread’s code. To use data from the main thread in the spawned thread, the\nspawned thread’s closure must capture the values it needs. Listing 16-3 shows\nan attempt to create a vector in the main thread and use it in the spawned\nthread. However, this won’t yet work, as you’ll see in a moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-3: Attempting to use a vector created by the\nmain thread in another thread</span>\n\nThe closure uses `v`, so it will capture `v` and make it part of the closure’s\nenvironment. Because `thread::spawn` runs this closure in a new thread, we\nshould be able to access `v` inside that new thread. But when we compile this\nexample, we get the following error:\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-03/output.txt}}\n```\n\nRust *infers* how to capture `v`, and because `println!` only needs a reference\nto `v`, the closure tries to borrow `v`. However, there’s a problem: Rust can’t\ntell how long the spawned thread will run, so it doesn’t know if the reference\nto `v` will always be valid.\n\nListing 16-4 provides a scenario that’s more likely to have a reference to `v`\nthat won’t be valid:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-4: A thread with a closure that attempts to\ncapture a reference to `v` from a main thread that drops `v`</span>\n\nIf Rust allowed us to run this code, there’s a possibility the spawned thread\nwould be immediately put in the background without running at all. The spawned\nthread has a reference to `v` inside, but the main thread immediately drops\n`v`, using the `drop` function we discussed in Chapter 15. Then, when the\nspawned thread starts to execute, `v` is no longer valid, so a reference to it\nis also invalid. Oh no!\n\nTo fix the compiler error in Listing 16-3, we can use the error message’s\nadvice:\n\n<!-- manual-regeneration\nafter automatic regeneration, look at listings/ch16-fearless-concurrency/listing-16-03/output.txt and copy the relevant part\n-->\n\n```text\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n```\n\nBy adding the `move` keyword before the closure, we force the closure to take\nownership of the values it’s using rather than allowing Rust to infer that it\nshould borrow the values. The modification to Listing 16-3 shown in Listing\n16-5 will compile and run as we intend:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-5: Using the `move` keyword to force a closure\nto take ownership of the values it uses</span>\n\nWe might be tempted to try the same thing to fix the code in Listing 16-4 where\nthe main thread called `drop` by using a `move` closure. However, this fix will\nnot work because what Listing 16-4 is trying to do is disallowed for a\ndifferent reason. If we added `move` to the closure, we would move `v` into the\nclosure’s environment, and we could no longer call `drop` on it in the main\nthread. We would get this compiler error instead:\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/output-only-01-move-drop/output.txt}}\n```\n\nRust’s ownership rules have saved us again! We got an error from the code in\nListing 16-3 because Rust was being conservative and only borrowing `v` for the\nthread, which meant the main thread could theoretically invalidate the spawned\nthread’s reference. By telling Rust to move ownership of `v` to the spawned\nthread, we’re guaranteeing Rust that the main thread won’t use `v` anymore. If\nwe change Listing 16-4 in the same way, we’re then violating the ownership\nrules when we try to use `v` in the main thread. The `move` keyword overrides\nRust’s conservative default of borrowing; it doesn’t let us violate the\nownership rules.\n\nWith a basic understanding of threads and the thread API, let’s look at what we\ncan *do* with threads.\n\n[capture]: ch13-01-closures.html#capturing-references-or-moving-ownership\n",
					"qas": [
						{
							"question": "What does JoinHandle do?",
							"id": 87,
							"answers": [
								{
									"text": "A `JoinHandle` is an owned value that, when we\ncall the `join` method on it, will wait for its thread to finish.",
									"answer_start": 4330
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## Refutability: Whether a Pattern Might Fail to Match\n\nPatterns come in two forms: refutable and irrefutable. Patterns that will match\nfor any possible value passed are *irrefutable*. An example would be `x` in the\nstatement `let x = 5;` because `x` matches anything and therefore cannot fail\nto match. Patterns that can fail to match for some possible value are\n*refutable*. An example would be `Some(x)` in the expression `if let Some(x) =\na_value` because if the value in the `a_value` variable is `None` rather than\n`Some`, the `Some(x)` pattern will not match.\n\nFunction parameters, `let` statements, and `for` loops can only accept\nirrefutable patterns, because the program cannot do anything meaningful when\nvalues don’t match. The `if let` and `while let` expressions accept\nrefutable and irrefutable patterns, but the compiler warns against\nirrefutable patterns because by definition they’re intended to handle possible\nfailure: the functionality of a conditional is in its ability to perform\ndifferently depending on success or failure.\n\nIn general, you shouldn’t have to worry about the distinction between refutable\nand irrefutable patterns; however, you do need to be familiar with the concept\nof refutability so you can respond when you see it in an error message. In\nthose cases, you’ll need to change either the pattern or the construct you’re\nusing the pattern with, depending on the intended behavior of the code.\n\nLet’s look at an example of what happens when we try to use a refutable pattern\nwhere Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a\n`let` statement, but for the pattern we’ve specified `Some(x)`, a refutable\npattern. As you might expect, this code will not compile.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-8: Attempting to use a refutable pattern with\n`let`</span>\n\nIf `some_option_value` was a `None` value, it would fail to match the pattern\n`Some(x)`, meaning the pattern is refutable. However, the `let` statement can\nonly accept an irrefutable pattern because there is nothing valid the code can\ndo with a `None` value. At compile time, Rust will complain that we’ve tried to\nuse a refutable pattern where an irrefutable pattern is required:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-08/output.txt}}\n```\n\nBecause we didn’t cover (and couldn’t cover!) every valid value with the\npattern `Some(x)`, Rust rightfully produces a compiler error.\n\nIf we have a refutable pattern where an irrefutable pattern is needed, we can\nfix it by changing the code that uses the pattern: instead of using `let`, we\ncan use `if let`. Then if the pattern doesn’t match, the code will just skip\nthe code in the curly brackets, giving it a way to continue validly. Listing\n18-9 shows how to fix the code in Listing 18-8.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-9: Using `if let` and a block with refutable\npatterns instead of `let`</span>\n\nWe’ve given the code an out! This code is perfectly valid, although it means we\ncannot use an irrefutable pattern without receiving an error. If we give `if\nlet` a pattern that will always match, such as `x`, as shown in Listing 18-10,\nthe compiler will give a warning.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-10: Attempting to use an irrefutable pattern\nwith `if let`</span>\n\nRust complains that it doesn’t make sense to use `if let` with an irrefutable\npattern:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-10/output.txt}}\n```\n\nFor this reason, match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern. Rust\nallows us to use an irrefutable pattern in a `match` with only one arm, but\nthis syntax isn’t particularly useful and could be replaced with a simpler\n`let` statement.\n\nNow that you know where to use patterns and the difference between refutable\nand irrefutable patterns, let’s cover all the syntax we can use to create\npatterns.\n",
					"qas": [
						{
							"question": "Why function parameters, `let` statements, and `for` loops can accept only irrefutable patterns?",
							"id": 38,
							"answers": [
								{
									"text": "Function parameters, `let` statements, and `for` loops can only accept\nirrefutable patterns, because the program cannot do anything meaningful when\nvalues don’t match. ",
									"answer_start": 568
								}
							],
							"is_impossible": false
						}
					]
				},
				{
					"context": "## To `panic!` or Not to `panic!`\n\nSo how do you decide when you should call `panic!` and when you should return\n`Result`? When code panics, there’s no way to recover. You could call `panic!`\nfor any error situation, whether there’s a possible way to recover or not, but\nthen you’re making the decision that a situation is unrecoverable on behalf of\nthe calling code. When you choose to return a `Result` value, you give the\ncalling code options. The calling code could choose to attempt to recover in a\nway that’s appropriate for its situation, or it could decide that an `Err`\nvalue in this case is unrecoverable, so it can call `panic!` and turn your\nrecoverable error into an unrecoverable one. Therefore, returning `Result` is a\ngood default choice when you’re defining a function that might fail.\n\nIn situations such as examples, prototype code, and tests, it’s more\nappropriate to write code that panics instead of returning a `Result`. Let’s\nexplore why, then discuss situations in which the compiler can’t tell that\nfailure is impossible, but you as a human can. The chapter will conclude with\nsome general guidelines on how to decide whether to panic in library code.\n\n### Examples, Prototype Code, and Tests\n\nWhen you’re writing an example to illustrate some concept, also including robust\nerror-handling code can make the example less clear. In\nexamples, it’s understood that a call to a method like `unwrap` that could\npanic is meant as a placeholder for the way you’d want your application to\nhandle errors, which can differ based on what the rest of your code is doing.\n\nSimilarly, the `unwrap` and `expect` methods are very handy when prototyping,\nbefore you’re ready to decide how to handle errors. They leave clear markers in\nyour code for when you’re ready to make your program more robust.\n\nIf a method call fails in a test, you’d want the whole test to fail, even if\nthat method isn’t the functionality under test. Because `panic!` is how a test\nis marked as a failure, calling `unwrap` or `expect` is exactly what should\nhappen.\n\n### Cases in Which You Have More Information Than the Compiler\n\nIt would also be appropriate to call `unwrap` or `expect` when you have some\nother logic that ensures the `Result` will have an `Ok` value, but the logic\nisn’t something the compiler understands. You’ll still have a `Result` value\nthat you need to handle: whatever operation you’re calling still has the\npossibility of failing in general, even though it’s logically impossible in\nyour particular situation. If you can ensure by manually inspecting the code\nthat you’ll never have an `Err` variant, it’s perfectly acceptable to call\n`unwrap`, and even better to document the reason you think you’ll never have an\n`Err` variant in the `expect` text. Here’s an example:\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-08-unwrap-that-cant-fail/src/main.rs:here}}\n```\n\nWe’re creating an `IpAddr` instance by parsing a hardcoded string. We can see\nthat `127.0.0.1` is a valid IP address, so it’s acceptable to use `expect`\nhere. However, having a hardcoded, valid string doesn’t change the return type\nof the `parse` method: we still get a `Result` value, and the compiler will\nstill make us handle the `Result` as if the `Err` variant is a possibility\nbecause the compiler isn’t smart enough to see that this string is always a\nvalid IP address. If the IP address string came from a user rather than being\nhardcoded into the program and therefore *did* have a possibility of failure,\nwe’d definitely want to handle the `Result` in a more robust way instead.\nMentioning the assumption that this IP address is hardcoded will prompt us to\nchange `expect` to better error handling code if in the future, we need to get\nthe IP address from some other source instead.\n\n### Guidelines for Error Handling\n\nIt’s advisable to have your code panic when it’s possible that your code\ncould end up in a bad state. In this context, a *bad state* is when some\nassumption, guarantee, contract, or invariant has been broken, such as when\ninvalid values, contradictory values, or missing values are passed to your\ncode—plus one or more of the following:\n\n* The bad state is something that is unexpected, as opposed to something that\n  will likely happen occasionally, like a user entering data in the wrong\n  format.\n* Your code after this point needs to rely on not being in this bad state,\n  rather than checking for the problem at every step.\n* There’s not a good way to encode this information in the types you use. We’ll\n  work through an example of what we mean in the [“Encoding States and Behavior\n  as Types”][encoding]<!-- ignore --> section of Chapter 17.\n\nIf someone calls your code and passes in values that don’t make sense, it’s\nbest to return an error if you can so the user of the library can decide what\nthey want to do in that case. However, in cases where continuing could be\ninsecure or harmful, the best choice might be to call `panic!` and alert the\nperson using your library to the bug in their code so they can fix it during\ndevelopment. Similarly, `panic!` is often appropriate if you’re calling\nexternal code that is out of your control and it returns an invalid state that\nyou have no way of fixing.\n\nHowever, when failure is expected, it’s more appropriate to return a `Result`\nthan to make a `panic!` call. Examples include a parser being given malformed\ndata or an HTTP request returning a status that indicates you have hit a rate\nlimit. In these cases, returning a `Result` indicates that failure is an\nexpected possibility that the calling code must decide how to handle.\n\nWhen your code performs an operation that could put a user at risk if it’s\ncalled using invalid values, your code should verify the values are valid first\nand panic if the values aren’t valid. This is mostly for safety reasons:\nattempting to operate on invalid data can expose your code to vulnerabilities.\nThis is the main reason the standard library will call `panic!` if you attempt\nan out-of-bounds memory access: trying to access memory that doesn’t belong to\nthe current data structure is a common security problem. Functions often have\n*contracts*: their behavior is only guaranteed if the inputs meet particular\nrequirements. Panicking when the contract is violated makes sense because a\ncontract violation always indicates a caller-side bug and it’s not a kind of\nerror you want the calling code to have to explicitly handle. In fact, there’s\nno reasonable way for calling code to recover; the calling *programmers* need\nto fix the code. Contracts for a function, especially when a violation will\ncause a panic, should be explained in the API documentation for the function.\n\nHowever, having lots of error checks in all of your functions would be verbose\nand annoying. Fortunately, you can use Rust’s type system (and thus the type\nchecking done by the compiler) to do many of the checks for you. If your\nfunction has a particular type as a parameter, you can proceed with your code’s\nlogic knowing that the compiler has already ensured you have a valid value. For\nexample, if you have a type rather than an `Option`, your program expects to\nhave *something* rather than *nothing*. Your code then doesn’t have to handle\ntwo cases for the `Some` and `None` variants: it will only have one case for\ndefinitely having a value. Code trying to pass nothing to your function won’t\neven compile, so your function doesn’t have to check for that case at runtime.\nAnother example is using an unsigned integer type such as `u32`, which ensures\nthe parameter is never negative.\n\n### Creating Custom Types for Validation\n\nLet’s take the idea of using Rust’s type system to ensure we have a valid value\none step further and look at creating a custom type for validation. Recall the\nguessing game in Chapter 2 in which our code asked the user to guess a number\nbetween 1 and 100. We never validated that the user’s guess was between those\nnumbers before checking it against our secret number; we only validated that\nthe guess was positive. In this case, the consequences were not very dire: our\noutput of “Too high” or “Too low” would still be correct. But it would be a\nuseful enhancement to guide the user toward valid guesses and have different\nbehavior when a user guesses a number that’s out of range versus when a user\ntypes, for example, letters instead.\n\nOne way to do this would be to parse the guess as an `i32` instead of only a\n`u32` to allow potentially negative numbers, and then add a check for the\nnumber being in range, like so:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-09-guess-out-of-range/src/main.rs:here}}\n```\n\nThe `if` expression checks whether our value is out of range, tells the user\nabout the problem, and calls `continue` to start the next iteration of the loop\nand ask for another guess. After the `if` expression, we can proceed with the\ncomparisons between `guess` and the secret number knowing that `guess` is\nbetween 1 and 100.\n\nHowever, this is not an ideal solution: if it was absolutely critical that the\nprogram only operated on values between 1 and 100, and it had many functions\nwith this requirement, having a check like this in every function would be\ntedious (and might impact performance).\n\nInstead, we can make a new type and put the validations in a function to create\nan instance of the type rather than repeating the validations everywhere. That\nway, it’s safe for functions to use the new type in their signatures and\nconfidently use the values they receive. Listing 9-13 shows one way to define a\n`Guess` type that will only create an instance of `Guess` if the `new` function\nreceives a value between 1 and 100.\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile requires the `rand` crate. We do want to include it for reader\nexperimentation purposes, but don't want to include it for rustdoc testing\npurposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-13: A `Guess` type that will only continue with\nvalues between 1 and 100</span>\n\nFirst, we define a struct named `Guess` that has a field named `value` that\nholds an `i32`. This is where the number will be stored.\n\nThen we implement an associated function named `new` on `Guess` that creates\ninstances of `Guess` values. The `new` function is defined to have one\nparameter named `value` of type `i32` and to return a `Guess`. The code in the\nbody of the `new` function tests `value` to make sure it’s between 1 and 100.\nIf `value` doesn’t pass this test, we make a `panic!` call, which will alert\nthe programmer who is writing the calling code that they have a bug they need\nto fix, because creating a `Guess` with a `value` outside this range would\nviolate the contract that `Guess::new` is relying on. The conditions in which\n`Guess::new` might panic should be discussed in its public-facing API\ndocumentation; we’ll cover documentation conventions indicating the possibility\nof a `panic!` in the API documentation that you create in Chapter 14. If\n`value` does pass the test, we create a new `Guess` with its `value` field set\nto the `value` parameter and return the `Guess`.\n\nNext, we implement a method named `value` that borrows `self`, doesn’t have any\nother parameters, and returns an `i32`. This kind of method is sometimes called\na *getter*, because its purpose is to get some data from its fields and return\nit. This public method is necessary because the `value` field of the `Guess`\nstruct is private. It’s important that the `value` field be private so code\nusing the `Guess` struct is not allowed to set `value` directly: code outside\nthe module *must* use the `Guess::new` function to create an instance of\n`Guess`, thereby ensuring there’s no way for a `Guess` to have a `value` that\nhasn’t been checked by the conditions in the `Guess::new` function.\n\nA function that has a parameter or returns only numbers between 1 and 100 could\nthen declare in its signature that it takes or returns a `Guess` rather than an\n`i32` and wouldn’t need to do any additional checks in its body.\n\n## Summary\n\nRust’s error handling features are designed to help you write more robust code.\nThe `panic!` macro signals that your program is in a state it can’t handle and\nlets you tell the process to stop instead of trying to proceed with invalid or\nincorrect values. The `Result` enum uses Rust’s type system to indicate that\noperations might fail in a way that your code could recover from. You can use\n`Result` to tell code that calls your code that it needs to handle potential\nsuccess or failure as well. Using `panic!` and `Result` in the appropriate\nsituations will make your code more reliable in the face of inevitable problems.\n\nNow that you’ve seen useful ways that the standard library uses generics with\nthe `Option` and `Result` enums, we’ll talk about how generics work and how you\ncan use them in your code.\n\n[encoding]: ch17-03-oo-design-patterns.html#encoding-states-and-behavior-as-types\n",
					"qas": [
						{
							"question": "What can be an example of bad state error?",
							"id": 2025,
							"answers": [
								{
									"text": "invalid values, contradictory values, or missing values are passed to your\ncode",
									"answer_start": 4054
								}
							],
							"is_impossible": false
						}
					]
				}
			]
		}
	]
}