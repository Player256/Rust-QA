{
  "version": null,
  "data": [
    {
      "title": "",
      "paragraphs": [
        {
          "context": "## Running Code on Cleanup with the `Drop` Trait\n\nThe second trait important to the smart pointer pattern is `Drop`, which lets\nyou customize what happens when a value is about to go out of scope. You can\nprovide an implementation for the `Drop` trait on any type, and that code can\nbe used to release resources like files or network connections.\n\nWe\u2019re introducing `Drop` in the context of smart pointers because the\nfunctionality of the `Drop` trait is almost always used when implementing a\nsmart pointer. For example, when a `Box<T>` is dropped it will deallocate the\nspace on the heap that the box points to.\n\nIn some languages, for some types, the programmer must call code to free memory\nor resources every time they finish using an instance of those types. Examples\ninclude file handles, sockets, or locks. If they forget, the system might\nbecome overloaded and crash. In Rust, you can specify that a particular bit of\ncode be run whenever a value goes out of scope, and the compiler will insert\nthis code automatically. As a result, you don\u2019t need to be careful about\nplacing cleanup code everywhere in a program that an instance of a particular\ntype is finished with\u2014you still won\u2019t leak resources!\n\nYou specify the code to run when a value goes out of scope by implementing the\n`Drop` trait. The `Drop` trait requires you to implement one method named\n`drop` that takes a mutable reference to `self`. To see when Rust calls `drop`,\nlet\u2019s implement `drop` with `println!` statements for now.\n\nListing 15-14 shows a `CustomSmartPointer` struct whose only custom\nfunctionality is that it will print `Dropping CustomSmartPointer!` when the\ninstance goes out of scope, to show when Rust runs the `drop` function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-14: A `CustomSmartPointer` struct that\nimplements the `Drop` trait where we would put our cleanup code</span>\n\nThe `Drop` trait is included in the prelude, so we don\u2019t need to bring it into\nscope. We implement the `Drop` trait on `CustomSmartPointer` and provide an\nimplementation for the `drop` method that calls `println!`. The body of the\n`drop` function is where you would place any logic that you wanted to run when\nan instance of your type goes out of scope. We\u2019re printing some text here to\ndemonstrate visually when Rust will call `drop`.\n\nIn `main`, we create two instances of `CustomSmartPointer` and then print\n`CustomSmartPointers created`. At the end of `main`, our instances of\n`CustomSmartPointer` will go out of scope, and Rust will call the code we put\nin the `drop` method, printing our final message. Note that we didn\u2019t need to\ncall the `drop` method explicitly.\n\nWhen we run this program, we\u2019ll see the following output:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-14/output.txt}}\n```\n\nRust automatically called `drop` for us when our instances went out of scope,\ncalling the code we specified. Variables are dropped in the reverse order of\ntheir creation, so `d` was dropped before `c`. This example\u2019s purpose is to\ngive you a visual guide to how the `drop` method works; usually you would\nspecify the cleanup code that your type needs to run rather than a print\nmessage.\n\n### Dropping a Value Early with `std::mem::drop`\n\nUnfortunately, it\u2019s not straightforward to disable the automatic `drop`\nfunctionality. Disabling `drop` isn\u2019t usually necessary; the whole point of the\n`Drop` trait is that it\u2019s taken care of automatically. Occasionally, however,\nyou might want to clean up a value early. One example is when using smart\npointers that manage locks: you might want to force the `drop` method that\nreleases the lock so that other code in the same scope can acquire the lock.\nRust doesn\u2019t let you call the `Drop` trait\u2019s `drop` method manually; instead\nyou have to call the `std::mem::drop` function provided by the standard library\nif you want to force a value to be dropped before the end of its scope.\n\nIf we try to call the `Drop` trait\u2019s `drop` method manually by modifying the\n`main` function from Listing 15-14, as shown in Listing 15-15, we\u2019ll get a\ncompiler error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-15: Attempting to call the `drop` method from\nthe `Drop` trait manually to clean up early</span>\n\nWhen we try to compile this code, we\u2019ll get this error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-15/output.txt}}\n```\n\nThis error message states that we\u2019re not allowed to explicitly call `drop`. The\nerror message uses the term *destructor*, which is the general programming term\nfor a function that cleans up an instance. A *destructor* is analogous to a\n*constructor*, which creates an instance. The `drop` function in Rust is one\nparticular destructor.\n\nRust doesn\u2019t let us call `drop` explicitly because Rust would still\nautomatically call `drop` on the value at the end of `main`. This would cause a\n*double free* error because Rust would be trying to clean up the same value\ntwice.\n\nWe can\u2019t disable the automatic insertion of `drop` when a value goes out of\nscope, and we can\u2019t call the `drop` method explicitly. So, if we need to force\na value to be cleaned up early, we use the `std::mem::drop` function.\n\nThe `std::mem::drop` function is different from the `drop` method in the `Drop`\ntrait. We call it by passing as an argument the value we want to force drop.\nThe function is in the prelude, so we can modify `main` in Listing 15-15 to\ncall the `drop` function, as shown in Listing 15-16:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-16: Calling `std::mem::drop` to explicitly\ndrop a value before it goes out of scope</span>\n\nRunning this code will print the following:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-16/output.txt}}\n```\n\nThe text ```Dropping CustomSmartPointer with data `some data`!``` is printed\nbetween the `CustomSmartPointer created.` and `CustomSmartPointer dropped\nbefore the end of main.` text, showing that the `drop` method code is called to\ndrop `c` at that point.\n\nYou can use code specified in a `Drop` trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator! With the `Drop` trait and Rust\u2019s ownership system, you\ndon\u2019t have to remember to clean up because Rust does it automatically.\n\nYou also don\u2019t have to worry about problems resulting from accidentally\ncleaning up values still in use: the ownership system that makes sure\nreferences are always valid also ensures that `drop` gets called only once when\nthe value is no longer being used.\n\nNow that we\u2019ve examined `Box<T>` and some of the characteristics of smart\npointers, let\u2019s look at a few other smart pointers defined in the standard\nlibrary.\n",
          "qas": [
            {
              "question": "How to create destructor?",
              "id": 49,
              "answers": [
                {
                  "text": "You specify the code to run when a value goes out of scope by implementing the\n`Drop` trait.",
                  "answer_start": 1210
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How destructor is called in Rust?",
              "id": 54,
              "answers": [
                {
                  "text": "The `drop` function in Rust is one\nparticular destructor.",
                  "answer_start": 4946
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be done with Drop trait?",
              "id": 55,
              "answers": [
                {
                  "text": "You can use code specified in a `Drop` trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator!",
                  "answer_start": 6412
                }
              ],
              "is_impossible": false
            },
            {
              "question": "In what order are values dropped?",
              "id": 52,
              "answers": [
                {
                  "text": "Variables are dropped in the reverse order of\ntheir creation",
                  "answer_start": 3036
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What method does Drop need?",
              "id": 50,
              "answers": [
                {
                  "text": "The `Drop` trait requires you to implement one method named\n`drop` that takes a mutable reference to `self`.",
                  "answer_start": 1303
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be included in drop method?",
              "id": 51,
              "answers": [
                {
                  "text": "The body of the\n`drop` function is where you would place any logic that you wanted to run when\nan instance of your type goes out of scope.",
                  "answer_start": 2224
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Storing UTF-8 Encoded Text with Strings\n\nWe talked about strings in Chapter 4, but we\u2019ll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust\u2019s propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you\u2019re\ncoming from other programming languages.\n\nWe discuss strings in the context of collections because strings are\nimplemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we\u2019ll\ntalk about the operations on `String` that every collection type has, such as\ncreating, updating, and reading. We\u2019ll also discuss the ways in which `String`\nis different from the other collections, namely how indexing into a `String` is\ncomplicated by the differences between how people and computers interpret\n`String` data.\n\n### What Is a String?\n\nWe\u2019ll first define what we mean by the term *string*. Rust has only one string\ntype in the core language, which is the string slice `str` that is usually seen\nin its borrowed form `&str`. In Chapter 4, we talked about *string slices*,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program\u2019s binary and are therefore\nstring slices.\n\nThe `String` type, which is provided by Rust\u2019s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to \u201cstrings\u201d in Rust, they might be\nreferring to either the `String` or the string slice `&str` types, not just one\nof those types. Although this section is largely about `String`, both types are\nused heavily in Rust\u2019s standard library, and both `String` and string slices\nare UTF-8 encoded.\n\n### Creating a New String\n\nMany of the same operations available with `Vec<T>` are available with `String`\nas well, because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities. An example\nof a function that works the same way with `Vec<T>` and `String` is the `new`\nfunction to create an instance, shown in Listing 8-11.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-11: Creating a new, empty `String`</span>\n\nThis line creates a new empty string called `s`, which we can then load data\ninto. Often, we\u2019ll have some initial data that we want to start the string\nwith. For that, we use the `to_string` method, which is available on any type\nthat implements the `Display` trait, as string literals do. Listing 8-12 shows\ntwo examples.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-12: Using the `to_string` method to create a\n`String` from a string literal</span>\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string\nliteral. The code in Listing 8-13 is equivalent to the code from Listing 8-12\nthat uses `to_string`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-13: Using the `String::from` function to create\na `String` from a string literal</span>\n\nBecause strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, `String::from` and\n`to_string` do the same thing, so which you choose is a matter of style and\nreadability.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-14: Storing greetings in different languages in\nstrings</span>\n\nAll of these are valid `String` values.\n\n### Updating a String\n\nA `String` can grow in size and its contents can change, just like the contents\nof a `Vec<T>`, if you push more data into it. In addition, you can conveniently\nuse the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### Appending to a String with `push_str` and `push`\n\nWe can grow a `String` by using the `push_str` method to append a string slice,\nas shown in Listing 8-15.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-15: Appending a string slice to a `String`\nusing the `push_str` method</span>\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a\nstring slice because we don\u2019t necessarily want to take ownership of the\nparameter. For example, in the code in Listing 8-16, we want to be able to use\n`s2` after appending its contents to `s1`.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-16: Using a string slice after appending its\ncontents to a `String`</span>\n\nIf the `push_str` method took ownership of `s2`, we wouldn\u2019t be able to print\nits value on the last line. However, this code works as we\u2019d expect!\n\nThe `push` method takes a single character as a parameter and adds it to the\n`String`. Listing 8-17 adds the letter \u201cl\u201d to a `String` using the `push`\nmethod.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-17/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-17: Adding one character to a `String` value\nusing `push`</span>\n\nAs a result, `s` will contain `lol`.\n\n#### Concatenation with the `+` Operator or the `format!` Macro\n\nOften, you\u2019ll want to combine two existing strings. One way to do so is to use\nthe `+` operator, as shown in Listing 8-18.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-18: Using the `+` operator to combine two\n`String` values into a new `String` value</span>\n\nThe string `s3` will contain `Hello, world!`. The reason `s1` is no longer\nvalid after the addition, and the reason we used a reference to `s2`, has to do\nwith the signature of the method that\u2019s called when we use the `+` operator.\nThe `+` operator uses the `add` method, whose signature looks something like\nthis:\n\n```rust,ignore\nfn add(self, s: &str) -> String {\n```\n\nIn the standard library, you'll see `add` defined using generics and associated\ntypes. Here, we\u2019ve substituted in concrete types, which is what happens when we\ncall this method with `String` values. We\u2019ll discuss generics in Chapter 10.\nThis signature gives us the clues we need to understand the tricky bits of the\n`+` operator.\n\nFirst, `s2` has an `&`, meaning that we\u2019re adding a *reference* of the second\nstring to the first string. This is because of the `s` parameter in the `add`\nfunction: we can only add a `&str` to a `String`; we can\u2019t add two `String`\nvalues together. But wait\u2014the type of `&s2` is `&String`, not `&str`, as\nspecified in the second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we\u2019re able to use `&s2` in the call to `add` is that the compiler\ncan *coerce* the `&String` argument into a `&str`. When we call the `add`\nmethod, Rust uses a *deref coercion*, which here turns `&s2` into `&s2[..]`.\nWe\u2019ll discuss deref coercion in more depth in Chapter 15. Because `add` does\nnot take ownership of the `s` parameter, `s2` will still be a valid `String`\nafter this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self`,\nbecause `self` does *not* have an `&`. This means `s1` in Listing 8-18 will be\nmoved into the `add` call and will no longer be valid after that. So although\n`let s3 = s1 + &s2;` looks like it will copy both strings and create a new one,\nthis statement actually takes ownership of `s1`, appends a copy of the contents\nof `s2`, and then returns ownership of the result. In other words, it looks\nlike it\u2019s making a lot of copies but isn\u2019t; the implementation is more\nefficient than copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-01-concat-multiple-strings/src/main.rs:here}}\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"`\ncharacters, it\u2019s difficult to see what\u2019s going on. For more complicated string\ncombining, we can instead use the `format!` macro:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-02-format/src/main.rs:here}}\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works like\n`println!`, but instead of printing the output to the screen, it returns a\n`String` with the contents. The version of the code using `format!` is much\neasier to read, and the code generated by the `format!` macro uses references\nso that this call doesn\u2019t take ownership of any of its parameters.\n\n### Indexing into Strings\n\nIn many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a `String` using indexing syntax in Rust, you\u2019ll\nget an error. Consider the invalid code in Listing 8-19.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-19: Attempting to use indexing syntax with a\nString</span>\n\nThis code will result in the following error:\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-19/output.txt}}\n```\n\nThe error and the note tell the story: Rust strings don\u2019t support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory.\n\n#### Internal Representation\n\nA `String` is a wrapper over a `Vec<u8>`. Let\u2019s look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:spanish}}\n```\n\nIn this case, `len` will be 4, which means the vector storing the string \u201cHola\u201d\nis 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8. The\nfollowing line, however, may surprise you. (Note that this string begins with\nthe capital Cyrillic letter Ze, not the number 3.)\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:russian}}\n```\n\nAsked how long the string is, you might say 12. In fact, Rust\u2019s answer is 24:\nthat\u2019s the number of bytes it takes to encode \u201c\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\u201d in UTF-8, because\neach Unicode scalar value in that string takes 2 bytes of storage. Therefore,\nan index into the string\u2019s bytes will not always correlate to a valid Unicode\nscalar value. To demonstrate, consider this invalid Rust code:\n\n```rust,ignore,does_not_compile\nlet hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\";\nlet answer = &hello[0];\n```\n\nYou already know that `answer` will not be `\u0417`, the first letter. When encoded\nin UTF-8, the first byte of `\u0417` is `208` and the second is `151`, so it would\nseem that `answer` should in fact be `208`, but `208` is not a valid character\non its own. Returning `208` is likely not what a user would want if they asked\nfor the first letter of this string; however, that\u2019s the only data that Rust\nhas at byte index 0. Users generally don\u2019t want the byte value returned, even\nif the string contains only Latin letters: if `&\"hello\"[0]` were valid code\nthat returned the byte value, it would return `104`, not `h`.\n\nThe answer, then, is that to avoid returning an unexpected value and causing\nbugs that might not be discovered immediately, Rust doesn\u2019t compile this code\nat all and prevents misunderstandings early in the development process.\n\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\n\nAnother point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust\u2019s perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call *letters*).\n\nIf we look at the Hindi word \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d written in the Devanagari script, it is\nstored as a vector of `u8` values that looks like this:\n\n```text\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n```\n\nThat\u2019s 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust\u2019s `char` type is, those\nbytes look like this:\n\n```text\n['\u0928', '\u092e', '\u0938', '\u094d', '\u0924', '\u0947']\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters:\nthey\u2019re diacritics that don\u2019t make sense on their own. Finally, if we look at\nthem as grapheme clusters, we\u2019d get what a person would call the four letters\nthat make up the Hindi word:\n\n```text\n[\"\u0928\", \"\u092e\", \"\u0938\u094d\", \"\u0924\u0947\"]\n```\n\nRust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in.\n\nA final reason Rust doesn\u2019t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn\u2019t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.\n\n### Slicing Strings\n\nIndexing into a string is often a bad idea because it\u2019s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. If you really need to use\nindices to create string slices, therefore, Rust asks you to be more specific.\n\nRather than indexing using `[]` with a single number, you can use `[]` with a\nrange to create a string slice containing particular bytes:\n\n```rust\nlet hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\";\n\nlet s = &hello[0..4];\n```\n\nHere, `s` will be a `&str` that contains the first 4 bytes of the string.\nEarlier, we mentioned that each of these characters was 2 bytes, which means\n`s` will be `\u0417\u0434`.\n\nIf we were to try to slice only part of a character\u2019s bytes with something like\n`&hello[0..1]`, Rust would panic at runtime in the same way as if an invalid\nindex were accessed in a vector:\n\n```console\n{{#include ../listings/ch08-common-collections/output-only-01-not-char-boundary/output.txt}}\n```\n\nYou should use ranges to create string slices with caution, because doing so\ncan crash your program.\n\n### Methods for Iterating Over Strings\n\nThe best way to operate on pieces of strings is to be explicit about whether\nyou want characters or bytes. For individual Unicode scalar values, use the\n`chars` method. Calling `chars` on \u201c\u0417\u0434\u201d separates out and returns two values\nof type `char`, and you can iterate over the result to access each element:\n\n```rust\nfor c in \"\u0417\u0434\".chars() {\n    println!(\"{c}\");\n}\n```\n\nThis code will print the following:\n\n```text\n\u0417\n\u0434\n```\n\nAlternatively, the `bytes` method returns each raw byte, which might be\nappropriate for your domain:\n\n```rust\nfor b in \"\u0417\u0434\".bytes() {\n    println!(\"{b}\");\n}\n```\n\nThis code will print the four bytes that make up this string:\n\n```text\n208\n151\n208\n180\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more\nthan 1 byte.\n\nGetting grapheme clusters from strings as with the Devanagari script is\ncomplex, so this functionality is not provided by the standard library. Crates\nare available on [crates.io](https://crates.io/)<!-- ignore --> if this is the\nfunctionality you need.\n\n### Strings Are Not So Simple\n\nTo summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of `String` data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data upfront. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle.\n\nThe good news is that the standard library offers a lot of functionality built\noff the `String` and `&str` types to help handle these complex situations\ncorrectly. Be sure to check out the documentation for useful methods like\n`contains` for searching in a string and `replace` for substituting parts of a\nstring with another string.\n\nLet\u2019s switch to something a bit less complex: hash maps!\n",
          "qas": [
            {
              "question": "How to combine two strings?",
              "id": 206,
              "answers": [
                {
                  "text": "Often, you\u2019ll want to combine two existing strings. One way to do so is to use\nthe `+` operator",
                  "answer_start": 5909
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is it useful to use '+' operator to combine multiple strings?",
              "id": 207,
              "answers": [
                {
                  "text": "If we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:",
                  "answer_start": 8311
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to append a string slice to string?",
              "id": 205,
              "answers": [
                {
                  "text": "We can grow a `String` by using the `push_str` method to append a string slice,",
                  "answer_start": 4496
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For complex string combining what I can use insted of \"+\"?",
              "id": 208,
              "answers": [
                {
                  "text": "With all of the `+` and `\"`\ncharacters, it\u2019s difficult to see what\u2019s going on. For more complicated string\ncombining, we can instead use the `format!` macro:\n",
                  "answer_start": 8571
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are strings implemented?",
              "id": 199,
              "answers": [
                {
                  "text": "strings are\nimplemented as a collection of bytes, plus some methods",
                  "answer_start": 522
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why Rust doesn\u2019t allow us to index into a `String` to get a character?",
              "id": 212,
              "answers": [
                {
                  "text": "reason Rust doesn\u2019t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn\u2019t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.",
                  "answer_start": 13259
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to compare`String::from` and `to_string`?",
              "id": 203,
              "answers": [
                {
                  "text": "`String::from` and\n`to_string` do the same thing, so which you choose is a matter of style and\nreadability.",
                  "answer_start": 3713
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why indexing into a string is not a good idea?",
              "id": 213,
              "answers": [
                {
                  "text": "Indexing into a string is often a bad idea because it\u2019s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice.",
                  "answer_start": 13637
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why many of the same operations available with `Vec\u2039T>` are available with `String` as wellstrictions, and capabilities?",
              "id": 201,
              "answers": [
                {
                  "text": "Many of the same operations available with `Vec\u2039T>` are available with `String`\nas well, because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities.",
                  "answer_start": 1950
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I can include any properly encoded data in strings?",
              "id": 204,
              "answers": [
                {
                  "text": "strings are UTF-8 encoded, so we can include any properly encoded\ndata in them",
                  "answer_start": 3836
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix B: Operators and Symbols\n\nThis appendix contains a glossary of Rust\u2019s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.\n\n### Operators\n\nTable B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.\n\n<span class=\"caption\">Table B-1: Operators</span>\n\n| Operator | Example | Explanation | Overloadable? |\n|----------|---------|-------------|---------------|\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion | |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `expr != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow | |\n| `&` | `&type`, `&mut type`, `&'a type`, `&'a mut type` | Borrowed pointer type | |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND | |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | `Deref` |\n| `*` | `*const type`, `*mut type` | Raw pointer | |\n| `+` | `trait + trait`, `'a + trait` | Compound type constraint | |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator | |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, <code>|;...|; -> type</code> | Function and closure return type | |\n| `.` | `expr.ident` | Member access | |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | `PartialOrd` |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | `PartialOrd` |\n| `..` | `..expr` | Struct literal update syntax | |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | \u201cAnd the rest\u201d pattern binding | |\n| `...` | `expr...expr` | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern | |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints | |\n| `:` | `ident: expr` | Struct field initializer | |\n| `:` | `'a: loop {...}` | Loop label | |\n| `;` | `expr;` | Statement and item terminator | |\n| `;` | `[...; len]` | Part of fixed-size array syntax | |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence | |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax | |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding | |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| <code>|;</code> | <code>pat |; pat</code> | Pattern alternatives | |\n| <code>|;</code> | <code>expr |; expr</code> | Bitwise OR | `BitOr` |\n| <code>|;=</code> | <code>var |;= expr</code> | Bitwise OR and assignment | `BitOrAssign` |\n| <code>|;|;</code> | <code>expr |;|; expr</code> | Short-circuiting logical OR | |\n| `?` | `expr?` | Error propagation | |\n\n### Non-operator Symbols\n\nThe following list contains all symbols that don\u2019t function as operators; that\nis, they don\u2019t behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.\n\n<span class=\"caption\">Table B-2: Stand-Alone Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs an array of bytes instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `'...'` | Character literal |\n| `b'...'` | ASCII byte literal |\n| <code>|;...|; expr</code> | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | \u201cIgnored\u201d pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.\n\n<span class=\"caption\">Table B-3: Path-Related Syntax</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path).\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it\u2019s defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type\nparameters.\n\n<span class=\"caption\">Table B-4: Generics</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.\n\n<span class=\"caption\">Table B-5: Trait Bound Constraints</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: 'a` | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static` | Generic type `T` contains no borrowed references other than `'static` ones |\n| `'b: 'a` | Generic lifetime `'b` must outlive lifetime `'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.\n\n<span class=\"caption\">Table B-6: Macros and Attributes</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(\u2026)\u2026` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\n<span class=\"caption\">Table B-7: Comments</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\n<span class=\"caption\">Table B-8: Tuples</span>\n\n| Symbol | Explanation |\n|--------|-------------|\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\n<span class=\"caption\">Table B-9: Curly Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\n<span class=\"caption\">Table B-10: Square Brackets</span>\n\n| Context | Explanation |\n|---------|-------------|\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the \u201cindex\u201d |\n",
          "qas": [
            {
              "question": "What is the meaning of syntax \"T:'a\"",
              "id": 129,
              "answers": [
                {
                  "text": " Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`)",
                  "answer_start": 7391
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use for loop label?",
              "id": 80,
              "answers": [
                {
                  "text": ":",
                  "answer_start": 2801
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '&&' operator?",
              "id": 56,
              "answers": [
                {
                  "text": "*",
                  "answer_start": 1327
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '@' used for?",
              "id": 94,
              "answers": [
                {
                  "text": "Pattern binding",
                  "answer_start": 3673
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use path relative to the current module?",
              "id": 113,
              "answers": [
                {
                  "text": "self::path",
                  "answer_start": 5595
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we mark function and closure return type?",
              "id": 69,
              "answers": [
                {
                  "text": "->`",
                  "answer_start": 2006
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I subtract and assign in one step?",
              "id": 68,
              "answers": [
                {
                  "text": "-=",
                  "answer_start": 1927
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How will collection indexing pretending to be collection slicing look like?",
              "id": 158,
              "answers": [
                {
                  "text": "expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]",
                  "answer_start": 9891
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I assign a type of 32-bit integer to a variable?",
              "id": 100,
              "answers": [
                {
                  "text": "...i32",
                  "answer_start": 4608
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create block expression?",
              "id": 152,
              "answers": [
                {
                  "text": "{...}",
                  "answer_start": 9408
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what should I use syntax: <type as trait>::method(...)?",
              "id": 118,
              "answers": [
                {
                  "text": "Disambiguating a method call by naming the trait and type",
                  "answer_start": 6182
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what symbol can I do the right shift with assignment?",
              "id": 93,
              "answers": [
                {
                  "text": ">>=",
                  "answer_start": 3582
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '-'?",
              "id": 67,
              "answers": [
                {
                  "text": "Arithmetic subtraction ",
                  "answer_start": 1891
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create array containing 'len' copies of 'expr'?",
              "id": 155,
              "answers": [
                {
                  "text": "[expr; len]",
                  "answer_start": 9680
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is \"ignored\" patter binding marked?",
              "id": 106,
              "answers": [
                {
                  "text": "_",
                  "answer_start": 5180
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make outer line doc comment?",
              "id": 140,
              "answers": [
                {
                  "text": "///",
                  "answer_start": 8505
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator stands for arithmetic remainder with assignment?",
              "id": 51,
              "answers": [
                {
                  "text": "%=",
                  "answer_start": 944
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can I use for Constraints?",
              "id": 78,
              "answers": [
                {
                  "text": ":",
                  "answer_start": 2695
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '#[meta]'?",
              "id": 132,
              "answers": [
                {
                  "text": "Outer attribute ",
                  "answer_start": 8078
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does function call expression looks like?",
              "id": 150,
              "answers": [
                {
                  "text": "expr(expr, ...)",
                  "answer_start": 9075
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use for string literal?",
              "id": 104,
              "answers": [
                {
                  "text": "\"...\"",
                  "answer_start": 4684
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '$ident'?",
              "id": 134,
              "answers": [
                {
                  "text": "Macro substitution",
                  "answer_start": 8142
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I shift left and assign?",
              "id": 84,
              "answers": [
                {
                  "text": "\u2039\u2039=",
                  "answer_start": 3001
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can we check if some values are not equal?",
              "id": 49,
              "answers": [
                {
                  "text": "!=",
                  "answer_start": 824
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What symbol can I use for error propagation?",
              "id": 97,
              "answers": [
                {
                  "text": "?",
                  "answer_start": 4153
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I recognize struct literal?",
              "id": 153,
              "answers": [
                {
                  "text": "Type {...}",
                  "answer_start": 9439
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I perform left-shift?",
              "id": 83,
              "answers": [
                {
                  "text": "\u2039\u2039`",
                  "answer_start": 2954
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create single-element tuple type?",
              "id": 147,
              "answers": [
                {
                  "text": "(type,)",
                  "answer_start": 8965
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is written with b'...'?",
              "id": 110,
              "answers": [
                {
                  "text": "ASCII byte literal",
                  "answer_start": 5057
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use '==' operator in rust?",
              "id": 88,
              "answers": [
                {
                  "text": "Equality comparison",
                  "answer_start": 3297
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use ','?",
              "id": 65,
              "answers": [
                {
                  "text": "Argument and element separator",
                  "answer_start": 1783
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use when two methods have the same name but different types?",
              "id": 117,
              "answers": [
                {
                  "text": "type::method(...)",
                  "answer_start": 6053
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is used with compound type constraint?",
              "id": 61,
              "answers": [
                {
                  "text": "+",
                  "answer_start": 1564
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator means 'less than or equal'?",
              "id": 86,
              "answers": [
                {
                  "text": "\u2039=",
                  "answer_start": 3132
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what symbol can I make integer literals more readable?",
              "id": 105,
              "answers": [
                {
                  "text": "_",
                  "answer_start": 5180
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we define generic implementation?",
              "id": 125,
              "answers": [
                {
                  "text": "impl\u2039...> ...",
                  "answer_start": 6849
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the syntax for macro capture?",
              "id": 135,
              "answers": [
                {
                  "text": "$ident:kind",
                  "answer_start": 8166
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is an alternative for '..='",
              "id": 74,
              "answers": [
                {
                  "text": "...",
                  "answer_start": 2465
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '$()' standing for?",
              "id": 136,
              "answers": [
                {
                  "text": "Macro repetition",
                  "answer_start": 8209
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is turbofish?",
              "id": 120,
              "answers": [
                {
                  "text": "Specifies parameters to generic type, function, or method in an expression",
                  "answer_start": 6547
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '...' meaning?",
              "id": 75,
              "answers": [
                {
                  "text": "In a pattern: inclusive range pattern",
                  "answer_start": 2520
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of /* ... */",
              "id": 141,
              "answers": [
                {
                  "text": "Block comment",
                  "answer_start": 8551
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of a '!' operator?",
              "id": 48,
              "answers": [
                {
                  "text": "Bitwise or logical complement | `Not`",
                  "answer_start": 781
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does array looks like?",
              "id": 154,
              "answers": [
                {
                  "text": "[...]",
                  "answer_start": 9652
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define generic structure?",
              "id": 123,
              "answers": [
                {
                  "text": "struct ident\u2039...> ...",
                  "answer_start": 6739
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '..'",
              "id": 71,
              "answers": [
                {
                  "text": "Right-exclusive range literal",
                  "answer_start": 2190
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can we use to divide?",
              "id": 76,
              "answers": [
                {
                  "text": "/",
                  "answer_start": 2565
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I perform right shift?",
              "id": 92,
              "answers": [
                {
                  "text": ">>",
                  "answer_start": 3534
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I allow generic type parameter to be dynamically sized type?",
              "id": 131,
              "answers": [
                {
                  "text": "T: ?Sized",
                  "answer_start": 7694
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '+' doing?",
              "id": 62,
              "answers": [
                {
                  "text": "Arithmetic addition ",
                  "answer_start": 1654
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I disambiguate a method call by naming the trait?",
              "id": 116,
              "answers": [
                {
                  "text": "trait::method(...)",
                  "answer_start": 5961
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create empty tuple?",
              "id": 144,
              "answers": [
                {
                  "text": "()",
                  "answer_start": 8820
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make single-element tuple?",
              "id": 146,
              "answers": [
                {
                  "text": "(expr,)",
                  "answer_start": 8917
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use ';'?",
              "id": 81,
              "answers": [
                {
                  "text": "Statement and item terminator",
                  "answer_start": 2858
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' operator stands for?",
              "id": 54,
              "answers": [
                {
                  "text": "Bitwise AND",
                  "answer_start": 1169
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Name some examples of numeric literal of specific type",
              "id": 103,
              "answers": [
                {
                  "text": "...u8`, `...i32`, `...f64`, `...usize`, etc.",
                  "answer_start": 4599
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what should I use '*' operator?",
              "id": 59,
              "answers": [
                {
                  "text": "Dereference",
                  "answer_start": 1484
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to a generic type where one or more associated types have specific assignments?",
              "id": 127,
              "answers": [
                {
                  "text": "type\u2039ident=type>",
                  "answer_start": 6953
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How will array type containing 'len' instances of 'type' definition  look like?",
              "id": 156,
              "answers": [
                {
                  "text": "[type; len]",
                  "answer_start": 9748
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is /** ... */",
              "id": 143,
              "answers": [
                {
                  "text": "Outer block doc comment",
                  "answer_start": 8623
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '..'",
              "id": 73,
              "answers": [
                {
                  "text": " \u201cAnd the rest\u201d pattern binding",
                  "answer_start": 2426
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I construct an array of bytes instead of a string?",
              "id": 109,
              "answers": [
                {
                  "text": "`b\"...\"`",
                  "answer_start": 4811
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator is for bitwise exclusive OR?",
              "id": 95,
              "answers": [
                {
                  "text": "^",
                  "answer_start": 3696
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define path relative to the crate root?",
              "id": 112,
              "answers": [
                {
                  "text": "::path",
                  "answer_start": 5512
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I mark a float with 64 bits?",
              "id": 101,
              "answers": [
                {
                  "text": "...f64",
                  "answer_start": 4618
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I say that generic type 'T' contains no borrowed references other than 'static' ones?",
              "id": 130,
              "answers": [
                {
                  "text": "T: 'static",
                  "answer_start": 7536
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I use fir raw byte string literal",
              "id": 108,
              "answers": [
                {
                  "text": "br\"...\"`, `br#\"...\"#`, `br##\"...\"##",
                  "answer_start": 4897
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I write generic parameter T that is constrained to types that implement U?",
              "id": 128,
              "answers": [
                {
                  "text": "T: U",
                  "answer_start": 7308
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to index of collection?",
              "id": 157,
              "answers": [
                {
                  "text": "expr[expr]",
                  "answer_start": 9816
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can i define generic enum?",
              "id": 124,
              "answers": [
                {
                  "text": "enum ident\u2039...> ...",
                  "answer_start": 6794
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what operator can I calculate bitwaise AND with assignment?",
              "id": 55,
              "answers": [
                {
                  "text": "&=",
                  "answer_start": 1197
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What symbol stands for 'less than' in comparison?",
              "id": 85,
              "answers": [
                {
                  "text": "\u2039",
                  "answer_start": 3070
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '&' operator stands for?",
              "id": 53,
              "answers": [
                {
                  "text": "Borrowed pointer type ",
                  "answer_start": 1119
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator can I use for multiplication?",
              "id": 57,
              "answers": [
                {
                  "text": "*",
                  "answer_start": 1327
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create tuple expression?",
              "id": 148,
              "answers": [
                {
                  "text": "(expr, ...)",
                  "answer_start": 9007
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of using '^='?",
              "id": 96,
              "answers": [
                {
                  "text": "Bitwise exclusive OR and assignment ",
                  "answer_start": 3776
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is '+' doing?",
              "id": 63,
              "answers": [
                {
                  "text": "Compound type constraint",
                  "answer_start": 1601
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is always empty bottom type for diverging functions marked?",
              "id": 107,
              "answers": [
                {
                  "text": "!",
                  "answer_start": 5121
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use for arithmetic addition and assignment?",
              "id": 64,
              "answers": [
                {
                  "text": "+=",
                  "answer_start": 1687
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of (expr)",
              "id": 145,
              "answers": [
                {
                  "text": "Parenthesized expression",
                  "answer_start": 8887
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operator stands for arithmetic remainder?",
              "id": 50,
              "answers": [
                {
                  "text": "%",
                  "answer_start": 889
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does '*=\" operator do?",
              "id": 58,
              "answers": [
                {
                  "text": "Arithmetic multiplication and assignment",
                  "answer_start": 1409
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of '//' symbol?",
              "id": 138,
              "answers": [
                {
                  "text": " Line comment ",
                  "answer_start": 8451
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I define namespace path?",
              "id": 111,
              "answers": [
                {
                  "text": "ident::ident",
                  "answer_start": 5476
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I use when it comes to associated constants, functions and types?",
              "id": 115,
              "answers": [
                {
                  "text": "type::ident",
                  "answer_start": 5755
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is marked with 'ident' symbol?",
              "id": 98,
              "answers": [
                {
                  "text": "Named lifetime or loop label",
                  "answer_start": 4565
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we use macro invocation?",
              "id": 137,
              "answers": [
                {
                  "text": "`ident!(...)`, `ident!{...}`, `ident![...]` ",
                  "answer_start": 8230
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of syntax: (type,...)",
              "id": 149,
              "answers": [
                {
                  "text": "Tuple type",
                  "answer_start": 9059
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Advanced Traits\n\nWe first covered traits in the [\u201cTraits: Defining Shared\nBehavior\u201d][traits-defining-shared-behavior]<!-- ignore --> section of Chapter\n10, but we didn\u2019t discuss the more advanced details. Now that you know more\nabout Rust, we can get into the nitty-gritty.\n\n### Specifying Placeholder Types in Trait Definitions with Associated Types\n\n*Associated types* connect a type placeholder with a trait such that the trait\nmethod definitions can use these placeholder types in their signatures. The\nimplementor of a trait will specify the concrete type to be used instead of the\nplaceholder type for the particular implementation. That way, we can define a\ntrait that uses some types without needing to know exactly what those types are\nuntil the trait is implemented.\n\nWe\u2019ve described most of the advanced features in this chapter as being rarely\nneeded. Associated types are somewhere in the middle: they\u2019re used more rarely\nthan features explained in the rest of the book but more commonly than many of\nthe other features discussed in this chapter.\n\nOne example of a trait with an associated type is the `Iterator` trait that the\nstandard library provides. The associated type is named `Item` and stands in\nfor the type of the values the type implementing the `Iterator` trait is\niterating over. The definition of the `Iterator` trait is as shown in Listing\n19-12.\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-12: The definition of the `Iterator` trait\nthat has an associated type `Item`</span>\n\nThe type `Item` is a placeholder, and the `next` method\u2019s definition shows that\nit will return values of type `Option<Self::Item>`. Implementors of the\n`Iterator` trait will specify the concrete type for `Item`, and the `next`\nmethod will return an `Option` containing a value of that concrete type.\n\nAssociated types might seem like a similar concept to generics, in that the\nlatter allow us to define a function without specifying what types it can\nhandle. To examine the difference between the two concepts, we\u2019ll look at an\nimplementation of the `Iterator` trait on a type named `Counter` that specifies\nthe `Item` type is `u32`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-22-iterator-on-counter/src/lib.rs:ch19}}\n```\n\nThis syntax seems comparable to that of generics. So why not just define the\n`Iterator` trait with generics, as shown in Listing 19-13?\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-13/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-13: A hypothetical definition of the\n`Iterator` trait using generics</span>\n\nThe difference is that when using generics, as in Listing 19-13, we must\nannotate the types in each implementation; because we can also implement\n`Iterator<String> for Counter` or any other type, we could have multiple\nimplementations of `Iterator` for `Counter`. In other words, when a trait has a\ngeneric parameter, it can be implemented for a type multiple times, changing\nthe concrete types of the generic type parameters each time. When we use the\n`next` method on `Counter`, we would have to provide type annotations to\nindicate which implementation of `Iterator` we want to use.\n\nWith associated types, we don\u2019t need to annotate types because we can\u2019t\nimplement a trait on a type multiple times. In Listing 19-12 with the\ndefinition that uses associated types, we can only choose what the type of\n`Item` will be once, because there can only be one `impl Iterator for Counter`.\nWe don\u2019t have to specify that we want an iterator of `u32` values everywhere\nthat we call `next` on `Counter`.\n\nAssociated types also become part of the trait\u2019s contract: implementors of the\ntrait must provide a type to stand in for the associated type placeholder.\nAssociated types often have a name that describes how the type will be used,\nand documenting the associated type in the API documentation is good practice.\n\n### Default Generic Type Parameters and Operator Overloading\n\nWhen we use generic type parameters, we can specify a default concrete type for\nthe generic type. This eliminates the need for implementors of the trait to\nspecify a concrete type if the default type works. You specify a default type\nwhen declaring a generic type with the `<PlaceholderType=ConcreteType>` syntax.\n\nA great example of a situation where this technique is useful is with *operator\noverloading*, in which you customize the behavior of an operator (such as `+`)\nin particular situations.\n\nRust doesn\u2019t allow you to create your own operators or overload arbitrary\noperators. But you can overload the operations and corresponding traits listed\nin `std::ops` by implementing the traits associated with the operator. For\nexample, in Listing 19-14 we overload the `+` operator to add two `Point`\ninstances together. We do this by implementing the `Add` trait on a `Point`\nstruct:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-14: Implementing the `Add` trait to overload\nthe `+` operator for `Point` instances</span>\n\nThe `add` method adds the `x` values of two `Point` instances and the `y`\nvalues of two `Point` instances to create a new `Point`. The `Add` trait has an\nassociated type named `Output` that determines the type returned from the `add`\nmethod.\n\nThe default generic type in this code is within the `Add` trait. Here is its\ndefinition:\n\n```rust\ntrait Add<Rhs=Self> {\n    type Output;\n\n    fn add(self, rhs: Rhs) -> Self::Output;\n}\n```\n\nThis code should look generally familiar: a trait with one method and an\nassociated type. The new part is `Rhs=Self`: this syntax is called *default\ntype parameters*. The `Rhs` generic type parameter (short for \u201cright hand\nside\u201d) defines the type of the `rhs` parameter in the `add` method. If we don\u2019t\nspecify a concrete type for `Rhs` when we implement the `Add` trait, the type\nof `Rhs` will default to `Self`, which will be the type we\u2019re implementing\n`Add` on.\n\nWhen we implemented `Add` for `Point`, we used the default for `Rhs` because we\nwanted to add two `Point` instances. Let\u2019s look at an example of implementing\nthe `Add` trait where we want to customize the `Rhs` type rather than using the\ndefault.\n\nWe have two structs, `Millimeters` and `Meters`, holding values in different\nunits. This thin wrapping of an existing type in another struct is known as the\n*newtype pattern*, which we describe in more detail in the [\u201cUsing the Newtype\nPattern to Implement External Traits on External Types\u201d][newtype]<!-- ignore\n--> section. We want to add values in millimeters to values in meters and have\nthe implementation of `Add` do the conversion correctly. We can implement `Add`\nfor `Millimeters` with `Meters` as the `Rhs`, as shown in Listing 19-15.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-15/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-15: Implementing the `Add` trait on\n`Millimeters` to add `Millimeters` to `Meters`</span>\n\nTo add `Millimeters` and `Meters`, we specify `impl Add<Meters>` to set the\nvalue of the `Rhs` type parameter instead of using the default of `Self`.\n\nYou\u2019ll use default type parameters in two main ways:\n\n* To extend a type without breaking existing code\n* To allow customization in specific cases most users won\u2019t need\n\nThe standard library\u2019s `Add` trait is an example of the second purpose:\nusually, you\u2019ll add two like types, but the `Add` trait provides the ability to\ncustomize beyond that. Using a default type parameter in the `Add` trait\ndefinition means you don\u2019t have to specify the extra parameter most of the\ntime. In other words, a bit of implementation boilerplate isn\u2019t needed, making\nit easier to use the trait.\n\nThe first purpose is similar to the second but in reverse: if you want to add a\ntype parameter to an existing trait, you can give it a default to allow\nextension of the functionality of the trait without breaking the existing\nimplementation code.\n\n### Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name\n\nNothing in Rust prevents a trait from having a method with the same name as\nanother trait\u2019s method, nor does Rust prevent you from implementing both traits\non one type. It\u2019s also possible to implement a method directly on the type with\nthe same name as methods from traits.\n\nWhen calling methods with the same name, you\u2019ll need to tell Rust which one you\nwant to use. Consider the code in Listing 19-16 where we\u2019ve defined two traits,\n`Pilot` and `Wizard`, that both have a method called `fly`. We then implement\nboth traits on a type `Human` that already has a method named `fly` implemented\non it. Each `fly` method does something different.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-16: Two traits are defined to have a `fly`\nmethod and are implemented on the `Human` type, and a `fly` method is\nimplemented on `Human` directly</span>\n\nWhen we call `fly` on an instance of `Human`, the compiler defaults to calling\nthe method that is directly implemented on the type, as shown in Listing 19-17.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-17/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-17: Calling `fly` on an instance of\n`Human`</span>\n\nRunning this code will print `*waving arms furiously*`, showing that Rust\ncalled the `fly` method implemented on `Human` directly.\n\nTo call the `fly` methods from either the `Pilot` trait or the `Wizard` trait,\nwe need to use more explicit syntax to specify which `fly` method we mean.\nListing 19-18 demonstrates this syntax.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-18: Specifying which trait\u2019s `fly` method we\nwant to call</span>\n\nSpecifying the trait name before the method name clarifies to Rust which\nimplementation of `fly` we want to call. We could also write\n`Human::fly(&person)`, which is equivalent to the `person.fly()` that we used\nin Listing 19-18, but this is a bit longer to write if we don\u2019t need to\ndisambiguate.\n\nRunning this code prints the following:\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-18/output.txt}}\n```\n\nBecause the `fly` method takes a `self` parameter, if we had two *types* that\nboth implement one *trait*, Rust could figure out which implementation of a\ntrait to use based on the type of `self`.\n\nHowever, associated functions that are not methods don\u2019t have a `self`\nparameter. When there are multiple types or traits that define non-method\nfunctions with the same function name, Rust doesn't always know which type you\nmean unless you use *fully qualified syntax*. For example, in Listing 19-19 we\ncreate a trait for an animal shelter that wants to name all baby dogs *Spot*.\nWe make an `Animal` trait with an associated non-method function `baby_name`.\nThe `Animal` trait is implemented for the struct `Dog`, on which we also\nprovide an associated non-method function `baby_name` directly.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-19/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-19: A trait with an associated function and a\ntype with an associated function of the same name that also implements the\ntrait</span>\n\nWe implement the code for naming all puppies Spot in the `baby_name` associated\nfunction that is defined on `Dog`. The `Dog` type also implements the trait\n`Animal`, which describes characteristics that all animals have. Baby dogs are\ncalled puppies, and that is expressed in the implementation of the `Animal`\ntrait on `Dog` in the `baby_name` function associated with the `Animal` trait.\n\nIn `main`, we call the `Dog::baby_name` function, which calls the associated\nfunction defined on `Dog` directly. This code prints the following:\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-19/output.txt}}\n```\n\nThis output isn\u2019t what we wanted. We want to call the `baby_name` function that\nis part of the `Animal` trait that we implemented on `Dog` so the code prints\n`A baby dog is called a puppy`. The technique of specifying the trait name that\nwe used in Listing 19-18 doesn\u2019t help here; if we change `main` to the code in\nListing 19-20, we\u2019ll get a compilation error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-20/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-20: Attempting to call the `baby_name`\nfunction from the `Animal` trait, but Rust doesn\u2019t know which implementation to\nuse</span>\n\nBecause `Animal::baby_name` doesn\u2019t have a `self` parameter, and there could be\nother types that implement the `Animal` trait, Rust can\u2019t figure out which\nimplementation of `Animal::baby_name` we want. We\u2019ll get this compiler error:\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-20/output.txt}}\n```\n\nTo disambiguate and tell Rust that we want to use the implementation of\n`Animal` for `Dog` as opposed to the implementation of `Animal` for some other\ntype, we need to use fully qualified syntax. Listing 19-21 demonstrates how to\nuse fully qualified syntax.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-21: Using fully qualified syntax to specify\nthat we want to call the `baby_name` function from the `Animal` trait as\nimplemented on `Dog`</span>\n\nWe\u2019re providing Rust with a type annotation within the angle brackets, which\nindicates we want to call the `baby_name` method from the `Animal` trait as\nimplemented on `Dog` by saying that we want to treat the `Dog` type as an\n`Animal` for this function call. This code will now print what we want:\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-21/output.txt}}\n```\n\nIn general, fully qualified syntax is defined as follows:\n\n```rust,ignore\n<Type as Trait>::function(receiver_if_method, next_arg, ...);\n```\n\nFor associated functions that aren\u2019t methods, there would not be a `receiver`:\nthere would only be the list of other arguments. You could use fully qualified\nsyntax everywhere that you call functions or methods. However, you\u2019re allowed\nto omit any part of this syntax that Rust can figure out from other information\nin the program. You only need to use this more verbose syntax in cases where\nthere are multiple implementations that use the same name and Rust needs help\nto identify which implementation you want to call.\n\n### Using Supertraits to Require One Trait\u2019s Functionality Within Another Trait\n\nSometimes, you might write a trait definition that depends on another trait:\nfor a type to implement the first trait, you want to require that type to also\nimplement the second trait. You would do this so that your trait definition can\nmake use of the associated items of the second trait. The trait your trait\ndefinition is relying on is called a *supertrait* of your trait.\n\nFor example, let\u2019s say we want to make an `OutlinePrint` trait with an\n`outline_print` method that will print a given value formatted so that it's\nframed in asterisks. That is, given a `Point` struct that implements the\nstandard library trait `Display` to result in `(x, y)`, when we call\n`outline_print` on a `Point` instance that has `1` for `x` and `3` for `y`, it\nshould print the following:\n\n```text\n**********\n*        *\n* (1, 3) *\n*        *\n**********\n```\n\nIn the implementation of the `outline_print` method, we want to use the\n`Display` trait\u2019s functionality. Therefore, we need to specify that the\n`OutlinePrint` trait will work only for types that also implement `Display` and\nprovide the functionality that `OutlinePrint` needs. We can do that in the\ntrait definition by specifying `OutlinePrint: Display`. This technique is\nsimilar to adding a trait bound to the trait. Listing 19-22 shows an\nimplementation of the `OutlinePrint` trait.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-22: Implementing the `OutlinePrint` trait that\nrequires the functionality from `Display`</span>\n\nBecause we\u2019ve specified that `OutlinePrint` requires the `Display` trait, we\ncan use the `to_string` function that is automatically implemented for any type\nthat implements `Display`. If we tried to use `to_string` without adding a\ncolon and specifying the `Display` trait after the trait name, we\u2019d get an\nerror saying that no method named `to_string` was found for the type `&Self` in\nthe current scope.\n\nLet\u2019s see what happens when we try to implement `OutlinePrint` on a type that\ndoesn\u2019t implement `Display`, such as the `Point` struct:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-02-impl-outlineprint-for-point/src/main.rs:here}}\n```\n\nWe get an error saying that `Display` is required but not implemented:\n\n```console\n{{#include ../listings/ch19-advanced-features/no-listing-02-impl-outlineprint-for-point/output.txt}}\n```\n\nTo fix this, we implement `Display` on `Point` and satisfy the constraint that\n`OutlinePrint` requires, like so:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-03-impl-display-for-point/src/main.rs:here}}\n```\n\nThen implementing the `OutlinePrint` trait on `Point` will compile\nsuccessfully, and we can call `outline_print` on a `Point` instance to display\nit within an outline of asterisks.\n\n### Using the Newtype Pattern to Implement External Traits on External Types\n\nIn Chapter 10 in the [\u201cImplementing a Trait on a\nType\u201d][implementing-a-trait-on-a-type]<!-- ignore --> section, we mentioned the\norphan rule that states we\u2019re only allowed to implement a trait on a type if\neither the trait or the type are local to our crate. It\u2019s possible to get\naround this restriction using the *newtype pattern*, which involves creating a\nnew type in a tuple struct. (We covered tuple structs in the [\u201cUsing Tuple\nStructs without Named Fields to Create Different Types\u201d][tuple-structs]<!--\nignore --> section of Chapter 5.) The tuple struct will have one field and be a\nthin wrapper around the type we want to implement a trait for. Then the wrapper\ntype is local to our crate, and we can implement the trait on the wrapper.\n*Newtype* is a term that originates from the Haskell programming language.\nThere is no runtime performance penalty for using this pattern, and the wrapper\ntype is elided at compile time.\n\nAs an example, let\u2019s say we want to implement `Display` on `Vec<T>`, which the\norphan rule prevents us from doing directly because the `Display` trait and the\n`Vec<T>` type are defined outside our crate. We can make a `Wrapper` struct\nthat holds an instance of `Vec<T>`; then we can implement `Display` on\n`Wrapper` and use the `Vec<T>` value, as shown in Listing 19-23.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-23/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-23: Creating a `Wrapper` type around\n`Vec<String>` to implement `Display`</span>\n\nThe implementation of `Display` uses `self.0` to access the inner `Vec<T>`,\nbecause `Wrapper` is a tuple struct and `Vec<T>` is the item at index 0 in the\ntuple. Then we can use the functionality of the `Display` type on `Wrapper`.\n\nThe downside of using this technique is that `Wrapper` is a new type, so it\ndoesn\u2019t have the methods of the value it\u2019s holding. We would have to implement\nall the methods of `Vec<T>` directly on `Wrapper` such that the methods\ndelegate to `self.0`, which would allow us to treat `Wrapper` exactly like a\n`Vec<T>`. If we wanted the new type to have every method the inner type has,\nimplementing the `Deref` trait (discussed in Chapter 15 in the [\u201cTreating Smart\nPointers Like Regular References with the `Deref`\nTrait\u201d][smart-pointer-deref]<!-- ignore --> section) on the `Wrapper` to return\nthe inner type would be a solution. If we don\u2019t want the `Wrapper` type to have\nall the methods of the inner type\u2014for example, to restrict the `Wrapper` type\u2019s\nbehavior\u2014we would have to implement just the methods we do want manually.\n\nThis newtype pattern is also useful even when traits are not involved. Let\u2019s\nswitch focus and look at some advanced ways to interact with Rust\u2019s type system.\n\n[newtype]: ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\n[implementing-a-trait-on-a-type]:\nch10-02-traits.html#implementing-a-trait-on-a-type\n[traits-defining-shared-behavior]:\nch10-02-traits.html#traits-defining-shared-behavior\n[smart-pointer-deref]: ch15-02-deref.html#treating-smart-pointers-like-regular-references-with-the-deref-trait\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\n",
          "qas": [
            {
              "question": "Can I create my own operators in Rust?",
              "id": 75,
              "answers": [
                {
                  "text": "Rust doesn\u2019t allow you to create your own operators or overload arbitrary\noperators. But you can overload the operations and corresponding traits listed\nin `std::ops` by implementing the traits associated with the operator.",
                  "answer_start": 4643
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What give me a default Generic Type Parameters?",
              "id": 74,
              "answers": [
                {
                  "text": "When we use generic type parameters, we can specify a default concrete type for\nthe generic type. This eliminates the need for implementors of the trait to\nspecify a concrete type if the default type works. You specify a default type\nwhen declaring a generic type with the `\u2039PlaceholderType=ConcreteType>` syntax.\n\nA great example of a situation where this technique is useful is with *operator\noverloading*, in which you customize the behavior of an operator (such as `+`)\nin particular situations.",
                  "answer_start": 4142
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I have two methods with the same name in Rust?",
              "id": 76,
              "answers": [
                {
                  "text": "Nothing in Rust prevents a trait from having a method with the same name as\nanother trait\u2019s method, nor does Rust prevent you from implementing both traits\non one type. It\u2019s also possible to implement a method directly on the type with\nthe same name as methods from traits.\n\nWhen calling methods with the same name, you\u2019ll need to tell Rust which one you\nwant to use. ",
                  "answer_start": 8339
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What gives us a generic parameter in a trait?",
              "id": 73,
              "answers": [
                {
                  "text": "when a trait has a\ngeneric parameter, it can be implemented for a type multiple times, changing\nthe concrete types of the generic type parameters each time.",
                  "answer_start": 3053
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Implementing an Object-Oriented Design Pattern\n\nThe *state pattern* is an object-oriented design pattern. The crux of the\npattern is that we define a set of states a value can have internally. The\nstates are represented by a set of *state objects*, and the value\u2019s behavior\nchanges based on its state. We\u2019re going to work through an example of a blog\npost struct that has a field to hold its state, which will be a state object\nfrom the set \"draft\", \"review\", or \"published\".\n\nThe state objects share functionality: in Rust, of course, we use structs and\ntraits rather than objects and inheritance. Each state object is responsible\nfor its own behavior and for governing when it should change into another\nstate. The value that holds a state object knows nothing about the different\nbehavior of the states or when to transition between states.\n\nThe advantage of using the state pattern is that, when the business\nrequirements of the program change, we won\u2019t need to change the code of the\nvalue holding the state or the code that uses the value. We\u2019ll only need to\nupdate the code inside one of the state objects to change its rules or perhaps\nadd more state objects.\n\nFirst, we\u2019re going to implement the state pattern in a more traditional\nobject-oriented way, then we\u2019ll use an approach that\u2019s a bit more natural in\nRust. Let\u2019s dig in to incrementally implementing a blog post workflow using the\nstate pattern.\n\nThe final functionality will look like this:\n\n1. A blog post starts as an empty draft.\n2. When the draft is done, a review of the post is requested.\n3. When the post is approved, it gets published.\n4. Only published blog posts return content to print, so unapproved posts can\u2019t\n   accidentally be published.\n\nAny other changes attempted on a post should have no effect. For example, if we\ntry to approve a draft blog post before we\u2019ve requested a review, the post\nshould remain an unpublished draft.\n\nListing 17-11 shows this workflow in code form: this is an example usage of the\nAPI we\u2019ll implement in a library crate named `blog`. This won\u2019t compile yet\nbecause we haven\u2019t implemented the `blog` crate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch17-oop/listing-17-11/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 17-11: Code that demonstrates the desired\nbehavior we want our `blog` crate to have</span>\n\nWe want to allow the user to create a new draft blog post with `Post::new`. We\nwant to allow text to be added to the blog post. If we try to get the post\u2019s\ncontent immediately, before approval, we shouldn\u2019t get any text because the\npost is still a draft. We\u2019ve added `assert_eq!` in the code for demonstration\npurposes. An excellent unit test for this would be to assert that a draft blog\npost returns an empty string from the `content` method, but we\u2019re not going to\nwrite tests for this example.\n\nNext, we want to enable a request for a review of the post, and we want\n`content` to return an empty string while waiting for the review. When the post\nreceives approval, it should get published, meaning the text of the post will\nbe returned when `content` is called.\n\nNotice that the only type we\u2019re interacting with from the crate is the `Post`\ntype. This type will use the state pattern and will hold a value that will be\none of three state objects representing the various states a post can be\nin\u2014draft, waiting for review, or published. Changing from one state to another\nwill be managed internally within the `Post` type. The states change in\nresponse to the methods called by our library\u2019s users on the `Post` instance,\nbut they don\u2019t have to manage the state changes directly. Also, users can\u2019t\nmake a mistake with the states, like publishing a post before it\u2019s reviewed.\n\n### Defining `Post` and Creating a New Instance in the Draft State\n\nLet\u2019s get started on the implementation of the library! We know we need a\npublic `Post` struct that holds some content, so we\u2019ll start with the\ndefinition of the struct and an associated public `new` function to create an\ninstance of `Post`, as shown in Listing 17-12. We\u2019ll also make a private\n`State` trait that will define the behavior that all state objects for a `Post`\nmust have.\n\nThen `Post` will hold a trait object of `Box<dyn State>` inside an `Option<T>`\nin a private field named `state` to hold the state object. You\u2019ll see why the\n`Option<T>` is necessary in a bit.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-12: Definition of a `Post` struct and a `new`\nfunction that creates a new `Post` instance, a `State` trait, and a `Draft`\nstruct</span>\n\nThe `State` trait defines the behavior shared by different post states. The\nstate objects are `Draft`, `PendingReview`, and `Published`, and they will all\nimplement the `State` trait. For now, the trait doesn\u2019t have any methods, and\nwe\u2019ll start by defining just the `Draft` state because that is the state we\nwant a post to start in.\n\nWhen we create a new `Post`, we set its `state` field to a `Some` value that\nholds a `Box`. This `Box` points to a new instance of the `Draft` struct.\nThis ensures whenever we create a new instance of `Post`, it will start out as\na draft. Because the `state` field of `Post` is private, there is no way to\ncreate a `Post` in any other state! In the `Post::new` function, we set the\n`content` field to a new, empty `String`.\n\n### Storing the Text of the Post Content\n\nWe saw in Listing 17-11 that we want to be able to call a method named\n`add_text` and pass it a `&str` that is then added as the text content of the\nblog post. We implement this as a method, rather than exposing the `content`\nfield as `pub`, so that later we can implement a method that will control how\nthe `content` field\u2019s data is read. The `add_text` method is pretty\nstraightforward, so let\u2019s add the implementation in Listing 17-13 to the `impl\nPost` block:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-13: Implementing the `add_text` method to add\ntext to a post\u2019s `content`</span>\n\nThe `add_text` method takes a mutable reference to `self`, because we\u2019re\nchanging the `Post` instance that we\u2019re calling `add_text` on. We then call\n`push_str` on the `String` in `content` and pass the `text` argument to add to\nthe saved `content`. This behavior doesn\u2019t depend on the state the post is in,\nso it\u2019s not part of the state pattern. The `add_text` method doesn\u2019t interact\nwith the `state` field at all, but it is part of the behavior we want to\nsupport.\n\n### Ensuring the Content of a Draft Post Is Empty\n\nEven after we\u2019ve called `add_text` and added some content to our post, we still\nwant the `content` method to return an empty string slice because the post is\nstill in the draft state, as shown on line 7 of Listing 17-11. For now, let\u2019s\nimplement the `content` method with the simplest thing that will fulfill this\nrequirement: always returning an empty string slice. We\u2019ll change this later\nonce we implement the ability to change a post\u2019s state so it can be published.\nSo far, posts can only be in the draft state, so the post content should always\nbe empty. Listing 17-14 shows this placeholder implementation:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-14/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-14: Adding a placeholder implementation for\nthe `content` method on `Post` that always returns an empty string slice</span>\n\nWith this added `content` method, everything in Listing 17-11 up to line 7\nworks as intended.\n\n### Requesting a Review of the Post Changes Its State\n\nNext, we need to add functionality to request a review of a post, which should\nchange its state from `Draft` to `PendingReview`. Listing 17-15 shows this code:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-15/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-15: Implementing `request_review` methods on\n`Post` and the `State` trait</span>\n\nWe give `Post` a public method named `request_review` that will take a mutable\nreference to `self`. Then we call an internal `request_review` method on the\ncurrent state of `Post`, and this second `request_review` method consumes the\ncurrent state and returns a new state.\n\nWe add the `request_review` method to the `State` trait; all types that\nimplement the trait will now need to implement the `request_review` method.\nNote that rather than having `self`, `&self`, or `&mut self` as the first\nparameter of the method, we have `self: Box<Self>`. This syntax means the\nmethod is only valid when called on a `Box` holding the type. This syntax takes\nownership of `Box<Self>`, invalidating the old state so the state value of the\n`Post` can transform into a new state.\n\nTo consume the old state, the `request_review` method needs to take ownership\nof the state value. This is where the `Option` in the `state` field of `Post`\ncomes in: we call the `take` method to take the `Some` value out of the `state`\nfield and leave a `None` in its place, because Rust doesn\u2019t let us have\nunpopulated fields in structs. This lets us move the `state` value out of\n`Post` rather than borrowing it. Then we\u2019ll set the post\u2019s `state` value to the\nresult of this operation.\n\nWe need to set `state` to `None` temporarily rather than setting it directly\nwith code like `self.state = self.state.request_review();` to get ownership of\nthe `state` value. This ensures `Post` can\u2019t use the old `state` value after\nwe\u2019ve transformed it into a new state.\n\nThe `request_review` method on `Draft` returns a new, boxed instance of a new\n`PendingReview` struct, which represents the state when a post is waiting for a\nreview. The `PendingReview` struct also implements the `request_review` method\nbut doesn\u2019t do any transformations. Rather, it returns itself, because when we\nrequest a review on a post already in the `PendingReview` state, it should stay\nin the `PendingReview` state.\n\nNow we can start seeing the advantages of the state pattern: the\n`request_review` method on `Post` is the same no matter its `state` value. Each\nstate is responsible for its own rules.\n\nWe\u2019ll leave the `content` method on `Post` as is, returning an empty string\nslice. We can now have a `Post` in the `PendingReview` state as well as in the\n`Draft` state, but we want the same behavior in the `PendingReview` state.\nListing 17-11 now works up to line 10!\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"adding-the-approve-method-that-changes-the-behavior-of-content\"></a>\n\n### Adding `approve` to Change the Behavior of `content`\n\nThe `approve` method will be similar to the `request_review` method: it will\nset `state` to the value that the current state says it should have when that\nstate is approved, as shown in Listing 17-16:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-16/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-16: Implementing the `approve` method on\n`Post` and the `State` trait</span>\n\nWe add the `approve` method to the `State` trait and add a new struct that\nimplements `State`, the `Published` state.\n\nSimilar to the way `request_review` on `PendingReview` works, if we call the\n`approve` method on a `Draft`, it will have no effect because `approve` will\nreturn `self`. When we call `approve` on `PendingReview`, it returns a new,\nboxed instance of the `Published` struct. The `Published` struct implements the\n`State` trait, and for both the `request_review` method and the `approve`\nmethod, it returns itself, because the post should stay in the `Published`\nstate in those cases.\n\nNow we need to update the `content` method on `Post`. We want the value\nreturned from `content` to depend on the current state of the `Post`, so we\u2019re\ngoing to have the `Post` delegate to a `content` method defined on its `state`,\nas shown in Listing 17-17:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch17-oop/listing-17-17/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-17: Updating the `content` method on `Post` to\ndelegate to a `content` method on `State`</span>\n\nBecause the goal is to keep all these rules inside the structs that implement\n`State`, we call a `content` method on the value in `state` and pass the post\ninstance (that is, `self`) as an argument. Then we return the value that\u2019s\nreturned from using the `content` method on the `state` value.\n\nWe call the `as_ref` method on the `Option` because we want a reference to the\nvalue inside the `Option` rather than ownership of the value. Because `state`\nis an `Option<Box<dyn State>>`, when we call `as_ref`, an `Option<&Box<dyn\nState>>` is returned. If we didn\u2019t call `as_ref`, we would get an error because\nwe can\u2019t move `state` out of the borrowed `&self` of the function parameter.\n\nWe then call the `unwrap` method, which we know will never panic, because we\nknow the methods on `Post` ensure that `state` will always contain a `Some`\nvalue when those methods are done. This is one of the cases we talked about in\nthe [\u201cCases In Which You Have More Information Than the\nCompiler\u201d][more-info-than-rustc]<!-- ignore --> section of Chapter 9 when we\nknow that a `None` value is never possible, even though the compiler isn\u2019t able\nto understand that.\n\nAt this point, when we call `content` on the `&Box<dyn State>`, deref coercion\nwill take effect on the `&` and the `Box` so the `content` method will\nultimately be called on the type that implements the `State` trait. That means\nwe need to add `content` to the `State` trait definition, and that is where\nwe\u2019ll put the logic for what content to return depending on which state we\nhave, as shown in Listing 17-18:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-18/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-18: Adding the `content` method to the `State`\ntrait</span>\n\nWe add a default implementation for the `content` method that returns an empty\nstring slice. That means we don\u2019t need to implement `content` on the `Draft`\nand `PendingReview` structs. The `Published` struct will override the `content`\nmethod and return the value in `post.content`.\n\nNote that we need lifetime annotations on this method, as we discussed in\nChapter 10. We\u2019re taking a reference to a `post` as an argument and returning a\nreference to part of that `post`, so the lifetime of the returned reference is\nrelated to the lifetime of the `post` argument.\n\nAnd we\u2019re done\u2014all of Listing 17-11 now works! We\u2019ve implemented the state\npattern with the rules of the blog post workflow. The logic related to the\nrules lives in the state objects rather than being scattered throughout `Post`.\n\n> #### Why Not An Enum?\n>\n> You may have been wondering why we didn\u2019t use an `enum` with the different\n> possible post states as variants. That\u2019s certainly a possible solution, try\n> it and compare the end results to see which you prefer! One disadvantage of\n> using an enum is every place that checks the value of the enum will need a\n> `match` expression or similar to handle every possible variant. This could\n> get more repetitive than this trait object solution.\n\n### Trade-offs of the State Pattern\n\nWe\u2019ve shown that Rust is capable of implementing the object-oriented state\npattern to encapsulate the different kinds of behavior a post should have in\neach state. The methods on `Post` know nothing about the various behaviors. The\nway we organized the code, we have to look in only one place to know the\ndifferent ways a published post can behave: the implementation of the `State`\ntrait on the `Published` struct.\n\nIf we were to create an alternative implementation that didn\u2019t use the state\npattern, we might instead use `match` expressions in the methods on `Post` or\neven in the `main` code that checks the state of the post and changes behavior\nin those places. That would mean we would have to look in several places to\nunderstand all the implications of a post being in the published state! This\nwould only increase the more states we added: each of those `match` expressions\nwould need another arm.\n\nWith the state pattern, the `Post` methods and the places we use `Post` don\u2019t\nneed `match` expressions, and to add a new state, we would only need to add a\nnew struct and implement the trait methods on that one struct.\n\nThe implementation using the state pattern is easy to extend to add more\nfunctionality. To see the simplicity of maintaining code that uses the state\npattern, try a few of these suggestions:\n\n* Add a `reject` method that changes the post\u2019s state from `PendingReview` back\n  to `Draft`.\n* Require two calls to `approve` before the state can be changed to `Published`.\n* Allow users to add text content only when a post is in the `Draft` state.\n  Hint: have the state object responsible for what might change about the\n  content but not responsible for modifying the `Post`.\n\nOne downside of the state pattern is that, because the states implement the\ntransitions between states, some of the states are coupled to each other. If we\nadd another state between `PendingReview` and `Published`, such as `Scheduled`,\nwe would have to change the code in `PendingReview` to transition to\n`Scheduled` instead. It would be less work if `PendingReview` didn\u2019t need to\nchange with the addition of a new state, but that would mean switching to\nanother design pattern.\n\nAnother downside is that we\u2019ve duplicated some logic. To eliminate some of the\nduplication, we might try to make default implementations for the\n`request_review` and `approve` methods on the `State` trait that return `self`;\nhowever, this would violate object safety, because the trait doesn\u2019t know what\nthe concrete `self` will be exactly. We want to be able to use `State` as a\ntrait object, so we need its methods to be object safe.\n\nOther duplication includes the similar implementations of the `request_review`\nand `approve` methods on `Post`. Both methods delegate to the implementation of\nthe same method on the value in the `state` field of `Option` and set the new\nvalue of the `state` field to the result. If we had a lot of methods on `Post`\nthat followed this pattern, we might consider defining a macro to eliminate the\nrepetition (see the [\u201cMacros\u201d][macros]<!-- ignore --> section in Chapter 19).\n\nBy implementing the state pattern exactly as it\u2019s defined for object-oriented\nlanguages, we\u2019re not taking as full advantage of Rust\u2019s strengths as we could.\nLet\u2019s look at some changes we can make to the `blog` crate that can make\ninvalid states and transitions into compile time errors.\n\n#### Encoding States and Behavior as Types\n\nWe\u2019ll show you how to rethink the state pattern to get a different set of\ntrade-offs. Rather than encapsulating the states and transitions completely so\noutside code has no knowledge of them, we\u2019ll encode the states into different\ntypes. Consequently, Rust\u2019s type checking system will prevent attempts to use\ndraft posts where only published posts are allowed by issuing a compiler error.\n\nLet\u2019s consider the first part of `main` in Listing 17-11:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-11/src/main.rs:here}}\n```\n\nWe still enable the creation of new posts in the draft state using `Post::new`\nand the ability to add text to the post\u2019s content. But instead of having a\n`content` method on a draft post that returns an empty string, we\u2019ll make it so\ndraft posts don\u2019t have the `content` method at all. That way, if we try to get\na draft post\u2019s content, we\u2019ll get a compiler error telling us the method\ndoesn\u2019t exist. As a result, it will be impossible for us to accidentally\ndisplay draft post content in production, because that code won\u2019t even compile.\nListing 17-19 shows the definition of a `Post` struct and a `DraftPost` struct,\nas well as methods on each:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-19/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-19: A `Post` with a `content` method and a\n`DraftPost` without a `content` method</span>\n\nBoth the `Post` and `DraftPost` structs have a private `content` field that\nstores the blog post text. The structs no longer have the `state` field because\nwe\u2019re moving the encoding of the state to the types of the structs. The `Post`\nstruct will represent a published post, and it has a `content` method that\nreturns the `content`.\n\nWe still have a `Post::new` function, but instead of returning an instance of\n`Post`, it returns an instance of `DraftPost`. Because `content` is private\nand there aren\u2019t any functions that return `Post`, it\u2019s not possible to create\nan instance of `Post` right now.\n\nThe `DraftPost` struct has an `add_text` method, so we can add text to\n`content` as before, but note that `DraftPost` does not have a `content` method\ndefined! So now the program ensures all posts start as draft posts, and draft\nposts don\u2019t have their content available for display. Any attempt to get around\nthese constraints will result in a compiler error.\n\n#### Implementing Transitions as Transformations into Different Types\n\nSo how do we get a published post? We want to enforce the rule that a draft\npost has to be reviewed and approved before it can be published. A post in the\npending review state should still not display any content. Let\u2019s implement\nthese constraints by adding another struct, `PendingReviewPost`, defining the\n`request_review` method on `DraftPost` to return a `PendingReviewPost`, and\ndefining an `approve` method on `PendingReviewPost` to return a `Post`, as\nshown in Listing 17-20:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-20/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-20: A `PendingReviewPost` that gets created by\ncalling `request_review` on `DraftPost` and an `approve` method that turns a\n`PendingReviewPost` into a published `Post`</span>\n\nThe `request_review` and `approve` methods take ownership of `self`, thus\nconsuming the `DraftPost` and `PendingReviewPost` instances and transforming\nthem into a `PendingReviewPost` and a published `Post`, respectively. This way,\nwe won\u2019t have any lingering `DraftPost` instances after we\u2019ve called\n`request_review` on them, and so forth. The `PendingReviewPost` struct doesn\u2019t\nhave a `content` method defined on it, so attempting to read its content\nresults in a compiler error, as with `DraftPost`. Because the only way to get a\npublished `Post` instance that does have a `content` method defined is to call\nthe `approve` method on a `PendingReviewPost`, and the only way to get a\n`PendingReviewPost` is to call the `request_review` method on a `DraftPost`,\nwe\u2019ve now encoded the blog post workflow into the type system.\n\nBut we also have to make some small changes to `main`. The `request_review` and\n`approve` methods return new instances rather than modifying the struct they\u2019re\ncalled on, so we need to add more `let post =` shadowing assignments to save\nthe returned instances. We also can\u2019t have the assertions about the draft and\npending review posts\u2019 contents be empty strings, nor do we need them: we can\u2019t\ncompile code that tries to use the content of posts in those states any longer.\nThe updated code in `main` is shown in Listing 17-21:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-21/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 17-21: Modifications to `main` to use the new\nimplementation of the blog post workflow</span>\n\nThe changes we needed to make to `main` to reassign `post` mean that this\nimplementation doesn\u2019t quite follow the object-oriented state pattern anymore:\nthe transformations between the states are no longer encapsulated entirely\nwithin the `Post` implementation. However, our gain is that invalid states are\nnow impossible because of the type system and the type checking that happens at\ncompile time! This ensures that certain bugs, such as display of the content of\nan unpublished post, will be discovered before they make it to production.\n\nTry the tasks suggested at the start of this section on the `blog` crate as it\nis after Listing 17-21 to see what you think about the design of this version\nof the code. Note that some of the tasks might be completed already in this\ndesign.\n\nWe\u2019ve seen that even though Rust is capable of implementing object-oriented\ndesign patterns, other patterns, such as encoding state into the type system,\nare also available in Rust. These patterns have different trade-offs. Although\nyou might be very familiar with object-oriented patterns, rethinking the\nproblem to take advantage of Rust\u2019s features can provide benefits, such as\npreventing some bugs at compile time. Object-oriented patterns won\u2019t always be\nthe best solution in Rust due to certain features, like ownership, that\nobject-oriented languages don\u2019t have.\n\n## Summary\n\nNo matter whether or not you think Rust is an object-oriented language after\nreading this chapter, you now know that you can use trait objects to get some\nobject-oriented features in Rust. Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance. You can use this\nflexibility to implement object-oriented patterns that can help your code\u2019s\nmaintainability. Rust also has other features, like ownership, that\nobject-oriented languages don\u2019t have. An object-oriented pattern won\u2019t always\nbe the best way to take advantage of Rust\u2019s strengths, but is an available\noption.\n\nNext, we\u2019ll look at patterns, which are another of Rust\u2019s features that enable\nlots of flexibility. We\u2019ve looked at them briefly throughout the book but\nhaven\u2019t seen their full capability yet. Let\u2019s go!\n\n[more-info-than-rustc]: ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler\n[macros]: ch19-06-macros.html#macros\n",
          "qas": [
            {
              "question": "What gives the programmer dynamic dispatch?",
              "id": 27,
              "answers": [
                {
                  "text": "Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance.",
                  "answer_start": 25623
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the advantage of using the state pattern?",
              "id": 25,
              "answers": [
                {
                  "text": "The advantage of using the state pattern is that, when the business\nrequirements of the program change, we won\u2019t need to change the code of the\nvalue holding the state or the code that uses the value. We\u2019ll only need to\nupdate the code inside one of the state objects to change its rules or perhaps\nadd more state objects.",
                  "answer_start": 848
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is state pattern?",
              "id": 24,
              "answers": [
                {
                  "text": "The *state pattern* is an object-oriented design pattern. The crux of the\npattern is that we define a set of states a value can have internally. The\nstates are represented by a set of *state objects*, and the value\u2019s behavior\nchanges based on its state.",
                  "answer_start": 51
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the downside of the state pattern?",
              "id": 26,
              "answers": [
                {
                  "text": "the states implement the\ntransitions between states, some of the states are coupled to each other.",
                  "answer_start": 17385
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Hello, Cargo!\n\nCargo is Rust\u2019s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n*dependencies*.)\n\nThe simplest Rust programs, like the one we\u2019ve written so far, don\u2019t have any\ndependencies. If we had built the \u201cHello, world!\u201d project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you\u2019ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do.\n\nBecause the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you\u2019re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n[\u201cInstallation\u201d][installation]<!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:\n\n```console\n$ cargo --version\n```\n\nIf you see a version number, you have it! If you see an error, such as `command\nnot found`, look at the documentation for your method of installation to\ndetermine how to install Cargo separately.\n\n### Creating a Project with Cargo\n\nLet\u2019s create a new project using Cargo and look at how it differs from our\noriginal \u201cHello, world!\u201d project. Navigate back to your *projects* directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:\n\n```console\n$ cargo new hello_cargo\n$ cd hello_cargo\n```\n\nThe first command creates a new directory and project called *hello_cargo*.\nWe\u2019ve named our project *hello_cargo*, and Cargo creates its files in a\ndirectory of the same name.\n\nGo into the *hello_cargo* directory and list the files. You\u2019ll see that Cargo\nhas generated two files and one directory for us: a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside.\n\nIt has also initialized a new Git repository along with a *.gitignore* file.\nGit files won\u2019t be generated if you run `cargo new` within an existing Git\nrepository; you can override this behavior by using `cargo new --vcs=git`.\n\n> Note: Git is a common version control system. You can change `cargo new` to\n> use a different version control system or no version control system by using\n> the `--vcs` flag. Run `cargo new --help` to see the available options.\n\nOpen *Cargo.toml* in your text editor of choice. It should look similar to the\ncode in Listing 1-2.\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\n<span class=\"caption\">Listing 1-2: Contents of *Cargo.toml* generated by `cargo\nnew`</span>\n\nThis file is in the [*TOML*][toml]<!-- ignore --> (*Tom\u2019s Obvious, Minimal\nLanguage*) format, which is Cargo\u2019s configuration format.\n\nThe first line, `[package]`, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we\u2019ll add other sections.\n\nThe next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We\u2019ll talk\nabout the `edition` key in [Appendix E][appendix-e]<!-- ignore -->.\n\nThe last line, `[dependencies]`, is the start of a section for you to list any\nof your project\u2019s dependencies. In Rust, packages of code are referred to as\n*crates*. We won\u2019t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we\u2019ll use this dependencies section then.\n\nNow open *src/main.rs* and take a look:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo has generated a \u201cHello, world!\u201d program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the *src* directory\nand we have a *Cargo.toml* configuration file in the top directory.\n\nCargo expects your source files to live inside the *src* directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There\u2019s a place for everything, and\neverything is in its place.\n\nIf you started a project that doesn\u2019t use Cargo, as we did with the \u201cHello,\nworld!\u201d project, you can convert it to a project that does use Cargo. Move the\nproject code into the *src* directory and create an appropriate *Cargo.toml*\nfile.\n\n### Building and Running a Cargo Project\n\nNow let\u2019s look at what\u2019s different when we build and run the \u201cHello, world!\u201d\nprogram with Cargo! From your *hello_cargo* directory, build your project by\nentering the following command:\n\n```console\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n```\n\nThis command creates an executable file in *target/debug/hello_cargo* (or\n*target\\debug\\hello_cargo.exe* on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named *debug*. You can run the executable with this command:\n\n```console\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n```\n\nIf all goes well, `Hello, world!` should print to the terminal. Running `cargo\nbuild` for the first time also causes Cargo to create a new file at the top\nlevel: *Cargo.lock*. This file keeps track of the exact versions of\ndependencies in your project. This project doesn\u2019t have dependencies, so the\nfile is a bit sparse. You won\u2019t ever need to change this file manually; Cargo\nmanages its contents for you.\n\nWe just built a project with `cargo build` and ran it with\n`./target/debug/hello_cargo`, but we can also use `cargo run` to compile the\ncode and then run the resultant executable all in one command:\n\n```console\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nUsing `cargo run` is more convenient than having to remember to run `cargo\nbuild` and then use the whole path to the binary, so most developers use `cargo\nrun`.\n\nNotice that this time we didn\u2019t see output indicating that Cargo was compiling\n`hello_cargo`. Cargo figured out that the files hadn\u2019t changed, so it didn\u2019t\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:\n\n```console\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n```\n\nCargo also provides a command called `cargo check`. This command quickly checks\nyour code to make sure it compiles but doesn\u2019t produce an executable:\n\n```console\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n```\n\nWhy would you not want an executable? Often, `cargo check` is much faster than\n`cargo build` because it skips the step of producing an executable. If you\u2019re\ncontinually checking your work while writing the code, using `cargo check` will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run `cargo check` periodically as they write their\nprogram to make sure it compiles. Then they run `cargo build` when they\u2019re\nready to use the executable.\n\nLet\u2019s recap what we\u2019ve learned so far about Cargo:\n\n* We can create a project using `cargo new`.\n* We can build a project using `cargo build`.\n* We can build and run a project in one step using `cargo run`.\n* We can build a project without producing a binary to check for errors using\n  `cargo check`.\n* Instead of saving the result of the build in the same directory as our code,\n  Cargo stores it in the *target/debug* directory.\n\nAn additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you\u2019re working on. So, at this point, we\u2019ll no\nlonger provide specific instructions for Linux and macOS versus Windows.\n\n### Building for Release\n\nWhen your project is finally ready for release, you can use `cargo build\n--release` to compile it with optimizations. This command will create an\nexecutable in *target/release* instead of *target/debug*. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you\u2019ll give to a user that won\u2019t be rebuilt\nrepeatedly and that will run as fast as possible. If you\u2019re benchmarking your\ncode\u2019s running time, be sure to run `cargo build --release` and benchmark with\nthe executable in *target/release*.\n\n### Cargo as Convention\n\nWith simple projects, Cargo doesn\u2019t provide a lot of value over just using\n`rustc`, but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it\u2019s much easier to\nlet Cargo coordinate the build.\n\nEven though the `hello_cargo` project is simple, it now uses much of the real\ntooling you\u2019ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project\u2019s directory, and build:\n\n```console\n$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n```\n\nFor more information about Cargo, check out [its documentation][cargo].\n\n## Summary\n\nYou\u2019re already off to a great start on your Rust journey! In this chapter,\nyou\u2019ve learned how to:\n\n* Install the latest stable version of Rust using `rustup`\n* Update to a newer Rust version\n* Open locally installed documentation\n* Write and run a \u201cHello, world!\u201d program using `rustc` directly\n* Create and run a new project using the conventions of Cargo\n\nThis is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we\u2019ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2.\n\n[installation]: ch01-01-installation.html#installation\n[toml]: https://toml.io\n[appendix-e]: appendix-05-editions.html\n[cargo]: https://doc.rust-lang.org/cargo/\n",
          "qas": [
            {
              "question": "With what command can I compile my code with optimizations?",
              "id": 275,
              "answers": [
                {
                  "text": "cargo build\n--release",
                  "answer_start": 8604
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is cargo creating by default?",
              "id": 258,
              "answers": [
                {
                  "text": "a *Cargo.toml* file and a\n*src* directory with a *main.rs* file inside",
                  "answer_start": 1969
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is cargo coming with Rust by default?",
              "id": 255,
              "answers": [
                {
                  "text": "Cargo comes installed with Rust if you\nused the official installers",
                  "answer_start": 826
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of the Cargo.lock file?",
              "id": 270,
              "answers": [
                {
                  "text": "This file keeps track of the exact versions of\ndependencies in your project",
                  "answer_start": 5779
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is cargo check faster than cargo build?",
              "id": 274,
              "answers": [
                {
                  "text": "because it skips the step of producing an executable",
                  "answer_start": 7455
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is Cargo used?",
              "id": 253,
              "answers": [
                {
                  "text": "to manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries",
                  "answer_start": 98
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I build project with cargo?",
              "id": 267,
              "answers": [
                {
                  "text": "cargo build",
                  "answer_start": 5052
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create new project with cargo?",
              "id": 257,
              "answers": [
                {
                  "text": "cargo new hello_cargo",
                  "answer_start": 1620
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call packages of code?",
              "id": 264,
              "answers": [
                {
                  "text": "crates",
                  "answer_start": 3648
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I have in top-level project directory?",
              "id": 266,
              "answers": [
                {
                  "text": "README files, license information,\nconfiguration files, and anything else not related to your code",
                  "answer_start": 4360
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is git?",
              "id": 259,
              "answers": [
                {
                  "text": "ommon version control system",
                  "answer_start": 2288
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When cargo won't create new git repository?",
              "id": 261,
              "answers": [
                {
                  "text": "if you run `cargo new` within an existing Git\nrepository",
                  "answer_start": 2148
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what should I start .toml file?",
              "id": 263,
              "answers": [
                {
                  "text": "[package]",
                  "answer_start": 3091
                }
              ],
              "is_impossible": false
            },
            {
              "question": "where can I see an example of .toml file?",
              "id": 262,
              "answers": [
                {
                  "text": "https://doc.rust-lang.org/cargo/reference/manifest.html",
                  "answer_start": 2770
                }
              ],
              "is_impossible": false
            },
            {
              "question": "In what directory should I put source files?",
              "id": 265,
              "answers": [
                {
                  "text": "src",
                  "answer_start": 4300
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Cargo?",
              "id": 252,
              "answers": [
                {
                  "text": "Rust\u2019s build system and package manager.",
                  "answer_start": 27
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'cargo check' doing?",
              "id": 272,
              "answers": [
                {
                  "text": "This command quickly checks\nyour code to make sure it compiles but doesn\u2019t produce an executable",
                  "answer_start": 7105
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I run executable file crated with cargo build?",
              "id": 269,
              "answers": [
                {
                  "text": "./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows",
                  "answer_start": 5510
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what cargo command can I compile and run my program?",
              "id": 271,
              "answers": [
                {
                  "text": "cargo run",
                  "answer_start": 6225
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Controlling How Tests Are Run\n\nJust as `cargo run` compiles your code and then runs the resulting binary,\n`cargo test` compiles your code in test mode and runs the resulting test\nbinary. The default behavior of the binary produced by `cargo test` is to run\nall the tests in parallel and capture output generated during test runs,\npreventing the output from being displayed and making it easier to read the\noutput related to the test results. You can, however, specify command line\noptions to change this default behavior.\n\nSome command line options go to `cargo test`, and some go to the resulting test\nbinary. To separate these two types of arguments, you list the arguments that\ngo to `cargo test` followed by the separator `--` and then the ones that go to\nthe test binary. Running `cargo test --help` displays the options you can use\nwith `cargo test`, and running `cargo test -- --help` displays the options you\ncan use after the separator.\n\n### Running Tests in Parallel or Consecutively\n\nWhen you run multiple tests, by default they run in parallel using threads,\nmeaning they finish running faster and you get feedback quicker. Because the\ntests are running at the same time, you must make sure your tests don\u2019t depend\non each other or on any shared state, including a shared environment, such as\nthe current working directory or environment variables.\n\nFor example, say each of your tests runs some code that creates a file on disk\nnamed *test-output.txt* and writes some data to that file. Then each test reads\nthe data in that file and asserts that the file contains a particular value,\nwhich is different in each test. Because the tests run at the same time, one\ntest might overwrite the file in the time between another test writing and\nreading the file. The second test will then fail, not because the code is\nincorrect but because the tests have interfered with each other while running\nin parallel. One solution is to make sure each test writes to a different file;\nanother solution is to run the tests one at a time.\n\nIf you don\u2019t want to run the tests in parallel or if you want more fine-grained\ncontrol over the number of threads used, you can send the `--test-threads` flag\nand the number of threads you want to use to the test binary. Take a look at\nthe following example:\n\n```console\n$ cargo test -- --test-threads=1\n```\n\nWe set the number of test threads to `1`, telling the program not to use any\nparallelism. Running the tests using one thread will take longer than running\nthem in parallel, but the tests won\u2019t interfere with each other if they share\nstate.\n\n### Showing Function Output\n\nBy default, if a test passes, Rust\u2019s test library captures anything printed to\nstandard output. For example, if we call `println!` in a test and the test\npasses, we won\u2019t see the `println!` output in the terminal; we\u2019ll see only the\nline that indicates the test passed. If a test fails, we\u2019ll see whatever was\nprinted to standard output with the rest of the failure message.\n\nAs an example, Listing 11-10 has a silly function that prints the value of its\nparameter and returns 10, as well as a test that passes and a test that fails.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-10/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-10: Tests for a function that calls\n`println!`</span>\n\nWhen we run these tests with `cargo test`, we\u2019ll see the following output:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-10/output.txt}}\n```\n\nNote that nowhere in this output do we see `I got the value 4`, which is what\nis printed when the test that passes runs. That output has been captured. The\noutput from the test that failed, `I got the value 8`, appears in the section\nof the test summary output, which also shows the cause of the test failure.\n\nIf we want to see printed values for passing tests as well, we can tell Rust\nto also show the output of successful tests with `--show-output`.\n\n```console\n$ cargo test -- --show-output\n```\n\nWhen we run the tests in Listing 11-10 again with the `--show-output` flag, we\nsee the following output:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-01-show-output/output.txt}}\n```\n\n### Running a Subset of Tests by Name\n\nSometimes, running a full test suite can take a long time. If you\u2019re working on\ncode in a particular area, you might want to run only the tests pertaining to\nthat code. You can choose which tests to run by passing `cargo test` the name\nor names of the test(s) you want to run as an argument.\n\nTo demonstrate how to run a subset of tests, we\u2019ll first create three tests for\nour `add_two` function, as shown in Listing 11-11, and choose which ones to run.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-11/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-11: Three tests with three different\nnames</span>\n\nIf we run the tests without passing any arguments, as we saw earlier, all the\ntests will run in parallel:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-11/output.txt}}\n```\n\n#### Running Single Tests\n\nWe can pass the name of any test function to `cargo test` to run only that test:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-02-single-test/output.txt}}\n```\n\nOnly the test with the name `one_hundred` ran; the other two tests didn\u2019t match\nthat name. The test output lets us know we had more tests that didn\u2019t run by\ndisplaying `2 filtered out` at the end.\n\nWe can\u2019t specify the names of multiple tests in this way; only the first value\ngiven to `cargo test` will be used. But there is a way to run multiple tests.\n\n#### Filtering to Run Multiple Tests\n\nWe can specify part of a test name, and any test whose name matches that value\nwill be run. For example, because two of our tests\u2019 names contain `add`, we can\nrun those two by running `cargo test add`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-03-multiple-tests/output.txt}}\n```\n\nThis command ran all tests with `add` in the name and filtered out the test\nnamed `one_hundred`. Also note that the module in which a test appears becomes\npart of the test\u2019s name, so we can run all the tests in a module by filtering\non the module\u2019s name.\n\n### Ignoring Some Tests Unless Specifically Requested\n\nSometimes a few specific tests can be very time-consuming to execute, so you\nmight want to exclude them during most runs of `cargo test`. Rather than\nlisting as arguments all tests you do want to run, you can instead annotate the\ntime-consuming tests using the `ignore` attribute to exclude them, as shown\nhere:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/src/lib.rs}}\n```\n\nAfter `#[test]` we add the `#[ignore]` line to the test we want to exclude. Now\nwhen we run our tests, `it_works` runs, but `expensive_test` doesn\u2019t:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/output.txt}}\n```\n\nThe `expensive_test` function is listed as `ignored`. If we want to run only\nthe ignored tests, we can use `cargo test -- --ignored`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-04-running-ignored/output.txt}}\n```\n\nBy controlling which tests run, you can make sure your `cargo test` results\nwill be fast. When you\u2019re at a point where it makes sense to check the results\nof the `ignored` tests and you have time to wait for the results, you can run\n`cargo test -- --ignored` instead. If you want to run all tests whether they\u2019re\nignored or not, you can run `cargo test -- --include-ignored`.\n",
          "qas": [
            {
              "question": "What will happen when no parameters are passed when running tests?",
              "id": 2106,
              "answers": [
                {
                  "text": "all the\ntests will run in parallel",
                  "answer_start": 5112
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check options of 'cargo test'?",
              "id": 2096,
              "answers": [
                {
                  "text": " `cargo test --help`",
                  "answer_start": 787
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I add arguments to 'cargo test'?",
              "id": 2097,
              "answers": [
                {
                  "text": "`cargo test` followed by the separator `--`",
                  "answer_start": 690
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is showed by default when test fails?",
              "id": 2103,
              "answers": [
                {
                  "text": "we\u2019ll see whatever was\nprinted to standard output with the rest of the failure message",
                  "answer_start": 2905
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can tests depend on each other?",
              "id": 2100,
              "answers": [
                {
                  "text": "you must make sure your tests don\u2019t depend\non each other or on any shared state, including a shared environment, such as\nthe current working directory or environment variables.",
                  "answer_start": 1187
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to enable printing output of passed tests?",
              "id": 2104,
              "answers": [
                {
                  "text": "cargo test -- --show-output",
                  "answer_start": 4052
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens by default when test passes?",
              "id": 2102,
              "answers": [
                {
                  "text": "test library captures anything printed to\nstandard output",
                  "answer_start": 2655
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to make sure that tests don't interfere each other?",
              "id": 2101,
              "answers": [
                {
                  "text": "set the number of test threads to `1`",
                  "answer_start": 2351
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the default behavior of 'cargo test'?",
              "id": 2095,
              "answers": [
                {
                  "text": "run\nall the tests in parallel and capture output generated during test runs",
                  "answer_start": 256
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to run only selected set of tests?",
              "id": 2105,
              "answers": [
                {
                  "text": "`cargo test` the name\nor names of the test(s) you want to run as an argument",
                  "answer_start": 4552
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to change number of threads used to perform tests?",
              "id": 2099,
              "answers": [
                {
                  "text": "`--test-threads` flag\nand the number of threads you want to use",
                  "answer_start": 2176
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do parallel tests run by default?",
              "id": 2098,
              "answers": [
                {
                  "text": "they run in parallel using threads",
                  "answer_start": 1038
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to run ignored tests only?",
              "id": 2110,
              "answers": [
                {
                  "text": "cargo test -- --ignored",
                  "answer_start": 7713
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I run all tests only with few of them excluded?",
              "id": 2109,
              "answers": [
                {
                  "text": "annotate the\ntime-consuming tests using the `ignore` attribute to exclude them",
                  "answer_start": 6697
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Using Threads to Run Code Simultaneously\n\nIn most current operating systems, an executed program\u2019s code is run in a\n*process*, and the operating system will manage multiple processes at once.\nWithin a program, you can also have independent parts that run simultaneously.\nThe features that run these independent parts are called *threads*. For\nexample, a web server could have multiple threads so that it could respond to\nmore than one request at the same time.\n\nSplitting the computation in your program into multiple threads to run multiple\ntasks at the same time can improve performance, but it also adds complexity.\nBecause threads can run simultaneously, there\u2019s no inherent guarantee about the\norder in which parts of your code on different threads will run. This can lead\nto problems, such as:\n\n* Race conditions, where threads are accessing data or resources in an\n  inconsistent order\n* Deadlocks, where two threads are waiting for each other, preventing both\n  threads from continuing\n* Bugs that happen only in certain situations and are hard to reproduce and fix\n  reliably\n\nRust attempts to mitigate the negative effects of using threads, but\nprogramming in a multithreaded context still takes careful thought and requires\na code structure that is different from that in programs running in a single\nthread.\n\nProgramming languages implement threads in a few different ways, and many\noperating systems provide an API the language can call for creating new\nthreads. The Rust standard library uses a *1:1* model of thread implementation,\nwhereby a program uses one operating system thread per one language thread.\nThere are crates that implement other models of threading that make different\ntradeoffs to the 1:1 model.\n\n### Creating a New Thread with `spawn`\n\nTo create a new thread, we call the `thread::spawn` function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread. The example in Listing 16-1 prints some text from a main\nthread and other text from a new thread:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-1: Creating a new thread to print one thing\nwhile the main thread prints something else</span>\n\nNote that when the main thread of a Rust program completes, all spawned threads\nare shut down, whether or not they have finished running. The output from this\nprogram might be a little different every time, but it will look similar to the\nfollowing:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\n```\n\nThe calls to `thread::sleep` force a thread to stop its execution for a short\nduration, allowing a different thread to run. The threads will probably take\nturns, but that isn\u2019t guaranteed: it depends on how your operating system\nschedules the threads. In this run, the main thread printed first, even though\nthe print statement from the spawned thread appears first in the code. And even\nthough we told the spawned thread to print until `i` is 9, it only got to 5\nbefore the main thread shut down.\n\nIf you run this code and only see output from the main thread, or don\u2019t see any\noverlap, try increasing the numbers in the ranges to create more opportunities\nfor the operating system to switch between the threads.\n\n### Waiting for All Threads to Finish Using `join` Handles\n\nThe code in Listing 16-1 not only stops the spawned thread prematurely most of\nthe time due to the main thread ending, but because there is no guarantee on\nthe order in which threads run, we also can\u2019t guarantee that the spawned thread\nwill get to run at all!\n\nWe can fix the problem of the spawned thread not running or ending prematurely\nby saving the return value of `thread::spawn` in a variable. The return type of\n`thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we\ncall the `join` method on it, will wait for its thread to finish. Listing 16-2\nshows how to use the `JoinHandle` of the thread we created in Listing 16-1 and\ncall `join` to make sure the spawned thread finishes before `main` exits:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-2: Saving a `JoinHandle` from `thread::spawn`\nto guarantee the thread is run to completion</span>\n\nCalling `join` on the handle blocks the thread currently running until the\nthread represented by the handle terminates. *Blocking* a thread means that\nthread is prevented from performing work or exiting. Because we\u2019ve put the call\nto `join` after the main thread\u2019s `for` loop, running Listing 16-2 should\nproduce output similar to this:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\n```\n\nThe two threads continue alternating, but the main thread waits because of the\ncall to `handle.join()` and does not end until the spawned thread is finished.\n\nBut let\u2019s see what happens when we instead move `handle.join()` before the\n`for` loop in `main`, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/no-listing-01-join-too-early/src/main.rs}}\n```\n\nThe main thread will wait for the spawned thread to finish and then run its\n`for` loop, so the output won\u2019t be interleaved anymore, as shown here:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nhi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!\n```\n\nSmall details, such as where `join` is called, can affect whether or not your\nthreads run at the same time.\n\n### Using `move` Closures with Threads\n\nWe'll often use the `move` keyword with closures passed to `thread::spawn`\nbecause the closure will then take ownership of the values it uses from the\nenvironment, thus transferring ownership of those values from one thread to\nanother. In the [\u201cCapturing References or Moving Ownership\u201d][capture]<!-- ignore\n--> section of Chapter 13, we discussed `move` in the context of closures. Now,\nwe\u2019ll concentrate more on the interaction between `move` and `thread::spawn`.\n\nNotice in Listing 16-1 that the closure we pass to `thread::spawn` takes no\narguments: we\u2019re not using any data from the main thread in the spawned\nthread\u2019s code. To use data from the main thread in the spawned thread, the\nspawned thread\u2019s closure must capture the values it needs. Listing 16-3 shows\nan attempt to create a vector in the main thread and use it in the spawned\nthread. However, this won\u2019t yet work, as you\u2019ll see in a moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-3: Attempting to use a vector created by the\nmain thread in another thread</span>\n\nThe closure uses `v`, so it will capture `v` and make it part of the closure\u2019s\nenvironment. Because `thread::spawn` runs this closure in a new thread, we\nshould be able to access `v` inside that new thread. But when we compile this\nexample, we get the following error:\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-03/output.txt}}\n```\n\nRust *infers* how to capture `v`, and because `println!` only needs a reference\nto `v`, the closure tries to borrow `v`. However, there\u2019s a problem: Rust can\u2019t\ntell how long the spawned thread will run, so it doesn\u2019t know if the reference\nto `v` will always be valid.\n\nListing 16-4 provides a scenario that\u2019s more likely to have a reference to `v`\nthat won\u2019t be valid:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-4: A thread with a closure that attempts to\ncapture a reference to `v` from a main thread that drops `v`</span>\n\nIf Rust allowed us to run this code, there\u2019s a possibility the spawned thread\nwould be immediately put in the background without running at all. The spawned\nthread has a reference to `v` inside, but the main thread immediately drops\n`v`, using the `drop` function we discussed in Chapter 15. Then, when the\nspawned thread starts to execute, `v` is no longer valid, so a reference to it\nis also invalid. Oh no!\n\nTo fix the compiler error in Listing 16-3, we can use the error message\u2019s\nadvice:\n\n<!-- manual-regeneration\nafter automatic regeneration, look at listings/ch16-fearless-concurrency/listing-16-03/output.txt and copy the relevant part\n-->\n\n```text\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n```\n\nBy adding the `move` keyword before the closure, we force the closure to take\nownership of the values it\u2019s using rather than allowing Rust to infer that it\nshould borrow the values. The modification to Listing 16-3 shown in Listing\n16-5 will compile and run as we intend:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-5: Using the `move` keyword to force a closure\nto take ownership of the values it uses</span>\n\nWe might be tempted to try the same thing to fix the code in Listing 16-4 where\nthe main thread called `drop` by using a `move` closure. However, this fix will\nnot work because what Listing 16-4 is trying to do is disallowed for a\ndifferent reason. If we added `move` to the closure, we would move `v` into the\nclosure\u2019s environment, and we could no longer call `drop` on it in the main\nthread. We would get this compiler error instead:\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/output-only-01-move-drop/output.txt}}\n```\n\nRust\u2019s ownership rules have saved us again! We got an error from the code in\nListing 16-3 because Rust was being conservative and only borrowing `v` for the\nthread, which meant the main thread could theoretically invalidate the spawned\nthread\u2019s reference. By telling Rust to move ownership of `v` to the spawned\nthread, we\u2019re guaranteeing Rust that the main thread won\u2019t use `v` anymore. If\nwe change Listing 16-4 in the same way, we\u2019re then violating the ownership\nrules when we try to use `v` in the main thread. The `move` keyword overrides\nRust\u2019s conservative default of borrowing; it doesn\u2019t let us violate the\nownership rules.\n\nWith a basic understanding of threads and the thread API, let\u2019s look at what we\ncan *do* with threads.\n\n[capture]: ch13-01-closures.html#capturing-references-or-moving-ownership\n",
          "qas": [
            {
              "question": "How to transfer values from one thread to another?",
              "id": 90,
              "answers": [
                {
                  "text": "To use data from the main thread in the spawned thread, the\nspawned thread\u2019s closure must capture the values it needs.",
                  "answer_start": 7930
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the Rust's standard threading model?",
              "id": 83,
              "answers": [
                {
                  "text": "The Rust standard library uses a *1:1* model of thread implementation,\nwhereby a program uses one operating system thread per one language thread.",
                  "answer_start": 1479
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why move is used with thread closures?",
              "id": 89,
              "answers": [
                {
                  "text": "We'll often use the `move` keyword with closures passed to `thread::spawn`\nbecause the closure will then take ownership of the values it uses from the\nenvironment, thus transferring ownership of those values from one thread to\nanother.",
                  "answer_start": 7300
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens when thread is blocked?",
              "id": 88,
              "answers": [
                {
                  "text": "*Blocking* a thread means that\nthread is prevented from performing work or exiting.",
                  "answer_start": 5013
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a thread?",
              "id": 84,
              "answers": [
                {
                  "text": "To create a new thread, we call the `thread::spawn` function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread.",
                  "answer_start": 1773
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens to other threads when main thread completes?",
              "id": 85,
              "answers": [
                {
                  "text": "Note that when the main thread of a Rust program completes, all spawned threads\nare shut down, whether or not they have finished running.",
                  "answer_start": 2330
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does thread::spawn return?",
              "id": 86,
              "answers": [
                {
                  "text": "The return type of\n`thread::spawn` is `JoinHandle`.",
                  "answer_start": 4278
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are typical problems with multithreading?",
              "id": 82,
              "answers": [
                {
                  "text": "* Race conditions, where threads are accessing data or resources in an\n  inconsistent order\n* Deadlocks, where two threads are waiting for each other, preventing both\n  threads from continuing\n* Bugs that happen only in certain situations and are hard to reproduce and fix\n  reliably",
                  "answer_start": 804
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why should ownership be moved between threads?",
              "id": 91,
              "answers": [
                {
                  "text": "By telling Rust to move ownership of `v` to the spawned\nthread, we\u2019re guaranteeing Rust that the main thread won\u2019t use `v` anymore.",
                  "answer_start": 11766
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Programming a Guessing Game\n\nLet\u2019s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You\u2019ll learn about `let`, `match`, methods, associated\nfunctions, external crates, and more! In the following chapters, we\u2019ll explore\nthese ideas in more detail. In this chapter, you\u2019ll just practice the\nfundamentals.\n\nWe\u2019ll implement a classic beginner programming problem: a guessing game. Here\u2019s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.\n\n## Setting Up a New Project\n\nTo set up a new project, go to the *projects* directory that you created in\nChapter 1 and make a new project using Cargo, like so:\n\n```console\n$ cargo new guessing_game\n$ cd guessing_game\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`)\nas the first argument. The second command changes to the new project\u2019s\ndirectory.\n\nLook at the generated *Cargo.toml* file:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}}\n```\n\nAs you saw in Chapter 1, `cargo new` generates a \u201cHello, world!\u201d program for\nyou. Check out the *src/main.rs* file:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}}\n```\n\nNow let\u2019s compile this \u201cHello, world!\u201d program and run it in the same step\nusing the `cargo run` command:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}}\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project,\nas we\u2019ll do in this game, quickly testing each iteration before moving on to\nthe next one.\n\nReopen the *src/main.rs* file. You\u2019ll be writing all the code in this file.\n\n## Processing a Guess\n\nThe first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we\u2019ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n*src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span>\n\nThis code contains a lot of information, so let\u2019s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n`io` input/output library into scope. The `io` library comes from the standard\nlibrary, known as `std`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}}\n```\n\nBy default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the *prelude*, and\nyou can see everything in it [in the standard library documentation][prelude].\n\nIf a type you want to use isn\u2019t in the prelude, you have to bring that type\ninto scope explicitly with a `use` statement. Using the `std::io` library\nprovides you with a number of useful features, including the ability to accept\nuser input.\n\nAs you saw in Chapter 1, the `main` function is the entry point into the\nprogram:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}}\n```\n\nThe `fn` syntax declares a new function; the parentheses, `()`, indicate there\nare no parameters; and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to\nthe screen:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}}\n```\n\nThis code is printing a prompt stating what the game is and requesting input\nfrom the user.\n\n### Storing Values with Variables\n\nNext, we\u2019ll create a *variable* to store the user input, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}}\n```\n\nNow the program is getting interesting! There\u2019s a lot going on in this little\nline. We use the `let` statement to create the variable. Here\u2019s another example:\n\n```rust,ignore\nlet apples = 5;\n```\n\nThis line creates a new variable named `apples` and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won\u2019t change. We\u2019ll be discussing this concept in detail in\nthe [\u201cVariables and Mutability\u201d][variables-and-mutability]<!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add `mut` before the\nvariable name:\n\n```rust,ignore\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n```\n\n> Note: The `//` syntax starts a comment that continues until the end of the\n> line. Rust ignores everything in comments. We\u2019ll discuss comments in more\n> detail in [Chapter 3][comments]<!-- ignore -->.\n\nReturning to the guessing game program, you now know that `let mut guess` will\nintroduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that `guess` is bound to, which is the result of calling\n`String::new`, a function that returns a new instance of a `String`.\n[`String`][string]<!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an associated\nfunction of the `String` type. An *associated function* is a function that\u2019s\nimplemented on a type, in this case `String`. This `new` function creates a\nnew, empty string. You\u2019ll find a `new` function on many types because it\u2019s a\ncommon name for a function that makes a new value of some kind.\n\nIn full, the `let mut guess = String::new();` line has created a mutable\nvariable that is currently bound to a new, empty instance of a `String`. Whew!\n\n### Receiving User Input\n\nRecall that we included the input/output functionality from the standard\nlibrary with `use std::io;` on the first line of the program. Now we\u2019ll call\nthe `stdin` function from the `io` module, which will allow us to handle user\ninput:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}}\n```\n\nIf we hadn\u2019t imported the `io` library with `use std::io;` at the beginning of\nthe program, we could still use the function by writing this function call as\n`std::io::stdin`. The `stdin` function returns an instance of\n[`std::io::Stdin`][iostdin]<!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal.\n\nNext, the line `.read_line(&mut guess)` calls the [`read_line`][read_line]<!--\nignore --> method on the standard input handle to get input from the user.\nWe\u2019re also passing `&mut guess` as the argument to `read_line` to tell it what\nstring to store the user input in. The full job of `read_line` is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring\u2019s content.\n\nThe `&` indicates that this argument is a *reference*, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust\u2019s major advantages is how safe and easy it is to use\nreferences. You don\u2019t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write `&mut guess` rather than\n`&guess` to make it mutable. (Chapter 4 will explain references more\nthoroughly.)\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"handling-potential-failure-with-the-result-type\"></a>\n\n### Handling Potential Failure with `Result`\n\nWe\u2019re still working on this line of code. We\u2019re now discussing a third line of\ntext, but note that it\u2019s still part of a single logical line of code. The next\npart is this method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}}\n```\n\nWe could have written this code as:\n\n```rust,ignore\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it\u2019s best to divide it. It\u2019s\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the `.method_name()` syntax. Now let\u2019s\ndiscuss what this line does.\n\nAs mentioned earlier, `read_line` puts whatever the user enters into the string\nwe pass to it, but it also returns a `Result` value. [`Result`][result]<!--\nignore --> is an [*enumeration*][enums]<!-- ignore -->, often called an *enum*,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a *variant*.\n\n[Chapter 6][enums]<!-- ignore --> will cover enums in more detail. The purpose\nof these `Result` types is to encode error-handling information.\n\n`Result`\u2019s variants are `Ok` and `Err`. The `Ok` variant indicates the\noperation was successful, and inside `Ok` is the successfully generated value.\nThe `Err` variant means the operation failed, and `Err` contains information\nabout how or why the operation failed.\n\nValues of the `Result` type, like values of any type, have methods defined on\nthem. An instance of `Result` has an [`expect` method][expect]<!-- ignore -->\nthat you can call. If this instance of `Result` is an `Err` value, `expect`\nwill cause the program to crash and display the message that you passed as an\nargument to `expect`. If the `read_line` method returns an `Err`, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of `Result` is an `Ok` value, `expect` will take the return\nvalue that `Ok` is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user\u2019s input.\n\nIf you don\u2019t call `expect`, the program will compile, but you\u2019ll get a warning:\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}}\n```\n\nRust warns that you haven\u2019t used the `Result` value returned from `read_line`,\nindicating that the program hasn\u2019t handled a possible error.\n\nThe right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use `expect`. You\u2019ll learn about recovering from errors in [Chapter\n9][recover]<!-- ignore -->.\n\n### Printing Values with `println!` Placeholders\n\nAside from the closing curly bracket, there\u2019s only one more line to discuss in\nthe code so far:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}}\n```\n\nThis line prints the string that now contains the user\u2019s input. The `{}` set of\ncurly brackets is a placeholder: think of `{}` as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to `println!` would look like this:\n\n```rust\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n```\n\nThis code would print `x = 5 and y + 2 = 12`.\n\n### Testing the First Part\n\nLet\u2019s test the first part of the guessing game. Run it using `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n```\n\nAt this point, the first part of the game is done: we\u2019re getting input from the\nkeyboard and then printing it.\n\n## Generating a Secret Number\n\nNext, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We\u2019ll use a random number between 1 and 100 so the game isn\u2019t too\ndifficult. Rust doesn\u2019t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a [`rand` crate][randcrate] with\nsaid functionality.\n\n### Using a Crate to Get More Functionality\n\nRemember that a crate is a collection of Rust source code files. The project\nwe\u2019ve been building is a *binary crate*, which is an executable. The `rand`\ncrate is a *library crate*, which contains code that is intended to be used in\nother programs and can\u2019t be executed on its own.\n\nCargo\u2019s coordination of external crates is where Cargo really shines. Before we\ncan write code that uses `rand`, we need to modify the *Cargo.toml* file to\ninclude the `rand` crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the `[dependencies]` section header that\nCargo created for you. Be sure to specify `rand` exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}}\n```\n\nIn the *Cargo.toml* file, everything that follows a header is part of that\nsection that continues until another section starts. In `[dependencies]` you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the `rand` crate with the\nsemantic version specifier `0.8.5`. Cargo understands [Semantic\nVersioning][semver]<!-- ignore --> (sometimes called *SemVer*), which is a\nstandard for writing version numbers. The specifier `0.8.5` is actually\nshorthand for `^0.8.5`, which means any version that is at least 0.8.5 but\nbelow 0.9.0.\n\nCargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you\u2019ll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use.\n\nNow, without changing any of the code, let\u2019s build the project, as shown in\nListing 2-2.\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n```\n\n<span class=\"caption\">Listing 2-2: The output from running `cargo build` after\nadding the rand crate as a dependency</span>\n\nYou may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order.\n\nWhen we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the *registry*, which is a copy of data\nfrom [Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and\ndownloads any crates listed that aren\u2019t already downloaded. In this case,\nalthough we only listed `rand` as a dependency, Cargo also grabbed other crates\nthat `rand` depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you\nwon\u2019t get any output aside from the `Finished` line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven\u2019t changed anything\nabout them in your *Cargo.toml* file. Cargo also knows that you haven\u2019t changed\nanything about your code, so it doesn\u2019t recompile that either. With nothing to\ndo, it simply exits.\n\nIf you open the *src/main.rs* file, make a trivial change, and then save it and\nbuild again, you\u2019ll only see two lines of output:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n```\n\nThese lines show that Cargo only updates the build with your tiny change to the\n*src/main.rs* file. Your dependencies haven\u2019t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those.\n\n#### Ensuring Reproducible Builds with the *Cargo.lock* File\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the `rand` crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the *Cargo.lock* file the first\ntime you run `cargo build`, so we now have this in the *guessing_game*\ndirectory.\n\nWhen you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n*Cargo.lock* file. When you build your project in the future, Cargo will see\nthat the *Cargo.lock* file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the *Cargo.lock* file.\nBecause the *Cargo.lock* file is important for reproducible builds, it\u2019s often\nchecked into source control with the rest of the code in your project.\n\n#### Updating a Crate to Get a New Version\n\nWhen you *do* want to update a crate, Cargo provides the command `update`,\nwhich will ignore the *Cargo.lock* file and figure out all the latest versions\nthat fit your specifications in *Cargo.toml*. Cargo will then write those\nversions to the *Cargo.lock* file. Otherwise, by default, Cargo will only look\nfor versions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran `cargo update`:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n\n```console\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n```\n\nCargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your *Cargo.lock* file noting that the version of the `rand` crate you are\nnow using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9.*x*\nseries, you\u2019d have to update the *Cargo.toml* file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.9.0\"\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates\navailable and reevaluate your `rand` requirements according to the new version\nyou have specified.\n\nThere\u2019s a lot more to say about [Cargo][doccargo]<!-- ignore --> and [its\necosystem][doccratesio]<!-- ignore -->, which we\u2019ll discuss in Chapter 14, but\nfor now, that\u2019s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.\n\n### Generating a Random Number\n\nLet\u2019s start using `rand` to generate a number to guess. The next step is to\nupdate *src/main.rs*, as shown in Listing 2-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span>\n\nFirst we add the line `use rand::Rng;`. The `Rng` trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail.\n\nNext, we\u2019re adding two lines in the middle. In the first line, we call the\n`rand::thread_rng` function that gives us the particular random number\ngenerator we\u2019re going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the `gen_range`\nmethod on the random number generator. This method is defined by the `Rng`\ntrait that we brought into scope with the `use rand::Rng;` statement. The\n`gen_range` method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we\u2019re using here takes\nthe form `start..=end` and is inclusive on the lower and upper bounds, so we\nneed to specify `1..=100` to request a number between 1 and 100.\n\n> Note: You won\u2019t just know which traits to use and which methods and functions\n> to call from a crate, so each crate has documentation with instructions for\n> using it. Another neat feature of Cargo is that running the `cargo doc\n> --open` command will build documentation provided by all your dependencies\n> locally and open it in your browser. If you\u2019re interested in other\n> functionality in the `rand` crate, for example, run `cargo doc --open` and\n> click `rand` in the sidebar on the left.\n\nThe second new line prints the secret number. This is useful while we\u2019re\ndeveloping the program to be able to test it, but we\u2019ll delete it from the\nfinal version. It\u2019s not much of a game if the program prints the answer as soon\nas it starts!\n\nTry running the program a few times:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n```\n\nYou should get different random numbers, and they should all be numbers between\n1 and 100. Great job!\n\n## Comparing the Guess to the Secret Number\n\nNow that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won\u2019t compile just yet, as we will\nexplain.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span>\n\nFirst we add another `use` statement, bringing a type called\n`std::cmp::Ordering` into scope from the standard library. The `Ordering` type\nis another enum and has the variants `Less`, `Greater`, and `Equal`. These are\nthe three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The\n`cmp` method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it\u2019s\ncomparing `guess` to `secret_number`. Then it returns a variant of the\n`Ordering` enum we brought into scope with the `use` statement. We use a\n[`match`][match]<!-- ignore --> expression to decide what to do next based on\nwhich variant of `Ordering` was returned from the call to `cmp` with the values\nin `guess` and `secret_number`.\n\nA `match` expression is made up of *arms*. An arm consists of a *pattern* to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm\u2019s pattern. Rust takes the value given to `match` and looks\nthrough each arm\u2019s pattern in turn. Patterns and the `match` construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet\u2019s walk through an example with the `match` expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38.\n\nWhen the code compares 50 to 38, the `cmp` method will return\n`Ordering::Greater` because 50 is greater than 38. The `match` expression gets\nthe `Ordering::Greater` value and starts checking each arm\u2019s pattern. It looks\nat the first arm\u2019s pattern, `Ordering::Less`, and sees that the value\n`Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in\nthat arm and moves to the next arm. The next arm\u2019s pattern is\n`Ordering::Greater`, which *does* match `Ordering::Greater`! The associated\ncode in that arm will execute and print `Too big!` to the screen. The `match`\nexpression ends after the first successful match, so it won\u2019t look at the last\narm in this scenario.\n\nHowever, the code in Listing 2-4 won\u2019t compile yet. Let\u2019s try it:\n\n<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->\n\n```console\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}}\n```\n\nThe core of the error states that there are *mismatched types*. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n`let mut guess = String::new()`, Rust was able to infer that `guess` should be\na `String` and didn\u2019t make us write the type. The `secret_number`, on the other\nhand, is a number type. A few of Rust\u2019s number types can have a value between 1\nand 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan `i32`, which is the type of `secret_number` unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a\nreal number type so we can compare it numerically to the secret number. We do\nso by adding this line to the `main` function body:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}}\n```\n\nThe line is:\n\n```rust,ignore\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn\u2019t the program already have\na variable named `guess`? It does, but helpfully Rust allows us to shadow the\nprevious value of `guess` with a new one. *Shadowing* lets us reuse the `guess`\nvariable name rather than forcing us to create two unique variables, such as\n`guess_str` and `guess`, for example. We\u2019ll cover this in more detail in\n[Chapter 3][shadowing]<!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type.\n\nWe bind this new variable to the expression `guess.trim().parse()`. The `guess`\nin the expression refers to the original `guess` variable that contained the\ninput as a string. The `trim` method on a `String` instance will eliminate any\nwhitespace at the beginning and end, which we must do to be able to compare the\nstring to the `u32`, which can only contain numerical data. The user must press\n<span class=\"keystroke\">enter</span> to satisfy `read_line` and input their\nguess, which adds a newline character to the string. For example, if the user\ntypes <span class=\"keystroke\">5</span> and presses <span\nclass=\"keystroke\">enter</span>, `guess` looks like this: `5\\n`. The `\\n`\nrepresents \u201cnewline.\u201d (On Windows, pressing <span\nclass=\"keystroke\">enter</span> results in a carriage return and a newline,\n`\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting in just `5`.\n\nThe [`parse` method on strings][parse]<!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using `let guess: u32`. The colon\n(`:`) after `guess` tells Rust we\u2019ll annotate the variable\u2019s type. Rust has a\nfew built-in number types; the `u32` seen here is an unsigned, 32-bit integer.\nIt\u2019s a good default choice for a small positive number. You\u2019ll learn about\nother number types in [Chapter 3][integers]<!-- ignore -->.\n\nAdditionally, the `u32` annotation in this example program and the comparison\nwith `secret_number` means Rust will infer that `secret_number` should be a\n`u32` as well. So now the comparison will be between two values of the same\ntype!\n\nThe `parse` method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained `A\ud83d\udc4d%`, there would be no way to convert that to a number. Because it\nmight fail, the `parse` method returns a `Result` type, much as the `read_line`\nmethod does (discussed earlier in [\u201cHandling Potential Failure with\n`Result`\u201d](#handling-potential-failure-with-result)<!-- ignore-->). We\u2019ll treat\nthis `Result` the same way by using the `expect` method again. If `parse`\nreturns an `Err` `Result` variant because it couldn\u2019t create a number from the\nstring, the `expect` call will crash the game and print the message we give it.\nIf `parse` can successfully convert the string to a number, it will return the\n`Ok` variant of `Result`, and `expect` will return the number that we want from\nthe `Ok` value.\n\nLet\u2019s run the program now:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n```\n\nNice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess.\nLet\u2019s change that by adding a loop!\n\n## Allowing Multiple Guesses with Looping\n\nThe `loop` keyword creates an infinite loop. We\u2019ll add a loop to give users\nmore chances at guessing the number:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}}\n```\n\nAs you can see, we\u2019ve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn\u2019t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut\n<span class=\"keystroke\">ctrl-c</span>. But there\u2019s another way to escape this\ninsatiable monster, as mentioned in the `parse` discussion in [\u201cComparing the\nGuess to the Secret Number\u201d](#comparing-the-guess-to-the-secret-number)<!--\nignore -->: if the user enters a non-number answer, the program will crash. We\ncan take advantage of that to allow the user to quit, as shown here:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nTyping `quit` will quit the game, but as you\u2019ll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed.\n\n### Quitting After a Correct Guess\n\nLet\u2019s program the game to quit when the user wins by adding a `break` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of `main`.\n\n### Handling Invalid Input\n\nTo further refine the game\u2019s behavior, rather than crashing the program when\nthe user inputs a non-number, let\u2019s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where `guess`\nis converted from a `String` to a `u32`, as shown in Listing 2-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span>\n\nWe switch from an `expect` call to a `match` expression to move from crashing\non an error to handling the error. Remember that `parse` returns a `Result`\ntype and `Result` is an enum that has the variants `Ok` and `Err`. We\u2019re using\na `match` expression here, as we did with the `Ordering` result of the `cmp`\nmethod.\n\nIf `parse` is able to successfully turn the string into a number, it will\nreturn an `Ok` value that contains the resultant number. That `Ok` value will\nmatch the first arm\u2019s pattern, and the `match` expression will just return the\n`num` value that `parse` produced and put inside the `Ok` value. That number\nwill end up right where we want it in the new `guess` variable we\u2019re creating.\n\nIf `parse` is *not* able to turn the string into a number, it will return an\n`Err` value that contains more information about the error. The `Err` value\ndoes not match the `Ok(num)` pattern in the first `match` arm, but it does\nmatch the `Err(_)` pattern in the second arm. The underscore, `_`, is a\ncatchall value; in this example, we\u2019re saying we want to match all `Err`\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm\u2019s code, `continue`, which tells the program to go to the\nnext iteration of the `loop` and ask for another guess. So, effectively, the\nprogram ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let\u2019s try it:\n\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let\u2019s delete the `println!` that outputs the\nsecret number. Listing 2-6 shows the final code.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 2-6: Complete guessing game code</span>\n\nAt this point, you\u2019ve successfully built the guessing game. Congratulations!\n\n## Summary\n\nThis project was a hands-on way to introduce you to many new Rust concepts:\n`let`, `match`, functions, the use of external crates, and more. In the next\nfew chapters, you\u2019ll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work.\n\n[prelude]: ../std/prelude/index.html\n[variables-and-mutability]: ch03-01-variables-and-mutability.html#variables-and-mutability\n[comments]: ch03-04-comments.html\n[string]: ../std/string/struct.String.html\n[iostdin]: ../std/io/struct.Stdin.html\n[read_line]: ../std/io/struct.Stdin.html#method.read_line\n[result]: ../std/result/enum.Result.html\n[enums]: ch06-00-enums.html\n[expect]: ../std/result/enum.Result.html#method.expect\n[recover]: ch09-02-recoverable-errors-with-result.html\n[randcrate]: https://crates.io/crates/rand\n[semver]: http://semver.org\n[cratesio]: https://crates.io/\n[doccargo]: http://doc.crates.io\n[doccratesio]: http://doc.crates.io/crates-io.html\n[match]: ch06-02-match.html\n[shadowing]: ch03-01-variables-and-mutability.html#shadowing\n[parse]: ../std/primitive.str.html#method.parse\n[integers]: ch03-02-data-types.html#integer-types\n",
          "qas": [
            {
              "question": "What feature allows us to reuse variable names with different types?",
              "id": 310,
              "answers": [
                {
                  "text": "Shadowing",
                  "answer_start": 28525
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What statement can I use to bring a library into the scope?",
              "id": 289,
              "answers": [
                {
                  "text": "use",
                  "answer_start": 3581
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I declare a new function?",
              "id": 290,
              "answers": [
                {
                  "text": "fn",
                  "answer_start": 3917
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I declare a variable?",
              "id": 291,
              "answers": [
                {
                  "text": "let apples = 5;",
                  "answer_start": 4764
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which method converts string to another type?",
              "id": 312,
              "answers": [
                {
                  "text": "`parse` method",
                  "answer_start": 29754
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call an expression made up of arms?",
              "id": 307,
              "answers": [
                {
                  "text": "match",
                  "answer_start": 25403
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a registry?",
              "id": 302,
              "answers": [
                {
                  "text": " copy of data\nfrom [Crates.io]",
                  "answer_start": 16635
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'Ordering' type?",
              "id": 306,
              "answers": [
                {
                  "text": "another enum and has the variants `Less`, `Greater`, and `Equal`",
                  "answer_start": 24693
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I somehow generate random numbers?",
              "id": 300,
              "answers": [
                {
                  "text": " the Rust team does provide a [`rand` crate]",
                  "answer_start": 13208
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of reference?",
              "id": 297,
              "answers": [
                {
                  "text": "gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times",
                  "answer_start": 7830
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rust's type policy?",
              "id": 309,
              "answers": [
                {
                  "text": "Rust has a\nstrong, static type system.",
                  "answer_start": 27107
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an associated function?",
              "id": 295,
              "answers": [
                {
                  "text": "is a function that\u2019s\nimplemented on a type, in this case `String`",
                  "answer_start": 6103
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what cargo command can I update libraries?",
              "id": 304,
              "answers": [
                {
                  "text": "Cargo provides the command `update`",
                  "answer_start": 19568
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What library do I need to use to work with input and output?",
              "id": 287,
              "answers": [
                {
                  "text": "`io` input/output library",
                  "answer_start": 3026
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create mutable variable?",
              "id": 293,
              "answers": [
                {
                  "text": "To make a variable mutable, we add `mut` before the\nvariable name",
                  "answer_start": 5116
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an arm made of?",
              "id": 308,
              "answers": [
                {
                  "text": "An arm consists of a *pattern* to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm\u2019s pattern",
                  "answer_start": 25443
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is cargo run useful?",
              "id": 286,
              "answers": [
                {
                  "text": " when you need to rapidly iterate on a project",
                  "answer_start": 2133
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are variables immutable by default?",
              "id": 292,
              "answers": [
                {
                  "text": "variables are immutable by default",
                  "answer_start": 4871
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a set that Rust brings into the scope of every program?",
              "id": 288,
              "answers": [
                {
                  "text": "prelude",
                  "answer_start": 3381
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Introduction\n\n> Note: This edition of the book is the same as [The Rust Programming\n> Language][nsprust] available in print and ebook format from [No Starch\n> Press][nsp].\n\n[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[nsp]: https://nostarch.com/\n\nWelcome to *The Rust Programming Language*, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control.\n\n## Who Rust Is For\n\nRust is ideal for many people for a variety of reasons. Let\u2019s look at a few of\nthe most important groups.\n\n### Teams of Developers\n\nRust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to various subtle bugs, which in most other languages can be caught\nonly through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program\u2019s\nlogic rather than chasing down bugs.\n\nRust also brings contemporary developer tools to the systems programming world:\n\n* Cargo, the included dependency manager and build tool, makes adding,\n  compiling, and managing dependencies painless and consistent across the Rust\n  ecosystem.\n* The Rustfmt formatting tool ensures a consistent coding style across\n  developers.\n* The Rust Language Server powers Integrated Development Environment (IDE)\n  integration for code completion and inline error messages.\n\nBy using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code.\n\n### Students\n\nRust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming.\n\n### Companies\n\nHundreds of companies, large and small, use Rust in production for a variety of\ntasks, including command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.\n\n### Open Source Developers\n\nRust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We\u2019d love to have you contribute to the Rust\nlanguage.\n\n### People Who Value Speed and Stability\n\nRust is for people who crave speed and stability in a language. By speed, we\nmean both how quickly Rust code can run and the speed at which Rust lets you\nwrite programs. The Rust compiler\u2019s checks ensure stability through feature\nadditions and refactoring. This is in contrast to the brittle legacy code in\nlanguages without these checks, which developers are often afraid to modify. By\nstriving for zero-cost abstractions, higher-level features that compile to\nlower-level code as fast as code written manually, Rust endeavors to make safe\ncode be fast code as well.\n\nThe Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust\u2019s greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics. Give\nRust a try and see if its choices work for you.\n\n## Who This Book Is For\n\nThis book assumes that you\u2019ve written code in another programming language but\ndoesn\u2019t make any assumptions about which one. We\u2019ve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon\u2019t spend a lot of time talking about what programming *is* or how to think\nabout it. If you\u2019re entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming.\n\n## How to Use This Book\n\nIn general, this book assumes that you\u2019re reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a particular topic but will revisit\nthe topic in a later chapter.\n\nYou\u2019ll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you\u2019ll learn about an aspect of Rust. In project\nchapters, we\u2019ll build small programs together, applying what you\u2019ve learned so\nfar. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.\n\nChapter 1 explains how to install Rust, how to write a \u201cHello, world!\u201d program,\nand how to use Cargo, Rust\u2019s package manager and build tool. Chapter 2 is a\nhands-on introduction to writing a program in Rust, having you build up a\nnumber guessing game. Here we cover concepts at a high level, and later\nchapters will provide additional detail. If you want to get your hands dirty\nright away, Chapter 2 is the place for that. Chapter 3 covers Rust features\nthat are similar to those of other programming languages, and in Chapter 4\nyou\u2019ll learn about Rust\u2019s ownership system. If you\u2019re a particularly meticulous\nlearner who prefers to learn every detail before moving on to the next, you\nmight want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter\n2 when you\u2019d like to work on a project applying the details you\u2019ve learned.\n\nChapter 5 discusses structs and methods, and Chapter 6 covers enums, `match`\nexpressions, and the `if let` control flow construct. You\u2019ll use structs and\nenums to make custom types in Rust.\n\nIn Chapter 7, you\u2019ll learn about Rust\u2019s module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust\u2019s error-handling philosophy and techniques.\n\nChapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust\u2019s safety guarantees is necessary to ensure your program\u2019s\nlogic is correct. In Chapter 12, we\u2019ll build our own implementation of a subset\nof functionality from the `grep` command line tool that searches for text\nwithin files. For this, we\u2019ll use many of the concepts we discussed in the\nprevious chapters.\n\nChapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we\u2019ll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality.\n\nIn Chapter 16, we\u2019ll walk through different models of concurrent programming\nand talk about how Rust helps you to program in multiple threads fearlessly.\nChapter 17 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with.\n\nChapter 18 is a reference on patterns and pattern matching, which are powerful\nways of expressing ideas throughout Rust programs. Chapter 19 contains a\nsmorgasbord of advanced topics of interest, including unsafe Rust, macros, and\nmore about lifetimes, traits, types, functions, and closures.\n\nIn Chapter 20, we\u2019ll complete a project in which we\u2019ll implement a low-level\nmultithreaded web server!\n\nFinally, some appendices contain useful information about the language in a\nmore reference-like format. Appendix A covers Rust\u2019s keywords, Appendix B\ncovers Rust\u2019s operators and symbols, Appendix C covers derivable traits\nprovided by the standard library, Appendix D covers some useful development\ntools, and Appendix E explains Rust editions. In Appendix F, you can find\ntranslations of the book, and in Appendix G we\u2019ll cover how Rust is made and\nwhat nightly Rust is.\n\nThere is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you.\n\n<span id=\"ferris\"></span>\n\nAn important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we\u2019ll provide many examples that don\u2019t compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you\u2019re trying to run is meant to\nerror. Ferris will also help you distinguish code that isn\u2019t meant to work:\n\n| Ferris                                                                                                           | Meaning                                          |\n|------------------------------------------------------------------------------------------------------------------|--------------------------------------------------|\n| <img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\" alt=\"Ferris with a question mark\"/>            | This code does not compile!                      |\n| <img src=\"img/ferris/panics.svg\" class=\"ferris-explain\" alt=\"Ferris throwing up their hands\"/>                   | This code panics!                                |\n| <img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\" alt=\"Ferris with one claw up, shrugging\"/> | This code does not produce the desired behavior. |\n\nIn most situations, we\u2019ll lead you to the correct version of any code that\ndoesn\u2019t compile.\n\n## Source Code\n\nThe source files from which this book is generated can be found on\n[GitHub][book].\n\n[book]: https://github.com/rust-lang/book/tree/main/src\n",
          "qas": [
            {
              "question": "What is cargo?",
              "id": 219,
              "answers": [
                {
                  "text": "included dependency manager and build tool,",
                  "answer_start": 1601
                }
              ],
              "is_impossible": false
            },
            {
              "question": "In what formats is The Rust Book available?",
              "id": 216,
              "answers": [
                {
                  "text": " in print and ebook",
                  "answer_start": 116
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool is dependency manager?",
              "id": 220,
              "answers": [
                {
                  "text": "Cargo",
                  "answer_start": 1590
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the main purpose of Rust?",
              "id": 225,
              "answers": [
                {
                  "text": "to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics",
                  "answer_start": 3841
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool is used for code styling?",
              "id": 222,
              "answers": [
                {
                  "text": "Rustfmt",
                  "answer_start": 1757
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rust used for?",
              "id": 224,
              "answers": [
                {
                  "text": "command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.",
                  "answer_start": 2610
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What part of Rust ecosystem is preventing bugs?",
              "id": 218,
              "answers": [
                {
                  "text": "the compiler",
                  "answer_start": 1260
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust help with productivity?",
              "id": 217,
              "answers": [
                {
                  "text": "Rust is proving to be a productive tool",
                  "answer_start": 933
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the name of Rust build tool?",
              "id": 221,
              "answers": [
                {
                  "text": "Cargo",
                  "answer_start": 1590
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is helping with IDE integration?",
              "id": 223,
              "answers": [
                {
                  "text": "The Rust Language Server",
                  "answer_start": 1838
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Test Organization\n\nAs mentioned at the start of the chapter, testing is a complex discipline, and\ndifferent people use different terminology and organization. The Rust community\nthinks about tests in terms of two main categories: unit tests and integration\ntests. *Unit tests* are small and more focused, testing one module in isolation\nat a time, and can test private interfaces. *Integration tests* are entirely\nexternal to your library and use your code in the same way any other external\ncode would, using only the public interface and potentially exercising multiple\nmodules per test.\n\nWriting both kinds of tests is important to ensure that the pieces of your\nlibrary are doing what you expect them to, separately and together.\n\n### Unit Tests\n\nThe purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn\u2019t working as\nexpected. You\u2019ll put unit tests in the *src* directory in each file with the\ncode that they\u2019re testing. The convention is to create a module named `tests`\nin each file to contain the test functions and to annotate the module with\n`cfg(test)`.\n\n#### The Tests Module and `#[cfg(test)]`\n\nThe `#[cfg(test)]` annotation on the tests module tells Rust to compile and run\nthe test code only when you run `cargo test`, not when you run `cargo build`.\nThis saves compile time when you only want to build the library and saves space\nin the resulting compiled artifact because the tests are not included. You\u2019ll\nsee that because integration tests go in a different directory, they don\u2019t need\nthe `#[cfg(test)]` annotation. However, because unit tests go in the same files\nas the code, you\u2019ll use `#[cfg(test)]` to specify that they shouldn\u2019t be\nincluded in the compiled result.\n\nRecall that when we generated the new `adder` project in the first section of\nthis chapter, Cargo generated this code for us:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}\n```\n\nThis code is the automatically generated test module. The attribute `cfg`\nstands for *configuration* and tells Rust that the following item should only\nbe included given a certain configuration option. In this case, the\nconfiguration option is `test`, which is provided by Rust for compiling and\nrunning tests. By using the `cfg` attribute, Cargo compiles our test code only\nif we actively run the tests with `cargo test`. This includes any helper\nfunctions that might be within this module, in addition to the functions\nannotated with `#[test]`.\n\n#### Testing Private Functions\n\nThere\u2019s debate within the testing community about whether or not private\nfunctions should be tested directly, and other languages make it difficult or\nimpossible to test private functions. Regardless of which testing ideology you\nadhere to, Rust\u2019s privacy rules do allow you to test private functions.\nConsider the code in Listing 11-12 with the private function `internal_adder`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-12: Testing a private function</span>\n\nNote that the `internal_adder` function is not marked as `pub`. Tests are just\nRust code, and the `tests` module is just another module. As we discussed in\nthe [\u201cPaths for Referring to an Item in the Module Tree\u201d][paths]<!-- ignore -->\nsection, items in child modules can use the items in their ancestor modules. In\nthis test, we bring all of the `test` module\u2019s parent\u2019s items into scope with\n`use super::*`, and then the test can call `internal_adder`. If you don\u2019t think\nprivate functions should be tested, there\u2019s nothing in Rust that will compel\nyou to do so.\n\n### Integration Tests\n\nIn Rust, integration tests are entirely external to your library. They use your\nlibrary in the same way any other code would, which means they can only call\nfunctions that are part of your library\u2019s public API. Their purpose is to test\nwhether many parts of your library work together correctly. Units of code that\nwork correctly on their own could have problems when integrated, so test\ncoverage of the integrated code is important as well. To create integration\ntests, you first need a *tests* directory.\n\n#### The *tests* Directory\n\nWe create a *tests* directory at the top level of our project directory, next\nto *src*. Cargo knows to look for integration test files in this directory. We\ncan then make as many test files as we want, and Cargo will compile each of the\nfiles as an individual crate.\n\nLet\u2019s create an integration test. With the code in Listing 11-12 still in the\n*src/lib.rs* file, make a *tests* directory, and create a new file named\n*tests/integration_test.rs*. Your directory structure should look like this:\n\n```text\nadder\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 integration_test.rs\n```\n\nEnter the code in Listing 11-13 into the *tests/integration_test.rs* file:\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-13/tests/integration_test.rs}}\n```\n\n<span class=\"caption\">Listing 11-13: An integration test of a function in the\n`adder` crate</span>\n\nEach file in the `tests` directory is a separate crate, so we need to bring our\nlibrary into each test crate\u2019s scope. For that reason we add `use adder` at the\ntop of the code, which we didn\u2019t need in the unit tests.\n\nWe don\u2019t need to annotate any code in *tests/integration_test.rs* with\n`#[cfg(test)]`. Cargo treats the `tests` directory specially and compiles files\nin this directory only when we run `cargo test`. Run `cargo test` now:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-13/output.txt}}\n```\n\nThe three sections of output include the unit tests, the integration test, and\nthe doc tests. Note that if any test in a section fails, the following sections\nwill not be run. For example, if a unit test fails, there won\u2019t be any output\nfor integration and doc tests because those tests will only be run if all unit\ntests are passing.\n\nThe first section for the unit tests is the same as we\u2019ve been seeing: one line\nfor each unit test (one named `internal` that we added in Listing 11-12) and\nthen a summary line for the unit tests.\n\nThe integration tests section starts with the line `Running\ntests/integration_test.rs`. Next, there is a line for each test function in\nthat integration test and a summary line for the results of the integration\ntest just before the `Doc-tests adder` section starts.\n\nEach integration test file has its own section, so if we add more files in the\n*tests* directory, there will be more integration test sections.\n\nWe can still run a particular integration test function by specifying the test\nfunction\u2019s name as an argument to `cargo test`. To run all the tests in a\nparticular integration test file, use the `--test` argument of `cargo test`\nfollowed by the name of the file:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/output-only-05-single-integration/output.txt}}\n```\n\nThis command runs only the tests in the *tests/integration_test.rs* file.\n\n#### Submodules in Integration Tests\n\nAs you add more integration tests, you might want to make more files in the\n*tests* directory to help organize them; for example, you can group the test\nfunctions by the functionality they\u2019re testing. As mentioned earlier, each file\nin the *tests* directory is compiled as its own separate crate, which is useful\nfor creating separate scopes to more closely imitate the way end users will be\nusing your crate. However, this means files in the *tests* directory don\u2019t\nshare the same behavior as files in *src* do, as you learned in Chapter 7\nregarding how to separate code into modules and files.\n\nThe different behavior of *tests* directory files is most noticeable when you\nhave a set of helper functions to use in multiple integration test files and\nyou try to follow the steps in the [\u201cSeparating Modules into Different\nFiles\u201d][separating-modules-into-files]<!-- ignore --> section of Chapter 7 to\nextract them into a common module. For example, if we create *tests/common.rs*\nand place a function named `setup` in it, we can add some code to `setup` that\nwe want to call from multiple test functions in multiple test files:\n\n<span class=\"filename\">Filename: tests/common.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/tests/common.rs}}\n```\n\nWhen we run the tests again, we\u2019ll see a new section in the test output for the\n*common.rs* file, even though this file doesn\u2019t contain any test functions nor\ndid we call the `setup` function from anywhere:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/output.txt}}\n```\n\nHaving `common` appear in the test results with `running 0 tests` displayed for\nit is not what we wanted. We just wanted to share some code with the other\nintegration test files.\n\nTo avoid having `common` appear in the test output, instead of creating\n*tests/common.rs*, we\u2019ll create *tests/common/mod.rs*. The project directory\nnow looks like this:\n\n```text\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 common\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n    \u2514\u2500\u2500 integration_test.rs\n```\n\nThis is the older naming convention that Rust also understands that we\nmentioned in the [\u201cAlternate File Paths\u201d][alt-paths]<!-- ignore --> section of\nChapter 7. Naming the file this way tells Rust not to treat the `common` module\nas an integration test file. When we move the `setup` function code into\n*tests/common/mod.rs* and delete the *tests/common.rs* file, the section in the\ntest output will no longer appear. Files in subdirectories of the *tests*\ndirectory don\u2019t get compiled as separate crates or have sections in the test\noutput.\n\nAfter we\u2019ve created *tests/common/mod.rs*, we can use it from any of the\nintegration test files as a module. Here\u2019s an example of calling the `setup`\nfunction from the `it_adds_two` test in *tests/integration_test.rs*:\n\n<span class=\"filename\">Filename: tests/integration_test.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-13-fix-shared-test-code-problem/tests/integration_test.rs}}\n```\n\nNote that the `mod common;` declaration is the same as the module declaration\nwe demonstrated in Listing 7-21. Then in the test function, we can call the\n`common::setup()` function.\n\n#### Integration Tests for Binary Crates\n\nIf our project is a binary crate that only contains a *src/main.rs* file and\ndoesn\u2019t have a *src/lib.rs* file, we can\u2019t create integration tests in the\n*tests* directory and bring functions defined in the *src/main.rs* file into\nscope with a `use` statement. Only library crates expose functions that other\ncrates can use; binary crates are meant to be run on their own.\n\nThis is one of the reasons Rust projects that provide a binary have a\nstraightforward *src/main.rs* file that calls logic that lives in the\n*src/lib.rs* file. Using that structure, integration tests *can* test the\nlibrary crate with `use` to make the important functionality available.\nIf the important functionality works, the small amount of code in the\n*src/main.rs* file will work as well, and that small amount of code doesn\u2019t\nneed to be tested.\n\n## Summary\n\nRust\u2019s testing features provide a way to specify how code should function to\nensure it continues to work as you expect, even as you make changes. Unit tests\nexercise different parts of a library separately and can test private\nimplementation details. Integration tests check that many parts of the library\nwork together correctly, and they use the library\u2019s public API to test the code\nin the same way external code will use it. Even though Rust\u2019s type system and\nownership rules help prevent some kinds of bugs, tests are still important to\nreduce logic bugs having to do with how your code is expected to behave.\n\nLet\u2019s combine the knowledge you learned in this chapter and in previous\nchapters to work on a project!\n\n[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[separating-modules-into-files]:\nch07-05-separating-modules-into-different-files.html\n[alt-paths]: ch07-05-separating-modules-into-different-files.html#alternate-file-paths\n",
          "qas": [
            {
              "question": "What types of tests are possible to perform in Rust?",
              "id": 2163,
              "answers": [
                {
                  "text": "unit tests and integration\ntests",
                  "answer_start": 233
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to run all the tests in particular integration test file?",
              "id": 2173,
              "answers": [
                {
                  "text": "use the `--test` argument of `cargo test`\nfollowed by the name of the file:",
                  "answer_start": 7030
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where to put unit tests in Rust?",
              "id": 2167,
              "answers": [
                {
                  "text": "in the *src* directory in each file with the\ncode that they\u2019re testing",
                  "answer_start": 935
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are unit tests used for?",
              "id": 2166,
              "answers": [
                {
                  "text": "The purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn\u2019t working as\nexpected. ",
                  "answer_start": 754
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of integration tests?",
              "id": 2172,
              "answers": [
                {
                  "text": "to test\nwhether many parts of your library work together correctly",
                  "answer_start": 4080
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are unit tests?",
              "id": 2164,
              "answers": [
                {
                  "text": "small and more focused, testing one module in isolation\nat a time, and can test private interfaces",
                  "answer_start": 284
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do integration tests need #[cfg(test)] annotation?",
              "id": 2170,
              "answers": [
                {
                  "text": "they don\u2019t need\nthe `#[cfg(test)]` annotation",
                  "answer_start": 1569
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of #[cfg(test)] annotation?",
              "id": 2169,
              "answers": [
                {
                  "text": " tells Rust to compile and run\nthe test code only when you run `cargo test`, not when you run `cargo build`.",
                  "answer_start": 1238
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## `Rc<T>`, the Reference Counted Smart Pointer\n\nIn the majority of cases, ownership is clear: you know exactly which variable\nowns a given value. However, there are cases when a single value might have\nmultiple owners. For example, in graph data structures, multiple edges might\npoint to the same node, and that node is conceptually owned by all of the edges\nthat point to it. A node shouldn\u2019t be cleaned up unless it doesn\u2019t have any\nedges pointing to it and so has no owners.\n\nYou have to enable multiple ownership explicitly by using the Rust type\n`Rc<T>`, which is an abbreviation for *reference counting*. The `Rc<T>` type\nkeeps track of the number of references to a value to determine whether or not\nthe value is still in use. If there are zero references to a value, the value\ncan be cleaned up without any references becoming invalid.\n\nImagine `Rc<T>` as a TV in a family room. When one person enters to watch TV,\nthey turn it on. Others can come into the room and watch the TV. When the last\nperson leaves the room, they turn off the TV because it\u2019s no longer being used.\nIf someone turns off the TV while others are still watching it, there would be\nuproar from the remaining TV watchers!\n\nWe use the `Rc<T>` type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can\u2019t determine at compile time\nwhich part will finish using the data last. If we knew which part would finish\nlast, we could just make that part the data\u2019s owner, and the normal ownership\nrules enforced at compile time would take effect.\n\nNote that `Rc<T>` is only for use in single-threaded scenarios. When we discuss\nconcurrency in Chapter 16, we\u2019ll cover how to do reference counting in\nmultithreaded programs.\n\n### Using `Rc<T>` to Share Data\n\nLet\u2019s return to our cons list example in Listing 15-5. Recall that we defined\nit using `Box<T>`. This time, we\u2019ll create two lists that both share ownership\nof a third list. Conceptually, this looks similar to Figure 15-3:\n\n<img alt=\"Two lists that share ownership of a third list\" src=\"img/trpl15-03.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-3: Two lists, `b` and `c`, sharing ownership of\na third list, `a`</span>\n\nWe\u2019ll create list `a` that contains 5 and then 10. Then we\u2019ll make two more\nlists: `b` that starts with 3 and `c` that starts with 4. Both `b` and `c`\nlists will then continue on to the first `a` list containing 5 and 10. In other\nwords, both lists will share the first list containing 5 and 10.\n\nTrying to implement this scenario using our definition of `List` with `Box<T>`\nwon\u2019t work, as shown in Listing 15-17:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-17/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-17: Demonstrating we\u2019re not allowed to have\ntwo lists using `Box<T>` that try to share ownership of a third list</span>\n\nWhen we compile this code, we get this error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-17/output.txt}}\n```\n\nThe `Cons` variants own the data they hold, so when we create the `b` list, `a`\nis moved into `b` and `b` owns `a`. Then, when we try to use `a` again when\ncreating `c`, we\u2019re not allowed to because `a` has been moved.\n\nWe could change the definition of `Cons` to hold references instead, but then\nwe would have to specify lifetime parameters. By specifying lifetime\nparameters, we would be specifying that every element in the list will live at\nleast as long as the entire list. This is the case for the elements and lists\nin Listing 15-17, but not in every scenario.\n\nInstead, we\u2019ll change our definition of `List` to use `Rc<T>` in place of\n`Box<T>`, as shown in Listing 15-18. Each `Cons` variant will now hold a value\nand an `Rc<T>` pointing to a `List`. When we create `b`, instead of taking\nownership of `a`, we\u2019ll clone the `Rc<List>` that `a` is holding, thereby\nincreasing the number of references from one to two and letting `a` and `b`\nshare ownership of the data in that `Rc<List>`. We\u2019ll also clone `a` when\ncreating `c`, increasing the number of references from two to three. Every time\nwe call `Rc::clone`, the reference count to the data within the `Rc<List>` will\nincrease, and the data won\u2019t be cleaned up unless there are zero references to\nit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-18/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-18: A definition of `List` that uses\n`Rc<T>`</span>\n\nWe need to add a `use` statement to bring `Rc<T>` into scope because it\u2019s not\nin the prelude. In `main`, we create the list holding 5 and 10 and store it in\na new `Rc<List>` in `a`. Then when we create `b` and `c`, we call the\n`Rc::clone` function and pass a reference to the `Rc<List>` in `a` as an\nargument.\n\nWe could have called `a.clone()` rather than `Rc::clone(&a)`, but Rust\u2019s\nconvention is to use `Rc::clone` in this case. The implementation of\n`Rc::clone` doesn\u2019t make a deep copy of all the data like most types\u2019\nimplementations of `clone` do. The call to `Rc::clone` only increments the\nreference count, which doesn\u2019t take much time. Deep copies of data can take a\nlot of time. By using `Rc::clone` for reference counting, we can visually\ndistinguish between the deep-copy kinds of clones and the kinds of clones that\nincrease the reference count. When looking for performance problems in the\ncode, we only need to consider the deep-copy clones and can disregard calls to\n`Rc::clone`.\n\n### Cloning an `Rc<T>` Increases the Reference Count\n\nLet\u2019s change our working example in Listing 15-18 so we can see the reference\ncounts changing as we create and drop references to the `Rc<List>` in `a`.\n\nIn Listing 15-19, we\u2019ll change `main` so it has an inner scope around list `c`;\nthen we can see how the reference count changes when `c` goes out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-19: Printing the reference count</span>\n\nAt each point in the program where the reference count changes, we print the\nreference count, which we get by calling the `Rc::strong_count` function. This\nfunction is named `strong_count` rather than `count` because the `Rc<T>` type\nalso has a `weak_count`; we\u2019ll see what `weak_count` is used for in the\n[\u201cPreventing Reference Cycles: Turning an `Rc<T>` into a\n`Weak<T>`\u201d][preventing-ref-cycles]<!-- ignore --> section.\n\nThis code prints the following:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-19/output.txt}}\n```\n\nWe can see that the `Rc<List>` in `a` has an initial reference count of 1; then\neach time we call `clone`, the count goes up by 1. When `c` goes out of scope,\nthe count goes down by 1. We don\u2019t have to call a function to decrease the\nreference count like we have to call `Rc::clone` to increase the reference\ncount: the implementation of the `Drop` trait decreases the reference count\nautomatically when an `Rc<T>` value goes out of scope.\n\nWhat we can\u2019t see in this example is that when `b` and then `a` go out of scope\nat the end of `main`, the count is then 0, and the `Rc<List>` is cleaned up\ncompletely. Using `Rc<T>` allows a single value to have multiple owners, and\nthe count ensures that the value remains valid as long as any of the owners\nstill exist.\n\nVia immutable references, `Rc<T>` allows you to share data between multiple\nparts of your program for reading only. If `Rc<T>` allowed you to have multiple\nmutable references too, you might violate one of the borrowing rules discussed\nin Chapter 4: multiple mutable borrows to the same place can cause data races\nand inconsistencies. But being able to mutate data is very useful! In the next\nsection, we\u2019ll discuss the interior mutability pattern and the `RefCell<T>`\ntype that you can use in conjunction with an `Rc<T>` to work with this\nimmutability restriction.\n\n[preventing-ref-cycles]: ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\n",
          "qas": [
            {
              "question": "What happens when Rc<T> is cloned?",
              "id": 59,
              "answers": [
                {
                  "text": "The call to `Rc::clone` only increments the\nreference count",
                  "answer_start": 5125
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When to use Rc<T>?",
              "id": 57,
              "answers": [
                {
                  "text": "We use the `Rc\u2039T>` type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can\u2019t determine at compile time\nwhich part will finish using the data last.",
                  "answer_start": 1202
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are Rc's values mutable?",
              "id": 61,
              "answers": [
                {
                  "text": "Via immutable references, `Rc\u2039T>` allows you to share data between multiple\nparts of your program for reading only.",
                  "answer_start": 7463
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can Rc<T> be used in multithreading?",
              "id": 58,
              "answers": [
                {
                  "text": "Note that `Rc\u2039T>` is only for use in single-threaded scenarios.",
                  "answer_start": 1562
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is multiple ownership possible?",
              "id": 56,
              "answers": [
                {
                  "text": "You have to enable multiple ownership explicitly by using the Rust type\n`Rc\u2039T>`",
                  "answer_start": 480
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Reading a File\n\nNow we\u2019ll add functionality to read the file specified in the `file_path`\nargument. First, we need a sample file to test it with: we\u2019ll use a file with a\nsmall amount of text over multiple lines with some repeated words. Listing 12-3\nhas an Emily Dickinson poem that will work well! Create a file called\n*poem.txt* at the root level of your project, and enter the poem \u201cI\u2019m Nobody!\nWho are you?\u201d\n\n<span class=\"filename\">Filename: poem.txt</span>\n\n```text\n{{#include ../listings/ch12-an-io-project/listing-12-03/poem.txt}}\n```\n\n<span class=\"caption\">Listing 12-3: A poem by Emily Dickinson makes a good test\ncase</span>\n\nWith the text in place, edit *src/main.rs* and add code to read the file, as\nshown in Listing 12-4.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-4: Reading the contents of the file specified\nby the second argument</span>\n\nFirst, we bring in a relevant part of the standard library with a `use`\nstatement: we need `std::fs` to handle files.\n\nIn `main`, the new statement `fs::read_to_string` takes the `file_path`, opens\nthat file, and returns a `std::io::Result<String>` of the file\u2019s contents.\n\nAfter that, we again add a temporary `println!` statement that prints the value\nof `contents` after the file is read, so we can check that the program is\nworking so far.\n\nLet\u2019s run this code with any string as the first command line argument (because\nwe haven\u2019t implemented the searching part yet) and the *poem.txt* file as the\nsecond argument:\n\n```console\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/output.txt}}\n```\n\nGreat! The code read and then printed the contents of the file. But the code\nhas a few flaws. At the moment, the `main` function has multiple\nresponsibilities: generally, functions are clearer and easier to maintain if\neach function is responsible for only one idea. The other problem is that we\u2019re\nnot handling errors as well as we could. The program is still small, so these\nflaws aren\u2019t a big problem, but as the program grows, it will be harder to fix\nthem cleanly. It\u2019s good practice to begin refactoring early on when developing\na program, because it\u2019s much easier to refactor smaller amounts of code. We\u2019ll\ndo that next.\n",
          "qas": [
            {
              "question": "What is the name of module used to handle files?",
              "id": 2126,
              "answers": [
                {
                  "text": "std::fs",
                  "answer_start": 1117
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the usage of 'std::fs'?",
              "id": 2125,
              "answers": [
                {
                  "text": "to handle files",
                  "answer_start": 1126
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to read the entire content of file?",
              "id": 2127,
              "answers": [
                {
                  "text": "fs::read_to_string",
                  "answer_start": 1174
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'fs::read_to_string' do?",
              "id": 2128,
              "answers": [
                {
                  "text": "opens\nthat file, and returns a `std::io::Result\u2039String>` of the file\u2019s contents",
                  "answer_start": 1217
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Advanced Types\n\nThe Rust type system has some features that we\u2019ve so far mentioned but haven\u2019t\nyet discussed. We\u2019ll start by discussing newtypes in general as we examine why\nnewtypes are useful as types. Then we\u2019ll move on to type aliases, a feature\nsimilar to newtypes but with slightly different semantics. We\u2019ll also discuss\nthe `!` type and dynamically sized types.\n\n### Using the Newtype Pattern for Type Safety and Abstraction\n\n> Note: This section assumes you\u2019ve read the earlier section [\u201cUsing the\n> Newtype Pattern to Implement External Traits on External\n> Types.\u201d][using-the-newtype-pattern]<!-- ignore -->\n\nThe newtype pattern is also useful for tasks beyond those we\u2019ve discussed so\nfar, including statically enforcing that values are never confused and\nindicating the units of a value. You saw an example of using newtypes to\nindicate units in Listing 19-15: recall that the `Millimeters` and `Meters`\nstructs wrapped `u32` values in a newtype. If we wrote a function with a\nparameter of type `Millimeters`, we couldn\u2019t compile a program that\naccidentally tried to call that function with a value of type `Meters` or a\nplain `u32`.\n\nWe can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type.\n\nNewtypes can also hide internal implementation. For example, we could provide a\n`People` type to wrap a `HashMap<i32, String>` that stores a person\u2019s ID\nassociated with their name. Code using `People` would only interact with the\npublic API we provide, such as a method to add a name string to the `People`\ncollection; that code wouldn\u2019t need to know that we assign an `i32` ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation\nto hide implementation details, which we discussed in the [\u201cEncapsulation that\nHides Implementation\nDetails\u201d][encapsulation-that-hides-implementation-details]<!-- ignore -->\nsection of Chapter 17.\n\n### Creating Type Synonyms with Type Aliases\n\nRust provides the ability to declare a *type alias* to give an existing type\nanother name. For this we use the `type` keyword. For example, we can create\nthe alias `Kilometers` to `i32` like so:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:here}}\n```\n\nNow, the alias `Kilometers` is a *synonym* for `i32`; unlike the `Millimeters`\nand `Meters` types we created in Listing 19-15, `Kilometers` is not a separate,\nnew type. Values that have the type `Kilometers` will be treated the same as\nvalues of type `i32`:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:there}}\n```\n\nBecause `Kilometers` and `i32` are the same type, we can add values of both\ntypes and we can pass `Kilometers` values to functions that take `i32`\nparameters. However, using this method, we don\u2019t get the type checking benefits\nthat we get from the newtype pattern discussed earlier. In other words, if we\nmix up `Kilometers` and `i32` values somewhere, the compiler will not give us\nan error.\n\nThe main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:\n\n```rust,ignore\nBox<dyn Fn() + Send + 'static>\n```\n\nWriting this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 19-24.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-24: Using a long type in many places</span>\n\nA type alias makes this code more manageable by reducing the repetition. In\nListing 19-25, we\u2019ve introduced an alias named `Thunk` for the verbose type and\ncan replace all uses of the type with the shorter alias `Thunk`.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-25: Introducing a type alias `Thunk` to reduce\nrepetition</span>\n\nThis code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (*thunk* is a word for code\nto be evaluated at a later time, so it\u2019s an appropriate name for a closure that\ngets stored).\n\nType aliases are also commonly used with the `Result<T, E>` type for reducing\nrepetition. Consider the `std::io` module in the standard library. I/O\noperations often return a `Result<T, E>` to handle situations when operations\nfail to work. This library has a `std::io::Error` struct that represents all\npossible I/O errors. Many of the functions in `std::io` will be returning\n`Result<T, E>` where the `E` is `std::io::Error`, such as these functions in\nthe `Write` trait:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-05-write-trait/src/lib.rs}}\n```\n\nThe `Result<..., Error>` is repeated a lot. As such, `std::io` has this type\nalias declaration:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:here}}\n```\n\nBecause this declaration is in the `std::io` module, we can use the fully\nqualified alias `std::io::Result<T>`; that is, a `Result<T, E>` with the `E`\nfilled in as `std::io::Error`. The `Write` trait function signatures end up\nlooking like this:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:there}}\n```\n\nThe type alias helps in two ways: it makes code easier to write *and* it gives\nus a consistent interface across all of `std::io`. Because it\u2019s an alias, it\u2019s\njust another `Result<T, E>`, which means we can use any methods that work on\n`Result<T, E>` with it, as well as special syntax like the `?` operator.\n\n### The Never Type that Never Returns\n\nRust has a special type named `!` that\u2019s known in type theory lingo as the\n*empty type* because it has no values. We prefer to call it the *never type*\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-07-never-type/src/lib.rs:here}}\n```\n\nThis code is read as \u201cthe function `bar` returns never.\u201d Functions that return\nnever are called *diverging functions*. We can\u2019t create values of the type `!`\nso `bar` can never possibly return.\n\nBut what use is a type you can never create values for? Recall the code from\nListing 2-5, part of the number guessing game; we\u2019ve reproduced a bit of it\nhere in Listing 19-26.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:ch19}}\n```\n\n<span class=\"caption\">Listing 19-26: A `match` with an arm that ends in\n`continue`</span>\n\nAt the time, we skipped over some details in this code. In Chapter 6 in [\u201cThe\n`match` Control Flow Operator\u201d][the-match-control-flow-operator]<!-- ignore -->\nsection, we discussed that `match` arms must all return the same type. So, for\nexample, the following code doesn\u2019t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-08-match-arms-different-types/src/main.rs:here}}\n```\n\nThe type of `guess` in this code would have to be an integer *and* a string,\nand Rust requires that `guess` have only one type. So what does `continue`\nreturn? How were we allowed to return a `u32` from one arm and have another arm\nthat ends with `continue` in Listing 19-26?\n\nAs you might have guessed, `continue` has a `!` value. That is, when Rust\ncomputes the type of `guess`, it looks at both match arms, the former with a\nvalue of `u32` and the latter with a `!` value. Because `!` can never have a\nvalue, Rust decides that the type of `guess` is `u32`.\n\nThe formal way of describing this behavior is that expressions of type `!` can\nbe coerced into any other type. We\u2019re allowed to end this `match` arm with\n`continue` because `continue` doesn\u2019t return a value; instead, it moves control\nback to the top of the loop, so in the `Err` case, we never assign a value to\n`guess`.\n\nThe never type is useful with the `panic!` macro as well. Recall the `unwrap`\nfunction that we call on `Option<T>` values to produce a value or panic with\nthis definition:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-09-unwrap-definition/src/lib.rs:here}}\n```\n\nIn this code, the same thing happens as in the `match` in Listing 19-26: Rust\nsees that `val` has the type `T` and `panic!` has the type `!`, so the result\nof the overall `match` expression is `T`. This code works because `panic!`\ndoesn\u2019t produce a value; it ends the program. In the `None` case, we won\u2019t be\nreturning a value from `unwrap`, so this code is valid.\n\nOne final expression that has the type `!` is a `loop`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-10-loop-returns-never/src/main.rs:here}}\n```\n\nHere, the loop never ends, so `!` is the value of the expression. However, this\nwouldn\u2019t be true if we included a `break`, because the loop would terminate\nwhen it got to the `break`.\n\n### Dynamically Sized Types and the `Sized` Trait\n\nRust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of *dynamically sized types*.\nSometimes referred to as *DSTs* or *unsized types*, these types let us write\ncode using values whose size we can know only at runtime.\n\nLet\u2019s dig into the details of a dynamically sized type called `str`, which\nwe\u2019ve been using throughout the book. That\u2019s right, not `&str`, but `str` on\nits own, is a DST. We can\u2019t know how long the string is until runtime, meaning\nwe can\u2019t create a variable of type `str`, nor can we take an argument of type\n`str`. Consider the following code, which does not work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-11-cant-create-str/src/main.rs:here}}\n```\n\nRust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two `str` values would need to take up the\nsame amount of space. But they have different lengths: `s1` needs 12 bytes of\nstorage and `s2` needs 15. This is why it\u2019s not possible to create a variable\nholding a dynamically sized type.\n\nSo what do we do? In this case, you already know the answer: we make the types\nof `s1` and `s2` a `&str` rather than a `str`. Recall from the [\u201cString\nSlices\u201d][string-slices]<!-- ignore --> section of Chapter 4 that the slice data\nstructure just stores the starting position and the length of the slice. So\nalthough a `&T` is a single value that stores the memory address of where the\n`T` is located, a `&str` is *two* values: the address of the `str` and its\nlength. As such, we can know the size of a `&str` value at compile time: it\u2019s\ntwice the length of a `usize`. That is, we always know the size of a `&str`, no\nmatter how long the string it refers to is. In general, this is the way in\nwhich dynamically sized types are used in Rust: they have an extra bit of\nmetadata that stores the size of the dynamic information. The golden rule of\ndynamically sized types is that we must always put values of dynamically sized\ntypes behind a pointer of some kind.\n\nWe can combine `str` with all kinds of pointers: for example, `Box<str>` or\n`Rc<str>`. In fact, you\u2019ve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In Chapter 17 in the [\u201cUsing Trait Objects That\nAllow for Values of Different\nTypes\u201d][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section, we mentioned that to use traits as trait objects, we must\nput them behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn\nTrait>` would work too).\n\nTo work with DSTs, Rust provides the `Sized` trait to determine whether or not\na type\u2019s size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on `Sized` to every generic function. That is, a\ngeneric function definition like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-12-generic-fn-definition/src/lib.rs}}\n```\n\nis actually treated as though we had written this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-13-generic-implicit-sized-bound/src/lib.rs}}\n```\n\nBy default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-14-generic-maybe-sized/src/lib.rs}}\n```\n\nA trait bound on `?Sized` means \u201c`T` may or may not be `Sized`\u201d and this\nnotation overrides the default that generic types must have a known size at\ncompile time. The `?Trait` syntax with this meaning is only available for\n`Sized`, not any other traits.\n\nAlso note that we switched the type of the `t` parameter from `T` to `&T`.\nBecause the type might not be `Sized`, we need to use it behind some kind of\npointer. In this case, we\u2019ve chosen a reference.\n\nNext, we\u2019ll talk about functions and closures!\n\n[encapsulation-that-hides-implementation-details]:\nch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details\n[string-slices]: ch04-03-slices.html#string-slices\n[the-match-control-flow-operator]:\nch06-02-match.html#the-match-control-flow-operator\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[using-the-newtype-pattern]: ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\n",
          "qas": [
            {
              "question": "How to work with dst in Rust?",
              "id": 85,
              "answers": [
                {
                  "text": "To work with DSTs, Rust provides the `Sized` trait to determine whether or not\na type\u2019s size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on `Sized` to every generic function.",
                  "answer_start": 12084
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is example usage of newtype pattern?",
              "id": 80,
              "answers": [
                {
                  "text": "We can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type.",
                  "answer_start": 1151
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are dynamically Sized Types?",
              "id": 84,
              "answers": [
                {
                  "text": "Rust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of *dynamically sized types*.\nSometimes referred to as *DSTs* or *unsized types*, these types let us write\ncode using values whose size we can know only at runtime.",
                  "answer_start": 9229
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the pros of using type aliases?",
              "id": 82,
              "answers": [
                {
                  "text": "The type alias helps in two ways: it makes code easier to write *and* it gives\nus a consistent interface across all of `std::io`.",
                  "answer_start": 5529
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How the Never Type in Rust works?",
              "id": 83,
              "answers": [
                {
                  "text": "Rust has a special type named `!` that\u2019s known in type theory lingo as the\n*empty type* because it has no values. We prefer to call it the *never type*\nbecause it stands in the place of the return type when a function will never\nreturn.",
                  "answer_start": 5877
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What other usage has newtype pattern?",
              "id": 79,
              "answers": [
                {
                  "text": "The newtype pattern is also useful for tasks beyond those we\u2019ve discussed so\nfar, including statically enforcing that values are never confused and\nindicating the units of a value.",
                  "answer_start": 623
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Data Types\n\nEvery value in Rust is of a certain *data type*, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We\u2019ll look at\ntwo data type subsets: scalar and compound.\n\nKeep in mind that Rust is a *statically typed* language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a `String` to a numeric\ntype using `parse` in the [\u201cComparing the Guess to the Secret\nNumber\u201d][comparing-the-guess-to-the-secret-number]<!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:\n\n```rust\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n```\n\nIf we don\u2019t add the `: u32` type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/output-only-01-no-type-annotations/output.txt}}\n```\n\nYou\u2019ll see different type annotations for other data types.\n\n### Scalar Types\n\nA *scalar* type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let\u2019s jump into how they work in Rust.\n\n#### Integer Types\n\nAn *integer* is a number without a fractional component. We used one integer\ntype in Chapter 2, the `u32` type. This type declaration indicates that the\nvalue it\u2019s associated with should be an unsigned integer (signed integer types\nstart with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value.\n\n<span class=\"caption\">Table 3-1: Integer Types in Rust</span>\n\n| Length  | Signed  | Unsigned |\n|---------|---------|----------|\n| 8-bit   | `i8`    | `u8`     |\n| 16-bit  | `i16`   | `u16`    |\n| 32-bit  | `i32`   | `u32`    |\n| 64-bit  | `i64`   | `u64`    |\n| 128-bit | `i128`  | `u128`   |\n| arch    | `isize` | `usize`  |\n\nEach variant can be either signed or unsigned and has an explicit size.\n*Signed* and *unsigned* refer to whether it\u2019s possible for the number to be\nnegative\u2014in other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It\u2019s like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it\u2019s safe to assume the number is positive, it\u2019s shown with no sign.\nSigned numbers are stored using [two\u2019s complement][twos-complement]<!-- ignore\n--> representation.\n\nEach signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where *n* is the number of bits that variant uses. So an\n`i8` can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a `u8` can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the architecture of the\ncomputer your program is running on, which is denoted in the table as \u201carch\u201d:\n64 bits if you\u2019re on a 64-bit architecture and 32 bits if you\u2019re on a 32-bit\narchitecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as `57u8`, to designate the type. Number literals can also use `_` as a\nvisual separator to make the number easier to read, such as `1_000`, which will\nhave the same value as if you had specified `1000`.\n\n<span class=\"caption\">Table 3-2: Integer Literals in Rust</span>\n\n| Number literals  | Example       |\n|------------------|---------------|\n| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |\n\nSo how do you know which type of integer to use? If you\u2019re unsure, Rust\u2019s\ndefaults are generally good places to start: integer types default to `i32`.\nThe primary situation in which you\u2019d use `isize` or `usize` is when indexing\nsome sort of collection.\n\n> ##### Integer Overflow\n>\n> Let\u2019s say you have a variable of type `u8` that can hold values between 0 and\n> 255. If you try to change the variable to a value outside that range, such as\n> 256, *integer overflow* will occur, which can result in one of two behaviors.\n> When you\u2019re compiling in debug mode, Rust includes checks for integer overflow\n> that cause your program to *panic* at runtime if this behavior occurs. Rust\n> uses the term *panicking* when a program exits with an error; we\u2019ll discuss\n> panics in more depth in the [\u201cUnrecoverable Errors with\n> `panic!`\u201d][unrecoverable-errors-with-panic]<!-- ignore --> section in Chapter\n> 9.\n>\n> When you\u2019re compiling in release mode with the `--release` flag, Rust does\n> *not* include checks for integer overflow that cause panics. Instead, if\n> overflow occurs, Rust performs *two\u2019s complement wrapping*. In short, values\n> greater than the maximum value the type can hold \u201cwrap around\u201d to the minimum\n> of the values the type can hold. In the case of a `u8`, the value 256 becomes\n> 0, the value 257 becomes 1, and so on. The program won\u2019t panic, but the\n> variable will have a value that probably isn\u2019t what you were expecting it to\n> have. Relying on integer overflow\u2019s wrapping behavior is considered an error.\n>\n> To explicitly handle the possibility of overflow, you can use these families\n> of methods provided by the standard library for primitive numeric types:\n>\n> * Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n> * Return the `None` value if there is overflow with the `checked_*` methods.\n> * Return the value and a boolean indicating whether there was overflow with\n>   the `overflowing_*` methods.\n> * Saturate at the value\u2019s minimum or maximum values with the `saturating_*`\n>   methods.\n\n#### Floating-Point Types\n\nRust also has two primitive types for *floating-point numbers*, which are\nnumbers with decimal points. Rust\u2019s floating-point types are `f32` and `f64`,\nwhich are 32 bits and 64 bits in size, respectively. The default type is `f64`\nbecause on modern CPUs, it\u2019s roughly the same speed as `f32` but is capable of\nmore precision. All floating-point types are signed.\n\nHere\u2019s an example that shows floating-point numbers in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-06-floating-point/src/main.rs}}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The\n`f32` type is a single-precision float, and `f64` has double precision.\n\n#### Numeric Operations\n\nRust supports the basic mathematical operations you\u2019d expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you\u2019d use each numeric operation in a `let` statement:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-07-numeric-operations/src/main.rs}}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. [Appendix\nB][appendix_b]<!-- ignore --> contains a list of all operators that Rust\nprovides.\n\n#### The Boolean Type\n\nAs in most other programming languages, a Boolean type in Rust has two possible\nvalues: `true` and `false`. Booleans are one byte in size. The Boolean type in\nRust is specified using `bool`. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-08-boolean/src/main.rs}}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if`\nexpression. We\u2019ll cover how `if` expressions work in Rust in the [\u201cControl\nFlow\u201d][control-flow]<!-- ignore --> section.\n\n#### The Character Type\n\nRust\u2019s `char` type is the language\u2019s most primitive alphabetic type. Here are\nsome examples of declaring `char` values:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-09-char/src/main.rs}}\n```\n\nNote that we specify `char` literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust\u2019s `char` type is four bytes in size and\nrepresents a Unicode Scalar Value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid `char` values in Rust. Unicode Scalar\nValues range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive.\nHowever, a \u201ccharacter\u201d isn\u2019t really a concept in Unicode, so your human\nintuition for what a \u201ccharacter\u201d is may not match up with what a `char` is in\nRust. We\u2019ll discuss this topic in detail in [\u201cStoring UTF-8 Encoded Text with\nStrings\u201d][strings]<!-- ignore --> in Chapter 8.\n\n### Compound Types\n\n*Compound types* can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.\n\n#### The Tuple Type\n\nA *tuple* is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don\u2019t have to be the same. We\u2019ve added optional\ntype annotations in this example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-10-tuples/src/main.rs}}\n```\n\nThe variable `tup` binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-11-destructuring-tuples/src/main.rs}}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then\nuses a pattern with `let` to take `tup` and turn it into three separate\nvariables, `x`, `y`, and `z`. This is called *destructuring* because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n`y`, which is `6.4`.\n\nWe can also access a tuple element directly by using a period (`.`) followed by\nthe index of the value we want to access. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-12-tuple-indexing/src/main.rs}}\n```\n\nThis program creates the tuple `x` and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0.\n\nThe tuple without any values has a special name, *unit*. This value and its\ncorresponding type are both written `()` and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don\u2019t\nreturn any other value.\n\n#### The Array Type\n\nAnother way to have a collection of multiple values is with an *array*. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length.\n\nWe write the values in an array as a comma-separated list inside square\nbrackets:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-13-arrays/src/main.rs}}\n```\n\nArrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in [Chapter\n4][stack-and-heap]<!-- ignore -->) or when you want to ensure you always have a\nfixed number of elements. An array isn\u2019t as flexible as the vector type,\nthough. A *vector* is a similar collection type provided by the standard\nlibrary that *is* allowed to grow or shrink in size. If you\u2019re unsure whether\nto use an array or a vector, chances are you should use a vector. [Chapter\n8][vectors]<!-- ignore --> discusses vectors in more detail.\n\nHowever, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:\n\n```rust\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n```\n\nYou write an array\u2019s type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:\n\n```rust\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5`\nindicates the array contains five elements.\n\nYou can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:\n\n```rust\nlet a = [3; 5];\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value\n`3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a\nmore concise way.\n\n##### Accessing Array Elements\n\nAn array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-14-array-indexing/src/main.rs}}\n```\n\nIn this example, the variable named `first` will get the value `1` because that\nis the value at index `[0]` in the array. The variable named `second` will get\nthe value `2` from index `[1]` in the array.\n\n##### Invalid Array Element Access\n\nLet\u2019s see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,panics\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access/src/main.rs}}\n```\n\nThis code compiles successfully. If you run this code using `cargo run` and\nenter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as `10`, you\u2019ll see output like this:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->\n\n```console\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\nThe program resulted in a *runtime* error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn\u2019t execute the final `println!` statement. When you attempt to access an\nelement using indexing, Rust will check that the index you\u2019ve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can\u2019t possibly know what value a user will enter when they\nrun the code later.\n\nThis is an example of Rust\u2019s memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust\u2019s error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[twos-complement]: https://en.wikipedia.org/wiki/Two%27s_complement\n[control-flow]: ch03-05-control-flow.html#control-flow\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[stack-and-heap]: ch04-01-what-is-ownership.html#the-stack-and-the-heap\n[vectors]: ch08-01-vectors.html\n[unrecoverable-errors-with-panic]: ch09-01-unrecoverable-errors-with-panic.html\n[appendix_b]: appendix-02-operators.md\n",
          "qas": [
            {
              "question": "How can we access a tuple element?",
              "id": 376,
              "answers": [
                {
                  "text": "by using a period (`.`) followed by\nthe index of the value we want to access",
                  "answer_start": 10898
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between array and tuple?",
              "id": 377,
              "answers": [
                {
                  "text": "Unlike\na tuple, every element of an array must have the same type",
                  "answer_start": 11692
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What scalar types there are in Rust?",
              "id": 359,
              "answers": [
                {
                  "text": "integers, floating-point numbers, Booleans, and characters.",
                  "answer_start": 1274
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the main way to use booleans?",
              "id": 370,
              "answers": [
                {
                  "text": "through conditionals, such as an `if`\nexpression",
                  "answer_start": 8144
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many scalar types does Rust have?",
              "id": 360,
              "answers": [
                {
                  "text": "four",
                  "answer_start": 1247
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I access elements in arrays?",
              "id": 381,
              "answers": [
                {
                  "text": "You can access elements of an array using indexing",
                  "answer_start": 13956
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that a variable can be signed or unsigned?",
              "id": 362,
              "answers": [
                {
                  "text": "whether it\u2019s possible for the number to be\nnegative",
                  "answer_start": 2307
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that language is statically typed?",
              "id": 357,
              "answers": [
                {
                  "text": "that it\nmust know the types of all variables at compile time",
                  "answer_start": 286
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if an integer overflow occurs in debug mode?",
              "id": 365,
              "answers": [
                {
                  "text": "panic",
                  "answer_start": 4792
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we declare a tuple?",
              "id": 375,
              "answers": [
                {
                  "text": "by writing a comma-separated list of values inside\nparentheses",
                  "answer_start": 9728
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call the most primitive alphabetic type?",
              "id": 371,
              "answers": [
                {
                  "text": "char",
                  "answer_start": 8336
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What operations can we perform on numbers?",
              "id": 368,
              "answers": [
                {
                  "text": "addition, subtraction, multiplication, division, and remainder",
                  "answer_start": 7096
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What types represent single values?",
              "id": 358,
              "answers": [
                {
                  "text": "scalar",
                  "answer_start": 1198
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a tuple?",
              "id": 374,
              "answers": [
                {
                  "text": "general way of grouping together a number of values with a\nvariety of types into one compound type",
                  "answer_start": 9530
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the examples of number literals of different types?",
              "id": 363,
              "answers": [
                {
                  "text": "| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |",
                  "answer_start": 3974
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many compound types have Rust by default?",
              "id": 373,
              "answers": [
                {
                  "text": "Rust has two\nprimitive compound types: tuples and arrays",
                  "answer_start": 9435
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call types with decimal points?",
              "id": 367,
              "answers": [
                {
                  "text": "f32` and `f64`",
                  "answer_start": 6367
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the use case for an array?",
              "id": 379,
              "answers": [
                {
                  "text": "Arrays are useful when you want your data allocated on the stack rather than\nthe heap",
                  "answer_start": 12083
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do arrays have a fixed length?",
              "id": 378,
              "answers": [
                {
                  "text": "arrays in Rust have a fixed length",
                  "answer_start": 11798
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What kind of language is Rust when it comes to typing?",
              "id": 356,
              "answers": [
                {
                  "text": "statically typed",
                  "answer_start": 246
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a situation when we assign a value outside the range of an integer?",
              "id": 364,
              "answers": [
                {
                  "text": "integer overflow",
                  "answer_start": 4609
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## To `panic!` or Not to `panic!`\n\nSo how do you decide when you should call `panic!` and when you should return\n`Result`? When code panics, there\u2019s no way to recover. You could call `panic!`\nfor any error situation, whether there\u2019s a possible way to recover or not, but\nthen you\u2019re making the decision that a situation is unrecoverable on behalf of\nthe calling code. When you choose to return a `Result` value, you give the\ncalling code options. The calling code could choose to attempt to recover in a\nway that\u2019s appropriate for its situation, or it could decide that an `Err`\nvalue in this case is unrecoverable, so it can call `panic!` and turn your\nrecoverable error into an unrecoverable one. Therefore, returning `Result` is a\ngood default choice when you\u2019re defining a function that might fail.\n\nIn situations such as examples, prototype code, and tests, it\u2019s more\nappropriate to write code that panics instead of returning a `Result`. Let\u2019s\nexplore why, then discuss situations in which the compiler can\u2019t tell that\nfailure is impossible, but you as a human can. The chapter will conclude with\nsome general guidelines on how to decide whether to panic in library code.\n\n### Examples, Prototype Code, and Tests\n\nWhen you\u2019re writing an example to illustrate some concept, also including robust\nerror-handling code can make the example less clear. In\nexamples, it\u2019s understood that a call to a method like `unwrap` that could\npanic is meant as a placeholder for the way you\u2019d want your application to\nhandle errors, which can differ based on what the rest of your code is doing.\n\nSimilarly, the `unwrap` and `expect` methods are very handy when prototyping,\nbefore you\u2019re ready to decide how to handle errors. They leave clear markers in\nyour code for when you\u2019re ready to make your program more robust.\n\nIf a method call fails in a test, you\u2019d want the whole test to fail, even if\nthat method isn\u2019t the functionality under test. Because `panic!` is how a test\nis marked as a failure, calling `unwrap` or `expect` is exactly what should\nhappen.\n\n### Cases in Which You Have More Information Than the Compiler\n\nIt would also be appropriate to call `unwrap` or `expect` when you have some\nother logic that ensures the `Result` will have an `Ok` value, but the logic\nisn\u2019t something the compiler understands. You\u2019ll still have a `Result` value\nthat you need to handle: whatever operation you\u2019re calling still has the\npossibility of failing in general, even though it\u2019s logically impossible in\nyour particular situation. If you can ensure by manually inspecting the code\nthat you\u2019ll never have an `Err` variant, it\u2019s perfectly acceptable to call\n`unwrap`, and even better to document the reason you think you\u2019ll never have an\n`Err` variant in the `expect` text. Here\u2019s an example:\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-08-unwrap-that-cant-fail/src/main.rs:here}}\n```\n\nWe\u2019re creating an `IpAddr` instance by parsing a hardcoded string. We can see\nthat `127.0.0.1` is a valid IP address, so it\u2019s acceptable to use `expect`\nhere. However, having a hardcoded, valid string doesn\u2019t change the return type\nof the `parse` method: we still get a `Result` value, and the compiler will\nstill make us handle the `Result` as if the `Err` variant is a possibility\nbecause the compiler isn\u2019t smart enough to see that this string is always a\nvalid IP address. If the IP address string came from a user rather than being\nhardcoded into the program and therefore *did* have a possibility of failure,\nwe\u2019d definitely want to handle the `Result` in a more robust way instead.\nMentioning the assumption that this IP address is hardcoded will prompt us to\nchange `expect` to better error handling code if in the future, we need to get\nthe IP address from some other source instead.\n\n### Guidelines for Error Handling\n\nIt\u2019s advisable to have your code panic when it\u2019s possible that your code\ncould end up in a bad state. In this context, a *bad state* is when some\nassumption, guarantee, contract, or invariant has been broken, such as when\ninvalid values, contradictory values, or missing values are passed to your\ncode\u2014plus one or more of the following:\n\n* The bad state is something that is unexpected, as opposed to something that\n  will likely happen occasionally, like a user entering data in the wrong\n  format.\n* Your code after this point needs to rely on not being in this bad state,\n  rather than checking for the problem at every step.\n* There\u2019s not a good way to encode this information in the types you use. We\u2019ll\n  work through an example of what we mean in the [\u201cEncoding States and Behavior\n  as Types\u201d][encoding]<!-- ignore --> section of Chapter 17.\n\nIf someone calls your code and passes in values that don\u2019t make sense, it\u2019s\nbest to return an error if you can so the user of the library can decide what\nthey want to do in that case. However, in cases where continuing could be\ninsecure or harmful, the best choice might be to call `panic!` and alert the\nperson using your library to the bug in their code so they can fix it during\ndevelopment. Similarly, `panic!` is often appropriate if you\u2019re calling\nexternal code that is out of your control and it returns an invalid state that\nyou have no way of fixing.\n\nHowever, when failure is expected, it\u2019s more appropriate to return a `Result`\nthan to make a `panic!` call. Examples include a parser being given malformed\ndata or an HTTP request returning a status that indicates you have hit a rate\nlimit. In these cases, returning a `Result` indicates that failure is an\nexpected possibility that the calling code must decide how to handle.\n\nWhen your code performs an operation that could put a user at risk if it\u2019s\ncalled using invalid values, your code should verify the values are valid first\nand panic if the values aren\u2019t valid. This is mostly for safety reasons:\nattempting to operate on invalid data can expose your code to vulnerabilities.\nThis is the main reason the standard library will call `panic!` if you attempt\nan out-of-bounds memory access: trying to access memory that doesn\u2019t belong to\nthe current data structure is a common security problem. Functions often have\n*contracts*: their behavior is only guaranteed if the inputs meet particular\nrequirements. Panicking when the contract is violated makes sense because a\ncontract violation always indicates a caller-side bug and it\u2019s not a kind of\nerror you want the calling code to have to explicitly handle. In fact, there\u2019s\nno reasonable way for calling code to recover; the calling *programmers* need\nto fix the code. Contracts for a function, especially when a violation will\ncause a panic, should be explained in the API documentation for the function.\n\nHowever, having lots of error checks in all of your functions would be verbose\nand annoying. Fortunately, you can use Rust\u2019s type system (and thus the type\nchecking done by the compiler) to do many of the checks for you. If your\nfunction has a particular type as a parameter, you can proceed with your code\u2019s\nlogic knowing that the compiler has already ensured you have a valid value. For\nexample, if you have a type rather than an `Option`, your program expects to\nhave *something* rather than *nothing*. Your code then doesn\u2019t have to handle\ntwo cases for the `Some` and `None` variants: it will only have one case for\ndefinitely having a value. Code trying to pass nothing to your function won\u2019t\neven compile, so your function doesn\u2019t have to check for that case at runtime.\nAnother example is using an unsigned integer type such as `u32`, which ensures\nthe parameter is never negative.\n\n### Creating Custom Types for Validation\n\nLet\u2019s take the idea of using Rust\u2019s type system to ensure we have a valid value\none step further and look at creating a custom type for validation. Recall the\nguessing game in Chapter 2 in which our code asked the user to guess a number\nbetween 1 and 100. We never validated that the user\u2019s guess was between those\nnumbers before checking it against our secret number; we only validated that\nthe guess was positive. In this case, the consequences were not very dire: our\noutput of \u201cToo high\u201d or \u201cToo low\u201d would still be correct. But it would be a\nuseful enhancement to guide the user toward valid guesses and have different\nbehavior when a user guesses a number that\u2019s out of range versus when a user\ntypes, for example, letters instead.\n\nOne way to do this would be to parse the guess as an `i32` instead of only a\n`u32` to allow potentially negative numbers, and then add a check for the\nnumber being in range, like so:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-09-guess-out-of-range/src/main.rs:here}}\n```\n\nThe `if` expression checks whether our value is out of range, tells the user\nabout the problem, and calls `continue` to start the next iteration of the loop\nand ask for another guess. After the `if` expression, we can proceed with the\ncomparisons between `guess` and the secret number knowing that `guess` is\nbetween 1 and 100.\n\nHowever, this is not an ideal solution: if it was absolutely critical that the\nprogram only operated on values between 1 and 100, and it had many functions\nwith this requirement, having a check like this in every function would be\ntedious (and might impact performance).\n\nInstead, we can make a new type and put the validations in a function to create\nan instance of the type rather than repeating the validations everywhere. That\nway, it\u2019s safe for functions to use the new type in their signatures and\nconfidently use the values they receive. Listing 9-13 shows one way to define a\n`Guess` type that will only create an instance of `Guess` if the `new` function\nreceives a value between 1 and 100.\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile requires the `rand` crate. We do want to include it for reader\nexperimentation purposes, but don't want to include it for rustdoc testing\npurposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-13: A `Guess` type that will only continue with\nvalues between 1 and 100</span>\n\nFirst, we define a struct named `Guess` that has a field named `value` that\nholds an `i32`. This is where the number will be stored.\n\nThen we implement an associated function named `new` on `Guess` that creates\ninstances of `Guess` values. The `new` function is defined to have one\nparameter named `value` of type `i32` and to return a `Guess`. The code in the\nbody of the `new` function tests `value` to make sure it\u2019s between 1 and 100.\nIf `value` doesn\u2019t pass this test, we make a `panic!` call, which will alert\nthe programmer who is writing the calling code that they have a bug they need\nto fix, because creating a `Guess` with a `value` outside this range would\nviolate the contract that `Guess::new` is relying on. The conditions in which\n`Guess::new` might panic should be discussed in its public-facing API\ndocumentation; we\u2019ll cover documentation conventions indicating the possibility\nof a `panic!` in the API documentation that you create in Chapter 14. If\n`value` does pass the test, we create a new `Guess` with its `value` field set\nto the `value` parameter and return the `Guess`.\n\nNext, we implement a method named `value` that borrows `self`, doesn\u2019t have any\nother parameters, and returns an `i32`. This kind of method is sometimes called\na *getter*, because its purpose is to get some data from its fields and return\nit. This public method is necessary because the `value` field of the `Guess`\nstruct is private. It\u2019s important that the `value` field be private so code\nusing the `Guess` struct is not allowed to set `value` directly: code outside\nthe module *must* use the `Guess::new` function to create an instance of\n`Guess`, thereby ensuring there\u2019s no way for a `Guess` to have a `value` that\nhasn\u2019t been checked by the conditions in the `Guess::new` function.\n\nA function that has a parameter or returns only numbers between 1 and 100 could\nthen declare in its signature that it takes or returns a `Guess` rather than an\n`i32` and wouldn\u2019t need to do any additional checks in its body.\n\n## Summary\n\nRust\u2019s error handling features are designed to help you write more robust code.\nThe `panic!` macro signals that your program is in a state it can\u2019t handle and\nlets you tell the process to stop instead of trying to proceed with invalid or\nincorrect values. The `Result` enum uses Rust\u2019s type system to indicate that\noperations might fail in a way that your code could recover from. You can use\n`Result` to tell code that calls your code that it needs to handle potential\nsuccess or failure as well. Using `panic!` and `Result` in the appropriate\nsituations will make your code more reliable in the face of inevitable problems.\n\nNow that you\u2019ve seen useful ways that the standard library uses generics with\nthe `Option` and `Result` enums, we\u2019ll talk about how generics work and how you\ncan use them in your code.\n\n[encoding]: ch17-03-oo-design-patterns.html#encoding-states-and-behavior-as-types\n",
          "qas": [
            {
              "question": "What is the most common example of calling 'panic'?",
              "id": 2029,
              "answers": [
                {
                  "text": "if you attempt\nan out-of-bounds memory access: trying to access memory that doesn\u2019t belong to\nthe current data structure is a common security problem",
                  "answer_start": 5993
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I do when someone passes wrong parameters to function?",
              "id": 2026,
              "answers": [
                {
                  "text": "it\u2019s\nbest to return an error if you can so the user of the library can decide what\nthey want to do in that case. However, in cases where continuing could be\ninsecure or harmful, the best choice might be to call `panic!` and alert the\nperson using your library to the bug in their code so they can fix it during\ndevelopment.",
                  "answer_start": 4754
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When should I call 'result'?",
              "id": 2023,
              "answers": [
                {
                  "text": "Therefore, returning `Result` is a\ngood default choice when you\u2019re defining a function that might fail.",
                  "answer_start": 699
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does a 'contract' mean in terms of function?",
              "id": 2031,
              "answers": [
                {
                  "text": "their behavior is only guaranteed if the inputs meet particular\nrequirements",
                  "answer_start": 6178
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be done when fuction contract is violated?",
              "id": 2032,
              "answers": [
                {
                  "text": "Panicking when the contract is violated makes sense because a\ncontract violation always indicates a caller-side bug and it\u2019s not a kind of\nerror you want the calling code to have to explicitly handle. In fact, there\u2019s\nno reasonable way for calling code to recover; the calling *programmers* need\nto fix the code.",
                  "answer_start": 6256
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why should I validate parameters passed to the function?",
              "id": 2028,
              "answers": [
                {
                  "text": "This is mostly for safety reasons:\nattempting to operate on invalid data can expose your code to vulnerabilities.",
                  "answer_start": 5815
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When should I call 'panic'?",
              "id": 2021,
              "answers": [
                {
                  "text": "You could call `panic!`\nfor any error situation, whether there\u2019s a possible way to recover or not, but\nthen you\u2019re making the decision that a situation is unrecoverable on behalf of\nthe calling code",
                  "answer_start": 168
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What could happen when I'm trying to access memory not belonging to current data structure?",
              "id": 2030,
              "answers": [
                {
                  "text": "This is the main reason the standard library will call `panic!`",
                  "answer_start": 5929
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is it better to use panic instead of result?",
              "id": 2019,
              "answers": [
                {
                  "text": "In situations such as examples, prototype code, and tests, it\u2019s more\nappropriate to write code that panics instead of returning a `Result`",
                  "answer_start": 804
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a bad state?",
              "id": 2024,
              "answers": [
                {
                  "text": "a *bad state* is when some\nassumption, guarantee, contract, or invariant has been broken, such as when\ninvalid values, contradictory values, or missing values are passed to your\ncode",
                  "answer_start": 3951
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Packages and Crates\n\nThe first parts of the module system we\u2019ll cover are packages and crates.\n\nA *crate* is the smallest amount of code that the Rust compiler considers at a\ntime. Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in the \u201cWriting and Running a Rust Program\u201d\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we\u2019ll see in the coming sections.\n\nA crate can come in one of two forms: a binary crate or a library crate.\n*Binary crates* are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we\u2019ve\ncreated so far have been binary crates.\n\n*Library crates* don\u2019t have a `main` function, and they don\u2019t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]<!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say \u201ccrate\u201d, they mean library crate, and they\nuse \u201ccrate\u201d interchangeably with the general programming concept of a \u201clibrary\".\n\nThe *crate root* is a source file that the Rust compiler starts from and makes\nup the root module of your crate (we\u2019ll explain modules in depth in the\n[\u201cDefining Modules to Control Scope and Privacy\u201d][modules]<!-- ignore -->\nsection).\n\nA *package* is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a *Cargo.toml* file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command-line tool you\u2019ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand-line tool uses.\n\nA package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that\u2019s a\nlibrary or binary crate.\n\nLet\u2019s walk through what happens when we create a package. First, we enter the\ncommand `cargo new`:\n\n```console\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n```\n\nAfter we run `cargo new`, we use `ls` to see what Cargo creates. In the project\ndirectory, there\u2019s a *Cargo.toml* file, giving us a package. There\u2019s also a\n*src* directory that contains *main.rs*. Open *Cargo.toml* in your text editor,\nand note there\u2019s no mention of *src/main.rs*. Cargo follows a convention that\n*src/main.rs* is the crate root of a binary crate with the same name as the\npackage. Likewise, Cargo knows that if the package directory contains\n*src/lib.rs*, the package contains a library crate with the same name as the\npackage, and *src/lib.rs* is its crate root. Cargo passes the crate root files\nto `rustc` to build the library or binary.\n\nHere, we have a package that only contains *src/main.rs*, meaning it only\ncontains a binary crate named `my-project`. If a package contains *src/main.rs*\nand *src/lib.rs*, it has two crates: a binary and a library, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the *src/bin* directory: each file will be a separate binary crate.\n\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n",
          "qas": [
            {
              "question": "What is the smallest amount of code that the Rust compiler considers at a\ntime?",
              "id": 119,
              "answers": [
                {
                  "text": "A *crate* is the smallest amount of code that the Rust compiler considers at a\ntime.",
                  "answer_start": 99
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are named two forms of the crate?",
              "id": 121,
              "answers": [
                {
                  "text": "A crate can come in one of two forms: a binary crate or a library crate.",
                  "answer_start": 552
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does the cargo contain?",
              "id": 125,
              "answers": [
                {
                  "text": "Cargo is actually a package that contains the binary crate\nfor the command-line tool you\u2019ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on.",
                  "answer_start": 1763
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do library crate work?",
              "id": 123,
              "answers": [
                {
                  "text": "*Library crates* don\u2019t have a `main` function, and they don\u2019t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]\u2039!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say \u201ccrate\u201d, they mean library crate, and they\nuse \u201ccrate\u201d interchangeably with the general programming concept of a \u201clibrary\".",
                  "answer_start": 903
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I will run `rustc` rather than `cargo` and pass a single source code file, what will the compiler consider this file to be?",
              "id": 120,
              "answers": [
                {
                  "text": "Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in the \u201cWriting and Running a Rust Program\u201d\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we\u2019ll see in the coming sections.\n",
                  "answer_start": 184
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How much binary crates and library crates can package contain.",
              "id": 126,
              "answers": [
                {
                  "text": "A package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that\u2019s a\nlibrary or binary crate.",
                  "answer_start": 2078
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Defining and Instantiating Structs\n\nStructs are similar to tuples, discussed in [\u201cThe Tuple Type\u201d][tuples]<!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types. Unlike with tuples, in a struct\nyou\u2019ll name each piece of data so it\u2019s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don\u2019t have to rely\non the order of the data to specify or access the values of an instance.\n\nTo define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct\u2019s name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call *fields*. For example, Listing 5-1 shows a\nstruct that stores information about a user account.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-1: A `User` struct definition</span>\n\nTo use a struct after we\u2019ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing *key:\nvalue* pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don\u2019t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-2: Creating an instance of the `User`\nstruct</span>\n\nTo get a specific value from a struct, we use dot notation. For example, to\naccess this user\u2019s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field. Listing 5-3 shows how to change the value in the `email`\nfield of a mutable `User` instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-3: Changing the value in the `email` field of a\n`User` instance</span>\n\nNote that the entire instance must be mutable; Rust doesn\u2019t allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance.\n\nListing 5-4 shows a `build_user` function that returns a `User` instance with\nthe given email and username. The `active` field gets the value of `true`, and\nthe `sign_in_count` gets a value of `1`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-4: A `build_user` function that takes an email\nand username and returns a `User` instance</span>\n\nIt makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the `email` and `username` field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there\u2019s a convenient shorthand!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\"></a>\n\n### Using the Field Init Shorthand\n\nBecause the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the *field init shorthand* syntax to rewrite\n`build_user` so it behaves exactly the same but doesn\u2019t have the repetition of\n`username` and `email`, as shown in Listing 5-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-5: A `build_user` function that uses field init\nshorthand because the `username` and `email` parameters have the same name as\nstruct fields</span>\n\nHere, we\u2019re creating a new instance of the `User` struct, which has a field\nnamed `email`. We want to set the `email` field\u2019s value to the value in the\n`email` parameter of the `build_user` function. Because the `email` field and\nthe `email` parameter have the same name, we only need to write `email` rather\nthan `email: email`.\n\n### Creating Instances from Other Instances with Struct Update Syntax\n\nIt\u2019s often useful to create a new instance of a struct that includes most of\nthe values from another instance, but changes some. You can do this using\n*struct update syntax*.\n\nFirst, in Listing 5-6 we show how to create a new `User` instance in `user2`\nregularly, without the update syntax. We set a new value for `email` but\notherwise use the same values from `user1` that we created in Listing 5-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-6: Creating a new `User` instance using one of\nthe values from `user1`</span>\n\nUsing struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax `..` specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-7: Using struct update syntax to set a new\n`email` value for a `User` instance but to use the rest of the values from\n`user1`</span>\n\nThe code in Listing 5-7 also creates an instance in `user2` that has a\ndifferent value for `email` but has the same values for the `username`,\n`active`, and `sign_in_count` fields from `user1`. The `..user1` must come last\nto specify that any remaining fields should get their values from the\ncorresponding fields in `user1`, but we can choose to specify values for as\nmany fields as we want in any order, regardless of the order of the fields in\nthe struct\u2019s definition.\n\nNote that the struct update syntax uses `=` like an assignment; this is because\nit moves the data, just as we saw in the [\u201cVariables and Data Interacting with\nMove\u201d][move]<!-- ignore --> section. In this example, we can no longer use\n`user1` as a whole after creating `user2` because the `String` in the\n`username` field of `user1` was moved into `user2`. If we had given `user2` new\n`String` values for both `email` and `username`, and thus only used the\n`active` and `sign_in_count` values from `user1`, then `user1` would still be\nvalid after creating `user2`. Both `active` and `sign_in_count` are types that\nimplement the `Copy` trait, so the behavior we discussed in the [\u201cStack-Only\nData: Copy\u201d][copy]<!-- ignore --> section would apply.\n\n### Using Tuple Structs Without Named Fields to Create Different Types\n\nRust also supports structs that look similar to tuples, called *tuple structs*.\nTuple structs have the added meaning the struct name provides but don\u2019t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.\n\nTo define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple. For example, here we define and use two\ntuple structs named `Color` and `Point`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-01-tuple-structs/src/main.rs}}\n```\n\nNote that the `black` and `origin` values are different types because they\u2019re\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct might have the same types. For\nexample, a function that takes a parameter of type `Color` cannot take a\n`Point` as an argument, even though both types are made up of three `i32`\nvalues. Otherwise, tuple struct instances are similar to tuples in that you can\ndestructure them into their individual pieces, and you can use a `.` followed\nby the index to access an individual value.\n\n### Unit-Like Structs Without Any Fields\n\nYou can also define structs that don\u2019t have any fields! These are called\n*unit-like structs* because they behave similarly to `()`, the unit type that\nwe mentioned in [\u201cThe Tuple Type\u201d][tuples]<!-- ignore --> section. Unit-like\nstructs can be useful when you need to implement a trait on some type but don\u2019t\nhave any data that you want to store in the type itself. We\u2019ll discuss traits\nin Chapter 10. Here\u2019s an example of declaring and instantiating a unit struct\nnamed `AlwaysEqual`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-04-unit-like-structs/src/main.rs}}\n```\n\nTo define `AlwaysEqual`, we use the `struct` keyword, the name we want, and\nthen a semicolon. No need for curly brackets or parentheses! Then we can get an\ninstance of `AlwaysEqual` in the `subject` variable in a similar way: using the\nname we defined, without any curly brackets or parentheses. Imagine that later\nwe\u2019ll implement behavior for this type such that every instance of\n`AlwaysEqual` is always equal to every instance of any other type, perhaps to\nhave a known result for testing purposes. We wouldn\u2019t need any data to\nimplement that behavior! You\u2019ll see in Chapter 10 how to define traits and\nimplement them on any type, including unit-like structs.\n\n> ### Ownership of Struct Data\n>\n> In the `User` struct definition in Listing 5-1, we used the owned `String`\n> type rather than the `&str` string slice type. This is a deliberate choice\n> because we want each instance of this struct to own all of its data and for\n> that data to be valid for as long as the entire struct is valid.\n>\n> It\u2019s also possible for structs to store references to data owned by something\n> else, but to do so requires the use of *lifetimes*, a Rust feature that we\u2019ll\n> discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is. Let\u2019s say you try to store a reference\n> in a struct without specifying lifetimes, like the following; this won\u2019t work:\n>\n> <span class=\"filename\">Filename: src/main.rs</span>\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore,does_not_compile\n> struct User {\n>     active: bool,\n>     username: &str,\n>     email: &str,\n>     sign_in_count: u64,\n> }\n>\n> fn main() {\n>     let user1 = User {\n>         active: true,\n>         username: \"someusername123\",\n>         email: \"someone@example.com\",\n>         sign_in_count: 1,\n>     };\n> }\n> ```\n>\n> The compiler will complain that it needs lifetime specifiers:\n>\n> ```console\n> $ cargo run\n>    Compiling structs v0.1.0 (file:///projects/structs)\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:3:15\n>   |\n> 3 |     username: &str,\n>   |               ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 ~     username: &'a str,\n>   |\n>\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:4:12\n>   |\n> 4 |     email: &str,\n>   |            ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 |     username: &str,\n> 4 ~     email: &'a str,\n>   |\n>\n> For more information about this error, try `rustc --explain E0106`.\n> error: could not compile `structs` due to 2 previous errors\n> ```\n>\n> In Chapter 10, we\u2019ll discuss how to fix these errors so you can store\n> references in structs, but for now, we\u2019ll fix errors like these using owned\n> types like `String` instead of references like `&str`.\n\n<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->\n\n[tuples]: ch03-02-data-types.html#the-tuple-type\n[move]: ch04-01-what-is-ownership.html#variables-and-data-interacting-with-move\n[copy]: ch04-01-what-is-ownership.html#stack-only-data-copy\n",
          "qas": [
            {
              "question": "What are the similarities between tuples and structs?",
              "id": 45,
              "answers": [
                {
                  "text": "Structs are similar to tuples, discussed in [\u201cThe Tuple Type\u201d][tuples]\u2039!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types.",
                  "answer_start": 39
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what are unit-like structs?",
              "id": 56,
              "answers": [
                {
                  "text": "Unit-like\nstructs can be useful when you need to implement a trait on some type but don\u2019t\nhave any data that you want to store in the type itself.",
                  "answer_start": 9188
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What lifetimes ensure?",
              "id": 58,
              "answers": [
                {
                  "text": "Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is",
                  "answer_start": 10827
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create an instance of the struct?",
              "id": 49,
              "answers": [
                {
                  "text": "we create an *instance* of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing *key:\nvalue* pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don\u2019t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type.",
                  "answer_start": 1153
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I create to use a struct after I defined it?",
              "id": 48,
              "answers": [
                {
                  "text": "To use a struct after we\u2019ve defined it, we create an *instance* of that struct\nby specifying concrete values for each of the fields. ",
                  "answer_start": 1113
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can \"tuple structs\" do?",
              "id": 53,
              "answers": [
                {
                  "text": "Rust also supports structs that look similar to tuples, called *tuple structs*.\nTuple structs have the added meaning the struct name provides but don\u2019t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.",
                  "answer_start": 7522
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between structs and tuples?",
              "id": 46,
              "answers": [
                {
                  "text": "Unlike with tuples, in a struct\nyou\u2019ll name each piece of data so it\u2019s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don\u2019t have to rely\non the order of the data to specify or access the values of an instance.",
                  "answer_start": 237
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to define a tuple struct?",
              "id": 54,
              "answers": [
                {
                  "text": "To define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple.",
                  "answer_start": 7970
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to define struct?",
              "id": 47,
              "answers": [
                {
                  "text": "To define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct\u2019s name should describe the significance of the pieces of data being\ngrouped together.",
                  "answer_start": 502
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Error Handling\n\nErrors are a fact of life in software, so Rust has a number of features for\nhandling situations in which something goes wrong. In many cases, Rust requires\nyou to acknowledge the possibility of an error and take some action before your\ncode will compile. This requirement makes your program more robust by ensuring\nthat you\u2019ll discover errors and handle them appropriately before you\u2019ve\ndeployed your code to production!\n\nRust groups errors into two major categories: *recoverable* and *unrecoverable*\nerrors. For a recoverable error, such as a *file not found* error, we most\nlikely just want to report the problem to the user and retry the operation.\nUnrecoverable errors are always symptoms of bugs, like trying to access a\nlocation beyond the end of an array, and so we want to immediately stop the\nprogram.\n\nMost languages don\u2019t distinguish between these two kinds of errors and handle\nboth in the same way, using mechanisms such as exceptions. Rust doesn\u2019t have\nexceptions. Instead, it has the type `Result<T, E>` for recoverable errors and\nthe `panic!` macro that stops execution when the program encounters an\nunrecoverable error. This chapter covers calling `panic!` first and then talks\nabout returning `Result<T, E>` values. Additionally, we\u2019ll explore\nconsiderations when deciding whether to try to recover from an error or to stop\nexecution.\n",
          "qas": [
            {
              "question": "What could be an example of recoverable error?",
              "id": 2181,
              "answers": [
                {
                  "text": "*file not found* error",
                  "answer_start": 563
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I do with a recoverable error?",
              "id": 2182,
              "answers": [
                {
                  "text": "we most\nlikely just want to report the problem to the user and retry the operation",
                  "answer_start": 587
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be used for unrecoverable errors?",
              "id": 2186,
              "answers": [
                {
                  "text": "`panic!` macro",
                  "answer_start": 1069
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an example of unrecoverable error?",
              "id": 2183,
              "answers": [
                {
                  "text": "trying to access a\nlocation beyond the end of an array",
                  "answer_start": 726
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust language contain exceptions?",
              "id": 2184,
              "answers": [
                {
                  "text": "Rust doesn\u2019t have\nexceptions",
                  "answer_start": 968
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be used to handle recoverable error?",
              "id": 2185,
              "answers": [
                {
                  "text": "`Result\u2039T, E>`",
                  "answer_start": 1023
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we categorize errors?",
              "id": 2180,
              "answers": [
                {
                  "text": "into two major categories: *recoverable* and *unrecoverable*",
                  "answer_start": 459
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix A: Keywords\n\nThe following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we\u2019ll discuss in the \u201c[Raw\nIdentifiers][raw-identifiers]<!-- ignore -->\u201d section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes.\n\n[raw-identifiers]: #raw-identifiers\n\n### Keywords Currently in Use\n\nThe following is a list of keywords currently in use, with their functionality\ndescribed.\n\n* `as` - perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` statements\n* `async` -  return a `Future` instead of blocking the current thread\n* `await` - suspend execution until the result of a `Future` is ready\n* `break` - exit a loop immediately\n* `const` - define constant items or constant raw pointers\n* `continue` - continue to the next loop iteration\n* `crate` - in a module path, refers to the crate root\n* `dyn` - dynamic dispatch to a trait object\n* `else` - fallback for `if` and `if let` control flow constructs\n* `enum` - define an enumeration\n* `extern` - link an external function or variable\n* `false` - Boolean false literal\n* `fn` - define a function or the function pointer type\n* `for` - loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime\n* `if` - branch based on the result of a conditional expression\n* `impl` - implement inherent or trait functionality\n* `in` - part of `for` loop syntax\n* `let` - bind a variable\n* `loop` - loop unconditionally\n* `match` - match a value to patterns\n* `mod` - define a module\n* `move` - make a closure take ownership of all its captures\n* `mut` - denote mutability in references, raw pointers, or pattern bindings\n* `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n* `ref` - bind by reference\n* `return` - return from function\n* `Self` - a type alias for the type we are defining or implementing\n* `self` - method subject or current module\n* `static` - global variable or lifetime lasting the entire program execution\n* `struct` - define a structure\n* `super` - parent module of the current module\n* `trait` - define a trait\n* `true` - Boolean true literal\n* `type` - define a type alias or associated type\n* `union` - define a [union][union]<!-- ignore -->; is only a keyword when used\n  in a union declaration\n* `unsafe` - denote unsafe code, functions, traits, or implementations\n* `use` - bring symbols into scope\n* `where` - denote clauses that constrain a type\n* `while` - loop conditionally based on the result of an expression\n\n[union]: ../reference/items/unions.html\n\n### Keywords Reserved for Future Use\n\nThe following keywords do not yet have any functionality but are reserved by\nRust for potential future use.\n\n* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`\n\n### Raw Identifiers\n\n*Raw identifiers* are the syntax that lets you use keywords where they wouldn\u2019t\nnormally be allowed. You use a raw identifier by prefixing a keyword with `r#`.\n\nFor example, `match` is a keyword. If you try to compile the following function\nthat uses `match` as its name:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\nfn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n```\n\nyou\u2019ll get this error:\n\n```text\nerror: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n```\n\nThe error shows that you can\u2019t use the keyword `match` as the function\nidentifier. To use `match` as a function name, you need to use the raw\nidentifier syntax, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}\n```\n\nThis code will compile without any errors. Note the `r#` prefix on the function\nname in its definition as well as where the function is called in `main`.\n\nRaw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to\nchoose identifier names, as well as lets us integrate with programs written in\na language where these words aren\u2019t keywords. In addition, raw identifiers\nallow you to use libraries written in a different Rust edition than your crate\nuses. For example, `try` isn\u2019t a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that\u2019s written using the 2015 edition and\nhas a `try` function, you\u2019ll need to use the raw identifier syntax, `r#try` in\nthis case, to call that function from your 2018 edition code. See [Appendix\nE][appendix-e]<!-- ignore --> for more information on editions.\n\n[appendix-e]: appendix-05-editions.html\n",
          "qas": [
            {
              "question": "What is the fallback for 'if' and 'if let' control flow?",
              "id": 10,
              "answers": [
                {
                  "text": "else",
                  "answer_start": 1126
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a syntax that lets us use keywords where they wouldn't be allowed?",
              "id": 45,
              "answers": [
                {
                  "text": "Raw identifiers",
                  "answer_start": 3071
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I loop conditionally based on the result of an expression?",
              "id": 41,
              "answers": [
                {
                  "text": "while",
                  "answer_start": 2660
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the raw identifiers?",
              "id": 44,
              "answers": [
                {
                  "text": "syntax that lets you use keywords where they wouldn\u2019t\nnormally be allowed",
                  "answer_start": 3096
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'trait' doing?",
              "id": 33,
              "answers": [
                {
                  "text": "define a trait",
                  "answer_start": 2300
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'unsafe' do?",
              "id": 38,
              "answers": [
                {
                  "text": "denote unsafe code, functions, traits, or implementations",
                  "answer_start": 2515
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of 'mut'?",
              "id": 24,
              "answers": [
                {
                  "text": "denote mutability in references, raw pointers, or pattern bindings",
                  "answer_start": 1809
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword defines function?",
              "id": 14,
              "answers": [
                {
                  "text": "fn",
                  "answer_start": 1310
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are identifiers?",
              "id": 1,
              "answers": [
                {
                  "text": "names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes",
                  "answer_start": 301
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I take ownership of all captures?",
              "id": 23,
              "answers": [
                {
                  "text": "move",
                  "answer_start": 1741
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What defines a union?",
              "id": 37,
              "answers": [
                {
                  "text": "union",
                  "answer_start": 2400
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'const' doing?",
              "id": 7,
              "answers": [
                {
                  "text": "define constant items or constant raw pointers",
                  "answer_start": 925
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can keywords be used as identifiers?",
              "id": 2,
              "answers": [
                {
                  "text": "they cannot be used as identifiers",
                  "answer_start": 137
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a keyword for a type alias when we are defining or implementing the type?",
              "id": 28,
              "answers": [
                {
                  "text": "Self",
                  "answer_start": 2020
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword return a 'Future' instead of blocking the current thread?",
              "id": 4,
              "answers": [
                {
                  "text": "async",
                  "answer_start": 740
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keywords do not have any functionality yet?",
              "id": 42,
              "answers": [
                {
                  "text": "* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`",
                  "answer_start": 2914
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keywords are reserved for future use?",
              "id": 43,
              "answers": [
                {
                  "text": "* `abstract`\n* `become`\n* `box`\n* `do`\n* `final`\n* `macro`\n* `override`\n* `priv`\n* `try`\n* `typeof`\n* `unsized`\n* `virtual`\n* `yield`",
                  "answer_start": 2914
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'true' mean?",
              "id": 34,
              "answers": [
                {
                  "text": "Boolean true literal",
                  "answer_start": 2326
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'struct' keyword do?",
              "id": 31,
              "answers": [
                {
                  "text": "define a structure",
                  "answer_start": 2221
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What word is only a keyword when used in a union declaration?",
              "id": 36,
              "answers": [
                {
                  "text": "union",
                  "answer_start": 2400
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'return' doing?",
              "id": 27,
              "answers": [
                {
                  "text": "return from function",
                  "answer_start": 1996
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'for' keyword do?",
              "id": 15,
              "answers": [
                {
                  "text": "loop over items from an iterator, implement a trait, or specify a\n  higher-ranked lifetime",
                  "answer_start": 1373
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'match' doing?",
              "id": 21,
              "answers": [
                {
                  "text": " match a value to patterns",
                  "answer_start": 1685
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I refer to method subject or current module?",
              "id": 29,
              "answers": [
                {
                  "text": "self",
                  "answer_start": 2089
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I denote public visibility in struct, impl or modules",
              "id": 25,
              "answers": [
                {
                  "text": "pub",
                  "answer_start": 1879
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What 'crate' keyword does?",
              "id": 9,
              "answers": [
                {
                  "text": "in a module path, refers to the crate root",
                  "answer_start": 1035
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'as' keyword do?",
              "id": 3,
              "answers": [
                {
                  "text": "perform primitive casting, disambiguate the specific trait containing\n  an item, or rename items in `use` statements",
                  "answer_start": 620
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I link an external function or variable?",
              "id": 12,
              "answers": [
                {
                  "text": "extern",
                  "answer_start": 1225
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I bind by reference?",
              "id": 26,
              "answers": [
                {
                  "text": "ref",
                  "answer_start": 1958
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is boolean false literal called?",
              "id": 13,
              "answers": [
                {
                  "text": "false",
                  "answer_start": 1276
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What defines a type alias?",
              "id": 35,
              "answers": [
                {
                  "text": "type",
                  "answer_start": 2350
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'if'?",
              "id": 16,
              "answers": [
                {
                  "text": "branch based on the result of a conditional expression",
                  "answer_start": 1473
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'in'?",
              "id": 18,
              "answers": [
                {
                  "text": "part of `for` loop syntax",
                  "answer_start": 1590
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'enum'",
              "id": 11,
              "answers": [
                {
                  "text": "define an enumeration",
                  "answer_start": 1200
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what are we using 'where' keyword",
              "id": 40,
              "answers": [
                {
                  "text": "denote clauses that constrain a type",
                  "answer_start": 2620
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'impl' doing?",
              "id": 17,
              "answers": [
                {
                  "text": "implement inherent or trait functionality",
                  "answer_start": 1539
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do raw identifiers allow as to do?",
              "id": 46,
              "answers": [
                {
                  "text": "use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword",
                  "answer_start": 4287
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can I exit a loop immediately?",
              "id": 6,
              "answers": [
                {
                  "text": "break",
                  "answer_start": 880
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I continue to the next loop iteration?",
              "id": 8,
              "answers": [
                {
                  "text": "continue",
                  "answer_start": 975
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Unsafe Rust\n\nAll the code we\u2019ve discussed so far has had Rust\u2019s memory safety guarantees\nenforced at compile time. However, Rust has a second language hidden inside it\nthat doesn\u2019t enforce these memory safety guarantees: it\u2019s called *unsafe Rust*\nand works just like regular Rust, but gives us extra superpowers.\n\nUnsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit\u2019s better for it to reject some valid programs than to accept some invalid\nprograms. Although the code *might* be okay, if the Rust compiler doesn\u2019t have\nenough information to be confident, it will reject the code. In these cases,\nyou can use unsafe code to tell the compiler, \u201cTrust me, I know what I\u2019m\ndoing.\u201d Be warned, however, that you use unsafe Rust at your own risk: if you\nuse unsafe code incorrectly, problems can occur due to memory unsafety, such as\nnull pointer dereferencing.\n\nAnother reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn\u2019t let you do unsafe operations, you\ncouldn\u2019t do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let\u2019s explore what we can do with unsafe\nRust and how to do it.\n\n### Unsafe Superpowers\n\nTo switch to unsafe Rust, use the `unsafe` keyword and then start a new block\nthat holds the unsafe code. You can take five actions in unsafe Rust that you\ncan\u2019t in safe Rust, which we call *unsafe superpowers*. Those superpowers\ninclude the ability to:\n\n* Dereference a raw pointer\n* Call an unsafe function or method\n* Access or modify a mutable static variable\n* Implement an unsafe trait\n* Access fields of `union`s\n\nIt\u2019s important to understand that `unsafe` doesn\u2019t turn off the borrow checker\nor disable any other of Rust\u2019s safety checks: if you use a reference in unsafe\ncode, it will still be checked. The `unsafe` keyword only gives you access to\nthese five features that are then not checked by the compiler for memory\nsafety. You\u2019ll still get some degree of safety inside of an unsafe block.\n\nIn addition, `unsafe` does not mean the code inside the block is necessarily\ndangerous or that it will definitely have memory safety problems: the intent is\nthat as the programmer, you\u2019ll ensure the code inside an `unsafe` block will\naccess memory in a valid way.\n\nPeople are fallible, and mistakes will happen, but by requiring these five\nunsafe operations to be inside blocks annotated with `unsafe` you\u2019ll know that\nany errors related to memory safety must be within an `unsafe` block. Keep\n`unsafe` blocks small; you\u2019ll be thankful later when you investigate memory\nbugs.\n\nTo isolate unsafe code as much as possible, it\u2019s best to enclose unsafe code\nwithin a safe abstraction and provide a safe API, which we\u2019ll discuss later in\nthe chapter when we examine unsafe functions and methods. Parts of the standard\nlibrary are implemented as safe abstractions over unsafe code that has been\naudited. Wrapping unsafe code in a safe abstraction prevents uses of `unsafe`\nfrom leaking out into all the places that you or your users might want to use\nthe functionality implemented with `unsafe` code, because using a safe\nabstraction is safe.\n\nLet\u2019s look at each of the five unsafe superpowers in turn. We\u2019ll also look at\nsome abstractions that provide a safe interface to unsafe code.\n\n### Dereferencing a Raw Pointer\n\nIn Chapter 4, in the [\u201cDangling References\u201d][dangling-references]<!-- ignore\n--> section, we mentioned that the compiler ensures references are always\nvalid. Unsafe Rust has two new types called *raw pointers* that are similar to\nreferences. As with references, raw pointers can be immutable or mutable and\nare written as `*const T` and `*mut T`, respectively. The asterisk isn\u2019t the\ndereference operator; it\u2019s part of the type name. In the context of raw\npointers, *immutable* means that the pointer can\u2019t be directly assigned to\nafter being dereferenced.\n\nDifferent from references and smart pointers, raw pointers:\n\n* Are allowed to ignore the borrowing rules by having both immutable and\n  mutable pointers or multiple mutable pointers to the same location\n* Aren\u2019t guaranteed to point to valid memory\n* Are allowed to be null\n* Don\u2019t implement any automatic cleanup\n\nBy opting out of having Rust enforce these guarantees, you can give up\nguaranteed safety in exchange for greater performance or the ability to\ninterface with another language or hardware where Rust\u2019s guarantees don\u2019t apply.\n\nListing 19-1 shows how to create an immutable and a mutable raw pointer from\nreferences.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-1: Creating raw pointers from references</span>\n\nNotice that we don\u2019t include the `unsafe` keyword in this code. We can create\nraw pointers in safe code; we just can\u2019t dereference raw pointers outside an\nunsafe block, as you\u2019ll see in a bit.\n\nWe\u2019ve created raw pointers by using `as` to cast an immutable and a mutable\nreference into their corresponding raw pointer types. Because we created them\ndirectly from references guaranteed to be valid, we know these particular raw\npointers are valid, but we can\u2019t make that assumption about just any raw\npointer.\n\nTo demonstrate this, next we\u2019ll create a raw pointer whose validity we can\u2019t be\nso certain of. Listing 19-2 shows how to create a raw pointer to an arbitrary\nlocation in memory. Trying to use arbitrary memory is undefined: there might be\ndata at that address or there might not, the compiler might optimize the code\nso there is no memory access, or the program might error with a segmentation\nfault. Usually, there is no good reason to write code like this, but it is\npossible.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-2: Creating a raw pointer to an arbitrary\nmemory address</span>\n\nRecall that we can create raw pointers in safe code, but we can\u2019t *dereference*\nraw pointers and read the data being pointed to. In Listing 19-3, we use the\ndereference operator `*` on a raw pointer that requires an `unsafe` block.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-3: Dereferencing raw pointers within an\n`unsafe` block</span>\n\nCreating a pointer does no harm; it\u2019s only when we try to access the value that\nit points at that we might end up dealing with an invalid value.\n\nNote also that in Listing 19-1 and 19-3, we created `*const i32` and `*mut i32`\nraw pointers that both pointed to the same memory location, where `num` is\nstored. If we instead tried to create an immutable and a mutable reference to\n`num`, the code would not have compiled because Rust\u2019s ownership rules don\u2019t\nallow a mutable reference at the same time as any immutable references. With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race. Be careful!\n\nWith all of these dangers, why would you ever use raw pointers? One major use\ncase is when interfacing with C code, as you\u2019ll see in the next section,\n[\u201cCalling an Unsafe Function or\nMethod.\u201d](#calling-an-unsafe-function-or-method)<!-- ignore --> Another case is\nwhen building up safe abstractions that the borrow checker doesn\u2019t understand.\nWe\u2019ll introduce unsafe functions and then look at an example of a safe\nabstraction that uses unsafe code.\n\n### Calling an Unsafe Function or Method\n\nThe second type of operation you can perform in an unsafe block is calling\nunsafe functions. Unsafe functions and methods look exactly like regular\nfunctions and methods, but they have an extra `unsafe` before the rest of the\ndefinition. The `unsafe` keyword in this context indicates the function has\nrequirements we need to uphold when we call this function, because Rust can\u2019t\nguarantee we\u2019ve met these requirements. By calling an unsafe function within an\n`unsafe` block, we\u2019re saying that we\u2019ve read this function\u2019s documentation and\ntake responsibility for upholding the function\u2019s contracts.\n\nHere is an unsafe function named `dangerous` that doesn\u2019t do anything in its\nbody:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-01-unsafe-fn/src/main.rs:here}}\n```\n\nWe must call the `dangerous` function within a separate `unsafe` block. If we\ntry to call `dangerous` without the `unsafe` block, we\u2019ll get an error:\n\n```console\n{{#include ../listings/ch19-advanced-features/output-only-01-missing-unsafe/output.txt}}\n```\n\nWith the `unsafe` block, we\u2019re asserting to Rust that we\u2019ve read the function\u2019s\ndocumentation, we understand how to use it properly, and we\u2019ve verified that\nwe\u2019re fulfilling the contract of the function.\n\nBodies of unsafe functions are effectively `unsafe` blocks, so to perform other\nunsafe operations within an unsafe function, we don\u2019t need to add another\n`unsafe` block.\n\n#### Creating a Safe Abstraction over Unsafe Code\n\nJust because a function contains unsafe code doesn\u2019t mean we need to mark the\nentire function as unsafe. In fact, wrapping unsafe code in a safe function is\na common abstraction. As an example, let\u2019s study the `split_at_mut` function\nfrom the standard library, which requires some unsafe code. We\u2019ll explore how\nwe might implement it. This safe method is defined on mutable slices: it takes\none slice and makes it two by splitting the slice at the index given as an\nargument. Listing 19-4 shows how to use `split_at_mut`.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-4: Using the safe `split_at_mut`\nfunction</span>\n\nWe can\u2019t implement this function using only safe Rust. An attempt might look\nsomething like Listing 19-5, which won\u2019t compile. For simplicity, we\u2019ll\nimplement `split_at_mut` as a function rather than a method and only for slices\nof `i32` values rather than for a generic type `T`.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-5: An attempted implementation of\n`split_at_mut` using only safe Rust</span>\n\nThis function first gets the total length of the slice. Then it asserts that\nthe index given as a parameter is within the slice by checking whether it\u2019s\nless than or equal to the length. The assertion means that if we pass an index\nthat is greater than the length to split the slice at, the function will panic\nbefore it attempts to use that index.\n\nThen we return two mutable slices in a tuple: one from the start of the\noriginal slice to the `mid` index and another from `mid` to the end of the\nslice.\n\nWhen we try to compile the code in Listing 19-5, we\u2019ll get an error.\n\n```console\n{{#include ../listings/ch19-advanced-features/listing-19-05/output.txt}}\n```\n\nRust\u2019s borrow checker can\u2019t understand that we\u2019re borrowing different parts of\nthe slice; it only knows that we\u2019re borrowing from the same slice twice.\nBorrowing different parts of a slice is fundamentally okay because the two\nslices aren\u2019t overlapping, but Rust isn\u2019t smart enough to know this. When we\nknow code is okay, but Rust doesn\u2019t, it\u2019s time to reach for unsafe code.\n\nListing 19-6 shows how to use an `unsafe` block, a raw pointer, and some calls\nto unsafe functions to make the implementation of `split_at_mut` work.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-6: Using unsafe code in the implementation of\nthe `split_at_mut` function</span>\n\nRecall from [\u201cThe Slice Type\u201d][the-slice-type]<!-- ignore --> section in\nChapter 4 that slices are a pointer to some data and the length of the slice.\nWe use the `len` method to get the length of a slice and the `as_mut_ptr`\nmethod to access the raw pointer of a slice. In this case, because we have a\nmutable slice to `i32` values, `as_mut_ptr` returns a raw pointer with the type\n`*mut i32`, which we\u2019ve stored in the variable `ptr`.\n\nWe keep the assertion that the `mid` index is within the slice. Then we get to\nthe unsafe code: the `slice::from_raw_parts_mut` function takes a raw pointer\nand a length, and it creates a slice. We use this function to create a slice\nthat starts from `ptr` and is `mid` items long. Then we call the `add`\nmethod on `ptr` with `mid` as an argument to get a raw pointer that starts at\n`mid`, and we create a slice using that pointer and the remaining number of\nitems after `mid` as the length.\n\nThe function `slice::from_raw_parts_mut` is unsafe because it takes a raw\npointer and must trust that this pointer is valid. The `add` method on raw\npointers is also unsafe, because it must trust that the offset location is also\na valid pointer. Therefore, we had to put an `unsafe` block around our calls to\n`slice::from_raw_parts_mut` and `add` so we could call them. By looking at\nthe code and by adding the assertion that `mid` must be less than or equal to\n`len`, we can tell that all the raw pointers used within the `unsafe` block\nwill be valid pointers to data within the slice. This is an acceptable and\nappropriate use of `unsafe`.\n\nNote that we don\u2019t need to mark the resulting `split_at_mut` function as\n`unsafe`, and we can call this function from safe Rust. We\u2019ve created a safe\nabstraction to the unsafe code with an implementation of the function that uses\n`unsafe` code in a safe way, because it creates only valid pointers from the\ndata this function has access to.\n\nIn contrast, the use of `slice::from_raw_parts_mut` in Listing 19-7 would\nlikely crash when the slice is used. This code takes an arbitrary memory\nlocation and creates a slice 10,000 items long.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-7: Creating a slice from an arbitrary memory\nlocation</span>\n\nWe don\u2019t own the memory at this arbitrary location, and there is no guarantee\nthat the slice this code creates contains valid `i32` values. Attempting to use\n`values` as though it\u2019s a valid slice results in undefined behavior.\n\n#### Using `extern` Functions to Call External Code\n\nSometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has the keyword `extern` that facilitates the creation\nand use of a *Foreign Function Interface (FFI)*. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions.\n\nListing 19-8 demonstrates how to set up an integration with the `abs` function\nfrom the C standard library. Functions declared within `extern` blocks are\nalways unsafe to call from Rust code. The reason is that other languages don\u2019t\nenforce Rust\u2019s rules and guarantees, and Rust can\u2019t check them, so\nresponsibility falls on the programmer to ensure safety.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-8: Declaring and calling an `extern` function\ndefined in another language</span>\n\nWithin the `extern \"C\"` block, we list the names and signatures of external\nfunctions from another language we want to call. The `\"C\"` part defines which\n*application binary interface (ABI)* the external function uses: the ABI\ndefines how to call the function at the assembly level. The `\"C\"` ABI is the\nmost common and follows the C programming language\u2019s ABI.\n\n> #### Calling Rust Functions from Other Languages\n>\n> We can also use `extern` to create an interface that allows other languages\n> to call Rust functions. Instead of creating a whole `extern` block, we add\n> the `extern` keyword and specify the ABI to use just before the `fn` keyword\n> for the relevant function. We also need to add a `#[no_mangle]` annotation to\n> tell the Rust compiler not to mangle the name of this function. *Mangling* is\n> when a compiler changes the name we\u2019ve given a function to a different name\n> that contains more information for other parts of the compilation process to\n> consume but is less human readable. Every programming language compiler\n> mangles names slightly differently, so for a Rust function to be nameable by\n> other languages, we must disable the Rust compiler\u2019s name mangling.\n>\n> In the following example, we make the `call_from_c` function accessible from\n> C code, after it\u2019s compiled to a shared library and linked from C:\n>\n> ```rust\n> #[no_mangle]\n> pub extern \"C\" fn call_from_c() {\n>     println!(\"Just called a Rust function from C!\");\n> }\n> ```\n>\n> This usage of `extern` does not require `unsafe`.\n\n### Accessing or Modifying a Mutable Static Variable\n\nIn this book, we\u2019ve not yet talked about *global variables*, which Rust does\nsupport but can be problematic with Rust\u2019s ownership rules. If two threads are\naccessing the same mutable global variable, it can cause a data race.\n\nIn Rust, global variables are called *static* variables. Listing 19-9 shows an\nexample declaration and use of a static variable with a string slice as a\nvalue.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-9: Defining and using an immutable static\nvariable</span>\n\nStatic variables are similar to constants, which we discussed in the\n[\u201cDifferences Between Variables and\nConstants\u201d][differences-between-variables-and-constants]<!-- ignore --> section\nin Chapter 3. The names of static variables are in `SCREAMING_SNAKE_CASE` by\nconvention. Static variables can only store references with the `'static`\nlifetime, which means the Rust compiler can figure out the lifetime and we\naren\u2019t required to annotate it explicitly. Accessing an immutable static\nvariable is safe.\n\nA subtle difference between constants and immutable static variables is that\nvalues in a static variable have a fixed address in memory. Using the value\nwill always access the same data. Constants, on the other hand, are allowed to\nduplicate their data whenever they\u2019re used. Another difference is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n*unsafe*. Listing 19-10 shows how to declare, access, and modify a mutable\nstatic variable named `COUNTER`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-10: Reading from or writing to a mutable\nstatic variable is unsafe</span>\n\nAs with regular variables, we specify mutability using the `mut` keyword. Any\ncode that reads or writes from `COUNTER` must be within an `unsafe` block. This\ncode compiles and prints `COUNTER: 3` as we would expect because it\u2019s single\nthreaded. Having multiple threads access `COUNTER` would likely result in data\nraces.\n\nWith mutable data that is globally accessible, it\u2019s difficult to ensure there\nare no data races, which is why Rust considers mutable static variables to be\nunsafe. Where possible, it\u2019s preferable to use the concurrency techniques and\nthread-safe smart pointers we discussed in Chapter 16 so the compiler checks\nthat data accessed from different threads is done safely.\n\n### Implementing an Unsafe Trait\n\nWe can use `unsafe` to implement an unsafe trait. A trait is unsafe when at\nleast one of its methods has some invariant that the compiler can\u2019t verify. We\ndeclare that a trait is `unsafe` by adding the `unsafe` keyword before `trait`\nand marking the implementation of the trait as `unsafe` too, as shown in\nListing 19-11.\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-11: Defining and implementing an unsafe\ntrait</span>\n\nBy using `unsafe impl`, we\u2019re promising that we\u2019ll uphold the invariants that\nthe compiler can\u2019t verify.\n\nAs an example, recall the `Sync` and `Send` marker traits we discussed in the\n[\u201cExtensible Concurrency with the `Sync` and `Send`\nTraits\u201d][extensible-concurrency-with-the-sync-and-send-traits]<!-- ignore -->\nsection in Chapter 16: the compiler implements these traits automatically if\nour types are composed entirely of `Send` and `Sync` types. If we implement a\ntype that contains a type that is not `Send` or `Sync`, such as raw pointers,\nand we want to mark that type as `Send` or `Sync`, we must use `unsafe`. Rust\ncan\u2019t verify that our type upholds the guarantees that it can be safely sent\nacross threads or accessed from multiple threads; therefore, we need to do\nthose checks manually and indicate as such with `unsafe`.\n\n### Accessing Fields of a Union\n\nThe final action that works only with `unsafe` is accessing fields of a\n*union*. A `union` is similar to a `struct`, but only one declared field is\nused in a particular instance at one time. Unions are primarily used to\ninterface with unions in C code. Accessing union fields is unsafe because Rust\ncan\u2019t guarantee the type of the data currently being stored in the union\ninstance. You can learn more about unions in [the Rust Reference][reference].\n\n### When to Use Unsafe Code\n\nUsing `unsafe` to take one of the five actions (superpowers) just discussed\nisn\u2019t wrong or even frowned upon. But it is trickier to get `unsafe` code\ncorrect because the compiler can\u2019t help uphold memory safety. When you have a\nreason to use `unsafe` code, you can do so, and having the explicit `unsafe`\nannotation makes it easier to track down the source of problems when they occur.\n\n[dangling-references]:\nch04-02-references-and-borrowing.html#dangling-references\n[differences-between-variables-and-constants]:\nch03-01-variables-and-mutability.html#constants\n[extensible-concurrency-with-the-sync-and-send-traits]:\nch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits\n[the-slice-type]: ch04-03-slices.html#the-slice-type\n[reference]: ../reference/items/unions.html\n",
          "qas": [
            {
              "question": "Does Rust have unsafe traits?",
              "id": 69,
              "answers": [
                {
                  "text": "We can use `unsafe` to implement an unsafe trait. A trait is unsafe when at\nleast one of its methods has some invariant that the compiler can\u2019t verify. We\ndeclare that a trait is `unsafe` by adding the `unsafe` keyword before `trait`\nand marking the implementation of the trait as `unsafe` too",
                  "answer_start": 19638
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What it the history behind unsafe Rust?",
              "id": 53,
              "answers": [
                {
                  "text": "Unsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit\u2019s better for it to reject some valid programs than to accept some invalid\nprograms. Although the code *might* be okay, if the Rust compiler doesn\u2019t have\nenough information to be confident, it will reject the code. In these cases,\nyou can use unsafe code to tell the compiler, \u201cTrust me, I know what I\u2019m\ndoing.\u201d Be warned, however, that you use unsafe Rust at your own risk: if you\nuse unsafe code incorrectly, problems can occur due to memory unsafety, such as\nnull pointer dereferencing.",
                  "answer_start": 317
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are the names of static variables written in Rust?",
              "id": 67,
              "answers": [
                {
                  "text": "The names of static variables are in `SCREAMING_SNAKE_CASE` by\nconvention.",
                  "answer_start": 17855
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust can interact with code written in another languages?",
              "id": 62,
              "answers": [
                {
                  "text": "Sometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has the keyword `extern` that facilitates the creation\nand use of a *Foreign Function Interface (FFI)*. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions.",
                  "answer_start": 14480
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How global variables are called in Rust?",
              "id": 65,
              "answers": [
                {
                  "text": "In Rust, global variables are called *static* variables.",
                  "answer_start": 17255
                }
              ],
              "is_impossible": false
            },
            {
              "question": " When to Use Unsafe Code?",
              "id": 71,
              "answers": [
                {
                  "text": "Using `unsafe` to take one of the five actions (superpowers) just discussed\nisn\u2019t wrong or even frowned upon. But it is trickier to get `unsafe` code\ncorrect because the compiler can\u2019t help uphold memory safety. When you have a\nreason to use `unsafe` code, you can do so, and having the explicit `unsafe`\nannotation makes it easier to track down the source of problems when they occur.",
                  "answer_start": 21492
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is unsafe Rust need for?",
              "id": 54,
              "answers": [
                {
                  "text": "Another reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn\u2019t let you do unsafe operations, you\ncouldn\u2019t do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let\u2019s explore what we can do with unsafe\nRust and how to do it.",
                  "answer_start": 963
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I call Rust Functions from Other Languages?",
              "id": 63,
              "answers": [
                {
                  "text": "We can also use `extern` to create an interface that allows other languages\n> to call Rust functions. Instead of creating a whole `extern` block, we add\n> the `extern` keyword and specify the ABI to use just before the `fn` keyword\n> for the relevant function. We also need to add a `#[no_mangle]` annotation to\n> tell the Rust compiler not to mangle the name of this function.",
                  "answer_start": 15869
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Should the code in unsafe block be short?",
              "id": 57,
              "answers": [
                {
                  "text": "Keep\n`unsafe` blocks small; you\u2019ll be thankful later when you investigate memory\nbugs.",
                  "answer_start": 2768
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What danger hides behind using global variables?",
              "id": 66,
              "answers": [
                {
                  "text": "If two threads are\naccessing the same mutable global variable, it can cause a data race.",
                  "answer_start": 17165
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between between constants and immutable static variables in Rust?",
              "id": 68,
              "answers": [
                {
                  "text": "A subtle difference between constants and immutable static variables is that\nvalues in a static variable have a fixed address in memory. Using the value\nwill always access the same data. Constants, on the other hand, are allowed to\nduplicate their data whenever they\u2019re used. Another difference is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n*unsafe*.",
                  "answer_start": 18159
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs references and smart pointers from raw pointers?",
              "id": 59,
              "answers": [
                {
                  "text": "Different from references and smart pointers, raw pointers:\n\n* Are allowed to ignore the borrowing rules by having both immutable and\n  mutable pointers or multiple mutable pointers to the same location\n* Aren\u2019t guaranteed to point to valid memory\n* Are allowed to be null\n* Don\u2019t implement any automatic cleanup",
                  "answer_start": 4151
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs unsafe functions and methods from regular functions and methods?",
              "id": 61,
              "answers": [
                {
                  "text": "Unsafe functions and methods look exactly like regular\nfunctions and methods, but they have an extra `unsafe` before the rest of the\ndefinition. The `unsafe` keyword in this context indicates the function has\nrequirements we need to uphold when we call this function, because Rust can\u2019t\nguarantee we\u2019ve met these requirements. By calling an unsafe function within an\n`unsafe` block, we\u2019re saying that we\u2019ve read this function\u2019s documentation and\ntake responsibility for upholding the function\u2019s contracts.",
                  "answer_start": 7878
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are raw pointers?",
              "id": 58,
              "answers": [
                {
                  "text": "Unsafe Rust has two new types called *raw pointers* that are similar to\nreferences. As with references, raw pointers can be immutable or mutable and\nare written as `*const T` and `*mut T`, respectively. The asterisk isn\u2019t the\ndereference operator; it\u2019s part of the type name. In the context of raw\npointers, *immutable* means that the pointer can\u2019t be directly assigned to\nafter being dereferenced.",
                  "answer_start": 3751
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to switch to unsafe Rust?",
              "id": 55,
              "answers": [
                {
                  "text": "To switch to unsafe Rust, use the `unsafe` keyword and then start a new block\nthat holds the unsafe code.",
                  "answer_start": 1474
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is mangling?",
              "id": 64,
              "answers": [
                {
                  "text": "*Mangling* is\n> when a compiler changes the name we\u2019ve given a function to a different name\n> that contains more information for other parts of the compilation process to\n> consume but is less human readable. Every programming language compiler\n> mangles names slightly differently, so for a Rust function to be nameable by\n> other languages, we must disable the Rust compiler\u2019s name mangling.",
                  "answer_start": 16247
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs union from struct?",
              "id": 70,
              "answers": [
                {
                  "text": " A `union` is similar to a `struct`, but only one declared field is\nused in a particular instance at one time. Unions are primarily used to\ninterface with unions in C code. Accessing union fields is unsafe because Rust\ncan\u2019t guarantee the type of the data currently being stored in the union\ninstance.",
                  "answer_start": 21092
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix C: Derivable Traits\n\nIn various places in the book, we\u2019ve discussed the `derive` attribute, which\nyou can apply to a struct or enum definition. The `derive` attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you\u2019ve annotated with the `derive` syntax.\n\nIn this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with `derive`. Each section covers:\n\n* What operators and methods deriving this trait will enable\n* What the implementation of the trait provided by `derive` does\n* What implementing the trait signifies about the type\n* The conditions in which you\u2019re allowed or not allowed to implement the trait\n* Examples of operations that require the trait\n\nIf you want different behavior from that provided by the `derive` attribute,\nconsult the [standard library documentation](../std/index.html)<!-- ignore -->\nfor each trait for details of how to manually implement them.\n\nThese traits listed here are the only ones defined by the standard library that\ncan be implemented on your types using `derive`. Other traits defined in the\nstandard library don\u2019t have sensible default behavior, so it\u2019s up to you to\nimplement them in the way that makes sense for what you\u2019re trying to accomplish.\n\nAn example of a trait that can\u2019t be derived is `Display`, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn\u2019t have this insight, so\nit can\u2019t provide appropriate default behavior for you.\n\nThe list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement `derive` for their own traits, making the list of\ntraits you can use `derive` with truly open-ended. Implementing `derive`\ninvolves using a procedural macro, which is covered in the\n[\u201cMacros\u201d][macros]<!-- ignore --> section of Chapter 19.\n\n### `Debug` for Programmer Output\n\nThe `Debug` trait enables debug formatting in format strings, which you\nindicate by adding `:?` within `{}` placeholders.\n\nThe `Debug` trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program\u2019s execution.\n\nThe `Debug` trait is required, for example, in use of the `assert_eq!` macro.\nThis macro prints the values of instances given as arguments if the equality\nassertion fails so programmers can see why the two instances weren\u2019t equal.\n\n### `PartialEq` and `Eq` for Equality Comparisons\n\nThe `PartialEq` trait allows you to compare instances of a type to check for\nequality and enables use of the `==` and `!=` operators.\n\nDeriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on\nstructs, two instances are equal only if *all* fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants.\n\nThe `PartialEq` trait is required, for example, with the use of the\n`assert_eq!` macro, which needs to be able to compare two instances of a type\nfor equality.\n\nThe `Eq` trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The `Eq` trait can only be\napplied to types that also implement `PartialEq`, although not all types that\nimplement `PartialEq` can implement `Eq`. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (`NaN`) value are not equal to each other.\n\nAn example of when `Eq` is required is for keys in a `HashMap<K, V>` so the\n`HashMap<K, V>` can tell whether two keys are the same.\n\n### `PartialOrd` and `Ord` for Ordering Comparisons\n\nThe `PartialOrd` trait allows you to compare instances of a type for sorting\npurposes. A type that implements `PartialOrd` can be used with the `<`, `>`,\n`<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types\nthat also implement `PartialEq`.\n\nDeriving `PartialOrd` implements the `partial_cmp` method, which returns an\n`Option<Ordering>` that will be `None` when the values given don\u2019t produce an\nordering. An example of a value that doesn\u2019t produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (`NaN`) floating\npoint value. Calling `partial_cmp` with any floating point number and the `NaN`\nfloating point value will return `None`.\n\nWhen derived on structs, `PartialOrd` compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later.\n\nThe `PartialOrd` trait is required, for example, for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression.\n\nThe `Ord` trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The `Ord` trait implements the `cmp` method,\nwhich returns an `Ordering` rather than an `Option<Ordering>` because a valid\nordering will always be possible. You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When\nderived on structs and enums, `cmp` behaves the same way as the derived\nimplementation for `partial_cmp` does with `PartialOrd`.\n\nAn example of when `Ord` is required is when storing values in a `BTreeSet<T>`,\na data structure that stores data based on the sort order of the values.\n\n### `Clone` and `Copy` for Duplicating Values\n\nThe `Clone` trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See the [\u201cWays Variables and Data Interact:\nClone\u201d][ways-variables-and-data-interact-clone]<!-- ignore --> section in\nChapter 4 for more information on `Clone`.\n\nDeriving `Clone` implements the `clone` method, which when implemented for the\nwhole type, calls `clone` on each of the parts of the type. This means all the\nfields or values in the type must also implement `Clone` to derive `Clone`.\n\nAn example of when `Clone` is required is when calling the `to_vec` method on a\nslice. The slice doesn\u2019t own the type instances it contains, but the vector\nreturned from `to_vec` will need to own its instances, so `to_vec` calls\n`clone` on each item. Thus, the type stored in the slice must implement `Clone`.\n\nThe `Copy` trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See the [\u201cStack-Only Data:\nCopy\u201d][stack-only-data-copy]<!-- ignore --> section in Chapter 4 for more\ninformation on `Copy`.\n\nThe `Copy` trait doesn\u2019t define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast.\n\nYou can derive `Copy` on any type whose parts all implement `Copy`. A type that\nimplements `Copy` must also implement `Clone`, because a type that implements\n`Copy` has a trivial implementation of `Clone` that performs the same task as\n`Copy`.\n\nThe `Copy` trait is rarely required; types that implement `Copy` have\noptimizations available, meaning you don\u2019t have to call `clone`, which makes\nthe code more concise.\n\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.\n\n### `Hash` for Mapping a Value to a Value of Fixed Size\n\nThe `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n`Hash` implements the `hash` method. The derived implementation of the `hash`\nmethod combines the result of calling `hash` on each of the parts of the type,\nmeaning all fields or values must also implement `Hash` to derive `Hash`.\n\nAn example of when `Hash` is required is in storing keys in a `HashMap<K, V>`\nto store data efficiently.\n\n### `Default` for Default Values\n\nThe `Default` trait allows you to create a default value for a type. Deriving\n`Default` implements the `default` function. The derived implementation of the\n`default` function calls the `default` function on each part of the type,\nmeaning all fields or values in the type must also implement `Default` to\nderive `Default`.\n\nThe `Default::default` function is commonly used in combination with the struct\nupdate syntax discussed in the [\u201cCreating Instances From Other Instances With\nStruct Update\nSyntax\u201d][creating-instances-from-other-instances-with-struct-update-syntax]<!-- ignore -->\nsection in Chapter 5. You can customize a few fields of a struct and then\nset and use a default value for the rest of the fields by using\n`..Default::default()`.\n\nThe `Default` trait is required when you use the method `unwrap_or_default` on\n`Option<T>` instances, for example. If the `Option<T>` is `None`, the method\n`unwrap_or_default` will return the result of `Default::default` for the type\n`T` stored in the `Option<T>`.\n\n[creating-instances-from-other-instances-with-struct-update-syntax]:\nch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\n[stack-only-data-copy]:\nch04-01-what-is-ownership.html#stack-only-data-copy\n[ways-variables-and-data-interact-clone]:\nch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\n[macros]: ch19-06-macros.html#macros\n",
          "qas": [
            {
              "question": "When are two enums equal?",
              "id": 168,
              "answers": [
                {
                  "text": "each variant is equal to itself and not equal to the other variants",
                  "answer_start": 3077
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'ord' trait allowing?",
              "id": 174,
              "answers": [
                {
                  "text": "that for any two values of the annotated\ntype, a valid ordering will exist",
                  "answer_start": 5167
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a purpose of 'Eq' trait?",
              "id": 169,
              "answers": [
                {
                  "text": " to signal that for every value of\nthe annotated type, the value is equal to itself",
                  "answer_start": 3353
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can all types implement 'eq'?",
              "id": 170,
              "answers": [
                {
                  "text": "not all types that\nimplement `PartialEq` can implement `Eq`.",
                  "answer_start": 3524
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What trait will allow me to create a deep copy of a value?",
              "id": 176,
              "answers": [
                {
                  "text": "Clone",
                  "answer_start": 5860
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'hash' for?",
              "id": 182,
              "answers": [
                {
                  "text": "The `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function",
                  "answer_start": 7822
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What's the difference between 'Clone' and 'Copy'?",
              "id": 181,
              "answers": [
                {
                  "text": "\nEverything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places.",
                  "answer_start": 7630
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I apply the 'ord' trait ti tyoes that also implement 'PartialOrd' and 'Eq'?",
              "id": 175,
              "answers": [
                {
                  "text": "You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq`",
                  "answer_start": 5400
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait will allow me to print instances of a type for debugging purposes?",
              "id": 162,
              "answers": [
                {
                  "text": "The `Debug` trait",
                  "answer_start": 2230
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What attribute can we apply to enum or struct?",
              "id": 159,
              "answers": [
                {
                  "text": "derive",
                  "answer_start": 85
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I format debug output?",
              "id": 163,
              "answers": [
                {
                  "text": ":?` within `{}",
                  "answer_start": 2199
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is 'default' trait required?",
              "id": 184,
              "answers": [
                {
                  "text": "The `Default` trait is required when you use the method `unwrap_or_default` on\n`Option\u2039T>` instances",
                  "answer_start": 9099
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is partial ord required?",
              "id": 173,
              "answers": [
                {
                  "text": "for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression",
                  "answer_start": 5006
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait will enable me to use '==' and/or '!='",
              "id": 165,
              "answers": [
                {
                  "text": "PartialEq",
                  "answer_start": 2718
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be an example of when 'Clone' is required?",
              "id": 178,
              "answers": [
                {
                  "text": "when calling the `to_vec` method on a\nslice",
                  "answer_start": 6456
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When two instances of struct are equal?",
              "id": 167,
              "answers": [
                {
                  "text": "if *all* fields are equal",
                  "answer_start": 2966
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is involved when implementing 'derive'?",
              "id": 161,
              "answers": [
                {
                  "text": "procedural macro",
                  "answer_start": 1972
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which trait is allowing to compare instances of a type?",
              "id": 164,
              "answers": [
                {
                  "text": "PartialEq",
                  "answer_start": 2718
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is 'Copy' trait required a lot?",
              "id": 180,
              "answers": [
                {
                  "text": "The `Copy` trait is rarely required",
                  "answer_start": 7460
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Storing Lists of Values with Vectors\n\nThe first collection type we\u2019ll look at is `Vec<T>`, also known as a *vector*.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n\n### Creating a New Vector\n\nTo create a new empty vector, we call the `Vec::new` function, as shown in\nListing 8-1.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-1: Creating a new, empty vector to hold values\nof type `i32`</span>\n\nNote that we added a type annotation here. Because we aren\u2019t inserting any\nvalues into this vector, Rust doesn\u2019t know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe\u2019ll cover how to use generics with your own types in Chapter 10. For now,\nknow that the `Vec<T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets. In Listing 8-1, we\u2019ve told Rust that the `Vec<T>` in `v` will\nhold elements of the `i32` type.\n\nMore often, you\u2019ll create a `Vec<T>` with initial values and Rust will infer\nthe type of value you want to store, so you rarely need to do this type\nannotation. Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it. Listing 8-2 creates a new\n`Vec<i32>` that holds the values `1`, `2`, and `3`. The integer type is `i32`\nbecause that\u2019s the default integer type, as we discussed in the [\u201cData\nTypes\u201d][data-types]<!-- ignore --> section of Chapter 3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-2: Creating a new vector containing\nvalues</span>\n\nBecause we\u2019ve given initial `i32` values, Rust can infer that the type of `v`\nis `Vec<i32>`, and the type annotation isn\u2019t necessary. Next, we\u2019ll look at how\nto modify a vector.\n\n### Updating a Vector\n\nTo create a vector and then add elements to it, we can use the `push` method,\nas shown in Listing 8-3.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-3: Using the `push` method to add values to a\nvector</span>\n\nAs with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type `i32`, and Rust infers this from the data, so\nwe don\u2019t need the `Vec<i32>` annotation.\n\n### Reading Elements of Vectors\n\nThere are two ways to reference a value stored in a vector: via indexing or\nusing the `get` method. In the following examples, we\u2019ve annotated the types of\nthe values that are returned from these functions for extra clarity.\n\nListing 8-4 shows both methods of accessing a value in a vector, with indexing\nsyntax and the `get` method.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-4: Using indexing syntax or the `get` method to\naccess an item in a vector</span>\n\nNote a few details here. We use the index value of `2` to get the third element\nbecause vectors are indexed by number, starting at zero. Using `&` and `[]`\ngives us a reference to the element at the index value. When we use the `get`\nmethod with the index passed as an argument, we get an `Option<&T>` that we can\nuse with `match`.\n\nThe reason Rust provides these two ways to reference an element is so you can\nchoose how the program behaves when you try to use an index value outside the\nrange of existing elements. As an example, let\u2019s see what happens when we have\na vector of five elements and then we try to access an element at index 100\nwith each technique, as shown in Listing 8-5.\n\n```rust,should_panic,panics\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-5: Attempting to access the element at index\n100 in a vector containing five elements</span>\n\nWhen we run this code, the first `[]` method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there\u2019s an attempt to access an element past the\nend of the vector.\n\nWhen the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking. You would use this method if accessing an element\nbeyond the range of the vector may happen occasionally under normal\ncircumstances. Your code will then have logic to handle having either\n`Some(&element)` or `None`, as discussed in Chapter 6. For example, the index\ncould be coming from a person entering a number. If they accidentally enter a\nnumber that\u2019s too large and the program gets a `None` value, you could tell the\nuser how many items are in the current vector and give them another chance to\nenter a valid value. That would be more user-friendly than crashing the program\ndue to a typo!\n\nWhen the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can\u2019t have mutable and immutable references in the same\nscope. That rule applies in Listing 8-6, where we hold an immutable reference\nto the first element in a vector and try to add an element to the end. This\nprogram won\u2019t work if we also try to refer to that element later in the\nfunction:\n\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-6: Attempting to add an element to a vector\nwhile holding a reference to an item</span>\n\nCompiling this code will result in this error:\n\n\n```console\n{{#include ../listings/ch08-common-collections/listing-08-06/output.txt}}\n```\n\nThe code in Listing 8-6 might look like it should work: why should a reference\nto the first element care about changes at the end of the vector? This error is\ndue to the way vectors work: because vectors put the values next to each other\nin memory, adding a new element onto the end of the vector might require\nallocating new memory and copying the old elements to the new space, if there\nisn\u2019t enough room to put all the elements next to each other where the vector\nis currently stored. In that case, the reference to the first element would be\npointing to deallocated memory. The borrowing rules prevent programs from\nending up in that situation.\n\n> Note: For more on the implementation details of the `Vec<T>` type, see [\u201cThe\n> Rustonomicon\u201d][nomicon].\n\n### Iterating over the Values in a Vector\n\nTo access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time. Listing 8-7 shows how\nto use a `for` loop to get immutable references to each element in a vector of\n`i32` values and print them.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-7: Printing each element in a vector by\niterating over the elements using a `for` loop</span>\n\nWe can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The `for` loop in Listing 8-8\nwill add `50` to each element.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-8: Iterating over mutable references to\nelements in a vector</span>\n\nTo change the value that the mutable reference refers to, we have to use the\n`*` dereference operator to get to the value in `i` before we can use the `+=`\noperator. We\u2019ll talk more about the dereference operator in the [\u201cFollowing the\nPointer to the Value with the Dereference Operator\u201d][deref]<!-- ignore -->\nsection of Chapter 15.\n\nIterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker's rules. If we attempted to insert or remove items in the `for`\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the `for` loop holds prevents simultaneous modification of the\nwhole vector.\n\n### Using an Enum to Store Multiple Types\n\nVectors can only store values that are the same type. This can be inconvenient;\nthere are definitely use cases for needing to store a list of items of\ndifferent types. Fortunately, the variants of an enum are defined under the\nsame enum type, so when we need one type to represent elements of different\ntypes, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and all the enum variants will be considered the same type: that\nof the enum. Then we can create a vector to hold that enum and so, ultimately,\nholds different types. We\u2019ve demonstrated this in Listing 8-9.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-9: Defining an `enum` to store values of\ndifferent types in one vector</span>\n\nRust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. We\nmust also be explicit about what types are allowed in this vector. If Rust\nallowed a vector to hold any type, there would be a chance that one or more of\nthe types would cause errors with the operations performed on the elements of\nthe vector. Using an enum plus a `match` expression means that Rust will ensure\nat compile time that every possible case is handled, as discussed in Chapter 6.\n\nIf you don\u2019t know the exhaustive set of types a program will get at runtime to\nstore in a vector, the enum technique won\u2019t work. Instead, you can use a trait\nobject, which we\u2019ll cover in Chapter 17.\n\nNow that we\u2019ve discussed some of the most common ways to use vectors, be sure\nto review [the API documentation][vec-api]<!-- ignore --> for all the many\nuseful methods defined on `Vec<T>` by the standard library. For example, in\naddition to `push`, a `pop` method removes and returns the last element.\n\n### Dropping a Vector Drops Its Elements\n\nLike any other `struct`, a vector is freed when it goes out of scope, as\nannotated in Listing 8-10.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-10: Showing where the vector and its elements\nare dropped</span>\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.\n\nLet\u2019s move on to the next collection type: `String`!\n\n[data-types]: ch03-02-data-types.html#data-types\n[nomicon]: ../nomicon/vec/vec.html\n[vec-api]: ../std/vec/struct.Vec.html\n[deref]: ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator\n",
          "qas": [
            {
              "question": "How to create an empty vector?",
              "id": 183,
              "answers": [
                {
                  "text": "To create a new empty vector, we call the `Vec::new` function, as shown in",
                  "answer_start": 451
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens after vector gets dropped?",
              "id": 198,
              "answers": [
                {
                  "text": "When the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.",
                  "answer_start": 11060
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to access each element in a vector?",
              "id": 192,
              "answers": [
                {
                  "text": "To access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time.",
                  "answer_start": 6994
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which keyword is useful if I want to change value inside vector?",
              "id": 188,
              "answers": [
                {
                  "text": "As with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword",
                  "answer_start": 2507
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can vector do?",
              "id": 181,
              "answers": [
                {
                  "text": "Vectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type.",
                  "answer_start": 120
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to add elements to vector?",
              "id": 187,
              "answers": [
                {
                  "text": "To create a vector and then add elements to it, we can use the `push` method,",
                  "answer_start": 2209
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which element returns/remove pop method?",
              "id": 197,
              "answers": [
                {
                  "text": "For example, in\naddition to `push`, a `pop` method removes and returns the last element.",
                  "answer_start": 10628
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to change the value that the mutable reference refers to?",
              "id": 193,
              "answers": [
                {
                  "text": "To change the value that the mutable reference refers to, we have to use the\n`*` dereference operator to get to the value in `i` before we can use the `+=`\noperator.",
                  "answer_start": 7881
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are vectors implemented?",
              "id": 184,
              "answers": [
                {
                  "text": "Vectors are implemented using generics;",
                  "answer_start": 930
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can vectors store values with different types?",
              "id": 195,
              "answers": [
                {
                  "text": "Vectors can only store values that are the same type. ",
                  "answer_start": 8657
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which type can `Vec\u2039T>` hold?",
              "id": 185,
              "answers": [
                {
                  "text": "`Vec\u2039T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets.",
                  "answer_start": 1060
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if I pass an index outside the vector to the `get` method?",
              "id": 191,
              "answers": [
                {
                  "text": "When the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking.",
                  "answer_start": 4560
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What if I want to use different data types in one vector?",
              "id": 196,
              "answers": [
                {
                  "text": "Vectors can only store values that are the same type. This can be inconvenient;\nthere are definitely use cases for needing to store a list of items of\ndifferent types. Fortunately, the variants of an enum are defined under the\nsame enum type, so when we need one type to represent elements of different\ntypes, we can define and use an enum!",
                  "answer_start": 8657
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do \"vec!\" macro?",
              "id": 186,
              "answers": [
                {
                  "text": " Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it.",
                  "answer_start": 1478
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are vectors useful?",
              "id": 182,
              "answers": [
                {
                  "text": "Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.\n",
                  "answer_start": 249
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Separating Modules into Different Files\n\nSo far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.\n\nFor example, let\u2019s start from the code in Listing 7-17 that had multiple\nrestaurant modules. We\u2019ll extract modules into files instead of having all the\nmodules defined in the crate root file. In this case, the crate root file is\n*src/lib.rs*, but this procedure also works with binary crates whose crate root\nfile is *src/main.rs*.\n\nFirst, we\u2019ll extract the `front_of_house` module to its own file. Remove the\ncode inside the curly brackets for the `front_of_house` module, leaving only\nthe `mod front_of_house;` declaration, so that *src/lib.rs* contains the code\nshown in Listing 7-21. Note that this won\u2019t compile until we create the\n*src/front_of_house.rs* file in Listing 7-22.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-21: Declaring the `front_of_house` module whose\nbody will be in *src/front_of_house.rs*</span>\n\nNext, place the code that was in the curly brackets into a new file named\n*src/front_of_house.rs*, as shown in Listing 7-22. The compiler knows to look\nin this file because it came across the module declaration in the crate root\nwith the name `front_of_house`.\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}}\n```\n\n<span class=\"caption\">Listing 7-22: Definitions inside the `front_of_house`\nmodule in *src/front_of_house.rs*</span>\n\nNote that you only need to load a file using a `mod` declaration *once* in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you\u2019ve put the `mod`\nstatement), other files in your project should refer to the loaded file\u2019s code\nusing a path to where it was declared, as covered in the [\u201cPaths for Referring\nto an Item in the Module Tree\u201d][paths]<!-- ignore --> section. In other words,\n`mod` is *not* an \u201cinclude\u201d operation that you may have seen in other\nprogramming languages.\n\nNext, we\u2019ll extract the `hosting` module to its own file. The process is a bit\ndifferent because `hosting` is a child module of `front_of_house`, not of the\nroot module. We\u2019ll place the file for `hosting` in a new directory that will be\nnamed for its ancestors in the module tree, in this case *src/front_of_house/*.\n\nTo start moving `hosting`, we change *src/front_of_house.rs* to contain only the\ndeclaration of the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}}\n```\n\nThen we create a *src/front_of_house* directory and a file *hosting.rs* to\ncontain the definitions made in the `hosting` module:\n\n<span class=\"filename\">Filename: src/front_of_house/hosting.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}}\n```\n\nIf we instead put *hosting.rs* in the *src* directory, the compiler would\nexpect the *hosting.rs* code to be in a `hosting` module declared in the crate\nroot, and not declared as a child of the `front_of_house` module. The\ncompiler\u2019s rules for which files to check for which modules\u2019 code means the\ndirectories and files more closely match the module tree.\n\n> ### Alternate File Paths\n>\n> So far we\u2019ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path. For a module named\n> `front_of_house` declared in the crate root, the compiler will look for the\n> module\u2019s code in:\n>\n> * *src/front_of_house.rs* (what we covered)\n> * *src/front_of_house/mod.rs* (older style, still supported path)\n>\n> For a module named `hosting` that is a submodule of `front_of_house`, the\n> compiler will look for the module\u2019s code in:\n>\n> * *src/front_of_house/hosting.rs* (what we covered)\n> * *src/front_of_house/hosting/mod.rs* (older style, still supported path)\n>\n> If you use both styles for the same module, you\u2019ll get a compiler error. Using\n> a mix of both styles for different modules in the same project is allowed, but\n> might be confusing for people navigating your project.\n>\n> The main downside to the style that uses files named *mod.rs* is that your\n> project can end up with many files named *mod.rs*, which can get confusing\n> when you have them open in your editor at the same time.\n\nWe\u2019ve moved each module\u2019s code to a separate file, and the module tree remains\nthe same. The function calls in `eat_at_restaurant` will work without any\nmodification, even though the definitions live in different files. This\ntechnique lets you move modules to new files as they grow in size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in\n*src/lib.rs* also hasn\u2019t changed, nor does `use` have any impact on what files\nare compiled as part of the crate. The `mod` keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module.\n\n## Summary\n\nRust lets you split a package into multiple crates and a crate into modules\nso you can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a `use` statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the `pub` keyword.\n\nIn the next chapter, we\u2019ll look at some collection data structures in the\nstandard library that you can use in your neatly organized code.\n\n[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n",
          "qas": [
            {
              "question": "How can I make easier to navigate the code, when the code becomes large?",
              "id": 169,
              "answers": [
                {
                  "text": "When modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.",
                  "answer_start": 123
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the disadvantage of using the style using \"mod.rs\"?",
              "id": 175,
              "answers": [
                {
                  "text": "> The main downside to the style that uses files named *mod.rs* is that your\n> project can end up with many files named *mod.rs*, which can get confusing\n> when you have them open in your editor at the same time.\n",
                  "answer_start": 4601
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use both styles in the same module?",
              "id": 173,
              "answers": [
                {
                  "text": "> If you use both styles for the same module, you\u2019ll get a compiler error.",
                  "answer_start": 4380
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use both styles for different modules?",
              "id": 174,
              "answers": [
                {
                  "text": "Using\n> a mix of both styles for different modules in the same project is allowed, but\n> might be confusing for people navigating your project.\n>",
                  "answer_start": 4455
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I only need to load a file using a `mod` declaration *once* in my module tree?",
              "id": 171,
              "answers": [
                {
                  "text": "Note that you only need to load a file using a `mod` declaration *once* in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you\u2019ve put the `mod`\nstatement), other files in your project should refer to the loaded file\u2019s code\nusing a path to where it was declared",
                  "answer_start": 1812
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Shared-State Concurrency\n\nMessage passing is a fine way of handling concurrency, but it\u2019s not the only\none. Another method would be for multiple threads to access the same shared\ndata. Consider this part of the slogan from the Go language documentation\nagain: \u201cdo not communicate by sharing memory.\u201d\n\nWhat would communicating by sharing memory look like? In addition, why would\nmessage-passing enthusiasts caution not to use memory sharing?\n\nIn a way, channels in any programming language are similar to single ownership,\nbecause once you transfer a value down a channel, you should no longer use that\nvalue. Shared memory concurrency is like multiple ownership: multiple threads\ncan access the same memory location at the same time. As you saw in Chapter 15,\nwhere smart pointers made multiple ownership possible, multiple ownership can\nadd complexity because these different owners need managing. Rust\u2019s type system\nand ownership rules greatly assist in getting this management correct. For an\nexample, let\u2019s look at mutexes, one of the more common concurrency primitives\nfor shared memory.\n\n### Using Mutexes to Allow Access to Data from One Thread at a Time\n\n*Mutex* is an abbreviation for *mutual exclusion*, as in, a mutex allows only\none thread to access some data at any given time. To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex\u2019s *lock*. The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data. Therefore, the\nmutex is described as *guarding* the data it holds via the locking system.\n\nMutexes have a reputation for being difficult to use because you have to\nremember two rules:\n\n* You must attempt to acquire the lock before using the data.\n* When you\u2019re done with the data that the mutex guards, you must unlock the\n  data so other threads can acquire the lock.\n\nFor a real-world metaphor for a mutex, imagine a panel discussion at a\nconference with only one microphone. Before a panelist can speak, they have to\nask or signal that they want to use the microphone. When they get the\nmicrophone, they can talk for as long as they want to and then hand the\nmicrophone to the next panelist who requests to speak. If a panelist forgets to\nhand the microphone off when they\u2019re finished with it, no one else is able to\nspeak. If management of the shared microphone goes wrong, the panel won\u2019t work\nas planned!\n\nManagement of mutexes can be incredibly tricky to get right, which is why so\nmany people are enthusiastic about channels. However, thanks to Rust\u2019s type\nsystem and ownership rules, you can\u2019t get locking and unlocking wrong.\n\n#### The API of `Mutex<T>`\n\nAs an example of how to use a mutex, let\u2019s start by using a mutex in a\nsingle-threaded context, as shown in Listing 16-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-12: Exploring the API of `Mutex<T>` in a\nsingle-threaded context for simplicity</span>\n\nAs with many types, we create a `Mutex<T>` using the associated function `new`.\nTo access the data inside the mutex, we use the `lock` method to acquire the\nlock. This call will block the current thread so it can\u2019t do any work until\nit\u2019s our turn to have the lock.\n\nThe call to `lock` would fail if another thread holding the lock panicked. In\nthat case, no one would ever be able to get the lock, so we\u2019ve chosen to\n`unwrap` and have this thread panic if we\u2019re in that situation.\n\nAfter we\u2019ve acquired the lock, we can treat the return value, named `num` in\nthis case, as a mutable reference to the data inside. The type system ensures\nthat we acquire a lock before using the value in `m`. The type of `m` is\n`Mutex<i32>`, not `i32`, so we *must* call `lock` to be able to use the `i32`\nvalue. We can\u2019t forget; the type system won\u2019t let us access the inner `i32`\notherwise.\n\nAs you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call\nto `lock` *returns* a smart pointer called `MutexGuard`, wrapped in a\n`LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart\npointer implements `Deref` to point at our inner data; the smart pointer also\nhas a `Drop` implementation that releases the lock automatically when a\n`MutexGuard` goes out of scope, which happens at the end of the inner scope. As\na result, we don\u2019t risk forgetting to release the lock and blocking the mutex\nfrom being used by other threads, because the lock release happens\nautomatically.\n\nAfter dropping the lock, we can print the mutex value and see that we were able\nto change the inner `i32` to 6.\n\n#### Sharing a `Mutex<T>` Between Multiple Threads\n\nNow, let\u2019s try to share a value between multiple threads using `Mutex<T>`.\nWe\u2019ll spin up 10 threads and have them each increment a counter value by 1, so\nthe counter goes from 0 to 10. The next example in Listing 16-13 will have\na compiler error, and we\u2019ll use that error to learn more about using\n`Mutex<T>` and how Rust helps us use it correctly.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-13: Ten threads each increment a counter\nguarded by a `Mutex<T>`</span>\n\nWe create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we did\nin Listing 16-12. Next, we create 10 threads by iterating over a range of\nnumbers. We use `thread::spawn` and give all the threads the same closure: one\nthat moves the counter into the thread, acquires a lock on the `Mutex<T>` by\ncalling the `lock` method, and then adds 1 to the value in the mutex. When a\nthread finishes running its closure, `num` will go out of scope and release the\nlock so another thread can acquire it.\n\nIn the main thread, we collect all the join handles. Then, as we did in Listing\n16-2, we call `join` on each handle to make sure all the threads finish. At\nthat point, the main thread will acquire the lock and print the result of this\nprogram.\n\nWe hinted that this example wouldn\u2019t compile. Now let\u2019s find out why!\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-13/output.txt}}\n```\n\nThe error message states that the `counter` value was moved in the previous\niteration of the loop. Rust is telling us that we can\u2019t move the ownership\nof lock `counter` into multiple threads. Let\u2019s fix the compiler error with a\nmultiple-ownership method we discussed in Chapter 15.\n\n#### Multiple Ownership with Multiple Threads\n\nIn Chapter 15, we gave a value multiple owners by using the smart pointer\n`Rc<T>` to create a reference counted value. Let\u2019s do the same here and see\nwhat happens. We\u2019ll wrap the `Mutex<T>` in `Rc<T>` in Listing 16-14 and clone\nthe `Rc<T>` before moving ownership to the thread.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-14: Attempting to use `Rc<T>` to allow\nmultiple threads to own the `Mutex<T>`</span>\n\nOnce again, we compile and get... different errors! The compiler is teaching us\na lot.\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-14/output.txt}}\n```\n\nWow, that error message is very wordy! Here\u2019s the important part to focus on:\n`` `Rc<Mutex<i32>>` cannot be sent between threads safely ``. The compiler is\nalso telling us the reason why: ``the trait `Send` is not implemented for\n`Rc<Mutex<i32>>` ``. We\u2019ll talk about `Send` in the next section: it\u2019s one of\nthe traits that ensures the types we use with threads are meant for use in\nconcurrent situations.\n\nUnfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>`\nmanages the reference count, it adds to the count for each call to `clone` and\nsubtracts from the count when each clone is dropped. But it doesn\u2019t use any\nconcurrency primitives to make sure that changes to the count can\u2019t be\ninterrupted by another thread. This could lead to wrong counts\u2014subtle bugs that\ncould in turn lead to memory leaks or a value being dropped before we\u2019re done\nwith it. What we need is a type exactly like `Rc<T>` but one that makes changes\nto the reference count in a thread-safe way.\n\n#### Atomic Reference Counting with `Arc<T>`\n\nFortunately, `Arc<T>` *is* a type like `Rc<T>` that is safe to use in\nconcurrent situations. The *a* stands for *atomic*, meaning it\u2019s an *atomically\nreference counted* type. Atomics are an additional kind of concurrency\nprimitive that we won\u2019t cover in detail here: see the standard library\ndocumentation for [`std::sync::atomic`][atomic]<!-- ignore --> for more\ndetails. At this point, you just need to know that atomics work like primitive\ntypes but are safe to share across threads.\n\nYou might then wonder why all primitive types aren\u2019t atomic and why standard\nlibrary types aren\u2019t implemented to use `Arc<T>` by default. The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to. If you\u2019re just performing operations on values within a\nsingle thread, your code can run faster if it doesn\u2019t have to enforce the\nguarantees atomics provide.\n\nLet\u2019s return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix\nour program by changing the `use` line, the call to `new`, and the call to\n`clone`. The code in Listing 16-15 will finally compile and run:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-15/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-15: Using an `Arc<T>` to wrap the `Mutex<T>`\nto be able to share ownership across multiple threads</span>\n\nThis code will print the following:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nResult: 10\n```\n\nWe did it! We counted from 0 to 10, which may not seem very impressive, but it\ndid teach us a lot about `Mutex<T>` and thread safety. You could also use this\nprogram\u2019s structure to do more complicated operations than just incrementing a\ncounter. Using this strategy, you can divide a calculation into independent\nparts, split those parts across threads, and then use a `Mutex<T>` to have each\nthread update the final result with its part.\n\nNote that if you are doing simple numerical operations, there are types simpler\nthan `Mutex<T>` types provided by the [`std::sync::atomic` module of the\nstandard library][atomic]<!-- ignore -->. These types provide safe, concurrent,\natomic access to primitive types. We chose to use `Mutex<T>` with a primitive\ntype for this example so we could concentrate on how `Mutex<T>` works.\n\n### Similarities Between `RefCell<T>`/`Rc<T>` and `Mutex<T>`/`Arc<T>`\n\nYou might have noticed that `counter` is immutable but we could get a mutable\nreference to the value inside it; this means `Mutex<T>` provides interior\nmutability, as the `Cell` family does. In the same way we used `RefCell<T>` in\nChapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>`\nto mutate contents inside an `Arc<T>`.\n\nAnother detail to note is that Rust can\u2019t protect you from all kinds of logic\nerrors when you use `Mutex<T>`. Recall in Chapter 15 that using `Rc<T>` came\nwith the risk of creating reference cycles, where two `Rc<T>` values refer to\neach other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of\ncreating *deadlocks*. These occur when an operation needs to lock two resources\nand two threads have each acquired one of the locks, causing them to wait for\neach other forever. If you\u2019re interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for `Mutex<T>` and `MutexGuard` offers\nuseful information.\n\nWe\u2019ll round out this chapter by talking about the `Send` and `Sync` traits and\nhow we can use them with custom types.\n\n[atomic]: ../std/sync/atomic/index.html\n",
          "qas": [
            {
              "question": "What is lock?",
              "id": 104,
              "answers": [
                {
                  "text": "The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data.",
                  "answer_start": 1414
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What must done before accessing mutex data?",
              "id": 103,
              "answers": [
                {
                  "text": "To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex\u2019s *lock*.",
                  "answer_start": 1294
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is returned from lock?",
              "id": 107,
              "answers": [
                {
                  "text": "More accurately, the call\nto `lock` *returns* a smart pointer called `MutexGuard`, wrapped in a\n`LockResult` that we handled with the call to `unwrap`.",
                  "answer_start": 4027
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to prevent deadlocks?",
              "id": 112,
              "answers": [
                {
                  "text": "If you\u2019re interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for `Mutex\u2039T>` and `MutexGuard` offers\nuseful information.",
                  "answer_start": 11818
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is mutex?",
              "id": 102,
              "answers": [
                {
                  "text": "*Mutex* is an abbreviation for *mutual exclusion*, as in, a mutex allows only\none thread to access some data at any given time.",
                  "answer_start": 1166
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to access mutex data?",
              "id": 106,
              "answers": [
                {
                  "text": "To access the data inside the mutex, we use the `lock` method to acquire the\nlock.",
                  "answer_start": 3178
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a new mutex?",
              "id": 105,
              "answers": [
                {
                  "text": "As with many types, we create a `Mutex\u2039T>` using the associated function `new`.",
                  "answer_start": 3098
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Hello, World!\n\nNow that you\u2019ve installed Rust, it\u2019s time to write your first Rust program.\nIt\u2019s traditional when learning a new language to write a little program that\nprints the text `Hello, world!` to the screen, so we\u2019ll do the same here!\n\n> Note: This book assumes basic familiarity with the command line. Rust makes\n> no specific demands about your editing or tooling or where your code lives, so\n> if you prefer to use an integrated development environment (IDE) instead of\n> the command line, feel free to use your favorite IDE. Many IDEs now have some\n> degree of Rust support; check the IDE\u2019s documentation for details. The Rust\n> team has been focusing on enabling great IDE support via `rust-analyzer`. See\n> [Appendix D][devtools]<!-- ignore --> for more details.\n\n### Creating a Project Directory\n\nYou\u2019ll start by making a directory to store your Rust code. It doesn\u2019t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a *projects* directory in your home directory and keeping all\nyour projects there.\n\nOpen a terminal and enter the following commands to make a *projects* directory\nand a directory for the \u201cHello, world!\u201d project within the *projects* directory.\n\nFor Linux, macOS, and PowerShell on Windows, enter this:\n\n```console\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n```\n\nFor Windows CMD, enter this:\n\n```cmd\n> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world\n```\n\n### Writing and Running a Rust Program\n\nNext, make a new source file and call it *main.rs*. Rust files always end with\nthe *.rs* extension. If you\u2019re using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n*hello_world.rs* rather than *helloworld.rs*.\n\nNow open the *main.rs* file you just created and enter the code in Listing 1-1.\n\n<span class=\"filename\">Filename: main.rs</span>\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n<span class=\"caption\">Listing 1-1: A program that prints `Hello, world!`</span>\n\nSave the file and go back to your terminal window in the\n*~/projects/hello_world* directory. On Linux or macOS, enter the following\ncommands to compile and run the file:\n\n```console\n$ rustc main.rs\n$ ./main\nHello, world!\n```\n\nOn Windows, enter the command `.\\main.exe` instead of `./main`:\n\n```powershell\n> rustc main.rs\n> .\\main.exe\nHello, world!\n```\n\nRegardless of your operating system, the string `Hello, world!` should print to\nthe terminal. If you don\u2019t see this output, refer back to the\n[\u201cTroubleshooting\u201d][troubleshooting]<!-- ignore --> part of the Installation\nsection for ways to get help.\n\nIf `Hello, world!` did print, congratulations! You\u2019ve officially written a Rust\nprogram. That makes you a Rust programmer\u2014welcome!\n\n### Anatomy of a Rust Program\n\nLet\u2019s review this \u201cHello, world!\u201d program in detail. Here\u2019s the first piece of\nthe puzzle:\n\n```rust\nfn main() {\n\n}\n```\n\nThese lines define a function named `main`. The `main` function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named `main` that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses `()`.\n\nThe function body is wrapped in `{}`. Rust requires curly brackets around all\nfunction bodies. It\u2019s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.\n\n> Note: If you want to stick to a standard style across Rust projects, you can\n> use an automatic formatter tool called `rustfmt` to format your code in a\n> particular style (more on `rustfmt` in\n> [Appendix D][devtools]<!-- ignore -->). The Rust team has included this tool\n> with the standard Rust distribution, as `rustc` is, so it should already be\n> installed on your computer!\n\nThe body of the `main` function holds the following code:\n\n```rust\n    println!(\"Hello, world!\");\n```\n\nThis line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here.\n\nFirst, Rust style is to indent with four spaces, not a tab.\n\nSecond, `println!` calls a Rust macro. If it had called a function instead, it\nwould be entered as `println` (without the `!`). We\u2019ll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a `!`\nmeans that you\u2019re calling a macro instead of a normal function and that macros\ndon\u2019t always follow the same rules as functions.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument\nto `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon.\n\n### Compiling and Running Are Separate Steps\n\nYou\u2019ve just run a newly created program, so let\u2019s examine each step in the\nprocess.\n\nBefore running a Rust program, you must compile it using the Rust compiler by\nentering the `rustc` command and passing it the name of your source file, like\nthis:\n\n```console\n$ rustc main.rs\n```\n\nIf you have a C or C++ background, you\u2019ll notice that this is similar to `gcc`\nor `clang`. After compiling successfully, Rust outputs a binary executable.\n\nOn Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the `ls` command in your shell:\n\n```console\n$ ls\nmain  main.rs\n```\n\nOn Linux and macOS, you\u2019ll see two files. With PowerShell on Windows, you\u2019ll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:\n\n```cmd\n> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n```\n\nThis shows the source code file with the *.rs* extension, the executable file\n(*main.exe* on Windows, but *main* on all other platforms), and, when using\nWindows, a file containing debugging information with the *.pdb* extension.\nFrom here, you run the *main* or *main.exe* file, like this:\n\n```console\n$ ./main # or .\\main.exe on Windows\n```\n\nIf your *main.rs* is your \u201cHello, world!\u201d program, this line prints `Hello,\nworld!` to your terminal.\n\nIf you\u2019re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an *ahead-of-time compiled* language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a *.rb*, *.py*, or\n*.js* file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design.\n\nJust compiling with `rustc` is fine for simple programs, but as your project\ngrows, you\u2019ll want to manage all the options and make it easy to share your\ncode. Next, we\u2019ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs.\n\n[troubleshooting]: ch01-01-installation.html#troubleshooting\n[devtools]: appendix-04-useful-development-tools.md\n",
          "qas": [
            {
              "question": "With what commad can I compile program?",
              "id": 251,
              "answers": [
                {
                  "text": "rustc main.rs",
                  "answer_start": 5196
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I compile and run rust program?",
              "id": 239,
              "answers": [
                {
                  "text": "$ rustc main.rs\n$ ./main",
                  "answer_start": 2292
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of a '!'?",
              "id": 249,
              "answers": [
                {
                  "text": "you\u2019re calling a macro instead of a normal function",
                  "answer_start": 4457
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is println!() macro doing?",
              "id": 246,
              "answers": [
                {
                  "text": " it prints text to the\nscreen",
                  "answer_start": 4072
                }
              ],
              "is_impossible": false
            },
            {
              "question": "why is 'main' function special?",
              "id": 242,
              "answers": [
                {
                  "text": "it\nis always the first code that runs in every executable Rust program",
                  "answer_start": 3072
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What styling should I use for {}",
              "id": 244,
              "answers": [
                {
                  "text": "It\u2019s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.",
                  "answer_start": 3407
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Should I use spaces or tab?",
              "id": 247,
              "answers": [
                {
                  "text": " Rust style is to indent with four spaces, not a tab",
                  "answer_start": 4159
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is println!",
              "id": 248,
              "answers": [
                {
                  "text": "macro",
                  "answer_start": 4246
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I declare body of a function?",
              "id": 243,
              "answers": [
                {
                  "text": "The function body is wrapped in `{}`",
                  "answer_start": 3312
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the meaning of semicolon?",
              "id": 250,
              "answers": [
                {
                  "text": "indicates that this\nexpression is over and the next one is ready to begin",
                  "answer_start": 4766
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I print \"Hello, world!\" to the screen?",
              "id": 245,
              "answers": [
                {
                  "text": " println!(\"Hello, world!\");",
                  "answer_start": 3988
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What function is always called first in rust?",
              "id": 241,
              "answers": [
                {
                  "text": "main",
                  "answer_start": 3045
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Method Syntax\n\n*Methods* are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat\u2019s run when the method is called from somewhere else. Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]<!-- ignore --> and [Chapter\n17][trait-objects]<!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on.\n\n### Defining Methods\n\nLet\u2019s change the `area` function that has a `Rectangle` instance as a parameter\nand instead make an `area` method defined on the `Rectangle` struct, as shown\nin Listing 5-13.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-13: Defining an `area` method on the\n`Rectangle` struct</span>\n\nTo define the function within the context of `Rectangle`, we start an `impl`\n(implementation) block for `Rectangle`. Everything within this `impl` block\nwill be associated with the `Rectangle` type. Then we move the `area` function\nwithin the `impl` curly brackets and change the first (and in this case, only)\nparameter to be `self` in the signature and everywhere within the body. In\n`main`, where we called the `area` function and passed `rect1` as an argument,\nwe can instead use *method syntax* to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.\n\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`.\nThe `&self` is actually short for `self: &Self`. Within an `impl` block, the\ntype `Self` is an alias for the type that the `impl` block is for. Methods must\nhave a parameter named `self` of type `Self` for their first parameter, so Rust\nlets you abbreviate this with only the name `self` in the first parameter spot.\nNote that we still need to use the `&` in front of the `self` shorthand to\nindicate that this method borrows the `Self` instance, just as we did in\n`rectangle: &Rectangle`. Methods can take ownership of `self`, borrow `self`\nimmutably, as we\u2019ve done here, or borrow `self` mutably, just as they can any\nother parameter.\n\nWe chose `&self` here for the same reason we used `&Rectangle` in the function\nversion: we don\u2019t want to take ownership, and we just want to read the data in\nthe struct, not write to it. If we wanted to change the instance that we\u2019ve\ncalled the method on as part of what the method does, we\u2019d use `&mut self` as\nthe first parameter. Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation.\n\nThe main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod\u2019s signature, is for organization. We\u2019ve put all the things we can do\nwith an instance of a type in one `impl` block rather than making future users\nof our code search for capabilities of `Rectangle` in various places in the\nlibrary we provide.\n\nNote that we can choose to give a method the same name as one of the struct\u2019s\nfields. For example, we can define a method on `Rectangle` that is also named\n`width`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-06-method-field-interaction/src/main.rs:here}}\n```\n\nHere, we\u2019re choosing to make the `width` method return `true` if the value in\nthe instance\u2019s `width` field is greater than `0` and `false` if the value is\n`0`: we can use a field within a method of the same name for any purpose. In\n`main`, when we follow `rect1.width` with parentheses, Rust knows we mean the\nmethod `width`. When we don\u2019t use parentheses, Rust knows we mean the field\n`width`.\n\nOften, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*, and Rust does not implement them automatically for struct\nfields as some other languages do. Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type\u2019s public API. We will discuss what public and private\nare and how to designate a field or method as public or private in [Chapter\n7][public]<!-- ignore -->.\n\n> ### Where\u2019s the `->` Operator?\n>\n> In C and C++, two different operators are used for calling methods: you use\n> `.` if you\u2019re calling a method on the object directly and `->` if you\u2019re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn\u2019t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.\n>\n> Here\u2019s how it works: when you call a method with `object.something()`, Rust\n> automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of\n> the method. In other words, the following are the same:\n>\n> <!-- CAN'T EXTRACT SEE BUG https://github.com/rust-lang/mdBook/issues/1127 -->\n> ```rust\n> # #[derive(Debug,Copy,Clone)]\n> # struct Point {\n> #     x: f64,\n> #     y: f64,\n> # }\n> #\n> # impl Point {\n> #    fn distance(&self, other: &Point) -> f64 {\n> #        let x_squared = f64::powi(other.x - self.x, 2);\n> #        let y_squared = f64::powi(other.y - self.y, 2);\n> #\n> #        f64::sqrt(x_squared + y_squared)\n> #    }\n> # }\n> # let p1 = Point { x: 0.0, y: 0.0 };\n> # let p2 = Point { x: 5.0, y: 6.5 };\n> p1.distance(&p2);\n> (&p1).distance(&p2);\n> ```\n>\n> The first one looks much cleaner. This automatic referencing behavior works\n> because methods have a clear receiver\u2014the type of `self`. Given the receiver\n> and name of a method, Rust can figure out definitively whether the method is\n> reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact\n> that Rust makes borrowing implicit for method receivers is a big part of\n> making ownership ergonomic in practice.\n\n### Methods with More Parameters\n\nLet\u2019s practice using methods by implementing a second method on the `Rectangle`\nstruct. This time we want an instance of `Rectangle` to take another instance\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\nwithin `self` (the first `Rectangle`); otherwise, it should return `false`.\nThat is, once we\u2019ve defined the `can_hold` method, we want to be able to write\nthe program shown in Listing 5-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-14: Using the as-yet-unwritten `can_hold`\nmethod</span>\n\nThe expected output would look like the following because both dimensions of\n`rect2` are smaller than the dimensions of `rect1`, but `rect3` is wider than\n`rect1`:\n\n```text\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n```\n\nWe know we want to define a method, so it will be within the `impl Rectangle`\nblock. The method name will be `can_hold`, and it will take an immutable borrow\nof another `Rectangle` as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\nread `rect2` (rather than write, which would mean we\u2019d need a mutable borrow),\nand we want `main` to retain ownership of `rect2` so we can use it again after\ncalling the `can_hold` method. The return value of `can_hold` will be a\nBoolean, and the implementation will check whether the width and height of\n`self` are greater than the width and height of the other `Rectangle`,\nrespectively. Let\u2019s add the new `can_hold` method to the `impl` block from\nListing 5-13, shown in Listing 5-15.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-15: Implementing the `can_hold` method on\n`Rectangle` that takes another `Rectangle` instance as a parameter</span>\n\nWhen we run this code with the `main` function in Listing 5-14, we\u2019ll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the `self` parameter, and those parameters work just like\nparameters in functions.\n\n### Associated Functions\n\nAll functions defined within an `impl` block are called *associated functions*\nbecause they\u2019re associated with the type named after the `impl`. We can define\nassociated functions that don\u2019t have `self` as their first parameter (and thus\nare not methods) because they don\u2019t need an instance of the type to work with.\nWe\u2019ve already used one function like this: the `String::from` function that\u2019s\ndefined on the `String` type.\n\nAssociated functions that aren\u2019t methods are often used for constructors that\nwill return a new instance of the struct. These are often called `new`, but\n`new` isn\u2019t a special name and isn\u2019t built into the language. For example, we\ncould choose to provide an associated function named `square` that would have\none dimension parameter and use that as both width and height, thus making it\neasier to create a square `Rectangle` rather than having to specify the same\nvalue twice:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-03-associated-functions/src/main.rs:here}}\n```\n\nThe `Self` keywords in the return type and in the body of the function are\naliases for the type that appears after the `impl` keyword, which in this case\nis `Rectangle`.\n\nTo call this associated function, we use the `::` syntax with the struct name;\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\nthe struct: the `::` syntax is used for both associated functions and\nnamespaces created by modules. We\u2019ll discuss modules in [Chapter\n7][modules]<!-- ignore -->.\n\n### Multiple `impl` Blocks\n\nEach struct is allowed to have multiple `impl` blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method in\nits own `impl` block.\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-16/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 5-16: Rewriting Listing 5-15 using multiple `impl`\nblocks</span>\n\nThere\u2019s no reason to separate these methods into multiple `impl` blocks here,\nbut this is valid syntax. We\u2019ll see a case in which multiple `impl` blocks are\nuseful in Chapter 10, where we discuss generic types and traits.\n\n## Summary\n\nStructs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.\n\nBut structs aren\u2019t the only way you can create custom types: let\u2019s turn to\nRust\u2019s enum feature to add another tool to your toolbox.\n\n[enums]: ch06-00-enums.html\n[trait-objects]: ch17-02-trait-objects.md\n[public]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n",
          "qas": [
            {
              "question": "What are the similarities between methods and functions?",
              "id": 67,
              "answers": [
                {
                  "text": "*Methods* are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat\u2019s run when the method is called from somewhere else.",
                  "answer_start": 18
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are 'getters' in rust?\n",
              "id": 72,
              "answers": [
                {
                  "text": "Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*",
                  "answer_start": 4204
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When happens \"method syntax\"?\n",
              "id": 69,
              "answers": [
                {
                  "text": "*method syntax* to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.\n",
                  "answer_start": 1517
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is useful to having a method that takes ownership of the instance by using just `self` as the first parameter?",
              "id": 70,
              "answers": [
                {
                  "text": "Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation.",
                  "answer_start": 2756
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between methods and functions?",
              "id": 68,
              "answers": [
                {
                  "text": "Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]\u2039!-- ignore --> and [Chapter\n17][trait-objects]\u2039!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on.",
                  "answer_start": 234
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why use method instead of function?",
              "id": 71,
              "answers": [
                {
                  "text": "The main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod\u2019s signature, is for organization.",
                  "answer_start": 3042
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does rust do instead of '->' used in C and C++?",
              "id": 75,
              "answers": [
                {
                  "text": "> In C and C++, two different operators are used for calling methods: you use\n> `.` if you\u2019re calling a method on the object directly and `->` if you\u2019re\n> calling the method on a pointer to the object and need to dereference the\n> pointer first. In other words, if `object` is a pointer,\n> `object->something()` is similar to `(*object).something()`.\n>\n> Rust doesn\u2019t have an equivalent to the `->` operator; instead, Rust has a\n> feature called *automatic referencing and dereferencing*. Calling methods is\n> one of the few places in Rust that has this behavior.",
                  "answer_start": 4818
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What structs allow me?",
              "id": 79,
              "answers": [
                {
                  "text": "Structs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear.",
                  "answer_start": 11345
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why can I define associated functions that don\u2019t have `self` as their first parameter?",
              "id": 77,
              "answers": [
                {
                  "text": "We can define\nassociated functions that don\u2019t have `self` as their first parameter (and thus\nare not methods) because they don\u2019t need an instance of the type to work with.",
                  "answer_start": 9237
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does rust implement automatically getters for the struct fields?",
              "id": 73,
              "answers": [
                {
                  "text": "Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called *getters*, and Rust does not implement them automatically for struct\nfields as some other languages do.",
                  "answer_start": 4204
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are used associated functions that aren\u2019t methods ?",
              "id": 78,
              "answers": [
                {
                  "text": "Associated functions that aren\u2019t methods are often used for constructors that\nwill return a new instance of the struct.",
                  "answer_start": 9518
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## `RefCell<T>` and the Interior Mutability Pattern\n\n*Interior mutability* is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data; normally, this\naction is disallowed by the borrowing rules. To mutate data, the pattern uses\n`unsafe` code inside a data structure to bend Rust\u2019s usual rules that govern\nmutation and borrowing. Unsafe code indicates to the compiler that we\u2019re\nchecking the rules manually instead of relying on the compiler to check them\nfor us; we will discuss unsafe code more in Chapter 19.\n\nWe can use types that use the interior mutability pattern only when we can\nensure that the borrowing rules will be followed at runtime, even though the\ncompiler can\u2019t guarantee that. The `unsafe` code involved is then wrapped in a\nsafe API, and the outer type is still immutable.\n\nLet\u2019s explore this concept by looking at the `RefCell<T>` type that follows the\ninterior mutability pattern.\n\n### Enforcing Borrowing Rules at Runtime with `RefCell<T>`\n\nUnlike `Rc<T>`, the `RefCell<T>` type represents single ownership over the data\nit holds. So, what makes `RefCell<T>` different from a type like `Box<T>`?\nRecall the borrowing rules you learned in Chapter 4:\n\n* At any given time, you can have *either* (but not both) one mutable reference\n  or any number of immutable references.\n* References must always be valid.\n\nWith references and `Box<T>`, the borrowing rules\u2019 invariants are enforced at\ncompile time. With `RefCell<T>`, these invariants are enforced *at runtime*.\nWith references, if you break these rules, you\u2019ll get a compiler error. With\n`RefCell<T>`, if you break these rules, your program will panic and exit.\n\nThe advantages of checking the borrowing rules at compile time are that errors\nwill be caught sooner in the development process, and there is no impact on\nruntime performance because all the analysis is completed beforehand. For those\nreasons, checking the borrowing rules at compile time is the best choice in the\nmajority of cases, which is why this is Rust\u2019s default.\n\nThe advantage of checking the borrowing rules at runtime instead is that\ncertain memory-safe scenarios are then allowed, where they would\u2019ve been\ndisallowed by the compile-time checks. Static analysis, like the Rust compiler,\nis inherently conservative. Some properties of code are impossible to detect by\nanalyzing the code: the most famous example is the Halting Problem, which is\nbeyond the scope of this book but is an interesting topic to research.\n\nBecause some analysis is impossible, if the Rust compiler can\u2019t be sure the\ncode complies with the ownership rules, it might reject a correct program; in\nthis way, it\u2019s conservative. If Rust accepted an incorrect program, users\nwouldn\u2019t be able to trust in the guarantees Rust makes. However, if Rust\nrejects a correct program, the programmer will be inconvenienced, but nothing\ncatastrophic can occur. The `RefCell<T>` type is useful when you\u2019re sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that.\n\nSimilar to `Rc<T>`, `RefCell<T>` is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext. We\u2019ll talk about how to get the functionality of `RefCell<T>` in a\nmultithreaded program in Chapter 16.\n\nHere is a recap of the reasons to choose `Box<T>`, `Rc<T>`, or `RefCell<T>`:\n\n* `Rc<T>` enables multiple owners of the same data; `Box<T>` and `RefCell<T>`\n  have single owners.\n* `Box<T>` allows immutable or mutable borrows checked at compile time; `Rc<T>`\n  allows only immutable borrows checked at compile time; `RefCell<T>` allows\n  immutable or mutable borrows checked at runtime.\n* Because `RefCell<T>` allows mutable borrows checked at runtime, you can\n  mutate the value inside the `RefCell<T>` even when the `RefCell<T>` is\n  immutable.\n\nMutating the value inside an immutable value is the *interior mutability*\npattern. Let\u2019s look at a situation in which interior mutability is useful and\nexamine how it\u2019s possible.\n\n### Interior Mutability: A Mutable Borrow to an Immutable Value\n\nA consequence of the borrowing rules is that when you have an immutable value,\nyou can\u2019t borrow it mutably. For example, this code won\u2019t compile:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/src/main.rs}}\n```\n\nIf you tried to compile this code, you\u2019d get the following error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/output.txt}}\n```\n\nHowever, there are situations in which it would be useful for a value to mutate\nitself in its methods but appear immutable to other code. Code outside the\nvalue\u2019s methods would not be able to mutate the value. Using `RefCell<T>` is\none way to get the ability to have interior mutability, but `RefCell<T>`\ndoesn\u2019t get around the borrowing rules completely: the borrow checker in the\ncompiler allows this interior mutability, and the borrowing rules are checked\nat runtime instead. If you violate the rules, you\u2019ll get a `panic!` instead of\na compiler error.\n\nLet\u2019s work through a practical example where we can use `RefCell<T>` to mutate\nan immutable value and see why that is useful.\n\n#### A Use Case for Interior Mutability: Mock Objects\n\nSometimes during testing a programmer will use a type in place of another type,\nin order to observe particular behavior and assert it\u2019s implemented correctly.\nThis placeholder type is called a *test double*. Think of it in the sense of a\n\u201cstunt double\u201d in filmmaking, where a person steps in and substitutes for an\nactor to do a particular tricky scene. Test doubles stand in for other types\nwhen we\u2019re running tests. *Mock objects* are specific types of test doubles\nthat record what happens during a test so you can assert that the correct\nactions took place.\n\nRust doesn\u2019t have objects in the same sense as other languages have objects,\nand Rust doesn\u2019t have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object.\n\nHere\u2019s the scenario we\u2019ll test: we\u2019ll create a library that tracks a value\nagainst a maximum value and sends messages based on how close to the maximum\nvalue the current value is. This library could be used to keep track of a\nuser\u2019s quota for the number of API calls they\u2019re allowed to make, for example.\n\nOur library will only provide the functionality of tracking how close to the\nmaximum a value is and what the messages should be at what times. Applications\nthat use our library will be expected to provide the mechanism for sending the\nmessages: the application could put a message in the application, send an\nemail, send a text message, or something else. The library doesn\u2019t need to know\nthat detail. All it needs is something that implements a trait we\u2019ll provide\ncalled `Messenger`. Listing 15-20 shows the library code:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-20/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 15-20: A library to keep track of how close a\nvalue is to a maximum value and warn when the value is at certain levels</span>\n\nOne important part of this code is that the `Messenger` trait has one method\ncalled `send` that takes an immutable reference to `self` and the text of the\nmessage. This trait is the interface our mock object needs to implement so that\nthe mock can be used in the same way a real object is. The other important part\nis that we want to test the behavior of the `set_value` method on the\n`LimitTracker`. We can change what we pass in for the `value` parameter, but\n`set_value` doesn\u2019t return anything for us to make assertions on. We want to be\nable to say that if we create a `LimitTracker` with something that implements\nthe `Messenger` trait and a particular value for `max`, when we pass different\nnumbers for `value`, the messenger is told to send the appropriate messages.\n\nWe need a mock object that, instead of sending an email or text message when we\ncall `send`, will only keep track of the messages it\u2019s told to send. We can\ncreate a new instance of the mock object, create a `LimitTracker` that uses the\nmock object, call the `set_value` method on `LimitTracker`, and then check that\nthe mock object has the messages we expect. Listing 15-21 shows an attempt to\nimplement a mock object to do just that, but the borrow checker won\u2019t allow it:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-21/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-21: An attempt to implement a `MockMessenger`\nthat isn\u2019t allowed by the borrow checker</span>\n\nThis test code defines a `MockMessenger` struct that has a `sent_messages`\nfield with a `Vec` of `String` values to keep track of the messages it\u2019s told\nto send. We also define an associated function `new` to make it convenient to\ncreate new `MockMessenger` values that start with an empty list of messages. We\nthen implement the `Messenger` trait for `MockMessenger` so we can give a\n`MockMessenger` to a `LimitTracker`. In the definition of the `send` method, we\ntake the message passed in as a parameter and store it in the `MockMessenger`\nlist of `sent_messages`.\n\nIn the test, we\u2019re testing what happens when the `LimitTracker` is told to set\n`value` to something that is more than 75 percent of the `max` value. First, we\ncreate a new `MockMessenger`, which will start with an empty list of messages.\nThen we create a new `LimitTracker` and give it a reference to the new\n`MockMessenger` and a `max` value of 100. We call the `set_value` method on the\n`LimitTracker` with a value of 80, which is more than 75 percent of 100. Then\nwe assert that the list of messages that the `MockMessenger` is keeping track\nof should now have one message in it.\n\nHowever, there\u2019s one problem with this test, as shown here:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-21/output.txt}}\n```\n\nWe can\u2019t modify the `MockMessenger` to keep track of the messages, because the\n`send` method takes an immutable reference to `self`. We also can\u2019t take the\nsuggestion from the error text to use `&mut self` instead, because then the\nsignature of `send` wouldn\u2019t match the signature in the `Messenger` trait\ndefinition (feel free to try and see what error message you get).\n\nThis is a situation in which interior mutability can help! We\u2019ll store the\n`sent_messages` within a `RefCell<T>`, and then the `send` method will be\nable to modify `sent_messages` to store the messages we\u2019ve seen. Listing 15-22\nshows what that looks like:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-22/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-22: Using `RefCell<T>` to mutate an inner\nvalue while the outer value is considered immutable</span>\n\nThe `sent_messages` field is now of type `RefCell<Vec<String>>` instead of\n`Vec<String>`. In the `new` function, we create a new `RefCell<Vec<String>>`\ninstance around the empty vector.\n\nFor the implementation of the `send` method, the first parameter is still an\nimmutable borrow of `self`, which matches the trait definition. We call\n`borrow_mut` on the `RefCell<Vec<String>>` in `self.sent_messages` to get a\nmutable reference to the value inside the `RefCell<Vec<String>>`, which is the\nvector. Then we can call `push` on the mutable reference to the vector to keep\ntrack of the messages sent during the test.\n\nThe last change we have to make is in the assertion: to see how many items are\nin the inner vector, we call `borrow` on the `RefCell<Vec<String>>` to get an\nimmutable reference to the vector.\n\nNow that you\u2019ve seen how to use `RefCell<T>`, let\u2019s dig into how it works!\n\n#### Keeping Track of Borrows at Runtime with `RefCell<T>`\n\nWhen creating immutable and mutable references, we use the `&` and `&mut`\nsyntax, respectively. With `RefCell<T>`, we use the `borrow` and `borrow_mut`\nmethods, which are part of the safe API that belongs to `RefCell<T>`. The\n`borrow` method returns the smart pointer type `Ref<T>`, and `borrow_mut`\nreturns the smart pointer type `RefMut<T>`. Both types implement `Deref`, so we\ncan treat them like regular references.\n\nThe `RefCell<T>` keeps track of how many `Ref<T>` and `RefMut<T>` smart\npointers are currently active. Every time we call `borrow`, the `RefCell<T>`\nincreases its count of how many immutable borrows are active. When a `Ref<T>`\nvalue goes out of scope, the count of immutable borrows goes down by one. Just\nlike the compile-time borrowing rules, `RefCell<T>` lets us have many immutable\nborrows or one mutable borrow at any point in time.\n\nIf we try to violate these rules, rather than getting a compiler error as we\nwould with references, the implementation of `RefCell<T>` will panic at\nruntime. Listing 15-23 shows a modification of the implementation of `send` in\nListing 15-22. We\u2019re deliberately trying to create two mutable borrows active\nfor the same scope to illustrate that `RefCell<T>` prevents us from doing this\nat runtime.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,panics\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-23/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-23: Creating two mutable references in the\nsame scope to see that `RefCell<T>` will panic</span>\n\nWe create a variable `one_borrow` for the `RefMut<T>` smart pointer returned\nfrom `borrow_mut`. Then we create another mutable borrow in the same way in the\nvariable `two_borrow`. This makes two mutable references in the same scope,\nwhich isn\u2019t allowed. When we run the tests for our library, the code in Listing\n15-23 will compile without any errors, but the test will fail:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-23/output.txt}}\n```\n\nNotice that the code panicked with the message `already borrowed:\nBorrowMutError`. This is how `RefCell<T>` handles violations of the borrowing\nrules at runtime.\n\nChoosing to catch borrowing errors at runtime rather than compile time, as\nwe\u2019ve done here, means you\u2019d potentially be finding mistakes in your code later\nin the development process: possibly not until your code was deployed to\nproduction. Also, your code would incur a small runtime performance penalty as\na result of keeping track of the borrows at runtime rather than compile time.\nHowever, using `RefCell<T>` makes it possible to write a mock object that can\nmodify itself to keep track of the messages it has seen while you\u2019re using it\nin a context where only immutable values are allowed. You can use `RefCell<T>`\ndespite its trade-offs to get more functionality than regular references\nprovide.\n\n### Having Multiple Owners of Mutable Data by Combining `Rc<T>` and `RefCell<T>`\n\nA common way to use `RefCell<T>` is in combination with `Rc<T>`. Recall that\n`Rc<T>` lets you have multiple owners of some data, but it only gives immutable\naccess to that data. If you have an `Rc<T>` that holds a `RefCell<T>`, you can\nget a value that can have multiple owners *and* that you can mutate!\n\nFor example, recall the cons list example in Listing 15-18 where we used\n`Rc<T>` to allow multiple lists to share ownership of another list. Because\n`Rc<T>` holds only immutable values, we can\u2019t change any of the values in the\nlist once we\u2019ve created them. Let\u2019s add in `RefCell<T>` to gain the ability to\nchange the values in the lists. Listing 15-24 shows that by using a\n`RefCell<T>` in the `Cons` definition, we can modify the value stored in all\nthe lists:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-24/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-24: Using `Rc<RefCell<i32>>` to create a\n`List` that we can mutate</span>\n\nWe create a value that is an instance of `Rc<RefCell<i32>>` and store it in a\nvariable named `value` so we can access it directly later. Then we create a\n`List` in `a` with a `Cons` variant that holds `value`. We need to clone\n`value` so both `a` and `value` have ownership of the inner `5` value rather\nthan transferring ownership from `value` to `a` or having `a` borrow from\n`value`.\n\nWe wrap the list `a` in an `Rc<T>` so when we create lists `b` and `c`, they\ncan both refer to `a`, which is what we did in Listing 15-18.\n\nAfter we\u2019ve created the lists in `a`, `b`, and `c`, we want to add 10 to the\nvalue in `value`. We do this by calling `borrow_mut` on `value`, which uses the\nautomatic dereferencing feature we discussed in Chapter 5 (see the section\n[\u201cWhere\u2019s the `->` Operator?\u201d][wheres-the---operator]<!-- ignore -->) to\ndereference the `Rc<T>` to the inner `RefCell<T>` value. The `borrow_mut`\nmethod returns a `RefMut<T>` smart pointer, and we use the dereference operator\non it and change the inner value.\n\nWhen we print `a`, `b`, and `c`, we can see that they all have the modified\nvalue of 15 rather than 5:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-24/output.txt}}\n```\n\nThis technique is pretty neat! By using `RefCell<T>`, we have an outwardly\nimmutable `List` value. But we can use the methods on `RefCell<T>` that provide\naccess to its interior mutability so we can modify our data when we need to.\nThe runtime checks of the borrowing rules protect us from data races, and it\u2019s\nsometimes worth trading a bit of speed for this flexibility in our data\nstructures. Note that `RefCell<T>` does not work for multithreaded code!\n`Mutex<T>` is the thread-safe version of `RefCell<T>` and we\u2019ll discuss\n`Mutex<T>` in Chapter 16.\n\n[wheres-the---operator]: ch05-03-method-syntax.html#wheres-the---operator\n",
          "qas": [
            {
              "question": "How RefCell<T> differs from Box<T>?",
              "id": 63,
              "answers": [
                {
                  "text": "With references and `Box\u2039T>`, the borrowing rules\u2019 invariants are enforced at\ncompile time. With `RefCell\u2039T>`, these invariants are enforced *at runtime*.",
                  "answer_start": 1383
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences between Rust smart pointers?",
              "id": 66,
              "answers": [
                {
                  "text": "Here is a recap of the reasons to choose `Box\u2039T>`, `Rc\u2039T>`, or `RefCell\u2039T>`:\n\n* `Rc\u2039T>` enables multiple owners of the same data; `Box\u2039T>` and `RefCell\u2039T>`\n  have single owners.\n* `Box\u2039T>` allows immutable or mutable borrows checked at compile time; `Rc\u2039T>`\n  allows only immutable borrows checked at compile time; `RefCell\u2039T>` allows\n  immutable or mutable borrows checked at runtime.\n* Because `RefCell\u2039T>` allows mutable borrows checked at runtime, you can\n  mutate the value inside the `RefCell\u2039T>` even when the `RefCell\u2039T>` is\n  immutable.",
                  "answer_start": 3339
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens if you break ownership rules with RefCell<T>?",
              "id": 67,
              "answers": [
                {
                  "text": " If you violate the rules, you\u2019ll get a `panic!` instead of\na compiler error.",
                  "answer_start": 5092
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is interior mutability?",
              "id": 62,
              "answers": [
                {
                  "text": "*Interior mutability* is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data",
                  "answer_start": 53
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can RefCell<T> be used in multithreading?",
              "id": 65,
              "answers": [
                {
                  "text": "Similar to `Rc\u2039T>`, `RefCell\u2039T>` is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext.",
                  "answer_start": 3069
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can you create mock?",
              "id": 69,
              "answers": [
                {
                  "text": "Rust doesn\u2019t have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object.",
                  "answer_start": 5997
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the advantage of RefCell<T>?",
              "id": 64,
              "answers": [
                {
                  "text": "The `RefCell\u2039T>` type is useful when you\u2019re sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that.",
                  "answer_start": 2920
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.\n\nA path can take two forms:\n\n* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).\n\nReturning to Listing 7-1, say we want to call the `add_to_waitlist` function.\nThis is the same as asking: what\u2019s the path of the `add_to_waitlist` function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved.\n\nWe\u2019ll show two ways to call the `add_to_waitlist` function from a new function\n`eat_at_restaurant` defined in the crate root. These paths are correct, but\nthere\u2019s another problem remaining that will prevent this example from compiling\nas-is. We\u2019ll explain why in a bit.\n\nThe `eat_at_restaurant` function is part of our library crate\u2019s public API, so\nwe mark it with the `pub` keyword. In the [\u201cExposing Paths with the `pub`\nKeyword\u201d][pub]<!-- ignore --> section, we\u2019ll go into more detail about `pub`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-03/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-3: Calling the `add_to_waitlist` function using\nabsolute and relative paths</span>\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`,\nwe use an absolute path. The `add_to_waitlist` function is defined in the same\ncrate as `eat_at_restaurant`, which means we can use the `crate` keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to `add_to_waitlist`. You can imagine a filesystem with the same\nstructure: we\u2019d specify the path `/front_of_house/hosting/add_to_waitlist` to\nrun the `add_to_waitlist` program; using the `crate` name to start from the\ncrate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a\nrelative path. The path starts with `front_of_house`, the name of the module\ndefined at the same level of the module tree as `eat_at_restaurant`. Here the\nfilesystem equivalent would be using the path\n`front_of_house/hosting/add_to_waitlist`. Starting with a module name means\nthat the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you\u2019ll make\nbased on your project, and depends on whether you\u2019re more likely to move item\ndefinition code separately from or together with the code that uses the item.\nFor example, if we move the `front_of_house` module and the `eat_at_restaurant`\nfunction into a module named `customer_experience`, we\u2019d need to update the\nabsolute path to `add_to_waitlist`, but the relative path would still be valid.\nHowever, if we moved the `eat_at_restaurant` function separately into a module\nnamed `dining`, the absolute path to the `add_to_waitlist` call would stay the\nsame, but the relative path would need to be updated. Our preference in general\nis to specify absolute paths because it\u2019s more likely we\u2019ll want to move code\ndefinitions and item calls independently of each other.\n\nLet\u2019s try to compile Listing 7-3 and find out why it won\u2019t compile yet! The\nerror we get is shown in Listing 7-4.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span>\n\nThe error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won\u2019t let us use them because it doesn\u2019t have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.\n\nItems in a parent module can\u2019t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they\u2019re defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate.\n\nRust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules\u2019 code to outer ancestor\nmodules by using the `pub` keyword to make an item public.\n\n### Exposing Paths with the `pub` Keyword\n\nLet\u2019s return to the error in Listing 7-4 that told us the `hosting` module is\nprivate. We want the `eat_at_restaurant` function in the parent module to have\naccess to the `add_to_waitlist` function in the child module, so we mark the\n`hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-05/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-5: Declaring the `hosting` module as `pub` to\nuse it from `eat_at_restaurant`</span>\n\nUnfortunately, the code in Listing 7-5 still results in an error, as shown in\nListing 7-6.\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-05/output.txt}}\n```\n\n<span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span>\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the\nmodule public. With this change, if we can access `front_of_house`, we can\naccess `hosting`. But the *contents* of `hosting` are still private; making the\nmodule public doesn\u2019t make its contents public. The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there\u2019s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.\n\nLet\u2019s also make the `add_to_waitlist` function public by adding the `pub`\nkeyword before its definition, as in Listing 7-7.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-07/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-7: Adding the `pub` keyword to `mod hosting`\nand `fn add_to_waitlist` lets us call the function from\n`eat_at_restaurant`</span>\n\nNow the code will compile! To see why adding the `pub` keyword lets us use\nthese paths in `add_to_waitlist` with respect to the privacy rules, let\u2019s look\nat the absolute and the relative paths.\n\nIn the absolute path, we start with `crate`, the root of our crate\u2019s module\ntree. The `front_of_house` module is defined in the crate root. While\n`front_of_house` isn\u2019t public, because the `eat_at_restaurant` function is\ndefined in the same module as `front_of_house` (that is, `eat_at_restaurant`\nand `front_of_house` are siblings), we can refer to `front_of_house` from\n`eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can\naccess the parent module of `hosting`, so we can access `hosting`. Finally, the\n`add_to_waitlist` function is marked with `pub` and we can access its parent\nmodule, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n`front_of_house`. The `front_of_house` module is defined within the same module\nas `eat_at_restaurant`, so the relative path starting from the module in which\n`eat_at_restaurant` is defined works. Then, because `hosting` and\n`add_to_waitlist` are marked with `pub`, the rest of the path works, and this\nfunction call is valid!\n\nIf you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are out of the scope of this book; if you\u2019re\ninterested in this topic, see [The Rust API Guidelines][api-guidelines].\n\n> #### Best Practices for Packages with a Binary and a Library\n>\n> We mentioned a package can contain both a *src/main.rs* binary crate root as\n> well as a *src/lib.rs* library crate root, and both crates will have the\n> package name by default. Typically, packages with this pattern of containing\n> both a library and a binary crate will have just enough code in the binary\n> crate to start an executable that calls code with the library crate. This\n> lets other projects benefit from the most functionality that the package\n> provides, because the library crate\u2019s code can be shared.\n>\n> The module tree should be defined in *src/lib.rs*. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you\u2019re also a\n> client!\n>\n> In [Chapter 12][ch12]<!-- ignore -->, we\u2019ll demonstrate this organizational\n> practice with a command-line program that will contain both a binary crate\n> and a library crate.\n\n### Starting Relative Paths with `super`\n\nWe can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax. Using\n`super` allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent, but the parent might be moved elsewhere in the module\ntree someday.\n\nConsider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction `fix_incorrect_order` defined in the `back_of_house` module calls the\nfunction `deliver_order` defined in the parent module by specifying the path to\n`deliver_order` starting with `super`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-08/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with `super`</span>\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can\nuse `super` to go to the parent module of `back_of_house`, which in this case\nis `crate`, the root. From there, we look for `deliver_order` and find it.\nSuccess! We think the `back_of_house` module and the `deliver_order` function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate\u2019s module tree. Therefore, we\nused `super` so we\u2019ll have fewer places to update code in the future if this\ncode gets moved to a different module.\n\n### Making Structs and Enums Public\n\nWe can also use `pub` to designate structs and enums as public, but there are a\nfew details extra to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct\u2019s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we\u2019ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what\u2019s in season and in stock. The available fruit changes quickly, so\ncustomers can\u2019t choose the fruit or even see which fruit they\u2019ll get.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-09/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span>\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public,\nin `eat_at_restaurant` we can write and read to the `toast` field using dot\nnotation. Notice that we can\u2019t use the `seasonal_fruit` field in\n`eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the\nline modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of `Breakfast` (we\u2019ve named it `summer` here). If `Breakfast` didn\u2019t\nhave such a function, we couldn\u2019t create an instance of `Breakfast` in\n`eat_at_restaurant` because we couldn\u2019t set the value of the private\n`seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-10/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span>\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad`\nvariants in `eat_at_restaurant`.\n\nEnums aren\u2019t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`.\n\nThere\u2019s one more situation involving `pub` that we haven\u2019t covered, and that is\nour last module system feature: the `use` keyword. We\u2019ll cover `use` by itself\nfirst, and then we\u2019ll show how to combine `pub` and `use`.\n\n[pub]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[api-guidelines]: https://rust-lang.github.io/api-guidelines/\n[ch12]: ch12-00-an-io-project.html\n",
          "qas": [
            {
              "question": "Can items in child modules use the items in their ancestor modules?",
              "id": 144,
              "answers": [
                {
                  "text": "Items in a parent module can\u2019t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they\u2019re defined. ",
                  "answer_start": 4356
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I have public enum, are the fields inside the enum public too?",
              "id": 150,
              "answers": [
                {
                  "text": "In contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword",
                  "answer_start": 13940
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What lets me keyword 'super'?",
              "id": 148,
              "answers": [
                {
                  "text": "We can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax. Using\n`super` allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent, but the parent might be moved elsewhere in the module\ntree someday.",
                  "answer_start": 10389
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that I have error messages that module is private?",
              "id": 142,
              "answers": [
                {
                  "text": "The error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won\u2019t let us use them because it doesn\u2019t have access to the\nprivate sections.",
                  "answer_start": 3899
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the differences and similarities between absolute and relative path?",
              "id": 140,
              "answers": [
                {
                  "text": "* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`).",
                  "answer_start": 256
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the two forms of the paths?",
              "id": 139,
              "answers": [
                {
                  "text": "A path can take two forms:\n\n* An *absolute path* is the full path starting from a crate root; for code\n  from an external crate, the absolute path begins with the crate name, and for\n  code from the current crate, it starts with the literal `crate`.\n* A *relative path* starts from the current module and uses `self`, `super`, or\n  an identifier in the current module.",
                  "answer_start": 228
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I expose inner parts of child modules\u2019 code to outer ancestor modules?",
              "id": 145,
              "answers": [
                {
                  "text": "Rust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules\u2019 code to outer ancestor\nmodules by using the `pub` keyword to make an item public.\n",
                  "answer_start": 4887
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I should remember if I want to make structs and enums public?",
              "id": 149,
              "answers": [
                {
                  "text": "We can also use `pub` to designate structs and enums as public, but there are a\nfew details extra to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct\u2019s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we\u2019ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what\u2019s in season and in stock. The available fruit changes quickly, so\ncustomers can\u2019t choose the fruit or even see which fruit they\u2019ll get.",
                  "answer_start": 12111
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Decision to choose absolute or relative path depends on what?",
              "id": 141,
              "answers": [
                {
                  "text": "Choosing whether to use a relative or absolute path is a decision you\u2019ll make\nbased on your project, and depends on whether you\u2019re more likely to move item\ndefinition code separately from or together with the code that uses the item.\nFor example, if we move the `front_of_house` module and the `eat_at_restaurant`\nfunction into a module named `customer_experience`, we\u2019d need to update the\nabsolute path to `add_to_waitlist`, but the relative path would still be valid.\nHowever, if we moved the `eat_at_restaurant` function separately into a module\nnamed `dining`, the absolute path to the `add_to_waitlist` call would stay the\nsame, but the relative path would need to be updated. Our preference in general\nis to specify absolute paths because it\u2019s more likely we\u2019ll want to move code\ndefinitions and item calls independently of each other.\n",
                  "answer_start": 2747
                }
              ],
              "is_impossible": false
            },
            {
              "question": "The `pub` keyword on a module give the access its inner code or not?",
              "id": 146,
              "answers": [
                {
                  "text": "The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there\u2019s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.\n",
                  "answer_start": 6462
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why enums aren\u2019t so useful unless their variants are public?",
              "id": 151,
              "answers": [
                {
                  "text": "Enums aren\u2019t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public.",
                  "answer_start": 14478
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I should know to call a function?",
              "id": 138,
              "answers": [
                {
                  "text": "To show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.",
                  "answer_start": 54
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I make item in rust private?",
              "id": 143,
              "answers": [
                {
                  "text": "In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.",
                  "answer_start": 4146
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Using Trait Objects That Allow for Values of Different Types\n\nIn Chapter 8, we mentioned that one limitation of vectors is that they can\nstore elements of only one type. We created a workaround in Listing 8-9 where\nwe defined a `SpreadsheetCell` enum that had variants to hold integers, floats,\nand text. This meant we could store different types of data in each cell and\nstill have a vector that represented a row of cells. This is a perfectly good\nsolution when our interchangeable items are a fixed set of types that we know\nwhen our code is compiled.\n\nHowever, sometimes we want our library user to be able to extend the set of\ntypes that are valid in a particular situation. To show how we might achieve\nthis, we\u2019ll create an example graphical user interface (GUI) tool that iterates\nthrough a list of items, calling a `draw` method on each one to draw it to the\nscreen\u2014a common technique for GUI tools. We\u2019ll create a library crate called\n`gui` that contains the structure of a GUI library. This crate might include\nsome types for people to use, such as `Button` or `TextField`. In addition,\n`gui` users will want to create their own types that can be drawn: for\ninstance, one programmer might add an `Image` and another might add a\n`SelectBox`.\n\nWe won\u2019t implement a fully fledged GUI library for this example but will show\nhow the pieces would fit together. At the time of writing the library, we can\u2019t\nknow and define all the types other programmers might want to create. But we do\nknow that `gui` needs to keep track of many values of different types, and it\nneeds to call a `draw` method on each of these differently typed values. It\ndoesn\u2019t need to know exactly what will happen when we call the `draw` method,\njust that the value will have that method available for us to call.\n\nTo do this in a language with inheritance, we might define a class named\n`Component` that has a method named `draw` on it. The other classes, such as\n`Button`, `Image`, and `SelectBox`, would inherit from `Component` and thus\ninherit the `draw` method. They could each override the `draw` method to define\ntheir custom behavior, but the framework could treat all of the types as if\nthey were `Component` instances and call `draw` on them. But because Rust\ndoesn\u2019t have inheritance, we need another way to structure the `gui` library to\nallow users to extend it with new types.\n\n### Defining a Trait for Common Behavior\n\nTo implement the behavior we want `gui` to have, we\u2019ll define a trait named\n`Draw` that will have one method named `draw`. Then we can define a vector that\ntakes a *trait object*. A trait object points to both an instance of a type\nimplementing our specified trait and a table used to look up trait methods on\nthat type at runtime. We create a trait object by specifying some sort of\npointer, such as a `&` reference or a `Box<T>` smart pointer, then the `dyn`\nkeyword, and then specifying the relevant trait. (We\u2019ll talk about the reason\ntrait objects must use a pointer in Chapter 19 in the section [\u201cDynamically\nSized Types and the `Sized` Trait.\u201d][dynamically-sized]<!-- ignore -->) We can\nuse trait objects in place of a generic or concrete type. Wherever we use a\ntrait object, Rust\u2019s type system will ensure at compile time that any value\nused in that context will implement the trait object\u2019s trait. Consequently, we\ndon\u2019t need to know all the possible types at compile time.\n\nWe\u2019ve mentioned that, in Rust, we refrain from calling structs and enums\n\u201cobjects\u201d to distinguish them from other languages\u2019 objects. In a struct or\nenum, the data in the struct fields and the behavior in `impl` blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object. However, trait objects *are* more like\nobjects in other languages in the sense that they combine data and behavior.\nBut trait objects differ from traditional objects in that we can\u2019t add data to\na trait object. Trait objects aren\u2019t as generally useful as objects in other\nlanguages: their specific purpose is to allow abstraction across common\nbehavior.\n\nListing 17-3 shows how to define a trait named `Draw` with one method named\n`draw`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-03/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-3: Definition of the `Draw` trait</span>\n\nThis syntax should look familiar from our discussions on how to define traits\nin Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named\n`Screen` that holds a vector named `components`. This vector is of type\n`Box<dyn Draw>`, which is a trait object; it\u2019s a stand-in for any type inside\na `Box` that implements the `Draw` trait.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-04/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-4: Definition of the `Screen` struct with a\n`components` field holding a vector of trait objects that implement the `Draw`\ntrait</span>\n\nOn the `Screen` struct, we\u2019ll define a method named `run` that will call the\n`draw` method on each of its `components`, as shown in Listing 17-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-5: A `run` method on `Screen` that calls the\n`draw` method on each component</span>\n\nThis works differently from defining a struct that uses a generic type\nparameter with trait bounds. A generic type parameter can only be substituted\nwith one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime. For example, we\ncould have defined the `Screen` struct using a generic type and a trait bound\nas in Listing 17-6:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-06/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-6: An alternate implementation of the `Screen`\nstruct and its `run` method using generics and trait bounds</span>\n\nThis restricts us to a `Screen` instance that has a list of components all of\ntype `Button` or all of type `TextField`. If you\u2019ll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types.\n\nOn the other hand, with the method using trait objects, one `Screen` instance\ncan hold a `Vec<T>` that contains a `Box<Button>` as well as a\n`Box<TextField>`. Let\u2019s look at how this works, and then we\u2019ll talk about the\nruntime performance implications.\n\n### Implementing the Trait\n\nNow we\u2019ll add some types that implement the `Draw` trait. We\u2019ll provide the\n`Button` type. Again, actually implementing a GUI library is beyond the scope\nof this book, so the `draw` method won\u2019t have any useful implementation in its\nbody. To imagine what the implementation might look like, a `Button` struct\nmight have fields for `width`, `height`, and `label`, as shown in Listing 17-7:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-07/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-7: A `Button` struct that implements the\n`Draw` trait</span>\n\nThe `width`, `height`, and `label` fields on `Button` will differ from the\nfields on other components; for example, a `TextField` type might have those\nsame fields plus a `placeholder` field. Each of the types we want to draw on\nthe screen will implement the `Draw` trait but will use different code in the\n`draw` method to define how to draw that particular type, as `Button` has here\n(without the actual GUI code, as mentioned). The `Button` type, for instance,\nmight have an additional `impl` block containing methods related to what\nhappens when a user clicks the button. These kinds of methods won\u2019t apply to\ntypes like `TextField`.\n\nIf someone using our library decides to implement a `SelectBox` struct that has\n`width`, `height`, and `options` fields, they implement the `Draw` trait on the\n`SelectBox` type as well, as shown in Listing 17-8:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-8: Another crate using `gui` and implementing\nthe `Draw` trait on a `SelectBox` struct</span>\n\nOur library\u2019s user can now write their `main` function to create a `Screen`\ninstance. To the `Screen` instance, they can add a `SelectBox` and a `Button`\nby putting each in a `Box<T>` to become a trait object. They can then call the\n`run` method on the `Screen` instance, which will call `draw` on each of the\ncomponents. Listing 17-9 shows this implementation:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch17-oop/listing-17-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-9: Using trait objects to store values of\ndifferent types that implement the same trait</span>\n\nWhen we wrote the library, we didn\u2019t know that someone might add the\n`SelectBox` type, but our `Screen` implementation was able to operate on the\nnew type and draw it because `SelectBox` implements the `Draw` trait, which\nmeans it implements the `draw` method.\n\nThis concept\u2014of being concerned only with the messages a value responds to\nrather than the value\u2019s concrete type\u2014is similar to the concept of *duck\ntyping* in dynamically typed languages: if it walks like a duck and quacks\nlike a duck, then it must be a duck! In the implementation of `run` on `Screen`\nin Listing 17-5, `run` doesn\u2019t need to know what the concrete type of each\ncomponent is. It doesn\u2019t check whether a component is an instance of a `Button`\nor a `SelectBox`, it just calls the `draw` method on the component. By\nspecifying `Box<dyn Draw>` as the type of the values in the `components`\nvector, we\u2019ve defined `Screen` to need values that we can call the `draw`\nmethod on.\n\nThe advantage of using trait objects and Rust\u2019s type system to write code\nsimilar to code using duck typing is that we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn\u2019t implement a method but we call it anyway. Rust won\u2019t compile\nour code if the values don\u2019t implement the traits that the trait objects need.\n\nFor example, Listing 17-10 shows what happens if we try to create a `Screen`\nwith a `String` as a component:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch17-oop/listing-17-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 17-10: Attempting to use a type that doesn\u2019t\nimplement the trait object\u2019s trait</span>\n\nWe\u2019ll get this error because `String` doesn\u2019t implement the `Draw` trait:\n\n```console\n{{#include ../listings/ch17-oop/listing-17-10/output.txt}}\n```\n\nThis error lets us know that either we\u2019re passing something to `Screen` we\ndidn\u2019t mean to pass and so should pass a different type or we should implement\n`Draw` on `String` so that `Screen` is able to call `draw` on it.\n\n### Trait Objects Perform Dynamic Dispatch\n\nRecall in the [\u201cPerformance of Code Using\nGenerics\u201d][performance-of-code-using-generics]<!-- ignore --> section in\nChapter 10 our discussion on the monomorphization process performed by the\ncompiler when we use trait bounds on generics: the compiler generates\nnongeneric implementations of functions and methods for each concrete type that\nwe use in place of a generic type parameter. The code that results from\nmonomorphization is doing *static dispatch*, which is when the compiler knows\nwhat method you\u2019re calling at compile time. This is opposed to *dynamic\ndispatch*, which is when the compiler can\u2019t tell at compile time which method\nyou\u2019re calling. In dynamic dispatch cases, the compiler emits code that at\nruntime will figure out which method to call.\n\nWhen we use trait objects, Rust must use dynamic dispatch. The compiler doesn\u2019t\nknow all the types that might be used with the code that\u2019s using trait objects,\nso it doesn\u2019t know which method implemented on which type to call. Instead, at\nruntime, Rust uses the pointers inside the trait object to know which method to\ncall. This lookup incurs a runtime cost that doesn\u2019t occur with static\ndispatch. Dynamic dispatch also prevents the compiler from choosing to inline a\nmethod\u2019s code, which in turn prevents some optimizations. However, we did get\nextra flexibility in the code that we wrote in Listing 17-5 and were able to\nsupport in Listing 17-9, so it\u2019s a trade-off to consider.\n\n[performance-of-code-using-generics]:\nch10-01-syntax.html#performance-of-code-using-generics\n[dynamically-sized]: ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n",
          "qas": [
            {
              "question": "What happens in dynamic dispatch?",
              "id": 22,
              "answers": [
                {
                  "text": "When we use trait objects, Rust must use dynamic dispatch.",
                  "answer_start": 12066
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs generic type from trait object?",
              "id": 16,
              "answers": [
                {
                  "text": "A generic type parameter can only be substituted\nwith one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime.",
                  "answer_start": 5583
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the advantage of using trait objects and Rust\u2019s type system to write code?",
              "id": 19,
              "answers": [
                {
                  "text": "we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn\u2019t implement a method but we call it anyway. Rust won\u2019t compile\nour code if the values don\u2019t implement the traits that the trait objects need.",
                  "answer_start": 10232
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why when we use trait objects, Rust must use dynamic dispatch?",
              "id": 23,
              "answers": [
                {
                  "text": " The compiler doesn\u2019t\nknow all the types that might be used with the code that\u2019s using trait objects,\nso it doesn\u2019t know which method implemented on which type to call. Instead, at\nruntime, Rust uses the pointers inside the trait object to know which method to\ncall. This lookup incurs a runtime cost that doesn\u2019t occur with static\ndispatch. Dynamic dispatch also prevents the compiler from choosing to inline a\nmethod\u2019s code, which in turn prevents some optimizations.",
                  "answer_start": 12124
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What type of objects should I use in my application if  I have homogeneous collections?",
              "id": 17,
              "answers": [
                {
                  "text": "If you\u2019ll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types.",
                  "answer_start": 6299
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is dynamic dispatch?",
              "id": 21,
              "answers": [
                {
                  "text": "which is when the compiler can\u2019t tell at compile time which method\nyou\u2019re calling.",
                  "answer_start": 11877
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs rust from other languages?",
              "id": 14,
              "answers": [
                {
                  "text": "In a struct or\nenum, the data in the struct fields and the behavior in `impl` blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object.",
                  "answer_start": 3534
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of trait?",
              "id": 15,
              "answers": [
                {
                  "text": "their specific purpose is to allow abstraction across common\nbehavior.",
                  "answer_start": 4021
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Treating Smart Pointers Like Regular References with the `Deref` Trait\n\nImplementing the `Deref` trait allows you to customize the behavior of the\n*dereference operator* `*` (not to be confused with the multiplication or glob\noperator). By implementing `Deref` in such a way that a smart pointer can be\ntreated like a regular reference, you can write code that operates on\nreferences and use that code with smart pointers too.\n\nLet\u2019s first look at how the dereference operator works with regular references.\nThen we\u2019ll try to define a custom type that behaves like `Box<T>`, and see why\nthe dereference operator doesn\u2019t work like a reference on our newly defined\ntype. We\u2019ll explore how implementing the `Deref` trait makes it possible for\nsmart pointers to work in ways similar to references. Then we\u2019ll look at\nRust\u2019s *deref coercion* feature and how it lets us work with either references\nor smart pointers.\n\n> Note: there\u2019s one big difference between the `MyBox<T>` type we\u2019re about to\n> build and the real `Box<T>`: our version will not store its data on the heap.\n> We are focusing this example on `Deref`, so where the data is actually stored\n> is less important than the pointer-like behavior.\n\n<!-- Old link, do not remove -->\n<a id=\"following-the-pointer-to-the-value-with-the-dereference-operator\"></a>\n\n### Following the Pointer to the Value\n\nA regular reference is a type of pointer, and one way to think of a pointer is\nas an arrow to a value stored somewhere else. In Listing 15-6, we create a\nreference to an `i32` value and then use the dereference operator to follow the\nreference to the value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-6: Using the dereference operator to follow a\nreference to an `i32` value</span>\n\nThe variable `x` holds an `i32` value `5`. We set `y` equal to a reference to\n`x`. We can assert that `x` is equal to `5`. However, if we want to make an\nassertion about the value in `y`, we have to use `*y` to follow the reference\nto the value it\u2019s pointing to (hence *dereference*) so the compiler can compare\nthe actual value. Once we dereference `y`, we have access to the integer value\n`y` is pointing to that we can compare with `5`.\n\nIf we tried to write `assert_eq!(5, y);` instead, we would get this compilation\nerror:\n\n```console\n{{#include ../listings/ch15-smart-pointers/output-only-01-comparing-to-reference/output.txt}}\n```\n\nComparing a number and a reference to a number isn\u2019t allowed because they\u2019re\ndifferent types. We must use the dereference operator to follow the reference\nto the value it\u2019s pointing to.\n\n### Using `Box<T>` Like a Reference\n\nWe can rewrite the code in Listing 15-6 to use a `Box<T>` instead of a\nreference; the dereference operator used on the `Box<T>` in Listing 15-7\nfunctions in the same way as the dereference operator used on the reference in\nListing 15-6:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-7: Using the dereference operator on a\n`Box<i32>`</span>\n\nThe main difference between Listing 15-7 and Listing 15-6 is that here we set\n`y` to be an instance of a `Box<T>` pointing to a copied value of `x` rather\nthan a reference pointing to the value of `x`. In the last assertion, we can\nuse the dereference operator to follow the pointer of the `Box<T>` in the same\nway that we did when `y` was a reference. Next, we\u2019ll explore what is special\nabout `Box<T>` that enables us to use the dereference operator by defining our\nown type.\n\n### Defining Our Own Smart Pointer\n\nLet\u2019s build a smart pointer similar to the `Box<T>` type provided by the\nstandard library to experience how smart pointers behave differently from\nreferences by default. Then we\u2019ll look at how to add the ability to use the\ndereference operator.\n\nThe `Box<T>` type is ultimately defined as a tuple struct with one element, so\nListing 15-8 defines a `MyBox<T>` type in the same way. We\u2019ll also define a\n`new` function to match the `new` function defined on `Box<T>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-8: Defining a `MyBox<T>` type</span>\n\nWe define a struct named `MyBox` and declare a generic parameter `T`, because\nwe want our type to hold values of any type. The `MyBox` type is a tuple struct\nwith one element of type `T`. The `MyBox::new` function takes one parameter of\ntype `T` and returns a `MyBox` instance that holds the value passed in.\n\nLet\u2019s try adding the `main` function in Listing 15-7 to Listing 15-8 and\nchanging it to use the `MyBox<T>` type we\u2019ve defined instead of `Box<T>`. The\ncode in Listing 15-9 won\u2019t compile because Rust doesn\u2019t know how to dereference\n`MyBox`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-9: Attempting to use `MyBox<T>` in the same\nway we used references and `Box<T>`</span>\n\nHere\u2019s the resulting compilation error:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-09/output.txt}}\n```\n\nOur `MyBox<T>` type can\u2019t be dereferenced because we haven\u2019t implemented that\nability on our type. To enable dereferencing with the `*` operator, we\nimplement the `Deref` trait.\n\n### Treating a Type Like a Reference by Implementing the `Deref` Trait\n\nAs discussed in the [\u201cImplementing a Trait on a Type\u201d][impl-trait]<!-- ignore\n--> section of Chapter 10, to implement a trait, we need to provide\nimplementations for the trait\u2019s required methods. The `Deref` trait, provided\nby the standard library, requires us to implement one method named `deref` that\nborrows `self` and returns a reference to the inner data. Listing 15-10\ncontains an implementation of `Deref` to add to the definition of `MyBox`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-10: Implementing `Deref` on `MyBox<T>`</span>\n\nThe `type Target = T;` syntax defines an associated type for the `Deref`\ntrait to use. Associated types are a slightly different way of declaring a\ngeneric parameter, but you don\u2019t need to worry about them for now; we\u2019ll cover\nthem in more detail in Chapter 19.\n\nWe fill in the body of the `deref` method with `&self.0` so `deref` returns a\nreference to the value we want to access with the `*` operator; recall from the\n[\u201cUsing Tuple Structs without Named Fields to Create Different\nTypes\u201d][tuple-structs]<!-- ignore --> section of Chapter 5 that `.0` accesses\nthe first value in a tuple struct. The `main` function in Listing 15-9 that\ncalls `*` on the `MyBox<T>` value now compiles, and the assertions pass!\n\nWithout the `Deref` trait, the compiler can only dereference `&` references.\nThe `deref` method gives the compiler the ability to take a value of any type\nthat implements `Deref` and call the `deref` method to get a `&` reference that\nit knows how to dereference.\n\nWhen we entered `*y` in Listing 15-9, behind the scenes Rust actually ran this\ncode:\n\n```rust,ignore\n*(y.deref())\n```\n\nRust substitutes the `*` operator with a call to the `deref` method and then a\nplain dereference so we don\u2019t have to think about whether or not we need to\ncall the `deref` method. This Rust feature lets us write code that functions\nidentically whether we have a regular reference or a type that implements\n`Deref`.\n\nThe reason the `deref` method returns a reference to a value, and that the\nplain dereference outside the parentheses in `*(y.deref())` is still necessary,\nis to do with the ownership system. If the `deref` method returned the value\ndirectly instead of a reference to the value, the value would be moved out of\n`self`. We don\u2019t want to take ownership of the inner value inside `MyBox<T>` in\nthis case or in most cases where we use the dereference operator.\n\nNote that the `*` operator is replaced with a call to the `deref` method and\nthen a call to the `*` operator just once, each time we use a `*` in our code.\nBecause the substitution of the `*` operator does not recurse infinitely, we\nend up with data of type `i32`, which matches the `5` in `assert_eq!` in\nListing 15-9.\n\n### Implicit Deref Coercions with Functions and Methods\n\n*Deref coercion* converts a reference to a type that implements the `Deref`\ntrait into a reference to another type. For example, deref coercion can convert\n`&String` to `&str` because `String` implements the `Deref` trait such that it\nreturns `&str`. Deref coercion is a convenience Rust performs on arguments to\nfunctions and methods, and works only on types that implement the `Deref`\ntrait. It happens automatically when we pass a reference to a particular type\u2019s\nvalue as an argument to a function or method that doesn\u2019t match the parameter\ntype in the function or method definition. A sequence of calls to the `deref`\nmethod converts the type we provided into the type the parameter needs.\n\nDeref coercion was added to Rust so that programmers writing function and\nmethod calls don\u2019t need to add as many explicit references and dereferences\nwith `&` and `*`. The deref coercion feature also lets us write more code that\ncan work for either references or smart pointers.\n\nTo see deref coercion in action, let\u2019s use the `MyBox<T>` type we defined in\nListing 15-8 as well as the implementation of `Deref` that we added in Listing\n15-10. Listing 15-11 shows the definition of a function that has a string slice\nparameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-11: A `hello` function that has the parameter\n`name` of type `&str`</span>\n\nWe can call the `hello` function with a string slice as an argument, such as\n`hello(\"Rust\");` for example. Deref coercion makes it possible to call `hello`\nwith a reference to a value of type `MyBox<String>`, as shown in Listing 15-12:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-12: Calling `hello` with a reference to a\n`MyBox<String>` value, which works because of deref coercion</span>\n\nHere we\u2019re calling the `hello` function with the argument `&m`, which is a\nreference to a `MyBox<String>` value. Because we implemented the `Deref` trait\non `MyBox<T>` in Listing 15-10, Rust can turn `&MyBox<String>` into `&String`\nby calling `deref`. The standard library provides an implementation of `Deref`\non `String` that returns a string slice, and this is in the API documentation\nfor `Deref`. Rust calls `deref` again to turn the `&String` into `&str`, which\nmatches the `hello` function\u2019s definition.\n\nIf Rust didn\u2019t implement deref coercion, we would have to write the code in\nListing 15-13 instead of the code in Listing 15-12 to call `hello` with a value\nof type `&MyBox<String>`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-13/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-13: The code we would have to write if Rust\ndidn\u2019t have deref coercion</span>\n\nThe `(*m)` dereferences the `MyBox<String>` into a `String`. Then the `&` and\n`[..]` take a string slice of the `String` that is equal to the whole string to\nmatch the signature of `hello`. This code without deref coercions is harder to\nread, write, and understand with all of these symbols involved. Deref coercion\nallows Rust to handle these conversions for us automatically.\n\nWhen the `Deref` trait is defined for the types involved, Rust will analyze the\ntypes and use `Deref::deref` as many times as necessary to get a reference to\nmatch the parameter\u2019s type. The number of times that `Deref::deref` needs to be\ninserted is resolved at compile time, so there is no runtime penalty for taking\nadvantage of deref coercion!\n\n### How Deref Coercion Interacts with Mutability\n\nSimilar to how you use the `Deref` trait to override the `*` operator on\nimmutable references, you can use the `DerefMut` trait to override the `*`\noperator on mutable references.\n\nRust does deref coercion when it finds types and trait implementations in three\ncases:\n\n* From `&T` to `&U` when `T: Deref<Target=U>`\n* From `&mut T` to `&mut U` when `T: DerefMut<Target=U>`\n* From `&mut T` to `&U` when `T: Deref<Target=U>`\n\nThe first two cases are the same as each other except that the second\nimplements mutability. The first case states that if you have a `&T`, and `T`\nimplements `Deref` to some type `U`, you can get a `&U` transparently. The\nsecond case states that the same deref coercion happens for mutable references.\n\nThe third case is trickier: Rust will also coerce a mutable reference to an\nimmutable one. But the reverse is *not* possible: immutable references will\nnever coerce to mutable references. Because of the borrowing rules, if you have\na mutable reference, that mutable reference must be the only reference to that\ndata (otherwise, the program wouldn\u2019t compile). Converting one mutable\nreference to one immutable reference will never break the borrowing rules.\nConverting an immutable reference to a mutable reference would require that the\ninitial immutable reference is the only immutable reference to that data, but\nthe borrowing rules don\u2019t guarantee that. Therefore, Rust can\u2019t make the\nassumption that converting an immutable reference to a mutable reference is\npossible.\n\n[impl-trait]: ch10-02-traits.html#implementing-a-trait-on-a-type\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\n",
          "qas": [
            {
              "question": "What type X = SomeType means?",
              "id": 43,
              "answers": [
                {
                  "text": "The `type Target = T;` syntax defines an associated type for the `Deref`\ntrait to use. Associated types are a slightly different way of declaring a\ngeneric parameter",
                  "answer_start": 6322
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When deref coercion is done?",
              "id": 47,
              "answers": [
                {
                  "text": "Rust does deref coercion when it finds types and trait implementations in three\ncases:\n\n* From `&T` to `&U` when `T: Deref\u2039Target=U>`\n* From `&mut T` to `&mut U` when `T: DerefMut\u2039Target=U>`\n* From `&mut T` to `&U` when `T: Deref\u2039Target=U>`",
                  "answer_start": 12498
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Deref coercion?",
              "id": 44,
              "answers": [
                {
                  "text": "*Deref coercion* converts a reference to a type that implements the `Deref`\ntrait into a reference to another type.",
                  "answer_start": 8569
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can immutable reference become mutable?",
              "id": 48,
              "answers": [
                {
                  "text": "immutable references will\nnever coerce to mutable references",
                  "answer_start": 13170
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What method is needed to implement Deref?",
              "id": 41,
              "answers": [
                {
                  "text": "The `Deref` trait, provided\nby the standard library, requires us to implement one method named `deref` that\nborrows `self` and returns a reference to the inner data.",
                  "answer_start": 5836
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to use deref coercion?",
              "id": 45,
              "answers": [
                {
                  "text": "For example, deref coercion can convert\n`&String` to `&str` because `String` implements the `Deref` trait such that it\nreturns `&str`.",
                  "answer_start": 8685
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Deref?",
              "id": 40,
              "answers": [
                {
                  "text": "Implementing the `Deref` trait allows you to customize the behavior of the\n*dereference operator* `*`",
                  "answer_start": 75
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## The Slice Type\n\n*Slices* let you reference a contiguous sequence of elements in a collection\nrather than the whole collection. A slice is a kind of reference, so it does\nnot have ownership.\n\nHere\u2019s a small programming problem: write a function that takes a string of\nwords separated by spaces and returns the first word it finds in that string.\nIf the function doesn\u2019t find a space in the string, the whole string must be\none word, so the entire string should be returned.\n\nLet\u2019s work through how we\u2019d write the signature of this function without using\nslices, to understand the problem that slices will solve:\n\n```rust,ignore\nfn first_word(s: &String) -> ?\n```\n\nThe `first_word` function has a `&String` as a parameter. We don\u2019t want\nownership, so this is fine. But what should we return? We don\u2019t really have a\nway to talk about *part* of a string. However, we could return the index of the\nend of the word, indicated by a space. Let\u2019s try that, as shown in Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-7: The `first_word` function that returns a\nbyte index value into the `String` parameter</span>\n\nBecause we need to go through the `String` element by element and check whether\na value is a space, we\u2019ll convert our `String` to an array of bytes using the\n`as_bytes` method.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:as_bytes}}\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:iter}}\n```\n\nWe\u2019ll discuss iterators in more detail in [Chapter 13][ch13]<!-- ignore -->.\nFor now, know that `iter` is a method that returns each element in a collection\nand that `enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to\ndestructure that tuple. We\u2019ll be discussing patterns more in [Chapter\n6][ch6]<!-- ignore -->. In the `for` loop, we specify a pattern that has `i`\nfor the index in the tuple and `&item` for the single byte in the tuple.\nBecause we get a reference to the element from `.iter().enumerate()`, we use\n`&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using `s.len()`.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:inside_for}}\n```\n\nWe now have a way to find out the index of the end of the first word in the\nstring, but there\u2019s a problem. We\u2019re returning a `usize` on its own, but it\u2019s\nonly a meaningful number in the context of the `&String`. In other words,\nbecause it\u2019s a separate value from the `String`, there\u2019s no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the `first_word` function from Listing 4-7.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-8: Storing the result from calling the\n`first_word` function and then changing the `String` contents</span>\n\nThis program compiles without any errors and would also do so if we used `word`\nafter calling `s.clear()`. Because `word` isn\u2019t connected to the state of `s`\nat all, `word` still contains the value `5`. We could use that value `5` with\nthe variable `s` to try to extract the first word out, but this would be a bug\nbecause the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in\n`s` is tedious and error prone! Managing these indices is even more brittle if\nwe write a `second_word` function. Its signature would have to look like this:\n\n```rust,ignore\nfn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we\u2019re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren\u2019t tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### String Slices\n\nA *string slice* is a reference to part of a `String`, and it looks like this:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-17-slice/src/main.rs:here}}\n```\n\nRather than a reference to the entire `String`, `hello` is a reference to a\nportion of the `String`, specified in the extra `[0..5]` bit. We create slices\nusing a range within brackets by specifying `[starting_index..ending_index]`,\nwhere `starting_index` is the first position in the slice and `ending_index` is\none more than the last position in the slice. Internally, the slice data\nstructure stores the starting position and the length of the slice, which\ncorresponds to `ending_index` minus `starting_index`. So, in the case of `let\nworld = &s[6..11];`, `world` would be a slice that contains a pointer to the\nbyte at index 6 of `s` with a length value of `5`.\n\nFigure 4-6 shows this in a diagram.\n\n<img alt=\"Three tables: a table representing the stack data of s, which points\nto the byte at index 0 in a table of the string data &quot;hello world&quot; on\nthe heap. The third table rep-resents the stack data of the slice world, which\nhas a length value of 5 and points to byte 6 of the heap data table.\"\nsrc=\"img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-6: String slice referring to part of a\n`String`</span>\n\nWith Rust\u2019s `..` range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you\ncan drop the trailing number. That means these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];\n```\n\n> Note: String slice range indices must occur at valid UTF-8 character\n> boundaries. If you attempt to create a string slice in the middle of a\n> multibyte character, your program will exit with an error. For the purposes\n> of introducing string slices, we are assuming ASCII only in this section; a\n> more thorough discussion of UTF-8 handling is in the [\u201cStoring UTF-8 Encoded\n> Text with Strings\u201d][strings]<!-- ignore --> section of Chapter 8.\n\nWith all this information in mind, let\u2019s rewrite `first_word` to return a\nslice. The type that signifies \u201cstring slice\u201d is written as `&str`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-18-first-word-slice/src/main.rs:here}}\n```\n\nWe get the index for the end of the word the same way we did in Listing 4-7, by\nlooking for the first occurrence of a space. When we find a space, we return a\nstring slice using the start of the string and the index of the space as the\nstarting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust,ignore\nfn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that\u2019s much harder to mess up because the\ncompiler will ensure the references into the `String` remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn\u2019t show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. Using the slice version of `first_word` will throw a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/src/main.rs:here}}\n```\n\nHere\u2019s the compiler error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/output.txt}}\n```\n\nRecall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because `clear` needs to\ntruncate the `String`, it needs to get a mutable reference. The `println!`\nafter the call to `clear` uses the reference in `word`, so the immutable\nreference must still be active at that point. Rust disallows the mutable\nreference in `clear` and the immutable reference in `word` from existing at the\nsame time, and compilation fails. Not only has Rust made our API easier to use,\nbut it has also eliminated an entire class of errors at compile time!\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"string-literals-are-slices\"></a>\n\n#### String Literals as Slices\n\nRecall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:\n\n```rust\nlet s = \"Hello, world!\";\n```\n\nThe type of `s` here is `&str`: it\u2019s a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; `&str` is an\nimmutable reference.\n\n#### String Slices as Parameters\n\nKnowing that you can take slices of literals and `String` values leads us to\none more improvement on `first_word`, and that\u2019s its signature:\n\n```rust,ignore\nfn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both `&String` values\nand `&str` values.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-9: Improving the `first_word` function by using\na string slice for the type of the `s` parameter</span>\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref coercions*, a feature we will cover in\n[\u201cImplicit Deref Coercions with Functions and\nMethods\u201d][deref-coercions]<!--ignore--> section of Chapter 15.\n\nDefining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:usage}}\n```\n\n### Other Slices\n\nString slices, as you might imagine, are specific to strings. But there\u2019s a\nmore general slice type too. Consider this array:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n```\n\nJust as we might want to refer to part of a string, we might want to refer to\npart of an array. We\u2019d do so like this:\n\n```rust\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You\u2019ll use this kind of\nslice for all sorts of other collections. We\u2019ll discuss these collections in\ndetail when we talk about vectors in Chapter 8.\n\n## Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don\u2019t have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we\u2019ll talk about\nthese concepts further throughout the rest of the book. Let\u2019s move on to\nChapter 5 and look at grouping pieces of data together in a `struct`.\n\n[ch13]: ch13-02-iterators.html\n[ch6]: ch06-02-match.html#patterns-that-bind-to-values\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[deref-coercions]: ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n",
          "qas": [
            {
              "question": "Does a slice have a ownership?",
              "id": 33,
              "answers": [
                {
                  "text": "A slice is a kind of reference, so it does\nnot have ownership.",
                  "answer_start": 130
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an advantage of defining a function to take a string slice instead of a reference to a `String`?",
              "id": 41,
              "answers": [
                {
                  "text": "pter 15.\n\nDefining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:\n\n\u2039span class=\"filename\">Filename: src/main",
                  "answer_start": 11131
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the advantages of the concepts of ownership, borrowing, and slices in rust language?",
              "id": 42,
              "answers": [
                {
                  "text": " Summary\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don\u2019t have to write and debug extra code to get thi",
                  "answer_start": 12133
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I can do if I have three unrelated variables floating around that need to be kept in sync?",
              "id": 37,
              "answers": [
                {
                  "text": "Now we\u2019re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren\u2019t tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.",
                  "answer_start": 4352
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n```\nDoes last two lines do the same thing or different?",
              "id": 39,
              "answers": [
                {
                  "text": "..];\n```\n\nYou can also drop both values to take a slice of the entire string. So these\nare equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &",
                  "answer_start": 6510
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the usage of slices?",
              "id": 32,
              "answers": [
                {
                  "text": "*Slices* let you reference a contiguous sequence of elements in a collection\nrather than the whole collection. ",
                  "answer_start": 19
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What returns 'iter' method?",
              "id": 34,
              "answers": [
                {
                  "text": "For now, know that `iter` is a method that returns each element in a collection",
                  "answer_start": 1828
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'enumerate' method return?",
              "id": 35,
              "answers": [
                {
                  "text": "`enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.",
                  "answer_start": 1917
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice2 = &s[..2];\n```\nIs there a difference between slice and slice2?",
              "id": 38,
              "answers": [
                {
                  "text": "`\u2039/span>\n\nWith Rust\u2019s `..` range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:\n\n```rust\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s",
                  "answer_start": 6031
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Patterns and Matching\n\n*Patterns* are a special syntax in Rust for matching against the structure of\ntypes, both complex and simple. Using patterns in conjunction with `match`\nexpressions and other constructs gives you more control over a program\u2019s\ncontrol flow. A pattern consists of some combination of the following:\n\n* Literals\n* Destructured arrays, enums, structs, or tuples\n* Variables\n* Wildcards\n* Placeholders\n\nSome example patterns include `x`, `(a, 3)`, and `Some(Color::Red)`. In the\ncontexts in which patterns are valid, these components describe the shape of\ndata. Our program then matches values against the patterns to determine whether\nit has the correct shape of data to continue running a particular piece of code.\n\nTo use a pattern, we compare it to some value. If the pattern matches the\nvalue, we use the value parts in our code. Recall the `match` expressions in\nChapter 6 that used patterns, such as the coin-sorting machine example. If the\nvalue fits the shape of the pattern, we can use the named pieces. If it\ndoesn\u2019t, the code associated with the pattern won\u2019t run.\n\nThis chapter is a reference on all things related to patterns. We\u2019ll cover the\nvalid places to use patterns, the difference between refutable and irrefutable\npatterns, and the different kinds of pattern syntax that you might see. By the\nend of the chapter, you\u2019ll know how to use patterns to express many concepts in\na clear way.\n",
          "qas": [
            {
              "question": "How to use a pattern?",
              "id": 29,
              "answers": [
                {
                  "text": "To use a pattern, we compare it to some value. If the pattern matches the\nvalue, we use the value parts in our code. ",
                  "answer_start": 738
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are Patterns in Rust?",
              "id": 28,
              "answers": [
                {
                  "text": "*Patterns* are a special syntax in Rust for matching against the structure of\ntypes, both complex and simple. Using patterns in conjunction with `match`\nexpressions and other constructs gives you more control over a program\u2019s\ncontrol flow. A pattern consists of some combination of the following:\n\n* Literals\n* Destructured arrays, enums, structs, or tuples\n* Variables\n* Wildcards\n* Placeholders",
                  "answer_start": 25
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Accepting Command Line Arguments\n\nLet\u2019s create a new project with, as always, `cargo new`. We\u2019ll call our project\n`minigrep` to distinguish it from the `grep` tool that you might already have\non your system.\n\n```console\n$ cargo new minigrep\n     Created binary (application) `minigrep` project\n$ cd minigrep\n```\n\nThe first task is to make `minigrep` accept its two command line arguments: the\nfile path and a string to search for. That is, we want to be able to run our\nprogram with `cargo run`, two hyphens to indicate the following arguments are\nfor our program rather than for `cargo`, a string to search for, and a path to\na file to search in, like so:\n\n```console\n$ cargo run -- searchstring example-filename.txt\n```\n\nRight now, the program generated by `cargo new` cannot process arguments we\ngive it. Some existing libraries on [crates.io](https://crates.io/) can help\nwith writing a program that accepts command line arguments, but because you\u2019re\njust learning this concept, let\u2019s implement this capability ourselves.\n\n### Reading the Argument Values\n\nTo enable `minigrep` to read the values of command line arguments we pass to\nit, we\u2019ll need the `std::env::args` function provided in Rust\u2019s standard\nlibrary. This function returns an iterator of the command line arguments passed\nto `minigrep`. We\u2019ll cover iterators fully in [Chapter 13][ch13]<!-- ignore\n-->. For now, you only need to know two details about iterators: iterators\nproduce a series of values, and we can call the `collect` method on an iterator\nto turn it into a collection, such as a vector, that contains all the elements\nthe iterator produces.\n\nThe code in Listing 12-1 allows your `minigrep` program to read any command\nline arguments passed to it and then collect the values into a vector.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 12-1: Collecting the command line arguments into\na vector and printing them</span>\n\nFirst, we bring the `std::env` module into scope with a `use` statement so we\ncan use its `args` function. Notice that the `std::env::args` function is\nnested in two levels of modules. As we discussed in [Chapter\n7][ch7-idiomatic-use]<!-- ignore -->, in cases where the desired function is\nnested in more than one module, we\u2019ve chosen to bring the parent module into\nscope rather than the function. By doing so, we can easily use other functions\nfrom `std::env`. It\u2019s also less ambiguous than adding `use std::env::args` and\nthen calling the function with just `args`, because `args` might easily be\nmistaken for a function that\u2019s defined in the current module.\n\n> ### The `args` Function and Invalid Unicode\n>\n> Note that `std::env::args` will panic if any argument contains invalid\n> Unicode. If your program needs to accept arguments containing invalid\n> Unicode, use `std::env::args_os` instead. That function returns an iterator\n> that produces `OsString` values instead of `String` values. We\u2019ve chosen to\n> use `std::env::args` here for simplicity, because `OsString` values differ\n> per platform and are more complex to work with than `String` values.\n\nOn the first line of `main`, we call `env::args`, and we immediately use\n`collect` to turn the iterator into a vector containing all the values produced\nby the iterator. We can use the `collect` function to create many kinds of\ncollections, so we explicitly annotate the type of `args` to specify that we\nwant a vector of strings. Although we very rarely need to annotate types in\nRust, `collect` is one function you do often need to annotate because Rust\nisn\u2019t able to infer the kind of collection you want.\n\nFinally, we print the vector using the debug macro. Let\u2019s try running the code\nfirst with no arguments and then with two arguments:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-01/output.txt}}\n```\n\n```console\n{{#include ../listings/ch12-an-io-project/output-only-01-with-args/output.txt}}\n```\n\nNotice that the first value in the vector is `\"target/debug/minigrep\"`, which\nis the name of our binary. This matches the behavior of the arguments list in\nC, letting programs use the name by which they were invoked in their execution.\nIt\u2019s often convenient to have access to the program name in case you want to\nprint it in messages or change behavior of the program based on what command\nline alias was used to invoke the program. But for the purposes of this\nchapter, we\u2019ll ignore it and save only the two arguments we need.\n\n### Saving the Argument Values in Variables\n\nThe program is currently able to access the values specified as command line\narguments. Now we need to save the values of the two arguments in variables so\nwe can use the values throughout the rest of the program. We do that in Listing\n12-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 12-2: Creating variables to hold the query\nargument and file path argument</span>\n\nAs we saw when we printed the vector, the program\u2019s name takes up the first\nvalue in the vector at `args[0]`, so we\u2019re starting arguments at index `1`. The\nfirst argument `minigrep` takes is the string we\u2019re searching for, so we put a\nreference to the first argument in the variable `query`. The second argument\nwill be the file path, so we put a reference to the second argument in the\nvariable `file_path`.\n\nWe temporarily print the values of these variables to prove that the code is\nworking as we intend. Let\u2019s run this program again with the arguments `test`\nand `sample.txt`:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-02/output.txt}}\n```\n\nGreat, the program is working! The values of the arguments we need are being\nsaved into the right variables. Later we\u2019ll add some error handling to deal\nwith certain potential erroneous situations, such as when the user provides no\narguments; for now, we\u2019ll ignore that situation and work on adding file-reading\ncapabilities instead.\n\n[ch13]: ch13-00-functional-features.html\n[ch7-idiomatic-use]: ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths\n",
          "qas": [
            {
              "question": "What is the name of Rust's standard library?",
              "id": 2120,
              "answers": [
                {
                  "text": "std::env",
                  "answer_start": 2054
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'std::env::args' function return?",
              "id": 2118,
              "answers": [
                {
                  "text": "iterator of the command line arguments",
                  "answer_start": 1247
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen if there is invalid character in command line argument?",
              "id": 2121,
              "answers": [
                {
                  "text": "`std::env::args` will panic",
                  "answer_start": 2756
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to access first command line argument?",
              "id": 2124,
              "answers": [
                {
                  "text": "args[0]",
                  "answer_start": 5218
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which function is needed to read command line arguments?",
              "id": 2116,
              "answers": [
                {
                  "text": "std::env::args",
                  "answer_start": 1160
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the first command line argument?",
              "id": 2123,
              "answers": [
                {
                  "text": "the name of our binary",
                  "answer_start": 4099
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where is 'std::env::args' provided?",
              "id": 2117,
              "answers": [
                {
                  "text": "Rust\u2019s standard\nlibrary",
                  "answer_start": 1197
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an iterator?",
              "id": 2119,
              "answers": [
                {
                  "text": "a series of values",
                  "answer_start": 1452
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## References and Borrowing\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the\n`String` to the calling function so we can still use the `String` after the\ncall to `calculate_length`, because the `String` was moved into\n`calculate_length`. Instead, we can provide a reference to the `String` value.\nA *reference* is like a pointer in that it\u2019s an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.\n\nHere is how you would define and use a `calculate_length` function that has a\nreference to an object as a parameter instead of taking ownership of the value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:all}}\n```\n\nFirst, notice that all the tuple code in the variable declaration and the\nfunction return value is gone. Second, note that we pass `&s1` into\n`calculate_length` and, in its definition, we take `&String` rather than\n`String`. These ampersands represent *references*, and they allow you to refer\nto some value without taking ownership of it. Figure 4-5 depicts this concept.\n\n<img alt=\"Three tables: the table for s contains only a pointer to the table\nfor s1. The table for s1 contains the stack data for s1 and points to the\nstring data on the heap.\" src=\"img/trpl04-05.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 4-5: A diagram of `&String s` pointing at `String\ns1`</span>\n\n> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We\u2019ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in\n> Chapter 15.\n\nLet\u2019s take a closer look at the function call here:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:here}}\n```\n\nThe `&s1` syntax lets us create a reference that *refers* to the value of `s1`\nbut does not own it. Because it does not own it, the value it points to will\nnot be dropped when the reference stops being used.\n\nLikewise, the signature of the function uses `&` to indicate that the type of\nthe parameter `s` is a reference. Let\u2019s add some explanatory annotations:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-08-reference-with-annotations/src/main.rs:here}}\n```\n\nThe scope in which the variable `s` is valid is the same as any function\nparameter\u2019s scope, but the value pointed to by the reference is not dropped\nwhen `s` stops being used, because `s` doesn\u2019t have ownership. When functions\nhave references as parameters instead of the actual values, we won\u2019t need to\nreturn the values in order to give back ownership, because we never had\nownership.\n\nWe call the action of creating a reference *borrowing*. As in real life, if a\nperson owns something, you can borrow it from them. When you\u2019re done, you have\nto give it back. You don\u2019t own it.\n\nSo, what happens if we try to modify something we\u2019re borrowing? Try the code in\nListing 4-6. Spoiler alert: it doesn\u2019t work!\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-6: Attempting to modify a borrowed value</span>\n\nHere\u2019s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/listing-04-06/output.txt}}\n```\n\nJust as variables are immutable by default, so are references. We\u2019re not\nallowed to modify something we have a reference to.\n\n### Mutable References\n\nWe can fix the code from Listing 4-6 to allow us to modify a borrowed value\nwith just a few small tweaks that use, instead, a *mutable reference*:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-09-fixes-listing-04-06/src/main.rs}}\n```\n\nFirst we change `s` to be `mut`. Then we create a mutable reference with `&mut\ns` where we call the `change` function, and update the function signature to\naccept a mutable reference with `some_string: &mut String`. This makes it very\nclear that the `change` function will mutate the value it borrows.\n\nMutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value. This code that\nattempts to create two mutable references to `s` will fail:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/src/main.rs:here}}\n```\n\nHere\u2019s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/output.txt}}\n```\n\nThis error says that this code is invalid because we cannot borrow `s` as\nmutable more than once at a time. The first mutable borrow is in `r1` and must\nlast until it\u2019s used in the `println!`, but between the creation of that\nmutable reference and its usage, we tried to create another mutable reference\nin `r2` that borrows the same data as `r1`.\n\nThe restriction preventing multiple mutable references to the same data at the\nsame time allows for mutation but in a very controlled fashion. It\u2019s something\nthat new Rustaceans struggle with because most languages let you mutate\nwhenever you\u2019d like. The benefit of having this restriction is that Rust can\nprevent data races at compile time. A *data race* is similar to a race\ncondition and happens when these three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There\u2019s no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix\nwhen you\u2019re trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for\nmultiple mutable references, just not *simultaneous* ones:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-11-muts-in-separate-scopes/src/main.rs:here}}\n```\n\nRust enforces a similar rule for combining mutable and immutable references.\nThis code results in an error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/src/main.rs:here}}\n```\n\nHere\u2019s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/output.txt}}\n```\n\nWhew! We *also* cannot have a mutable reference while we have an immutable one\nto the same value.\n\nUsers of an immutable reference don\u2019t expect the value to suddenly change out\nfrom under them! However, multiple immutable references are allowed because no\none who is just reading the data has the ability to affect anyone else\u2019s\nreading of the data.\n\nNote that a reference\u2019s scope starts from where it is introduced and continues\nthrough the last time that reference is used. For instance, this code will\ncompile because the last usage of the immutable references, the `println!`,\noccurs before the mutable reference is introduced:\n\n```rust,edition2021\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-13-reference-scope-ends/src/main.rs:here}}\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!`\nwhere they are last used, which is before the mutable reference `r3` is\ncreated. These scopes don\u2019t overlap, so this code is allowed: the compiler can\ntell that the reference is no longer being used at a point before the end of\nthe scope.\n\nEven though borrowing errors may be frustrating at times, remember that it\u2019s\nthe Rust compiler pointing out a potential bug early (at compile time rather\nthan at runtime) and showing you exactly where the problem is. Then you don\u2019t\nhave to track down why your data isn\u2019t what you thought it was.\n\n### Dangling References\n\nIn languages with pointers, it\u2019s easy to erroneously create a *dangling\npointer*\u2014a pointer that references a location in memory that may have been\ngiven to someone else\u2014by freeing some memory while preserving a pointer to that\nmemory. In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.\n\nLet\u2019s try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/src/main.rs}}\n```\n\nHere\u2019s the error:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/output.txt}}\n```\n\nThis error message refers to a feature we haven\u2019t covered yet: lifetimes. We\u2019ll\ndiscuss lifetimes in detail in Chapter 10. But, if you disregard the parts\nabout lifetimes, the message does contain the key to why this code is a problem:\n\n```text\nthis function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n```\n\nLet\u2019s take a closer look at exactly what\u2019s happening at each stage of our\n`dangle` code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-15-dangling-reference-annotated/src/main.rs:here}}\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished,\n`s` will be deallocated. But we tried to return a reference to it. That means\nthis reference would be pointing to an invalid `String`. That\u2019s no good! Rust\nwon\u2019t let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-16-no-dangle/src/main.rs:here}}\n```\n\nThis works without any problems. Ownership is moved out, and nothing is\ndeallocated.\n\n### The Rules of References\n\nLet\u2019s recap what we\u2019ve discussed about references:\n\n* At any given time, you can have *either* one mutable reference *or* any\n  number of immutable references.\n* References must always be valid.\n\nNext, we\u2019ll look at a different kind of reference: slices.\n",
          "qas": [
            {
              "question": "What does '&' means in rust language?",
              "id": 22,
              "answers": [
                {
                  "text": "we take `&String` rather than\n`String`. These ampersands represent *references*, and they allow you to refer\nto some value without taking ownership of it.",
                  "answer_start": 1115
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When a \"data race\" happens?",
              "id": 27,
              "answers": [
                {
                  "text": "A *data race* is similar to a race\ncondition and happens when these three behaviors occur:\n\n* Two or more pointers access the same data at the same time.\n* At least one of the pointers is being used to write to the data.\n* There\u2019s no mechanism being used to synchronize access to the data.",
                  "answer_start": 5633
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the opposite of referencing by using '&'?",
              "id": 23,
              "answers": [
                {
                  "text": "> Note: The opposite of referencing by using `&` is *dereferencing*, which is\n> accomplished with the dereference operator, `*`. We\u2019ll see some uses of the\n> dereference operator in Chapter 8 and discuss details of dereferencing in",
                  "answer_start": 1615
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How we call the action of creating a reference?",
              "id": 24,
              "answers": [
                {
                  "text": "We call the action of creating a reference *borrowing*.",
                  "answer_start": 2914
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a dangling pointer?",
              "id": 30,
              "answers": [
                {
                  "text": "In languages with pointers, it\u2019s easy to erroneously create a *dangling\npointer*\u2014a pointer that references a location in memory that may have been\ngiven to someone else\u2014by freeing some memory while preserving a pointer to that\nmemory.",
                  "answer_start": 8220
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the reference in rust language?",
              "id": 21,
              "answers": [
                {
                  "text": "A *reference* is like a pointer in that it\u2019s an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.",
                  "answer_start": 323
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How rust prevents the problem of data races?",
              "id": 28,
              "answers": [
                {
                  "text": "Data races cause undefined behavior and can be difficult to diagnose and fix\nwhen you\u2019re trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!\n",
                  "answer_start": 5924
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Comments\n\nAll programmers strive to make their code easy to understand, but sometimes\nextra explanation is warranted. In these cases, programmers leave *comments* in\ntheir source code that the compiler will ignore but people reading the source\ncode may find useful.\n\nHere\u2019s a simple comment:\n\n```rust\n// hello, world\n```\n\nIn Rust, the idiomatic comment style starts a comment with two slashes, and the\ncomment continues until the end of the line. For comments that extend beyond a\nsingle line, you\u2019ll need to include `//` on each line, like this:\n\n```rust\n// So we\u2019re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what\u2019s going on.\n```\n\nComments can also be placed at the end of lines containing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-24-comments-end-of-line/src/main.rs}}\n```\n\nBut you\u2019ll more often see them used in this format, with the comment on a\nseparate line above the code it\u2019s annotating:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-25-comments-above-line/src/main.rs}}\n```\n\nRust also has another kind of comment, documentation comments, which we\u2019ll\ndiscuss in the [\u201cPublishing a Crate to Crates.io\u201d][publishing]<!-- ignore -->\nsection of Chapter 14.\n\n[publishing]: ch14-02-publishing-to-crates-io.html\n",
          "qas": [
            {
              "question": "How do we call parts of our program ignored by compiler?",
              "id": 278,
              "answers": [
                {
                  "text": "comments",
                  "answer_start": 156
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an example of comment?",
              "id": 281,
              "answers": [
                {
                  "text": "// So we\u2019re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what\u2019s going on.",
                  "answer_start": 559
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I create a comment?",
              "id": 279,
              "answers": [
                {
                  "text": "with two slashes, and the\ncomment continues until the end of the line",
                  "answer_start": 379
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can i create comments longer than one line with '//'?",
              "id": 280,
              "answers": [
                {
                  "text": "For comments that extend beyond a\nsingle line, you\u2019ll need to include `//` on each line",
                  "answer_start": 450
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can comments be placed in the same line with code?",
              "id": 282,
              "answers": [
                {
                  "text": "Comments can also be placed at the end of lines containing code",
                  "answer_start": 738
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How are comments usually placed?",
              "id": 283,
              "answers": [
                {
                  "text": "But you\u2019ll more often see them used in this format, with the comment on a\nseparate line above the code it\u2019s annotating",
                  "answer_start": 983
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix D - Useful Development Tools\n\nIn this appendix, we talk about some useful development tools that the Rust\nproject provides. We\u2019ll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs.\n\n### Automatic Formatting with `rustfmt`\n\nThe `rustfmt` tool reformats your code according to the community code style.\nMany collaborative projects use `rustfmt` to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool.\n\nTo install `rustfmt`, enter the following:\n\n```console\n$ rustup component add rustfmt\n```\n\nThis command gives you `rustfmt` and `cargo-fmt`, similar to how Rust gives you\nboth `rustc` and `cargo`. To format any Cargo project, enter the following:\n\n```console\n$ cargo fmt\n```\n\nRunning this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non `rustfmt`, see [its documentation][rustfmt].\n\n[rustfmt]: https://github.com/rust-lang/rustfmt\n\n### Fix Your Code with `rustfix`\n\nThe rustfix tool is included with Rust installations and can automatically fix\ncompiler warnings that have a clear way to correct the problem that\u2019s likely\nwhat you want. It\u2019s likely you\u2019ve seen compiler warnings before. For example,\nconsider this code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for i in 0..100 {\n        do_something();\n    }\n}\n```\n\nHere, we\u2019re calling the `do_something` function 100 times, but we never use the\nvariable `i` in the body of the `for` loop. Rust warns us about that:\n\n```console\n$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n --> src/main.rs:4:9\n  |\n4 |     for i in 0..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n```\n\nThe warning suggests that we use `_i` as a name instead: the underscore\nindicates that we intend for this variable to be unused. We can automatically\napply that suggestion using the `rustfix` tool by running the command `cargo\nfix`:\n\n```console\n$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n```\n\nWhen we look at *src/main.rs* again, we\u2019ll see that `cargo fix` has changed the\ncode:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for _i in 0..100 {\n        do_something();\n    }\n}\n```\n\nThe `for` loop variable is now named `_i`, and the warning no longer appears.\n\nYou can also use the `cargo fix` command to transition your code between\ndifferent Rust editions. Editions are covered in Appendix E.\n\n### More Lints with Clippy\n\nThe Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code.\n\nTo install Clippy, enter the following:\n\n```console\n$ rustup component add clippy\n```\n\nTo run Clippy\u2019s lints on any Cargo project, enter the following:\n\n```console\n$ cargo clippy\n```\n\nFor example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nRunning `cargo clippy` on this project results in this error:\n\n```text\nerror: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n```\n\nThis error lets you know that Rust already has a more precise `PI` constant\ndefined, and that your program would be more correct if you used the constant\ninstead. You would then change your code to use the `PI` constant. The\nfollowing code doesn\u2019t result in any errors or warnings from Clippy:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nfn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nFor more information on Clippy, see [its documentation][clippy].\n\n[clippy]: https://github.com/rust-lang/rust-clippy\n\n### IDE Integration Using `rust-analyzer`\n\nTo help IDE integration, the Rust community recommends using\n[`rust-analyzer`][rust-analyzer]<!-- ignore -->. This tool is a set of\ncompiler-centric utilities that speaks the [Language Server Protocol][lsp]<!--\nignore -->, which is a specification for IDEs and programming languages to\ncommunicate with each other. Different clients can use `rust-analyzer`, such as\n[the Rust analyzer plug-in for Visual Studio Code][vscode].\n\n[lsp]: http://langserver.org/\n[vscode]: https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer\n\nVisit the `rust-analyzer` project\u2019s [home page][rust-analyzer]<!-- ignore -->\nfor installation instructions, then install the language server support in your\nparticular IDE. Your IDE will gain abilities such as autocompletion, jump to\ndefinition, and inline errors.\n\n[rust-analyzer]: https://rust-analyzer.github.io\n",
          "qas": [
            {
              "question": "How can I run clippy?",
              "id": 194,
              "answers": [
                {
                  "text": "cargo clippy",
                  "answer_start": 3165
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what tool can I fix warnings?",
              "id": 189,
              "answers": [
                {
                  "text": "rustfix",
                  "answer_start": 1084
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool can I use for code reformatting?",
              "id": 185,
              "answers": [
                {
                  "text": "rustfmt",
                  "answer_start": 291
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do with cargo fmt command?",
              "id": 187,
              "answers": [
                {
                  "text": " reformats all the Rust code in the current crate",
                  "answer_start": 812
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What tool can I use to avoid common mistakes?",
              "id": 191,
              "answers": [
                {
                  "text": "Clippy",
                  "answer_start": 2879
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I install rustfmt?",
              "id": 186,
              "answers": [
                {
                  "text": "$ rustup component add rustfmt",
                  "answer_start": 571
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what command can I make my code suitable for different Rust editions?",
              "id": 190,
              "answers": [
                {
                  "text": "cargo fix",
                  "answer_start": 2734
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what can I use Clippy?",
              "id": 192,
              "answers": [
                {
                  "text": "to analyze your code so you can catch\ncommon mistakes and improve your Rust code",
                  "answer_start": 2916
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should be used for Rust IDE integration?",
              "id": 195,
              "answers": [
                {
                  "text": "rust-analyzer",
                  "answer_start": 4622
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do with rustfix tool?",
              "id": 188,
              "answers": [
                {
                  "text": "automatically fix\ncompiler warnings that have a clear way to correct the problem",
                  "answer_start": 1141
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what command can I install clippy?",
              "id": 193,
              "answers": [
                {
                  "text": "rustup component add clippy",
                  "answer_start": 3053
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Bringing Paths into Scope with the `use` Keyword\n\nHaving to write out the paths to call functions can feel inconvenient and\nrepetitive. In Listing 7-7, whether we chose the absolute or relative path to\nthe `add_to_waitlist` function, every time we wanted to call `add_to_waitlist`\nwe had to specify `front_of_house` and `hosting` too. Fortunately, there\u2019s a\nway to simplify this process: we can create a shortcut to a path with the `use`\nkeyword once, and then use the shorter name everywhere else in the scope.\n\nIn Listing 7-11, we bring the `crate::front_of_house::hosting` module into the\nscope of the `eat_at_restaurant` function so we only have to specify\n`hosting::add_to_waitlist` to call the `add_to_waitlist` function in\n`eat_at_restaurant`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-11/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-11: Bringing a module into scope with\n`use`</span>\n\nAdding `use` and a path in a scope is similar to creating a symbolic link in\nthe filesystem. By adding `use crate::front_of_house::hosting` in the crate\nroot, `hosting` is now a valid name in that scope, just as though the `hosting`\nmodule had been defined in the crate root. Paths brought into scope with `use`\nalso check privacy, like any other paths.\n\nNote that `use` only creates the shortcut for the particular scope in which the\n`use` occurs. Listing 7-12 moves the `eat_at_restaurant` function into a new\nchild module named `customer`, which is then a different scope than the `use`\nstatement, so the function body won\u2019t compile:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness,does_not_compile,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-12: A `use` statement only applies in the scope\nit\u2019s in</span>\n\nThe compiler error shows that the shortcut no longer applies within the\n`customer` module:\n\n```console\n{{#include ../listings/ch07-managing-growing-projects/listing-07-12/output.txt}}\n```\n\nNotice there\u2019s also a warning that the `use` is no longer used in its scope! To\nfix this problem, move the `use` within the `customer` module too, or reference\nthe shortcut in the parent module with `super::hosting` within the child\n`customer` module.\n\n### Creating Idiomatic `use` Paths\n\nIn Listing 7-11, you might have wondered why we specified `use\ncrate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in\n`eat_at_restaurant` rather than specifying the `use` path all the way out to\nthe `add_to_waitlist` function to achieve the same result, as in Listing 7-13.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-13/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-13: Bringing the `add_to_waitlist` function\ninto scope with `use`, which is unidiomatic</span>\n\nAlthough both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is\nthe idiomatic way to bring a function into scope with `use`. Bringing the\nfunction\u2019s parent module into scope with `use` means we have to specify the\nparent module when calling the function. Specifying the parent module when\ncalling the function makes it clear that the function isn\u2019t locally defined\nwhile still minimizing repetition of the full path. The code in Listing 7-13 is\nunclear as to where `add_to_waitlist` is defined.\n\nOn the other hand, when bringing in structs, enums, and other items with `use`,\nit\u2019s idiomatic to specify the full path. Listing 7-14 shows the idiomatic way\nto bring the standard library\u2019s `HashMap` struct into the scope of a binary\ncrate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-14/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 7-14: Bringing `HashMap` into scope in an\nidiomatic way</span>\n\nThere\u2019s no strong reason behind this idiom: it\u2019s just the convention that has\nemerged, and folks have gotten used to reading and writing Rust code this way.\n\nThe exception to this idiom is if we\u2019re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn\u2019t allow that. Listing 7-15\nshows how to bring two `Result` types into scope that have the same name but\ndifferent parent modules and how to refer to them.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-15/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-15: Bringing two types with the same name into\nthe same scope requires using their parent modules.</span>\n\nAs you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we\u2019d\nhave two `Result` types in the same scope and Rust wouldn\u2019t know which one we\nmeant when we used `Result`.\n\n### Providing New Names with the `as` Keyword\n\nThere\u2019s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or *alias*, for the type. Listing 7-16 shows another way to write\nthe code in Listing 7-15 by renaming one of the two `Result` types using `as`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-16/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-16: Renaming a type when it\u2019s brought into\nscope with the `as` keyword</span>\n\nIn the second `use` statement, we chose the new name `IoResult` for the\n`std::io::Result` type, which won\u2019t conflict with the `Result` from `std::fmt`\nthat we\u2019ve also brought into scope. Listing 7-15 and Listing 7-16 are\nconsidered idiomatic, so the choice is up to you!\n\n### Re-exporting Names with `pub use`\n\nWhen we bring a name into scope with the `use` keyword, the name available in\nthe new scope is private. To enable the code that calls our code to refer to\nthat name as if it had been defined in that code\u2019s scope, we can combine `pub`\nand `use`. This technique is called *re-exporting* because we\u2019re bringing\nan item into scope but also making that item available for others to bring into\ntheir scope.\n\nListing 7-17 shows the code in Listing 7-11 with `use` in the root module\nchanged to `pub use`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-17/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-17: Making a name available for any code to use\nfrom a new scope with `pub use`</span>\n\nBefore this change, external code would have to call the `add_to_waitlist`\nfunction by using the path\n`restaurant::front_of_house::hosting::add_to_waitlist()`. Now that this `pub\nuse` has re-exported the `hosting` module from the root module, external code\ncan now use the path `restaurant::hosting::add_to_waitlist()` instead.\n\nRe-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain. For\nexample, in this restaurant metaphor, the people running the restaurant think\nabout \u201cfront of house\u201d and \u201cback of house.\u201d But customers visiting a restaurant\nprobably won\u2019t think about the parts of the restaurant in those terms. With\n`pub use`, we can write our code with one structure but expose a different\nstructure. Doing so makes our library well organized for programmers working on\nthe library and programmers calling the library. We\u2019ll look at another example\nof `pub use` and how it affects your crate\u2019s documentation in the [\u201cExporting a\nConvenient Public API with `pub use`\u201d][ch14-pub-use]<!-- ignore --> section of\nChapter 14.\n\n### Using External Packages\n\nIn Chapter 2, we programmed a guessing game project that used an external\npackage called `rand` to get random numbers. To use `rand` in our project, we\nadded this line to *Cargo.toml*:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch14-03-cargo-workspaces.md\n-->\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:9:}}\n```\n\nAdding `rand` as a dependency in *Cargo.toml* tells Cargo to download the\n`rand` package and any dependencies from [crates.io](https://crates.io/) and\nmake `rand` available to our project.\n\nThen, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the crate, `rand`, and listed the items\nwe wanted to bring into scope. Recall that in the [\u201cGenerating a Random\nNumber\u201d][rand]<!-- ignore --> section in Chapter 2, we brought the `Rng` trait\ninto scope and called the `rand::thread_rng` function:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:ch07-04}}\n```\n\nMembers of the Rust community have made many packages available at\n[crates.io](https://crates.io/), and pulling any of them into your package\ninvolves these same steps: listing them in your package\u2019s *Cargo.toml* file and\nusing `use` to bring items from their crates into scope.\n\nNote that the standard `std` library is also a crate that\u2019s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon\u2019t need to change *Cargo.toml* to include `std`. But we do need to refer to\nit with `use` to bring items from there into our package\u2019s scope. For example,\nwith `HashMap` we would use this line:\n\n```rust\nuse std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library\ncrate.\n\n### Using Nested Paths to Clean Up Large `use` Lists\n\nIf we\u2019re using multiple items defined in the same crate or same module,\nlisting each item on its own line can take up a lot of vertical space in our\nfiles. For example, these two `use` statements we had in the Guessing Game in\nListing 2-4 bring items from `std` into scope:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-01-use-std-unnested/src/main.rs:here}}\n```\n\nInstead, we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer, as shown in Listing 7-18.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 7-18: Specifying a nested path to bring multiple\nitems with the same prefix into scope</span>\n\nIn bigger programs, bringing many items into scope from the same crate or\nmodule using nested paths can reduce the number of separate `use` statements\nneeded by a lot!\n\nWe can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath. For example, Listing 7-19 shows two\n`use` statements: one that brings `std::io` into scope and one that brings\n`std::io::Write` into scope.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-19/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-19: Two `use` statements where one is a subpath\nof the other</span>\n\nThe common part of these two paths is `std::io`, and that\u2019s the complete first\npath. To merge these two paths into one `use` statement, we can use `self` in\nthe nested path, as shown in Listing 7-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-20/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-20: Combining the paths in Listing 7-19 into\none `use` statement</span>\n\nThis line brings `std::io` and `std::io::Write` into scope.\n\n### The Glob Operator\n\nIf we want to bring *all* public items defined in a path into scope, we can\nspecify that path followed by the `*` glob operator:\n\n```rust\nuse std::collections::*;\n```\n\nThis `use` statement brings all public items defined in `std::collections` into\nthe current scope. Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined.\n\nThe glob operator is often used when testing to bring everything under test\ninto the `tests` module; we\u2019ll talk about that in the [\u201cHow to Write\nTests\u201d][writing-tests]<!-- ignore --> section in Chapter 11. The glob operator\nis also sometimes used as part of the prelude pattern: see [the standard\nlibrary documentation](../std/prelude/index.html#other-preludes)<!-- ignore -->\nfor more information on that pattern.\n\n[ch14-pub-use]: ch14-02-publishing-to-crates-io.html#exporting-a-convenient-public-api-with-pub-use\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n[writing-tests]: ch11-01-writing-tests.html#how-to-write-tests\n",
          "qas": [
            {
              "question": "I have warning that the `use` is no longer used in its scope. How can I fix it?",
              "id": 155,
              "answers": [
                {
                  "text": "Notice there\u2019s also a warning that the `use` is no longer used in its scope! To\nfix this problem, move the `use` within the `customer` module too, or reference\nthe shortcut in the parent module with `super::hosting` within the child\n`customer` module.",
                  "answer_start": 2146
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When it is idiomatic to specify the full path?",
              "id": 156,
              "answers": [
                {
                  "text": "On the other hand, when bringing in structs, enums, and other items with `use`,\nit\u2019s idiomatic to specify the full path.",
                  "answer_start": 3551
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to bring 'rand' into the scope?",
              "id": 161,
              "answers": [
                {
                  "text": "Then, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the crate, `rand`, and listed the items\nwe wanted to bring into scope. ",
                  "answer_start": 8681
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is it useful to use a nested path at any level in a path?",
              "id": 165,
              "answers": [
                {
                  "text": "We can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath.",
                  "answer_start": 11156
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How I can bring items from std into the scope?",
              "id": 163,
              "answers": [
                {
                  "text": " But we do need to refer to\nit with `use` to bring items from there into our package\u2019s scope. For example,\nwith `HashMap` we would use this line:\n\n```rust\nuse std::collections::HashMap;\n```\n\nThis is an absolute path starting with `std`, the name of the standard library\ncrate.",
                  "answer_start": 9639
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is the re-exporting useful?",
              "id": 160,
              "answers": [
                {
                  "text": "Re-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain.",
                  "answer_start": 7149
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I have path brought into scope with `use`, it checks privacy or not?\n",
              "id": 154,
              "answers": [
                {
                  "text": "Paths brought into scope with `use`\nalso check privacy, like any other paths.",
                  "answer_start": 1295
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why I don\u2019t need to change *Cargo.toml* to include `std`?",
              "id": 162,
              "answers": [
                {
                  "text": "Note that the standard `std` library is also a crate that\u2019s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon\u2019t need to change *Cargo.toml* to include `std`. ",
                  "answer_start": 9436
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I bring two items with the same name\ninto scope with `use` statements?",
              "id": 157,
              "answers": [
                {
                  "text": "The exception to this idiom is if we\u2019re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn\u2019t allow that. ",
                  "answer_start": 4201
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What I can do to bring same items into the scope in one line?",
              "id": 164,
              "answers": [
                {
                  "text": "we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer",
                  "answer_start": 10440
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I would specify std::fmt::Result` and `use std::io::Result`, rust could distingush them?",
              "id": 158,
              "answers": [
                {
                  "text": "As you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we\u2019d\nhave two `Result` types in the same scope and Rust wouldn\u2019t know which one we\nmeant when we used `Result`.",
                  "answer_start": 4799
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I bring two types of the same name\ninto the same scope with `use`?",
              "id": 159,
              "answers": [
                {
                  "text": "There\u2019s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or *alias*, for the type.",
                  "answer_start": 5112
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to bring all public items defined in a path into scope?",
              "id": 166,
              "answers": [
                {
                  "text": "If we want to bring *all* public items defined in a path into scope, we can\nspecify that path followed by the `*` glob operator:\n\n```rust\nuse std::collections::*;\n```",
                  "answer_start": 12245
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## What Is Ownership?\n\n*Ownership* is a set of rules that govern how a Rust program manages memory.\nAll programs have to manage the way they use a computer\u2019s memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won\u2019t compile. None of the features\nof ownership will slow down your program while it\u2019s running.\n\nBecause ownership is a new concept for many programmers, it does take some time\nto get used to. The good news is that the more experienced you become with Rust\nand the rules of the ownership system, the easier you\u2019ll find it to naturally\ndevelop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you\u2019ll have a solid foundation for understanding\nthe features that make Rust unique. In this chapter, you\u2019ll learn ownership by\nworking through some examples that focus on a very common data structure:\nstrings.\n\n> ### The Stack and the Heap\n>\n> Many programming languages don\u2019t require you to think about the stack and the\n> heap very often. But in a systems programming language like Rust, whether a\n> value is on the stack or the heap affects how the language behaves and why\n> you have to make certain decisions. Parts of ownership will be described in\n> relation to the stack and the heap later in this chapter, so here is a brief\n> explanation in preparation.\n>\n> Both the stack and the heap are parts of memory available to your code to use\n> at runtime, but they are structured in different ways. The stack stores\n> values in the order it gets them and removes the values in the opposite\n> order. This is referred to as *last in, first out*. Think of a stack of\n> plates: when you add more plates, you put them on top of the pile, and when\n> you need a plate, you take one off the top. Adding or removing plates from\n> the middle or bottom wouldn\u2019t work as well! Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*. All\n> data stored on the stack must have a known, fixed size. Data with an unknown\n> size at compile time or a size that might change must be stored on the heap\n> instead.\n>\n> The heap is less organized: when you put data on the heap, you request a\n> certain amount of space. The memory allocator finds an empty spot in the heap\n> that is big enough, marks it as being in use, and returns a *pointer*, which\n> is the address of that location. This process is called *allocating on the\n> heap* and is sometimes abbreviated as just *allocating* (pushing values onto\n> the stack is not considered allocating). Because the pointer to the heap is a\n> known, fixed size, you can store the pointer on the stack, but when you want\n> the actual data, you must follow the pointer. Think of being seated at a\n> restaurant. When you enter, you state the number of people in your group, and\n> the host finds an empty table that fits everyone and leads you there. If\n> someone in your group comes late, they can ask where you\u2019ve been seated to\n> find you.\n>\n> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that location is\n> always at the top of the stack. Comparatively, allocating space on the heap\n> requires more work because the allocator must first find a big enough space\n> to hold the data and then perform bookkeeping to prepare for the next\n> allocation.\n>\n> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It\u2019s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that\u2019s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap).\n>\n> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function\u2019s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.\n>\n> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don\u2019t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won\u2019t need to think about the\n> stack and the heap very often, but knowing that the main purpose of ownership\n> is to manage heap data can help explain why it works the way it does.\n\n### Ownership Rules\n\nFirst, let\u2019s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.\n\n### Variable Scope\n\nNow that we\u2019re past basic Rust syntax, we won\u2019t include all the `fn main() {`\ncode in examples, so if you\u2019re following along, make sure to put the following\nexamples inside a `main` function manually. As a result, our examples will be a\nbit more concise, letting us focus on the actual details rather than\nboilerplate code.\n\nAs a first example of ownership, we\u2019ll look at the *scope* of some variables. A\nscope is the range within a program for which an item is valid. Take the\nfollowing variable:\n\n```rust\nlet s = \"hello\";\n```\n\nThe variable `s` refers to a string literal, where the value of the string is\nhardcoded into the text of our program. The variable is valid from the point at\nwhich it\u2019s declared until the end of the current *scope*. Listing 4-1 shows a\nprogram with comments annotating where the variable `s` would be valid.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-1: A variable and the scope in which it is\nvalid</span>\n\nIn other words, there are two important points in time here:\n\n* When `s` comes *into* scope, it is valid.\n* It remains valid until it goes *out of* scope.\n\nAt this point, the relationship between scopes and when variables are valid is\nsimilar to that in other programming languages. Now we\u2019ll build on top of this\nunderstanding by introducing the `String` type.\n\n### The `String` Type\n\nTo illustrate the rules of ownership, we need a data type that is more complex\nthan those we covered in the [\u201cData Types\u201d][data-types]<!-- ignore --> section\nof Chapter 3. The types covered previously are of a known size, can be stored\non the stack and popped off the stack when their scope is over, and can be\nquickly and trivially copied to make a new, independent instance if another\npart of code needs to use the same value in a different scope. But we want to\nlook at data that is stored on the heap and explore how Rust knows when to\nclean up that data, and the `String` type is a great example.\n\nWe\u2019ll concentrate on the parts of `String` that relate to ownership. These\naspects also apply to other complex data types, whether they are provided by\nthe standard library or created by you. We\u2019ll discuss `String` in more depth in\n[Chapter 8][ch8]<!-- ignore -->.\n\nWe\u2019ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren\u2019t suitable for every\nsituation in which we may want to use text. One reason is that they\u2019re\nimmutable. Another is that not every string value can be known when we write\nour code: for example, what if we want to take user input and store it? For\nthese situations, Rust has a second string type, `String`. This type manages\ndata allocated on the heap and as such is able to store an amount of text that\nis unknown to us at compile time. You can create a `String` from a string\nliteral using the `from` function, like so:\n\n```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon `::` operator allows us to namespace this particular `from`\nfunction under the `String` type rather than using some sort of name like\n`string_from`. We\u2019ll discuss this syntax more in the [\u201cMethod\nSyntax\u201d][method-syntax]<!-- ignore --> section of Chapter 5, and when we talk\nabout namespacing with modules in [\u201cPaths for Referring to an Item in the\nModule Tree\u201d][paths-module-tree]<!-- ignore --> in Chapter 7.\n\nThis kind of string *can* be mutated:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-01-can-mutate-string/src/main.rs:here}}\n```\n\nSo, what\u2019s the difference here? Why can `String` be mutated but literals\ncannot? The difference is in how these two types deal with memory.\n\n### Memory and Allocation\n\nIn the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient. But these properties only come from the string\nliteral\u2019s immutability. Unfortunately, we can\u2019t put a blob of memory into the\nbinary for each piece of text whose size is unknown at compile time and whose\nsize might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text,\nwe need to allocate an amount of memory on the heap, unknown at compile time,\nto hold the contents. This means:\n\n* The memory must be requested from the memory allocator at runtime.\n* We need a way of returning this memory to the allocator when we\u2019re done with\n  our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation\nrequests the memory it needs. This is pretty much universal in programming\nlanguages.\n\nHowever, the second part is different. In languages with a *garbage collector\n(GC)*, the GC keeps track of and cleans up memory that isn\u2019t being used\nanymore, and we don\u2019t need to think about it. In most languages without a GC,\nit\u2019s our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe\u2019ll waste memory. If we do it too early, we\u2019ll have an invalid variable. If\nwe do it twice, that\u2019s a bug too. We need to pair exactly one `allocate` with\nexactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the\nvariable that owns it goes out of scope. Here\u2019s a version of our scope example\nfrom Listing 4-1 using a `String` instead of a string literal:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-02-string-scope/src/main.rs:here}}\n```\n\nThere is a natural point at which we can return the memory our `String` needs\nto the allocator: when `s` goes out of scope. When a variable goes out of\nscope, Rust calls a special function for us. This function is called\n[`drop`][drop]<!-- ignore -->, and it\u2019s where the author of `String` can put\nthe code to return the memory. Rust calls `drop` automatically at the closing\ncurly bracket.\n\n> Note: In C++, this pattern of deallocating resources at the end of an item\u2019s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you\u2019ve used RAII\n> patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem\nsimple right now, but the behavior of code can be unexpected in more\ncomplicated situations when we want to have multiple variables use the data\nwe\u2019ve allocated on the heap. Let\u2019s explore some of those situations now.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-move\"></a>\n\n#### Variables and Data Interacting with Move\n\nMultiple variables can interact with the same data in different ways in Rust.\nLet\u2019s look at an example using an integer in Listing 4-2.\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 4-2: Assigning the integer value of variable `x`\nto `y`</span>\n\nWe can probably guess what this is doing: \u201cbind the value `5` to `x`; then make\na copy of the value in `x` and bind it to `y`.\u201d We now have two variables, `x`\nand `y`, and both equal `5`. This is indeed what is happening, because integers\nare simple values with a known, fixed size, and these two `5` values are pushed\nonto the stack.\n\nNow let\u2019s look at the `String` version:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-03-string-move/src/main.rs:here}}\n```\n\nThis looks very similar, so we might assume that the way it works would be the\nsame: that is, the second line would make a copy of the value in `s1` and bind\nit to `s2`. But this isn\u2019t quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the\ncovers. A `String` is made up of three parts, shown on the left: a pointer to\nthe memory that holds the contents of the string, a length, and a capacity.\nThis group of data is stored on the stack. On the right is the memory on the\nheap that holds the contents.\n\n<img alt=\"Two tables: the first table contains the representation of s1 on the\nstack, consisting of its length (5), capacity (5), and a pointer to the first\nvalue in the second table. The second table contains the representation of the\nstring data on the heap, byte by byte.\" src=\"img/trpl04-01.svg\" class=\"center\"\nstyle=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-1: Representation in memory of a `String`\nholding the value `\"hello\"` bound to `s1`</span>\n\nThe length is how much memory, in bytes, the contents of the `String` are\ncurrently using. The capacity is the total amount of memory, in bytes, that the\n`String` has received from the allocator. The difference between length and\ncapacity matters, but not in this context, so for now, it\u2019s fine to ignore the\ncapacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the\npointer, the length, and the capacity that are on the stack. We do not copy the\ndata on the heap that the pointer refers to. In other words, the data\nrepresentation in memory looks like Figure 4-2.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\"\nsrc=\"img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-2: Representation in memory of the variable `s2`\nthat has a copy of the pointer, length, and capacity of `s1`</span>\n\nThe representation does *not* look like Figure 4-3, which is what memory would\nlook like if Rust instead copied the heap data as well. If Rust did this, the\noperation `s2 = s1` could be very expensive in terms of runtime performance if\nthe data on the heap were large.\n\n<img alt=\"Four tables: two tables representing the stack data for s1 and s2,\nand each points to its own copy of string data on the heap.\"\nsrc=\"img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 4-3: Another possibility for what `s2 = s1` might\ndo if Rust copied the heap data as well</span>\n\nEarlier, we said that when a variable goes out of scope, Rust automatically\ncalls the `drop` function and cleans up the heap memory for that variable. But\nFigure 4-2 shows both data pointers pointing to the same location. This is a\nproblem: when `s2` and `s1` go out of scope, they will both try to free the\nsame memory. This is known as a *double free* error and is one of the memory\nsafety bugs we mentioned previously. Freeing memory twice can lead to memory\ncorruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, after the line `let s2 = s1;`, Rust considers `s1` as\nno longer valid. Therefore, Rust doesn\u2019t need to free anything when `s1` goes\nout of scope. Check out what happens when you try to use `s1` after `s2` is\ncreated; it won\u2019t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/src/main.rs:here}}\n```\n\nYou\u2019ll get an error like this because Rust prevents you from using the\ninvalidated reference:\n\n```console\n{{#include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/output.txt}}\n```\n\nIf you\u2019ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it\u2019s known as a *move*. In this example, we would say that `s1`\nwas *moved* into `s2`. So, what actually happens is shown in Figure 4-4.\n\n<img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\nTable s1 is grayed out be-cause s1 is no longer valid; only s2 can be used to\naccess the heap data.\" src=\"img/trpl04-04.svg\" class=\"center\" style=\"width:\n50%;\" />\n\n<span class=\"caption\">Figure 4-4: Representation in memory after `s1` has been\ninvalidated</span>\n\nThat solves our problem! With only `s2` valid, when it goes out of scope it\nalone will free the memory, and we\u2019re done.\n\nIn addition, there\u2019s a design choice that\u2019s implied by this: Rust will never\nautomatically create \u201cdeep\u201d copies of your data. Therefore, any *automatic*\ncopying can be assumed to be inexpensive in terms of runtime performance.\n\n<!-- Old heading. Do not remove or links may break. -->\n<a id=\"ways-variables-and-data-interact-clone\"></a>\n\n#### Variables and Data Interacting with Clone\n\nIf we *do* want to deeply copy the heap data of the `String`, not just the\nstack data, we can use a common method called `clone`. We\u2019ll discuss method\nsyntax in Chapter 5, but because methods are a common feature in many\nprogramming languages, you\u2019ve probably seen them before.\n\nHere\u2019s an example of the `clone` method in action:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-05-clone/src/main.rs:here}}\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3,\nwhere the heap data *does* get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being\nexecuted and that code may be expensive. It\u2019s a visual indicator that something\ndifferent is going on.\n\n#### Stack-Only Data: Copy\n\nThere\u2019s another wrinkle we haven\u2019t talked about yet. This code using\nintegers\u2014part of which was shown in Listing 4-2\u2014works and is valid:\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-06-copy/src/main.rs:here}}\n```\n\nBut this code seems to contradict what we just learned: we don\u2019t have a call to\n`clone`, but `x` is still valid and wasn\u2019t moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile\ntime are stored entirely on the stack, so copies of the actual values are quick\nto make. That means there\u2019s no reason we would want to prevent `x` from being\nvalid after we create the variable `y`. In other words, there\u2019s no difference\nbetween deep and shallow copying here, so calling `clone` wouldn\u2019t do anything\ndifferent from the usual shallow copying, and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on\ntypes that are stored on the stack, as integers are (we\u2019ll talk more about\ntraits in [Chapter 10][traits]<!-- ignore -->). If a type implements the `Copy`\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.\n\nRust won\u2019t let us annotate a type with `Copy` if the type, or any of its parts,\nhas implemented the `Drop` trait. If the type needs something special to happen\nwhen the value goes out of scope and we add the `Copy` annotation to that type,\nwe\u2019ll get a compile-time error. To learn about how to add the `Copy` annotation\nto your type to implement the trait, see [\u201cDerivable\nTraits\u201d][derivable-traits]<!-- ignore --> in Appendix C.\n\nSo, what types implement the `Copy` trait? You can check the documentation for\nthe given type to be sure, but as a general rule, any group of simple scalar\nvalues can implement `Copy`, and nothing that requires allocation or is some\nform of resource can implement `Copy`. Here are some of the types that\nimplement `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating-point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that also implement `Copy`. For example,\n  `(i32, i32)` implements `Copy`, but `(i32, String)` does not.\n\n### Ownership and Functions\n\nThe mechanics of passing a value to a function are similar to those when\nassigning a value to a variable. Passing a variable to a function will move or\ncopy, just as assignment does. Listing 4-3 has an example with some annotations\nshowing where variables go into and out of scope.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-3: Functions with ownership and scope\nannotated</span>\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a\ncompile-time error. These static checks protect us from mistakes. Try adding\ncode to `main` that uses `s` and `x` to see where you can use them and where\nthe ownership rules prevent you from doing so.\n\n### Return Values and Scope\n\nReturning values can also transfer ownership. Listing 4-4 shows an example of a\nfunction that returns some value, with similar annotations as those in Listing\n4-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-4: Transferring ownership of return\nvalues</span>\n\nThe ownership of a variable follows the same pattern every time: assigning a\nvalue to another variable moves it. When a variable that includes data on the\nheap goes out of scope, the value will be cleaned up by `drop` unless ownership\nof the data has been moved to another variable.\n\nWhile this works, taking ownership and then returning ownership with every\nfunction is a bit tedious. What if we want to let a function use a value but\nnot take ownership? It\u2019s quite annoying that anything we pass in also needs to\nbe passed back if we want to use it again, in addition to any data resulting\nfrom the body of the function that we might want to return as well.\n\nRust does let us return multiple values using a tuple, as shown in Listing 4-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 4-5: Returning ownership of parameters</span>\n\nBut this is too much ceremony and a lot of work for a concept that should be\ncommon. Luckily for us, Rust has a feature for using a value without\ntransferring ownership, called *references*.\n\n[data-types]: ch03-02-data-types.html#data-types\n[ch8]: ch08-02-strings.html\n[traits]: ch10-02-traits.html\n[derivable-traits]: appendix-03-derivable-traits.html\n[method-syntax]: ch05-03-method-syntax.html#method-syntax\n[paths-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[drop]: ../std/ops/trait.Drop.html#tymethod.drop\n",
          "qas": [
            {
              "question": "What are the differences between the stack and the heap?",
              "id": 3,
              "answers": [
                {
                  "text": "> Both the stack and the heap are parts of memory available to your code to use\n> at runtime, but they are structured in different ways. The stack stores\n> values in the order it gets them and removes the values in the opposite\n> order. This is referred to as *last in, first out*. Think of a stack of\n> plates: when you add more plates, you put them on top of the pile, and when\n> you need a plate, you take one off the top. Adding or removing plates from\n> the middle or bottom wouldn\u2019t work as well! Adding data is called *pushing\n> onto the stack*, and removing data is called *popping off the stack*. All\n> data stored on the stack must have a known, fixed size. Data with an unknown\n> size at compile time or a size that might change must be stored on the heap\n> instead.\n>\n> The heap is less organized: when you put data on the heap, you request a\n> certain amount of space. The memory allocator finds an empty spot in the heap\n> that is big enough, marks it as being in use, and returns a *pointer*, which\n> is the address of that location. This process is called *allocating on the\n> heap* and is sometimes abbreviated as just *allocating* (pushing values onto\n> the stack is not considered allocating). Because the pointer to the heap is a\n> known, fixed size, you can store the pointer on the stack, but when you want\n> the actual data, you must follow the pointer. Think of being seated at a\n> restaurant. When you enter, you state the number of people in your group, and\n> the host finds an empty table that fits everyone and leads you there. If\n> someone in your group comes late, they can ask where you\u2019ve been seated to\n> find you.",
                  "answer_start": 1624
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the problems that ownership addresses?",
              "id": 8,
              "answers": [
                {
                  "text": "> Keeping track of what parts of code are using what data on the heap,\n> minimizing the amount of duplicate data on the heap, and cleaning up unused\n> data on the heap so you don\u2019t run out of space are all problems that ownership\n> addresses. Once you understand ownership, you won\u2019t need to think about the\n> stack and the heap very often, but knowing that the main purpose of ownership\n> is to manage heap data can help explain why it works the way it does.",
                  "answer_start": 4644
                }
              ],
              "is_impossible": false
            },
            {
              "question": "```rust\nlet s = String::from(\"hello\");\n```\nWhat is the meaning of double colon `::` here?",
              "id": 12,
              "answers": [
                {
                  "text": "```rust\nlet s = String::from(\"hello\");\n```\n\nThe double colon `::` operator allows us to namespace this particular `from`\nfunction under the `String` type rather than using some sort of name like\n`string_from`.",
                  "answer_start": 8359
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to expand the abbreviation 'RAII'?",
              "id": 16,
              "answers": [
                {
                  "text": "> Note: In C++, this pattern of deallocating resources at the end of an item\u2019s\n> lifetime is sometimes called *Resource Acquisition Is Initialization (RAII)*.\n> The `drop` function in Rust will be familiar to you if you\u2019ve used RAII\n> patterns.",
                  "answer_start": 11484
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the name of the set of rules that gocern how a Rust program manages memory?",
              "id": 1,
              "answers": [
                {
                  "text": "*Ownership* is a set of rules that govern how a Rust program manages memory.",
                  "answer_start": 23
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why accessing data in the heap is slower than accessing data on the stack?",
              "id": 6,
              "answers": [
                {
                  "text": "> Accessing data in the heap is slower than accessing data on the stack because\n> you have to follow a pointer to get there. Contemporary processors are faster\n> if they jump around less in memory. Continuing the analogy, consider a server\n> at a restaurant taking orders from many tables. It\u2019s most efficient to get\n> all the orders at one table before moving on to the next table. Taking an\n> order from table A, then an order from table B, then one from A again, and\n> then one from B again would be a much slower process. By the same token, a\n> processor can do its job better if it works on data that\u2019s close to other\n> data (as it is on the stack) rather than farther away (as it can be on the\n> heap).",
                  "answer_start": 3671
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to not waste the memory if the language doesnt support garbage collector?",
              "id": 15,
              "answers": [
                {
                  "text": "In most languages without a GC,\nit\u2019s our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe\u2019ll waste memory. If we do it too early, we\u2019ll have an invalid variable. If\nwe do it twice, that\u2019s a bug too. We need to pair exactly one `allocate` with\nexactly one `free`.",
                  "answer_start": 10314
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does \"move\" mean in the terms of rust language?",
              "id": 17,
              "answers": [
                {
                  "text": "If you\u2019ve heard the terms *shallow copy* and *deep copy* while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it\u2019s known as a *move*. In this example, we would say that `s1`\nwas *moved* into `s2`.",
                  "answer_start": 16727
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the examples of the types that implement 'Copy'?",
              "id": 20,
              "answers": [
                {
                  "text": "Here are some of the types that\nimplement `Copy`:\n\n* All the integer types, such as `u32`.\n* The Boolean type, `bool`, with values `true` and `false`.\n* All the floating-point types, such as `f64`.\n* The character type, `char`.\n* Tuples, if they only contain types that also implement `Copy`. For example,\n  `(i32, i32)` implements `Copy`, but `(i32, String)` does not.",
                  "answer_start": 20786
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens with the valued passed into the function and function's local variables after calling the function?",
              "id": 7,
              "answers": [
                {
                  "text": "> When your code calls a function, the values passed into the function\n> (including, potentially, pointers to data on the heap) and the function\u2019s\n> local variables get pushed onto the stack. When the function is over, those\n> values get popped off the stack.",
                  "answer_start": 4382
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are three ownership rules?",
              "id": 9,
              "answers": [
                {
                  "text": "First, let\u2019s take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:\n\n* Each value in Rust has an *owner*.\n* There can only be one owner at a time.\n* When the owner goes out of scope, the value will be dropped.",
                  "answer_start": 5126
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is the 'copy' annotation?",
              "id": 19,
              "answers": [
                {
                  "text": "Rust has a special annotation called the `Copy` trait that we can place on\ntypes that are stored on the stack, as integers are (we\u2019ll talk more about\ntraits in [Chapter 10][traits]\u2039!-- ignore -->). If a type implements the `Copy`\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.",
                  "answer_start": 19715
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the role of the garbage collector?",
              "id": 14,
              "answers": [
                {
                  "text": "In languages with a *garbage collector\n(GC)*, the GC keeps track of and cleans up memory that isn\u2019t being used\nanymore, and we don\u2019t need to think about it.",
                  "answer_start": 10157
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why pushing to the stack is faster than allocating on the heap?",
              "id": 5,
              "answers": [
                {
                  "text": "> Pushing to the stack is faster than allocating on the heap because the\n> allocator never has to search for a place to store new data; that location is\n> always at the top of the stack. Comparatively, allocating space on the heap\n> requires more work because the allocator must first find a big enough space\n> to hold the data and then perform bookkeeping to prepare for the next\n> allocation.",
                  "answer_start": 3274
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When string literals aren\u2019t suitable for every\nsituation in which we may want to use text?",
              "id": 11,
              "answers": [
                {
                  "text": "We\u2019ve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren\u2019t suitable for every\nsituation in which we may want to use text. One reason is that they\u2019re\nimmutable.",
                  "answer_start": 7705
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## An Example Program Using Structs\n\nTo understand when we might want to use structs, let\u2019s write a program that\ncalculates the area of a rectangle. We\u2019ll start by using single variables, and\nthen refactor the program until we\u2019re using structs instead.\n\nLet\u2019s make a new binary project with Cargo called *rectangles* that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project\u2019s *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}}\n```\n\n<span class=\"caption\">Listing 5-8: Calculating the area of a rectangle\nspecified by separate width and height variables</span>\n\nNow, run this program using `cargo run`:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}}\n```\n\nThis code succeeds in figuring out the area of the rectangle by calling the\n`area` function with each dimension, but we can do more to make this code clear\nand readable.\n\nThe issue with this code is evident in the signature of `area`:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}}\n```\n\nThe `area` function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters, and it\u2019s not clear anywhere in our\nprogram that the parameters are related. It would be more readable and more\nmanageable to group width and height together. We\u2019ve already discussed one way\nwe might do that in [\u201cThe Tuple Type\u201d][the-tuple-type]<!-- ignore --> section\nof Chapter 3: by using tuples.\n\n### Refactoring with Tuples\n\nListing 5-9 shows another version of our program that uses tuples.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-9: Specifying the width and height of the\nrectangle with a tuple</span>\n\nIn one way, this program is better. Tuples let us add a bit of structure, and\nwe\u2019re now passing just one argument. But in another way, this version is less\nclear: tuples don\u2019t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.\n\nMixing up the width and height wouldn\u2019t matter for the area calculation, but if\nwe want to draw the rectangle on the screen, it would matter! We would have to\nkeep in mind that `width` is the tuple index `0` and `height` is the tuple\nindex `1`. This would be even harder for someone else to figure out and keep in\nmind if they were to use our code. Because we haven\u2019t conveyed the meaning of\nour data in our code, it\u2019s now easier to introduce errors.\n\n### Refactoring with Structs: Adding More Meaning\n\nWe use structs to add meaning by labeling the data. We can transform the tuple\nwe\u2019re using into a struct with a name for the whole as well as names for the\nparts, as shown in Listing 5-10.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-10: Defining a `Rectangle` struct</span>\n\nHere we\u2019ve defined a struct and named it `Rectangle`. Inside the curly\nbrackets, we defined the fields as `width` and `height`, both of which have\ntype `u32`. Then, in `main`, we created a particular instance of `Rectangle`\nthat has a width of `30` and a height of `50`.\n\nOur `area` function is now defined with one parameter, which we\u2019ve named\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, `main` retains its ownership and can continue\nusing `rect1`, which is the reason we use the `&` in the function signature and\nwhere we call the function.\n\nThe `area` function accesses the `width` and `height` fields of the `Rectangle`\ninstance (note that accessing fields of a borrowed struct instance does not\nmove the field values, which is why you often see borrows of structs). Our\nfunction signature for `area` now says exactly what we mean: calculate the area\nof `Rectangle`, using its `width` and `height` fields. This conveys that the\nwidth and height are related to each other, and it gives descriptive names to\nthe values rather than using the tuple index values of `0` and `1`. This is a\nwin for clarity.\n\n### Adding Useful Functionality with Derived Traits\n\nIt\u2019d be useful to be able to print an instance of `Rectangle` while we\u2019re\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the [`println!` macro][println]<!-- ignore --> as we have used in\nprevious chapters. This won\u2019t work, however.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-11: Attempting to print a `Rectangle`\ninstance</span>\n\nWhen we compile this code, we get an error with this core message:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}}\n```\n\nThe `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we\u2019ve seen so far\nimplement `Display` by default because there\u2019s only one way you\u2019d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn\u2019t try to guess what we want, and structs don\u2019t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder.\n\nIf we continue reading the errors, we\u2019ll find this helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}}\n```\n\nLet\u2019s try it! The `println!` macro call will now look like `println!(\"rect1 is\n{:?}\", rect1);`. Putting the specifier `:?` inside the curly brackets tells\n`println!` we want to use an output format called `Debug`. The `Debug` trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we\u2019re debugging our code.\n\nCompile the code with this change. Drat! We still get an error:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}}\n```\n\nBut again, the compiler gives us a helpful note:\n\n```text\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}}\n```\n\nRust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition, as shown in Listing 5-12.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 5-12: Adding the attribute to derive the `Debug`\ntrait and printing the `Rectangle` instance using debug formatting</span>\n\nNow when we run the program, we won\u2019t get any errors, and we\u2019ll see the\nfollowing output:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}}\n```\n\nNice! It\u2019s not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it\u2019s useful to have output that\u2019s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string. In\nthis example, using the `{:#?}` style will output the following:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}}\n```\n\nAnother way to print out a value using the `Debug` format is to use the [`dbg!`\nmacro][dbg]<!-- ignore -->, which takes ownership of an expression (as opposed\nto `println!`, which takes a reference), prints the file and line number of\nwhere that `dbg!` macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value.\n\n> Note: Calling the `dbg!` macro prints to the standard error console stream\n> (`stderr`), as opposed to `println!`, which prints to the standard output\n> console stream (`stdout`). We\u2019ll talk more about `stderr` and `stdout` in the\n> [\u201cWriting Error Messages to Standard Error Instead of Standard Output\u201d\n> section in Chapter 12][err]<!-- ignore -->.\n\nHere\u2019s an example where we\u2019re interested in the value that gets assigned to the\n`width` field, as well as the value of the whole struct in `rect1`:\n\n```rust\n{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}}\n```\n\nWe can put `dbg!` around the expression `30 * scale` and, because `dbg!`\nreturns ownership of the expression\u2019s value, the `width` field will get the\nsame value as if we didn\u2019t have the `dbg!` call there. We don\u2019t want `dbg!` to\ntake ownership of `rect1`, so we use a reference to `rect1` in the next call.\nHere\u2019s what the output of this example looks like:\n\n```console\n{{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}}\n```\n\nWe can see the first bit of output came from *src/main.rs* line 10 where we\u2019re\ndebugging the expression `30 * scale`, and its resultant value is `60` (the\n`Debug` formatting implemented for integers is to print only their value). The\n`dbg!` call on line 14 of *src/main.rs* outputs the value of `&rect1`, which is\nthe `Rectangle` struct. This output uses the pretty `Debug` formatting of the\n`Rectangle` type. The `dbg!` macro can be really helpful when you\u2019re trying to\nfigure out what your code is doing!\n\nIn addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes. Those traits and their behaviors are listed in [Appendix C][app-c]<!--\nignore -->. We\u2019ll cover how to implement these traits with custom behavior as\nwell as how to create your own traits in Chapter 10. There are also many\nattributes other than `derive`; for more information, see [the \u201cAttributes\u201d\nsection of the Rust Reference][attributes].\n\nOur `area` function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our `Rectangle` struct\nbecause it won\u2019t work with any other type. Let\u2019s look at how we can continue to\nrefactor this code by turning the `area` function into an `area` *method*\ndefined on our `Rectangle` type.\n\n[the-tuple-type]: ch03-02-data-types.html#the-tuple-type\n[app-c]: appendix-03-derivable-traits.md\n[println]: ../std/macro.println.html\n[dbg]: ../std/macro.dbg.html\n[err]: ch12-06-writing-to-stderr-instead-of-stdout.html\n[attributes]: ../reference/attributes.html\n",
          "qas": [
            {
              "question": "How I can make having functionality to print out debugging information available to my struct?",
              "id": 62,
              "answers": [
                {
                  "text": "Rust *does* include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition",
                  "answer_start": 7030
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can do 'derive' attribute?",
              "id": 66,
              "answers": [
                {
                  "text": "In addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes.",
                  "answer_start": 10322
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why structs don\u2019t have a provided implementation of `Display` to use with `println!` and the `{}` placeholder?",
              "id": 61,
              "answers": [
                {
                  "text": "The `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we\u2019ve seen so far\nimplement `Display` by default because there\u2019s only one way you\u2019d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn\u2019t try to guess what we want, and structs don\u2019t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder.",
                  "answer_start": 5389
                }
              ],
              "is_impossible": false
            },
            {
              "question": "`{:#?}` or `{:?}` is easier to read when I have\nlarger structs?",
              "id": 63,
              "answers": [
                {
                  "text": "When we have\nlarger structs, it\u2019s useful to have output that\u2019s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string.",
                  "answer_start": 7976
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the advantages and disadvantages to use tuples in terms of refactoring?",
              "id": 59,
              "answers": [
                {
                  "text": "In one way, this program is better. Tuples let us add a bit of structure, and\nwe\u2019re now passing just one argument. But in another way, this version is less\nclear: tuples don\u2019t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.",
                  "answer_start": 2141
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Control Flow\n\nThe ability to run some code depending on whether a condition is `true` and to\nrun some code repeatedly while a condition is `true` are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are `if` expressions and loops.\n\n### `if` Expressions\n\nAn `if` expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, \u201cIf this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.\u201d\n\nCreate a new project called *branches* in your *projects* directory to explore\nthe `if` expression. In the *src/main.rs* file, input the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/src/main.rs}}\n```\n\nAll `if` expressions start with the keyword `if`, followed by a condition. In\nthis case, the condition checks whether or not the variable `number` has a\nvalue less than 5. We place the block of code to execute if the condition is\n`true` immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in `if` expressions are sometimes called *arms*,\njust like the arms in `match` expressions that we discussed in the [\u201cComparing\nthe Guess to the Secret Number\u201d][comparing-the-guess-to-the-secret-number]<!--\nignore --> section of Chapter 2.\n\nOptionally, we can also include an `else` expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to `false`. If you don\u2019t provide an `else` expression and\nthe condition is `false`, the program will just skip the `if` block and move on\nto the next bit of code.\n\nTry running this code; you should see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/output.txt}}\n```\n\nLet\u2019s try changing the value of `number` to a value that makes the condition\n`false` to see what happens:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/src/main.rs:here}}\n```\n\nRun the program again, and look at the output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/output.txt}}\n```\n\nIt\u2019s also worth noting that the condition in this code *must* be a `bool`. If\nthe condition isn\u2019t a `bool`, we\u2019ll get an error. For example, try running the\nfollowing code:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/src/main.rs}}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an\nerror:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/output.txt}}\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n`if` with a Boolean as its condition. If we want the `if` code block to run\nonly when a number is not equal to `0`, for example, we can change the `if`\nexpression to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-29-if-not-equal-0/src/main.rs}}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### Handling Multiple Conditions with `else if`\n\nYou can use multiple conditions by combining `if` and `else` in an `else if`\nexpression. For example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/src/main.rs}}\n```\n\nThis program has four possible paths it can take. After running it, you should\nsee the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/output.txt}}\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes\nthe first body for which the condition evaluates to `true`. Note that even\nthough 6 is divisible by 2, we don\u2019t see the output `number is divisible by 2`,\nnor do we see the `number is not divisible by 4, 3, or 2` text from the `else`\nblock. That\u2019s because Rust only executes the block for the first `true`\ncondition, and once it finds one, it doesn\u2019t even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called `match` for these cases.\n\n#### Using `if` in a `let` Statement\n\nBecause `if` is an expression, we can use it on the right side of a `let`\nstatement to assign the outcome to a variable, as in Listing 3-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-2: Assigning the result of an `if` expression\nto a variable</span>\n\nThe `number` variable will be bound to a value based on the outcome of the `if`\nexpression. Run this code to see what happens:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-02/output.txt}}\n```\n\nRemember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole `if` expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the `if` must be\nthe same type; in Listing 3-2, the results of both the `if` arm and the `else`\narm were `i32` integers. If the types are mismatched, as in the following\nexample, we\u2019ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/src/main.rs}}\n```\n\nWhen we try to compile this code, we\u2019ll get an error. The `if` and `else` arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/output.txt}}\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in\nthe `else` block evaluates to a string. This won\u2019t work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n`number` variable is, definitively. Knowing the type of `number` lets the\ncompiler verify the type is valid everywhere we use `number`. Rust wouldn\u2019t be\nable to do that if the type of `number` was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable.\n\n### Repetition with Loops\n\nIt\u2019s often useful to execute a block of code more than once. For this task,\nRust provides several *loops*, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let\u2019s make a new project called *loops*.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let\u2019s try each one.\n\n#### Repeating Code with `loop`\n\nThe `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.\n\nAs an example, change the *src/main.rs* file in your *loops* directory to look\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-loop/src/main.rs}}\n```\n\nWhen we run this program, we\u2019ll see `again!` printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard\nshortcut <span class=\"keystroke\">ctrl-c</span> to interrupt a program that is\nstuck in a continual loop. Give it a try:\n\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n```\n\nThe symbol `^C` represents where you pressed <span\nclass=\"keystroke\">ctrl-c</span>. You may or may not see the word `again!`\nprinted after the `^C`, depending on where the code was in the loop when it\nreceived the interrupt signal.\n\nFortunately, Rust also provides a way to break out of a loop using code. You\ncan place the `break` keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n[\u201cQuitting After a Correct Guess\u201d][quitting-after-a-correct-guess]<!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.\n\nWe also used `continue` in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration.\n\n#### Returning Values from Loops\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the `break` expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-33-return-value-from-loop/src/main.rs}}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to\n`0`. Then we declare a variable named `result` to hold the value returned from\nthe loop. On every iteration of the loop, we add `1` to the `counter` variable,\nand then check whether the `counter` is equal to `10`. When it is, we use the\n`break` keyword with the value `counter * 2`. After the loop, we use a\nsemicolon to end the statement that assigns the value to `result`. Finally, we\nprint the value in `result`, which in this case is `20`.\n\n#### Loop Labels to Disambiguate Between Multiple Loops\n\nIf you have loops within loops, `break` and `continue` apply to the innermost\nloop at that point. You can optionally specify a *loop label* on a loop that\nyou can then use with `break` or `continue` to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here\u2019s an example with two nested loops:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/src/main.rs}}\n```\n\nThe outer loop has the label `'counting_up`, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first `break` that\ndoesn\u2019t specify a label will exit the inner loop only. The `break\n'counting_up;` statement will exit the outer loop. This code prints:\n\n```console\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/output.txt}}\n```\n\n#### Conditional Loops with `while`\n\nA program will often need to evaluate a condition within a loop. While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop. It\u2019s possible to implement behavior\nlike this using a combination of `loop`, `if`, `else`, and `break`; you could\ntry that now in a program, if you\u2019d like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a `while` loop. In\nListing 3-3, we use `while` to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-3: Using a `while` loop to run code while a\ncondition holds true</span>\n\nThis construct eliminates a lot of nesting that would be necessary if you used\n`loop`, `if`, `else`, and `break`, and it\u2019s clearer. While a condition\nevaluates to `true`, the code runs; otherwise, it exits the loop.\n\n#### Looping Through a Collection with `for`\n\nYou can choose to use the `while` construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array `a`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a `while` loop</span>\n\nHere, the code counts up through the elements in the array. It starts at index\n`0`, and then loops until it reaches the final index in the array (that is,\nwhen `index < 5` is no longer `true`). Running this code will print every\nelement in the array:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/listing-03-04/output.txt}}\n```\n\nAll five array values appear in the terminal, as expected. Even though `index`\nwill reach a value of `5` at some point, the loop stops executing before trying\nto fetch a sixth value from the array.\n\nHowever, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the `a` array to have four elements but forgot to update the\ncondition to `while index < 4`, the code would panic. It\u2019s also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code\nfor each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a `for` loop</span>\n\nWhen we run this code, we\u2019ll see the same output as in Listing 3-4. More\nimportantly, we\u2019ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.\n\nUsing the `for` loop, you wouldn\u2019t need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a `while` loop\nin Listing 3-3, most Rustaceans would use a `for` loop. The way to do that\nwould be to use a `Range`, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber.\n\nHere\u2019s what the countdown would look like using a `for` loop and another method\nwe\u2019ve not yet talked about, `rev`, to reverse the range:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-34-for-range/src/main.rs}}\n```\n\nThis code is a bit nicer, isn\u2019t it?\n\n## Summary\n\nYou made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, `if` expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:\n\n* Convert temperatures between Fahrenheit and Celsius.\n* Generate the *n*th Fibonacci number.\n* Print the lyrics to the Christmas carol \u201cThe Twelve Days of Christmas,\u201d\n  taking advantage of the repetition in the song.\n\nWhen you\u2019re ready to move on, we\u2019ll talk about a concept in Rust that *doesn\u2019t*\ncommonly exist in other programming languages: ownership.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[quitting-after-a-correct-guess]:\nch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\n",
          "qas": [
            {
              "question": "Can we iterate through collection with 'while' loop?",
              "id": 355,
              "answers": [
                {
                  "text": "You can choose to use the `while` construct to loop over the elements of a\ncollection, such as an array",
                  "answer_start": 12558
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What keyword can I use to stop the loop?",
              "id": 352,
              "answers": [
                {
                  "text": "break",
                  "answer_start": 8834
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Will Rust automatically convert non-boolean variables to bool?",
              "id": 346,
              "answers": [
                {
                  "text": "Rust will not automatically try to\nconvert non-Boolean types to a Boolean",
                  "answer_start": 3064
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What kind of loops can we use in Rust?",
              "id": 349,
              "answers": [
                {
                  "text": "loop`, `while`, and `for`",
                  "answer_start": 7444
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What types can I put inside the 'if' condition?",
              "id": 345,
              "answers": [
                {
                  "text": "bool",
                  "answer_start": 2426
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what can we execute block of code many times?",
              "id": 348,
              "answers": [
                {
                  "text": "loops",
                  "answer_start": 7222
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can we understand the 'if' statement?",
              "id": 342,
              "answers": [
                {
                  "text": "f this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.",
                  "answer_start": 461
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the syntax of 'if'?",
              "id": 343,
              "answers": [
                {
                  "text": "All `if` expressions start with the keyword `if`, followed by a condition",
                  "answer_start": 887
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does 'while' loop work?",
              "id": 354,
              "answers": [
                {
                  "text": "While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop",
                  "answer_start": 11492
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What allows us to run some block of code if some condition is true?",
              "id": 340,
              "answers": [
                {
                  "text": "`if` expressions and loops",
                  "answer_start": 293
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what keyword can we tell program to skip the rest of current loop iteration?",
              "id": 353,
              "answers": [
                {
                  "text": "continue",
                  "answer_start": 9167
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'else' for?",
              "id": 344,
              "answers": [
                {
                  "text": "to give the program an alternative block of code to execute should the\ncondition evaluate to `false",
                  "answer_start": 1547
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How is 'loop' keyword working?",
              "id": 351,
              "answers": [
                {
                  "text": "The `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.",
                  "answer_start": 7525
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How many loops are in Rust?",
              "id": 350,
              "answers": [
                {
                  "text": "three",
                  "answer_start": 7421
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Generic Types, Traits, and Lifetimes\n\nEvery programming language has tools for effectively handling the duplication\nof concepts. In Rust, one such tool is *generics*: abstract stand-ins for\nconcrete types or other properties. We can express the behavior of generics or\nhow they relate to other generics without knowing what will be in their place\nwhen compiling and running the code.\n\nFunctions can take parameters of some generic type, instead of a concrete type\nlike `i32` or `String`, in the same way a function takes parameters with\nunknown values to run the same code on multiple concrete values. In fact, we\u2019ve\nalready used generics in Chapter 6 with `Option<T>`, Chapter 8 with `Vec<T>`\nand `HashMap<K, V>`, and Chapter 9 with `Result<T, E>`. In this chapter, you\u2019ll\nexplore how to define your own types, functions, and methods with generics!\n\nFirst, we\u2019ll review how to extract a function to reduce code duplication. We\u2019ll\nthen use the same technique to make a generic function from two functions that\ndiffer only in the types of their parameters. We\u2019ll also explain how to use\ngeneric types in struct and enum definitions.\n\nThen you\u2019ll learn how to use *traits* to define behavior in a generic way. You\ncan combine traits with generic types to constrain a generic type to accept\nonly those types that have a particular behavior, as opposed to just any type.\n\nFinally, we\u2019ll discuss *lifetimes*: a variety of generics that give the\ncompiler information about how references relate to each other. Lifetimes allow\nus to give the compiler enough information about borrowed values so that it can\nensure references will be valid in more situations than it could without our\nhelp.\n\n## Removing Duplication by Extracting a Function\n\nGenerics allow us to replace specific types with a placeholder that represents\nmultiple types to remove code duplication. Before diving into generics syntax,\nthen, let\u2019s first look at how to remove duplication in a way that doesn\u2019t\ninvolve generic types by extracting a function that replaces specific values\nwith a placeholder that represents multiple values. Then we\u2019ll apply the same\ntechnique to extract a generic function! By looking at how to recognize\nduplicated code you can extract into a function, you\u2019ll start to recognize\nduplicated code that can use generics.\n\nWe begin with the short program in Listing 10-1 that finds the largest number\nin a list.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-1: Finding the largest number in a list of\nnumbers</span>\n\nWe store a list of integers in the variable `number_list` and place a reference\nto the first number in the list in a variable named `largest`. We then iterate\nthrough all the numbers in the list, and if the current number is greater than\nthe number stored in `largest`, replace the reference in that variable.\nHowever, if the current number is less than or equal to the largest number seen\nso far, the variable doesn\u2019t change, and the code moves on to the next number\nin the list. After considering all the numbers in the list, `largest` should\nrefer to the largest number, which in this case is 100.\n\nWe've now been tasked with finding the largest number in two different lists of\nnumbers. To do so, we can choose to duplicate the code in Listing 10-1 and use\nthe same logic at two different places in the program, as shown in Listing 10-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-2: Code to find the largest number in *two*\nlists of numbers</span>\n\nAlthough this code works, duplicating code is tedious and error prone. We also\nhave to remember to update the code in multiple places when we want to change\nit.\n\nTo eliminate this duplication, we\u2019ll create an abstraction by defining a\nfunction that operates on any list of integers passed in a parameter. This\nsolution makes our code clearer and lets us express the concept of finding the\nlargest number in a list abstractly.\n\nIn Listing 10-3, we extract the code that finds the largest number into a\nfunction named `largest`. Then we call the function to find the largest number\nin the two lists from Listing 10-2. We could also use the function on any other\nlist of `i32` values we might have in the future.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-3: Abstracted code to find the largest number\nin two lists</span>\n\nThe `largest` function has a parameter called `list`, which represents any\nconcrete slice of `i32` values we might pass into the function. As a result,\nwhen we call the function, the code runs on the specific values that we pass\nin.\n\nIn summary, here are the steps we took to change the code from Listing 10-2 to\nListing 10-3:\n\n1. Identify duplicate code.\n2. Extract the duplicate code into the body of the function and specify the\n   inputs and return values of that code in the function signature.\n3. Update the two instances of duplicated code to call the function instead.\n\nNext, we\u2019ll use these same steps with generics to reduce code duplication. In\nthe same way that the function body can operate on an abstract `list` instead\nof specific values, generics allow code to operate on abstract types.\n\nFor example, say we had two functions: one that finds the largest item in a\nslice of `i32` values and one that finds the largest item in a slice of `char`\nvalues. How would we eliminate that duplication? Let\u2019s find out!\n",
          "qas": [
            {
              "question": "What is the advantage of using generics?",
              "id": 2015,
              "answers": [
                {
                  "text": "Generics allow us to replace specific types with a placeholder that represents\nmultiple types to remove code duplication.",
                  "answer_start": 1736
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I avoid duplicating code without the usage of generics?",
              "id": 2018,
              "answers": [
                {
                  "text": "by extracting a function that replaces specific values\nwith a placeholder that represents multiple values",
                  "answer_start": 1990
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the examples of generics?",
              "id": 2014,
              "answers": [
                {
                  "text": "`Option\u2039T>`, Chapter 8 with `Vec\u2039T>`\nand `HashMap\u2039K, V>`, and Chapter 9 with `Result\u2039T, E>",
                  "answer_start": 659
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are lifetimes in context of generics?",
              "id": 2017,
              "answers": [
                {
                  "text": "a variety of generics that give the\ncompiler information about how references relate to each other.",
                  "answer_start": 1406
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to eliminate code duplication?",
              "id": 2034,
              "answers": [
                {
                  "text": "create an abstraction by defining a\nfunction",
                  "answer_start": 3971
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Publishing a Crate to Crates.io\n\nWe\u2019ve used packages from [crates.io](https://crates.io/)<!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n[crates.io](https://crates.io/)<!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source.\n\nRust and Cargo have features that make your published package easier for people\nto find and use. We\u2019ll talk about some of these features next and then explain\nhow to publish a package.\n\n### Making Useful Documentation Comments\n\nAccurately documenting your packages will help other users know how and when to\nuse them, so it\u2019s worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, `//`. Rust also has\na particular kind of comment for documentation, known conveniently as a\n*documentation comment*, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to *use* your crate as opposed to how\nyour crate is *implemented*.\n\nDocumentation comments use three slashes, `///`, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they\u2019re documenting. Listing 14-1 shows documentation comments\nfor an `add_one` function in a crate named `my_crate`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 14-1: A documentation comment for a\nfunction</span>\n\nHere, we give a description of what the `add_one` function does, start a\nsection with the heading `Examples`, and then provide code that demonstrates\nhow to use the `add_one` function. We can generate the HTML documentation from\nthis documentation comment by running `cargo doc`. This command runs the\n`rustdoc` tool distributed with Rust and puts the generated HTML documentation\nin the *target/doc* directory.\n\nFor convenience, running `cargo doc --open` will build the HTML for your\ncurrent crate\u2019s documentation (as well as the documentation for all of your\ncrate\u2019s dependencies) and open the result in a web browser. Navigate to the\n`add_one` function and you\u2019ll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:\n\n<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-1: HTML documentation for the `add_one`\nfunction</span>\n\n#### Commonly Used Sections\n\nWe used the `# Examples` Markdown heading in Listing 14-1 to create a section\nin the HTML with the title \u201cExamples.\u201d Here are some other sections that crate\nauthors commonly use in their documentation:\n\n* **Panics**: The scenarios in which the function being documented could\n  panic. Callers of the function who don\u2019t want their programs to panic should\n  make sure they don\u2019t call the function in these situations.\n* **Errors**: If the function returns a `Result`, describing the kinds of\n  errors that might occur and what conditions might cause those errors to be\n  returned can be helpful to callers so they can write code to handle the\n  different kinds of errors in different ways.\n* **Safety**: If the function is `unsafe` to call (we discuss unsafety in\n  Chapter 19), there should be a section explaining why the function is unsafe\n  and covering the invariants that the function expects callers to uphold.\n\nMost documentation comments don\u2019t need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code users will be\ninterested in knowing about.\n\n#### Documentation Comments as Tests\n\nAdding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running `cargo\ntest` will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don\u2019t work because the code has changed since the documentation was\nwritten. If we run `cargo test` with the documentation for the `add_one`\nfunction from Listing 14-1, we will see a section in the test results like this:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->\n\n```text\n   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n```\n\nNow if we change either the function or the example so the `assert_eq!` in the\nexample panics and run `cargo test` again, we\u2019ll see that the doc tests catch\nthat the example and the code are out of sync with each other!\n\n#### Commenting Contained Items\n\nThe style of doc comment `//!` adds documentation to the item that contains the\ncomments rather than to the items following the comments. We typically use\nthese doc comments inside the crate root file (*src/lib.rs* by convention) or\ninside a module to document the crate or the module as a whole.\n\nFor example, to add documentation that describes the purpose of the `my_crate`\ncrate that contains the `add_one` function, we add documentation comments that\nstart with `//!` to the beginning of the *src/lib.rs* file, as shown in Listing\n14-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-02/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-2: Documentation for the `my_crate` crate as a\nwhole</span>\n\nNotice there isn\u2019t any code after the last line that begins with `//!`. Because\nwe started the comments with `//!` instead of `///`, we\u2019re documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, that item is the *src/lib.rs* file, which is the crate root. These\ncomments describe the entire crate.\n\nWhen we run `cargo doc --open`, these comments will display on the front\npage of the documentation for `my_crate` above the list of public items in the\ncrate, as shown in Figure 14-2:\n\n<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-2: Rendered documentation for `my_crate`,\nincluding the comment describing the crate as a whole</span>\n\nDocumentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate\u2019s organization.\n\n### Exporting a Convenient Public API with `pub use`\n\nThe structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy.\n\nIn Chapter 7, we covered how to make items public using the `pub` keyword, and\nbring items into a scope with the `use` keyword. However, the structure that\nmakes sense to you while you\u2019re developing a crate might not be very convenient\nfor your users. You might want to organize your structs in a hierarchy\ncontaining multiple levels, but then people who want to use a type you\u2019ve\ndefined deep in the hierarchy might have trouble finding out that type exists.\nThey might also be annoyed at having to enter `use`\n`my_crate::some_module::another_module::UsefulType;` rather than `use`\n`my_crate::UsefulType;`.\n\nThe good news is that if the structure *isn\u2019t* convenient for others to use\nfrom another library, you don\u2019t have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that\u2019s different\nfrom your private structure by using `pub use`. Re-exporting takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead.\n\nFor example, say we made a library named `art` for modeling artistic concepts.\nWithin this library are two modules: a `kinds` module containing two enums\nnamed `PrimaryColor` and `SecondaryColor` and a `utils` module containing a\nfunction named `mix`, as shown in Listing 14-3:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground,test_harness\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-03/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-3: An `art` library with items organized into\n`kinds` and `utils` modules</span>\n\nFigure 14-3 shows what the front page of the documentation for this crate\ngenerated by `cargo doc` would look like:\n\n<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-3: Front page of the documentation for `art`\nthat lists the `kinds` and `utils` modules</span>\n\nNote that the `PrimaryColor` and `SecondaryColor` types aren\u2019t listed on the\nfront page, nor is the `mix` function. We have to click `kinds` and `utils` to\nsee them.\n\nAnother crate that depends on this library would need `use` statements that\nbring the items from `art` into scope, specifying the module structure that\u2019s\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n`PrimaryColor` and `mix` items from the `art` crate:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 14-4: A crate using the `art` crate\u2019s items with\nits internal structure exported</span>\n\nThe author of the code in Listing 14-4, which uses the `art` crate, had to\nfigure out that `PrimaryColor` is in the `kinds` module and `mix` is in the\n`utils` module. The module structure of the `art` crate is more relevant to\ndevelopers working on the `art` crate than to those using it. The internal\nstructure doesn\u2019t contain any useful information for someone trying to\nunderstand how to use the `art` crate, but rather causes confusion because\ndevelopers who use it have to figure out where to look, and must specify the\nmodule names in the `use` statements.\n\nTo remove the internal organization from the public API, we can modify the\n`art` crate code in Listing 14-3 to add `pub use` statements to re-export the\nitems at the top level, as shown in Listing 14-5:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-5: Adding `pub use` statements to re-export\nitems</span>\n\nThe API documentation that `cargo doc` generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n`PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find.\n\n<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\" />\n\n<span class=\"caption\">Figure 14-4: The front page of the documentation for `art`\nthat lists the re-exports</span>\n\nThe `art` crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 14-6: A program using the re-exported items from\nthe `art` crate</span>\n\nIn cases where there are many nested modules, re-exporting the types at the top\nlevel with `pub use` can make a significant difference in the experience of\npeople who use the crate. Another common use of `pub use` is to re-export\ndefinitions of a dependency in the current crate to make that crate's\ndefinitions part of your crate\u2019s public API.\n\nCreating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing `pub\nuse` gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you\u2019ve installed to see if their internal structure\ndiffers from their public API.\n\n### Setting Up a Crates.io Account\n\nBefore you can publish any crates, you need to create an account on\n[crates.io](https://crates.io/)<!-- ignore --> and get an API token. To do so,\nvisit the home page at [crates.io](https://crates.io/)<!-- ignore --> and log\nin via a GitHub account. (The GitHub account is currently a requirement, but\nthe site might support other ways of creating an account in the future.) Once\nyou\u2019re logged in, visit your account settings at\n[https://crates.io/me/](https://crates.io/me/)<!-- ignore --> and retrieve your\nAPI key. Then run the `cargo login` command with your API key, like this:\n\n```console\n$ cargo login abcdefghijklmnopqrstuvwxyz012345\n```\n\nThis command will inform Cargo of your API token and store it locally in\n*~/.cargo/credentials*. Note that this token is a *secret*: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on [crates.io](https://crates.io/)<!-- ignore\n-->.\n\n### Adding Metadata to a New Crate\n\nLet\u2019s say you have a crate you want to publish. Before publishing, you\u2019ll need\nto add some metadata in the `[package]` section of the crate\u2019s *Cargo.toml*\nfile.\n\nYour crate will need a unique name. While you\u2019re working on a crate locally,\nyou can name a crate whatever you\u2019d like. However, crate names on\n[crates.io](https://crates.io/)<!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use. If the name has been used, you will need to find another name and\nedit the `name` field in the *Cargo.toml* file under the `[package]` section to\nuse the new name for publishing, like so:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\n```\n\nEven if you\u2019ve chosen a unique name, when you run `cargo publish` to publish\nthe crate at this point, you\u2019ll get a warning and then an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo publish\ncopy just the relevant lines below\n-->\n\n```console\n$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n```\n\nThis errors because you\u2019re missing some crucial information: a description and\nlicense are required so people will know what your crate does and under what\nterms they can use it. In *Cargo.toml*, add a description that's just a\nsentence or two, because it will appear with your crate in search results. For\nthe `license` field, you need to give a *license identifier value*. The [Linux\nFoundation\u2019s Software Package Data Exchange (SPDX)][spdx] lists the identifiers\nyou can use for this value. For example, to specify that you\u2019ve licensed your\ncrate using the MIT License, add the `MIT` identifier:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nlicense = \"MIT\"\n```\n\nIf you want to use a license that doesn\u2019t appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse `license-file` to specify the name of that file instead of using the\n`license` key.\n\nGuidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby `OR` to have multiple licenses for your project.\n\nWith a unique name, the version, your description, and a license added, the\n*Cargo.toml* file for a project that is ready to publish might look like this:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]\n```\n\n[Cargo\u2019s documentation](https://doc.rust-lang.org/cargo/) describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily.\n\n### Publishing to Crates.io\n\nNow that you\u2019ve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you\u2019re ready to publish!\nPublishing a crate uploads a specific version to\n[crates.io](https://crates.io/)<!-- ignore --> for others to use.\n\nBe careful, because a publish is *permanent*. The version can never be\noverwritten, and the code cannot be deleted. One major goal of\n[crates.io](https://crates.io/)<!-- ignore --> is to act as a permanent archive\nof code so that builds of all projects that depend on crates from\n[crates.io](https://crates.io/)<!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish.\n\nRun the `cargo publish` command again. It should succeed now:\n\n<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->\n\n```console\n$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n```\n\nCongratulations! You\u2019ve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project.\n\n### Publishing a New Version of an Existing Crate\n\nWhen you\u2019ve made changes to your crate and are ready to release a new version,\nyou change the `version` value specified in your *Cargo.toml* file and\nrepublish. Use the [Semantic Versioning rules][semver] to decide what an\nappropriate next version number is based on the kinds of changes you\u2019ve made.\nThen run `cargo publish` to upload the new version.\n\n<!-- Old link, do not remove -->\n<a id=\"removing-versions-from-cratesio-with-cargo-yank\"></a>\n\n### Deprecating Versions from Crates.io with `cargo yank`\n\nAlthough you can\u2019t remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports *yanking* a crate version.\n\nYanking a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue. Essentially, a\nyank means that all projects with a *Cargo.lock* will not break, and any future\n*Cargo.lock* files generated will not use the yanked version.\n\nTo yank a version of a crate, in the directory of the crate that you\u2019ve\npreviously published, run `cargo yank` and specify which version you want to\nyank. For example, if we've published a crate named `guessing_game` version\n1.0.1 and we want to yank it, in the project directory for `guessing_game` we'd\nrun:\n\n<!-- manual-regeneration:\ncargo yank carol-test --version 2.1.0\ncargo yank carol-test --version 2.1.0 --undo\n-->\n\n```console\n$ cargo yank --vers 1.0.1\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n```\n\nBy adding `--undo` to the command, you can also undo a yank and allow projects\nto start depending on a version again:\n\n```console\n$ cargo yank --vers 1.0.1 --undo\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n```\n\nA yank *does not* delete any code. It cannot, for example, delete accidentally\nuploaded secrets. If that happens, you must reset those secrets immediately.\n\n[spdx]: http://spdx.org/licenses/\n[semver]: http://semver.org/\n",
          "qas": [
            {
              "question": "Can you open documentation automatically after creation?",
              "id": 129,
              "answers": [
                {
                  "text": "running `cargo doc --open` will build the HTML for your\ncurrent crate\u2019s documentation (as well as the documentation for all of your\ncrate\u2019s dependencies) and open the result in a web browser",
                  "answer_start": 2140
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to add comment to a whole module?",
              "id": 128,
              "answers": [
                {
                  "text": "The style of doc comment `//!` adds documentation to the item that contains the\ncomments rather than to the items following the comments.",
                  "answer_start": 4945
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What must be done before uploading a crate?",
              "id": 132,
              "answers": [
                {
                  "text": "Before you can publish any crates, you need to create an account on\n[crates.io](https://crates.io/)\u2039!-- ignore --> and get an API token.",
                  "answer_start": 12542
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to arrange module's public interface?",
              "id": 130,
              "answers": [
                {
                  "text": "you can re-export items to make a public structure that\u2019s different\nfrom your private structure by using `pub use`",
                  "answer_start": 7833
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are documentation comments?",
              "id": 18,
              "answers": [
                {
                  "text": "Documentation comments use three slashes, `///`, instead of two and support\nMarkdown notation for formatting the text.",
                  "answer_start": 1187
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What safety section should contain?",
              "id": 127,
              "answers": [
                {
                  "text": "* **Safety**: If the function is `unsafe` to call (we discuss unsafety in\n  Chapter 19), there should be a section explaining why the function is unsafe\n  and covering the invariants that the function expects callers to uphold.",
                  "answer_start": 3394
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What panics section should contain?",
              "id": 125,
              "answers": [
                {
                  "text": "* **Panics**: The scenarios in which the function being documented could\n  panic. Callers of the function who don\u2019t want their programs to panic should\n  make sure they don\u2019t call the function in these situations.",
                  "answer_start": 2908
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to generate documentation?",
              "id": 19,
              "answers": [
                {
                  "text": "`cargo doc`",
                  "answer_start": 10813
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What yanking means?",
              "id": 135,
              "answers": [
                {
                  "text": "Yanking a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue.",
                  "answer_start": 19455
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Installation\n\nThe first step is to install Rust. We\u2019ll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You\u2019ll need\nan internet connection for the download.\n\n> Note: If you prefer not to use `rustup` for some reason, please see the\n> [Other Rust Installation Methods page][otherinstall] for more options.\n\nThe following steps install the latest stable version of the Rust compiler.\nRust\u2019s stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book.\n\n> ### Command Line Notation\n>\n> In this chapter and throughout the book, we\u2019ll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don\u2019t need to type the `$` character; it\u2019s the command line prompt shown to\n> indicate the start of each command. Lines that don\u2019t start with `$` typically\n> show the output of the previous command. Additionally, PowerShell-specific\n> examples will use `>` rather than `$`.\n\n### Installing `rustup` on Linux or macOS\n\nIf you\u2019re using Linux or macOS, open a terminal and enter the following command:\n\n```console\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\nThe command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n```\n\nYou will also need a *linker*, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler.\n\nOn macOS, you can get a C compiler by running:\n\n```console\n$ xcode-select --install\n```\n\nLinux users should generally install GCC or Clang, according to their\ndistribution\u2019s documentation. For example, if you use Ubuntu, you can install\nthe `build-essential` package.\n\n### Installing `rustup` on Windows\n\nOn Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you\u2019ll\nreceive a message explaining that you\u2019ll also need the MSVC build tools for\nVisual Studio 2013 or later.\n\nTo acquire the build tools, you\u2019ll need to install [Visual Studio\n2022][visualstudio]. When asked which workloads to install, include:\n\n* \u201cDesktop Development with C++\u201d\n* The Windows 10 or 11 SDK\n* The English language pack component, along with any other language pack of\n  your choosing\n\nThe rest of this book uses commands that work in both *cmd.exe* and PowerShell.\nIf there are specific differences, we\u2019ll explain which to use.\n\n### Troubleshooting\n\nTo check whether you have Rust installed correctly, open a shell and enter this\nline:\n\n```console\n$ rustc --version\n```\n\nYou should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don\u2019t\nsee this information, check that Rust is in your `%PATH%` system variable as\nfollows.\n\nIn Windows CMD, use:\n\n```console\n> echo %PATH%\n```\n\nIn PowerShell, use:\n\n```powershell\n> echo $env:Path\n```\n\nIn Linux and macOS, use:\n\n```console\n$ echo $PATH\n```\n\nIf that\u2019s all correct and Rust still isn\u2019t working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community].\n\n### Updating and Uninstalling\n\nOnce Rust is installed via `rustup`, updating to a newly released version is\neasy. From your shell, run the following update script:\n\n```console\n$ rustup update\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your\nshell:\n\n```console\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run `rustup doc` to open the local documentation\nin your browser.\n\nAny time a type or function is provided by the standard library and you\u2019re not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!\n\n[otherinstall]: https://forge.rust-lang.org/infra/other-installation-methods.html\n[install]: https://www.rust-lang.org/tools/install\n[visualstudio]: https://visualstudio.microsoft.com/downloads/\n[community]: https://www.rust-lang.org/community\n",
          "qas": [
            {
              "question": "How can I install rustup on Windows?",
              "id": 231,
              "answers": [
                {
                  "text": "go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions",
                  "answer_start": 2429
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is linker?",
              "id": 229,
              "answers": [
                {
                  "text": "a program that Rust uses to join its\ncompiled outputs into one file",
                  "answer_start": 1802
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check Rust documentation locally?",
              "id": 237,
              "answers": [
                {
                  "text": "rustup doc",
                  "answer_start": 4464
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I install rustup on linux and mac?",
              "id": 227,
              "answers": [
                {
                  "text": "curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh",
                  "answer_start": 1416
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I update rust with rustup?",
              "id": 235,
              "answers": [
                {
                  "text": "rustup update",
                  "answer_start": 4184
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call a program that is joining compiled outputs into one file?",
              "id": 230,
              "answers": [
                {
                  "text": "linker",
                  "answer_start": 1784
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I uninstall rustup and rust?",
              "id": 236,
              "answers": [
                {
                  "text": "rustup self uninstall",
                  "answer_start": 4301
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what command can I download Rust?",
              "id": 226,
              "answers": [
                {
                  "text": "rustup",
                  "answer_start": 81
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check if I installed Rust correctly?",
              "id": 232,
              "answers": [
                {
                  "text": "rustc --version",
                  "answer_start": 3238
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What should I do if Rust isn't working?",
              "id": 234,
              "answers": [
                {
                  "text": "Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community]",
                  "answer_start": 3881
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will be displayed after installing rustup?",
              "id": 228,
              "answers": [
                {
                  "text": "Rust is installed now. Great!",
                  "answer_start": 1727
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Common Programming Concepts\n\nThis chapter covers concepts that appear in almost every programming language\nand how they work in Rust. Many programming languages have much in common at\ntheir core. None of the concepts presented in this chapter are unique to Rust,\nbut we\u2019ll discuss them in the context of Rust and explain the conventions\naround using these concepts.\n\nSpecifically, you\u2019ll learn about variables, basic types, functions, comments,\nand control flow. These foundations will be in every Rust program, and learning\nthem early will give you a strong core to start from.\n\n> #### Keywords\n>\n> The Rust language has a set of *keywords* that are reserved for use by the\n> language only, much as in other languages. Keep in mind that you cannot use\n> these words as names of variables or functions. Most of the keywords have\n> special meanings, and you\u2019ll be using them to do various tasks in your Rust\n> programs; a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future. You\n> can find a list of the keywords in [Appendix A][appendix_a]<!-- ignore -->.\n\n[appendix_a]: appendix-01-keywords.md\n",
          "qas": [
            {
              "question": "Do all keywords have functionality assigned?",
              "id": 277,
              "answers": [
                {
                  "text": "a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future",
                  "answer_start": 921
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we call strings that can be used only by language?",
              "id": 276,
              "answers": [
                {
                  "text": "keywords",
                  "answer_start": 634
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Enums and Pattern Matching\n\nIn this chapter, we\u2019ll look at *enumerations*, also referred to as *enums*.\nEnums allow you to define a type by enumerating its possible *variants*. First\nwe\u2019ll define and use an enum to show how an enum can encode meaning along with\ndata. Next, we\u2019ll explore a particularly useful enum, called `Option`, which\nexpresses that a value can be either something or nothing. Then we\u2019ll look at\nhow pattern matching in the `match` expression makes it easy to run different\ncode for different values of an enum. Finally, we\u2019ll cover how the `if let`\nconstruct is another convenient and concise idiom available to handle enums in\nyour code.\n",
          "qas": [
            {
              "question": "What is a different name to \"enumeration\"?",
              "id": 81,
              "answers": [
                {
                  "text": "In this chapter, we\u2019ll look at *enumerations*, also referred to as *enums*.",
                  "answer_start": 30
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does enum allow me?",
              "id": 82,
              "answers": [
                {
                  "text": "Enums allow you to define a type by enumerating its possible *variants*. ",
                  "answer_start": 106
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Foreword\n\nIt wasn\u2019t always so clear, but the Rust programming language is fundamentally\nabout *empowerment*: no matter what kind of code you are writing now, Rust\nempowers you to reach farther, to program with confidence in a wider variety of\ndomains than you did before.\n\nTake, for example, \u201csystems-level\u201d work that deals with low-level details of\nmemory management, data representation, and concurrency. Traditionally, this\nrealm of programming is seen as arcane, accessible only to a select few who\nhave devoted the necessary years learning to avoid its infamous pitfalls. And\neven those who practice it do so with caution, lest their code be open to\nexploits, crashes, or corruption.\n\nRust breaks down these barriers by eliminating the old pitfalls and providing a\nfriendly, polished set of tools to help you along the way. Programmers who need\nto \u201cdip down\u201d into lower-level control can do so with Rust, without taking on\nthe customary risk of crashes or security holes, and without having to learn\nthe fine points of a fickle toolchain. Better yet, the language is designed to\nguide you naturally towards reliable code that is efficient in terms of speed\nand memory usage.\n\nProgrammers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won\u2019t accidentally introduce crashes or vulnerabilities.\n\nBut Rust isn\u2019t limited to low-level systems programming. It\u2019s expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write \u2014 you\u2019ll find simple examples of both later in the\nbook. Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi.\n\nThis book fully embraces the potential of Rust to empower its users. It\u2019s a\nfriendly and approachable text intended to help you level up not just your\nknowledge of Rust, but also your reach and confidence as a programmer in\ngeneral. So dive in, get ready to learn\u2014and welcome to the Rust community!\n\n\u2014 Nicholas Matsakis and Aaron Turon\n",
          "qas": [
            {
              "question": "For whom might be Rust?",
              "id": 115,
              "answers": [
                {
                  "text": "Programmers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won\u2019t accidentally introduce crashes or vulnerabilities.",
                  "answer_start": 1183
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is Rust limited to low-level systems programming?",
              "id": 116,
              "answers": [
                {
                  "text": "But Rust isn\u2019t limited to low-level systems programming. It\u2019s expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write",
                  "answer_start": 1564
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where else I could use Rust?",
              "id": 117,
              "answers": [
                {
                  "text": "Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi.",
                  "answer_start": 1799
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Generic Data Types\n\nWe use generics to create definitions for items like function signatures or\nstructs, which we can then use with many different concrete data types. Let\u2019s\nfirst look at how to define functions, structs, enums, and methods using\ngenerics. Then we\u2019ll discuss how generics affect code performance.\n\n### In Function Definitions\n\nWhen defining a function that uses generics, we place the generics in the\nsignature of the function where we would usually specify the data types of the\nparameters and return value. Doing so makes our code more flexible and provides\nmore functionality to callers of our function while preventing code duplication.\n\nContinuing with our `largest` function, Listing 10-4 shows two functions that\nboth find the largest value in a slice. We'll then combine these into a single\nfunction that uses generics.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-4: Two functions that differ only in their\nnames and the types in their signatures</span>\n\nThe `largest_i32` function is the one we extracted in Listing 10-3 that finds\nthe largest `i32` in a slice. The `largest_char` function finds the largest\n`char` in a slice. The function bodies have the same code, so let\u2019s eliminate\nthe duplication by introducing a generic type parameter in a single function.\n\nTo parameterize the types in a new single function, we need to name the type\nparameter, just as we do for the value parameters to a function. You can use\nany identifier as a type parameter name. But we\u2019ll use `T` because, by\nconvention, type parameter names in Rust are short, often just a letter, and\nRust\u2019s type-naming convention is UpperCamelCase. Short for \u201ctype,\u201d `T` is the\ndefault choice of most Rust programmers.\n\nWhen we use a parameter in the body of the function, we have to declare the\nparameter name in the signature so the compiler knows what that name means.\nSimilarly, when we use a type parameter name in a function signature, we have\nto declare the type parameter name before we use it. To define the generic\n`largest` function, place type name declarations inside angle brackets, `<>`,\nbetween the name of the function and the parameter list, like this:\n\n```rust,ignore\nfn largest<T>(list: &[T]) -> &T {\n```\n\nWe read this definition as: the function `largest` is generic over some type\n`T`. This function has one parameter named `list`, which is a slice of values\nof type `T`. The `largest` function will return a reference to a value of the\nsame type `T`.\n\nListing 10-5 shows the combined `largest` function definition using the generic\ndata type in its signature. The listing also shows how we can call the function\nwith either a slice of `i32` values or `char` values. Note that this code won\u2019t\ncompile yet, but we\u2019ll fix it later in this chapter.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-5: The `largest` function using generic type\nparameters; this doesn\u2019t yet compile</span>\n\nIf we compile this code right now, we\u2019ll get this error:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/output.txt}}\n```\n\nThe help text mentions `std::cmp::PartialOrd`, which is a *trait*, and we\u2019re\ngoing to talk about traits in the next section. For now, know that this error\nstates that the body of `largest` won\u2019t work for all possible types that `T`\ncould be. Because we want to compare values of type `T` in the body, we can\nonly use types whose values can be ordered. To enable comparisons, the standard\nlibrary has the `std::cmp::PartialOrd` trait that you can implement on types\n(see Appendix C for more on this trait). By following the help text's\nsuggestion, we restrict the types valid for `T` to only those that implement\n`PartialOrd` and this example will compile, because the standard library\nimplements `PartialOrd` on both `i32` and `char`.\n\n### In Struct Definitions\n\nWe can also define structs to use a generic type parameter in one or more\nfields using the `<>` syntax. Listing 10-6 defines a `Point<T>` struct to hold\n`x` and `y` coordinate values of any type.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-6: A `Point<T>` struct that holds `x` and `y`\nvalues of type `T`</span>\n\nThe syntax for using generics in struct definitions is similar to that used in\nfunction definitions. First, we declare the name of the type parameter inside\nangle brackets just after the name of the struct. Then we use the generic type\nin the struct definition where we would otherwise specify concrete data types.\n\nNote that because we\u2019ve used only one generic type to define `Point<T>`, this\ndefinition says that the `Point<T>` struct is generic over some type `T`, and\nthe fields `x` and `y` are *both* that same type, whatever that type may be. If\nwe create an instance of a `Point<T>` that has values of different types, as in\nListing 10-7, our code won\u2019t compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-7: The fields `x` and `y` must be the same\ntype because both have the same generic data type `T`.</span>\n\nIn this example, when we assign the integer value 5 to `x`, we let the compiler\nknow that the generic type `T` will be an integer for this instance of\n`Point<T>`. Then when we specify 4.0 for `y`, which we\u2019ve defined to have the\nsame type as `x`, we\u2019ll get a type mismatch error like this:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/output.txt}}\n```\n\nTo define a `Point` struct where `x` and `y` are both generics but could have\ndifferent types, we can use multiple generic type parameters. For example, in\nListing 10-8, we change the definition of `Point` to be generic over types `T`\nand `U` where `x` is of type `T` and `y` is of type `U`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-8: A `Point<T, U>` generic over two types so\nthat `x` and `y` can be values of different types</span>\n\nNow all the instances of `Point` shown are allowed! You can use as many generic\ntype parameters in a definition as you want, but using more than a few makes\nyour code hard to read. If you're finding you need lots of generic types in\nyour code, it could indicate that your code needs restructuring into smaller\npieces.\n\n### In Enum Definitions\n\nAs we did with structs, we can define enums to hold generic data types in their\nvariants. Let\u2019s take another look at the `Option<T>` enum that the standard\nlibrary provides, which we used in Chapter 6:\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n```\n\nThis definition should now make more sense to you. As you can see, the\n`Option<T>` enum is generic over type `T` and has two variants: `Some`, which\nholds one value of type `T`, and a `None` variant that doesn\u2019t hold any value.\nBy using the `Option<T>` enum, we can express the abstract concept of an\noptional value, and because `Option<T>` is generic, we can use this abstraction\nno matter what the type of the optional value is.\n\nEnums can use multiple generic types as well. The definition of the `Result`\nenum that we used in Chapter 9 is one example:\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThe `Result` enum is generic over two types, `T` and `E`, and has two variants:\n`Ok`, which holds a value of type `T`, and `Err`, which holds a value of type\n`E`. This definition makes it convenient to use the `Result` enum anywhere we\nhave an operation that might succeed (return a value of some type `T`) or fail\n(return an error of some type `E`). In fact, this is what we used to open a\nfile in Listing 9-3, where `T` was filled in with the type `std::fs::File` when\nthe file was opened successfully and `E` was filled in with the type\n`std::io::Error` when there were problems opening the file.\n\nWhen you recognize situations in your code with multiple struct or enum\ndefinitions that differ only in the types of the values they hold, you can\navoid duplication by using generic types instead.\n\n### In Method Definitions\n\nWe can implement methods on structs and enums (as we did in Chapter 5) and use\ngeneric types in their definitions, too. Listing 10-9 shows the `Point<T>`\nstruct we defined in Listing 10-6 with a method named `x` implemented on it.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-9: Implementing a method named `x` on the\n`Point<T>` struct that will return a reference to the `x` field of type\n`T`</span>\n\nHere, we\u2019ve defined a method named `x` on `Point<T>` that returns a reference\nto the data in the field `x`.\n\nNote that we have to declare `T` just after `impl` so we can use `T` to specify\nthat we\u2019re implementing methods on the type `Point<T>`. By declaring `T` as a\ngeneric type after `impl`, Rust can identify that the type in the angle\nbrackets in `Point` is a generic type rather than a concrete type. We could\nhave chosen a different name for this generic parameter than the generic\nparameter declared in the struct definition, but using the same name is\nconventional. Methods written within an `impl` that declares the generic type\nwill be defined on any instance of the type, no matter what concrete type ends\nup substituting for the generic type.\n\nWe can also specify constraints on generic types when defining methods on the\ntype. We could, for example, implement methods only on `Point<f32>` instances\nrather than on `Point<T>` instances with any generic type. In Listing 10-10 we\nuse the concrete type `f32`, meaning we don\u2019t declare any types after `impl`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-10: An `impl` block that only applies to a\nstruct with a particular concrete type for the generic type parameter `T`</span>\n\nThis code means the type `Point<f32>` will have a `distance_from_origin`\nmethod; other instances of `Point<T>` where `T` is not of type `f32` will not\nhave this method defined. The method measures how far our point is from the\npoint at coordinates (0.0, 0.0) and uses mathematical operations that are\navailable only for floating point types.\n\nGeneric type parameters in a struct definition aren\u2019t always the same as those\nyou use in that same struct\u2019s method signatures. Listing 10-11 uses the generic\ntypes `X1` and `Y1` for the `Point` struct and `X2` `Y2` for the `mixup` method\nsignature to make the example clearer. The method creates a new `Point`\ninstance with the `x` value from the `self` `Point` (of type `X1`) and the `y`\nvalue from the passed-in `Point` (of type `Y2`).\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-11/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-11: A method that uses generic types different\nfrom its struct\u2019s definition</span>\n\nIn `main`, we\u2019ve defined a `Point` that has an `i32` for `x` (with value `5`)\nand an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct\nthat has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y`\n(with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`,\nwhich will have an `i32` for `x`, because `x` came from `p1`. The `p3` variable\nwill have a `char` for `y`, because `y` came from `p2`. The `println!` macro\ncall will print `p3.x = 5, p3.y = c`.\n\nThe purpose of this example is to demonstrate a situation in which some generic\nparameters are declared with `impl` and some are declared with the method\ndefinition. Here, the generic parameters `X1` and `Y1` are declared after\n`impl` because they go with the struct definition. The generic parameters `X2`\nand `Y2` are declared after `fn mixup`, because they\u2019re only relevant to the\nmethod.\n\n### Performance of Code Using Generics\n\nYou might be wondering whether there is a runtime cost when using generic type\nparameters. The good news is that using generic types won't make your program run\nany slower than it would with concrete types.\n\nRust accomplishes this by performing monomorphization of the code using\ngenerics at compile time. *Monomorphization* is the process of turning generic\ncode into specific code by filling in the concrete types that are used when\ncompiled. In this process, the compiler does the opposite of the steps we used\nto create the generic function in Listing 10-5: the compiler looks at all the\nplaces where generic code is called and generates code for the concrete types\nthe generic code is called with.\n\nLet\u2019s look at how this works by using the standard library\u2019s generic\n`Option<T>` enum:\n\n```rust\nlet integer = Some(5);\nlet float = Some(5.0);\n```\n\nWhen Rust compiles this code, it performs monomorphization. During that\nprocess, the compiler reads the values that have been used in `Option<T>`\ninstances and identifies two kinds of `Option<T>`: one is `i32` and the other\nis `f64`. As such, it expands the generic definition of `Option<T>` into two\ndefinitions specialized to `i32` and `f64`, thereby replacing the generic\ndefinition with the specific ones.\n\nThe monomorphized version of the code looks similar to the following (the\ncompiler uses different names than what we\u2019re using here for illustration):\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\nenum Option_i32 {\n    Some(i32),\n    None,\n}\n\nenum Option_f64 {\n    Some(f64),\n    None,\n}\n\nfn main() {\n    let integer = Option_i32::Some(5);\n    let float = Option_f64::Some(5.0);\n}\n```\n\nThe generic `Option<T>` is replaced with the specific definitions created by\nthe compiler. Because Rust compiles generic code into code that specifies the\ntype in each instance, we pay no runtime cost for using generics. When the code\nruns, it performs just as it would if we had duplicated each definition by\nhand. The process of monomorphization makes Rust\u2019s generics extremely efficient\nat runtime.\n",
          "qas": [
            {
              "question": "What can be an example of enum with generics?",
              "id": 2048,
              "answers": [
                {
                  "text": "enum Option\u2039T> {\n    Some(T),\n    None,\n}",
                  "answer_start": 7177
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I use struct in generic function?",
              "id": 2044,
              "answers": [
                {
                  "text": "First, we declare the name of the type parameter inside\nangle brackets just after the name of the struct. Then we use the generic type\nin the struct definition where we would otherwise specify concrete data types.",
                  "answer_start": 4733
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Provide an example of generic function.",
              "id": 2043,
              "answers": [
                {
                  "text": "fn largest\u2039T>(list: &[T]) -> &T",
                  "answer_start": 2343
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be used for creating function signatures?",
              "id": 2035,
              "answers": [
                {
                  "text": "Generic Data Types",
                  "answer_start": 3
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are generics used for?",
              "id": 2036,
              "answers": [
                {
                  "text": "to create definitions for items like function signatures or\nstructs, which we can then use with many different concrete data types",
                  "answer_start": 39
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is monomorphization?",
              "id": 2047,
              "answers": [
                {
                  "text": "the process of turning generic\ncode into specific code by filling in the concrete types that are used when\ncompiled",
                  "answer_start": 12955
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can using generics make code slower?",
              "id": 2046,
              "answers": [
                {
                  "text": "using generic types won't make your program run\nany slower than it would with concrete types",
                  "answer_start": 12740
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where should the generic be placed?",
              "id": 2038,
              "answers": [
                {
                  "text": "we place the generics in the\nsignature of the function where we would usually specify the data types of the\nparameters and return value",
                  "answer_start": 392
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'T' in generics stand for?",
              "id": 2041,
              "answers": [
                {
                  "text": "Short for \u201ctype,\u201d",
                  "answer_start": 1805
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which naming convention is used in Rust?",
              "id": 2040,
              "answers": [
                {
                  "text": "UpperCamelCase",
                  "answer_start": 1789
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How should generics be named in code?",
              "id": 2039,
              "answers": [
                {
                  "text": "by\nconvention, type parameter names in Rust are short, often just a letter",
                  "answer_start": 1676
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use generics in enum?",
              "id": 2045,
              "answers": [
                {
                  "text": "we can define enums to hold generic data types in their\nvariants",
                  "answer_start": 6990
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Customizing Builds with Release Profiles\n\nIn Rust, *release profiles* are predefined and customizable profiles with\ndifferent configurations that allow a programmer to have more control over\nvarious options for compiling code. Each profile is configured independently of\nthe others.\n\nCargo has two main profiles: the `dev` profile Cargo uses when you run `cargo\nbuild` and the `release` profile Cargo uses when you run `cargo build\n--release`. The `dev` profile is defined with good defaults for development,\nand the `release` profile has good defaults for release builds.\n\nThese profile names might be familiar from the output of your builds:\n\n<!-- manual-regeneration\nanywhere, run:\ncargo build\ncargo build --release\nand ensure output below is accurate\n-->\n\n```console\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n$ cargo build --release\n    Finished release [optimized] target(s) in 0.0s\n```\n\nThe `dev` and `release` are these different profiles used by the compiler.\n\nCargo has default settings for each of the profiles that apply when you haven't\nexplicitly added any `[profile.*]` sections in the project\u2019s *Cargo.toml* file.\nBy adding `[profile.*]` sections for any profile you want to customize, you\noverride any subset of the default settings. For example, here are the default\nvalues for the `opt-level` setting for the `dev` and `release` profiles:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n```\n\nThe `opt-level` setting controls the number of optimizations Rust will apply to\nyour code, with a range of 0 to 3. Applying more optimizations extends\ncompiling time, so if you\u2019re in development and compiling your code often,\nyou\u2019ll want fewer optimizations to compile faster even if the resulting code\nruns slower. The default `opt-level` for `dev` is therefore `0`. When you\u2019re\nready to release your code, it\u2019s best to spend more time compiling. You\u2019ll only\ncompile in release mode once, but you\u2019ll run the compiled program many times,\nso release mode trades longer compile time for code that runs faster. That is\nwhy the default `opt-level` for the `release` profile is `3`.\n\nYou can override a default setting by adding a different value for it in\n*Cargo.toml*. For example, if we want to use optimization level 1 in the\ndevelopment profile, we can add these two lines to our project\u2019s *Cargo.toml*\nfile:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n[profile.dev]\nopt-level = 1\n```\n\nThis code overrides the default setting of `0`. Now when we run `cargo build`,\nCargo will use the defaults for the `dev` profile plus our customization to\n`opt-level`. Because we set `opt-level` to `1`, Cargo will apply more\noptimizations than the default, but not as many as in a release build.\n\nFor the full list of configuration options and defaults for each profile, see\n[Cargo\u2019s documentation](https://doc.rust-lang.org/cargo/reference/profiles.html).\n",
          "qas": [
            {
              "question": "How to configure build?",
              "id": 15,
              "answers": [
                {
                  "text": "By adding `[profile.*]` sections for any profile you want to customize, you\noverride any subset of the default settings.",
                  "answer_start": 1165
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I build project?",
              "id": 13,
              "answers": [
                {
                  "text": "cargo build",
                  "answer_start": 776
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the main build profiles?",
              "id": 16,
              "answers": [
                {
                  "text": "Cargo has two main profiles: the `dev` profile Cargo uses when you run `cargo\nbuild` and the `release` profile Cargo uses when you run `cargo build\n--release`. The `dev` profile is defined with good defaults for development,\nand the `release` profile has good defaults for release builds.",
                  "answer_start": 287
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where can I find more information about configuration?",
              "id": 124,
              "answers": [
                {
                  "text": "https://doc.rust-lang.org/cargo/reference/profiles.html",
                  "answer_start": 2922
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to override a default setting?",
              "id": 123,
              "answers": [
                {
                  "text": "You can override a default setting by adding a different value for it in\n*Cargo.toml*.",
                  "answer_start": 2199
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is opt-level?",
              "id": 122,
              "answers": [
                {
                  "text": "The `opt-level` setting controls the number of optimizations Rust will apply to\nyour code, with a range of 0 to 3.",
                  "answer_start": 1520
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Characteristics of Object-Oriented Languages\n\nThere is no consensus in the programming community about what features a\nlanguage must have to be considered object-oriented. Rust is influenced by many\nprogramming paradigms, including OOP; for example, we explored the features\nthat came from functional programming in Chapter 13. Arguably, OOP languages\nshare certain common characteristics, namely objects, encapsulation, and\ninheritance. Let\u2019s look at what each of those characteristics means and whether\nRust supports it.\n\n### Objects Contain Data and Behavior\n\nThe book *Design Patterns: Elements of Reusable Object-Oriented Software* by\nErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley\nProfessional, 1994), colloquially referred to as *The Gang of Four* book, is a\ncatalog of object-oriented design patterns. It defines OOP this way:\n\n> Object-oriented programs are made up of objects. An *object* packages both\n> data and the procedures that operate on that data. The procedures are\n> typically called *methods* or *operations*.\n\nUsing this definition, Rust is object-oriented: structs and enums have data,\nand `impl` blocks provide methods on structs and enums. Even though structs and\nenums with methods aren\u2019t *called* objects, they provide the same\nfunctionality, according to the Gang of Four\u2019s definition of objects.\n\n### Encapsulation that Hides Implementation Details\n\nAnother aspect commonly associated with OOP is the idea of *encapsulation*,\nwhich means that the implementation details of an object aren\u2019t accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn\u2019t be able to reach into\nthe object\u2019s internals and change data or behavior directly. This enables the\nprogrammer to change and refactor an object\u2019s internals without needing to\nchange the code that uses the object.\n\nWe discussed how to control encapsulation in Chapter 7: we can use the `pub`\nkeyword to decide which modules, types, functions, and methods in our code\nshould be public, and by default everything else is private. For example, we\ncan define a struct `AveragedCollection` that has a field containing a vector\nof `i32` values. The struct can also have a field that contains the average of\nthe values in the vector, meaning the average doesn\u2019t have to be computed\non demand whenever anyone needs it. In other words, `AveragedCollection` will\ncache the calculated average for us. Listing 17-1 has the definition of the\n`AveragedCollection` struct:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 17-1: An `AveragedCollection` struct that\nmaintains a list of integers and the average of the items in the\ncollection</span>\n\nThe struct is marked `pub` so that other code can use it, but the fields within\nthe struct remain private. This is important in this case because we want to\nensure that whenever a value is added or removed from the list, the average is\nalso updated. We do this by implementing `add`, `remove`, and `average` methods\non the struct, as shown in Listing 17-2:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch17-oop/listing-17-02/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 17-2: Implementations of the public methods\n`add`, `remove`, and `average` on `AveragedCollection`</span>\n\nThe public methods `add`, `remove`, and `average` are the only ways to access\nor modify data in an instance of `AveragedCollection`. When an item is added\nto `list` using the `add` method or removed using the `remove` method, the\nimplementations of each call the private `update_average` method that handles\nupdating the `average` field as well.\n\nWe leave the `list` and `average` fields private so there is no way for\nexternal code to add or remove items to or from the `list` field directly;\notherwise, the `average` field might become out of sync when the `list`\nchanges. The `average` method returns the value in the `average` field,\nallowing external code to read the `average` but not modify it.\n\nBecause we\u2019ve encapsulated the implementation details of the struct\n`AveragedCollection`, we can easily change aspects, such as the data structure,\nin the future. For instance, we could use a `HashSet<i32>` instead of a\n`Vec<i32>` for the `list` field. As long as the signatures of the `add`,\n`remove`, and `average` public methods stay the same, code using\n`AveragedCollection` wouldn\u2019t need to change. If we made `list` public instead,\nthis wouldn\u2019t necessarily be the case: `HashSet<i32>` and `Vec<i32>` have\ndifferent methods for adding and removing items, so the external code would\nlikely have to change if it were modifying `list` directly.\n\nIf encapsulation is a required aspect for a language to be considered\nobject-oriented, then Rust meets that requirement. The option to use `pub` or\nnot for different parts of code enables encapsulation of implementation details.\n\n### Inheritance as a Type System and as Code Sharing\n\n*Inheritance* is a mechanism whereby an object can inherit elements from\nanother object\u2019s definition, thus gaining the parent object\u2019s data and behavior\nwithout you having to define them again.\n\nIf a language must have inheritance to be an object-oriented language, then\nRust is not one. There is no way to define a struct that inherits the parent\nstruct\u2019s fields and method implementations without using a macro.\n\nHowever, if you\u2019re used to having inheritance in your programming toolbox, you\ncan use other solutions in Rust, depending on your reason for reaching for\ninheritance in the first place.\n\nYou would choose inheritance for two main reasons. One is for reuse of code:\nyou can implement particular behavior for one type, and inheritance enables you\nto reuse that implementation for a different type. You can do this in a limited\nway in Rust code using default trait method implementations, which you saw in\nListing 10-14 when we added a default implementation of the `summarize` method\non the `Summary` trait. Any type implementing the `Summary` trait would have\nthe `summarize` method available on it without any further code. This is\nsimilar to a parent class having an implementation of a method and an\ninheriting child class also having the implementation of the method. We can\nalso override the default implementation of the `summarize` method when we\nimplement the `Summary` trait, which is similar to a child class overriding the\nimplementation of a method inherited from a parent class.\n\nThe other reason to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type. This is also\ncalled *polymorphism*, which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics.\n\n> ### Polymorphism\n>\n> To many people, polymorphism is synonymous with inheritance. But it\u2019s\n> actually a more general concept that refers to code that can work with data\n> of multiple types. For inheritance, those types are generally subclasses.\n>\n> Rust instead uses generics to abstract over different possible types and\n> trait bounds to impose constraints on what those types must provide. This is\n> sometimes called *bounded parametric polymorphism*.\n\nInheritance has recently fallen out of favor as a programming design solution\nin many programming languages because it\u2019s often at risk of sharing more code\nthan necessary. Subclasses shouldn\u2019t always share all characteristics of their\nparent class but will do so with inheritance. This can make a program\u2019s design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don\u2019t make sense or that cause errors because the methods don\u2019t\napply to the subclass. In addition, some languages will only allow single\ninheritance (meaning a subclass can only inherit from one class), further\nrestricting the flexibility of a program\u2019s design.\n\nFor these reasons, Rust takes the different approach of using trait objects\ninstead of inheritance. Let\u2019s look at how trait objects enable polymorphism in\nRust.\n",
          "qas": [
            {
              "question": "What is polymorphism?",
              "id": 10,
              "answers": [
                {
                  "text": "which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics.",
                  "answer_start": 6819
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is polymorphism?",
              "id": 11,
              "answers": [
                {
                  "text": "code that can work with data\n> of multiple types.",
                  "answer_start": 7080
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is bounded parametric polymorphism?",
              "id": 12,
              "answers": [
                {
                  "text": " Rust instead uses generics to abstract over different possible types and\n> trait bounds to impose constraints on what those types must provide.",
                  "answer_start": 7188
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is inheritance?",
              "id": 6,
              "answers": [
                {
                  "text": "*Inheritance* is a mechanism whereby an object can inherit elements from\nanother object\u2019s definition, thus gaining the parent object\u2019s data and behavior\nwithout you having to define them again.",
                  "answer_start": 5140
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is there an easy way to implement inheritance in rust?",
              "id": 7,
              "answers": [
                {
                  "text": "There is no way to define a struct that inherits the parent\nstruct\u2019s fields and method implementations without using a macro.",
                  "answer_start": 5428
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is inheritance important?",
              "id": 9,
              "answers": [
                {
                  "text": "to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type.",
                  "answer_start": 6663
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why subclasses shouldn\u2019t always share all characteristics of their parent class?",
              "id": 118,
              "answers": [
                {
                  "text": "Subclasses shouldn\u2019t always share all characteristics of their\nparent class but will do so with inheritance. This can make a program\u2019s design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don\u2019t make sense or that cause errors because the methods don\u2019t\napply to the subclass. In addition, some languages will only allow single\ninheritance (meaning a subclass can only inherit from one class), further\nrestricting the flexibility of a program\u2019s design.",
                  "answer_start": 7568
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What access modifier have by default all methods or fields?",
              "id": 5,
              "answers": [
                {
                  "text": "by default everything else is private",
                  "answer_start": 2088
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is inheritance important?",
              "id": 8,
              "answers": [
                {
                  "text": "for reuse of code:\nyou can implement particular behavior for one type, and inheritance enables you\nto reuse that implementation for a different type.",
                  "answer_start": 5800
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is Rust object-oriented language",
              "id": 2,
              "answers": [
                {
                  "text": "Rust is object-oriented: structs and enums have data,\nand `impl` blocks provide methods on structs and enums. Even though structs and\nenums with methods aren\u2019t *called* objects, they provide the same\nfunctionality",
                  "answer_start": 1088
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why has inheritance recently fallen out of favor as a programming design solution in many programming languages?",
              "id": 13,
              "answers": [
                {
                  "text": "because it\u2019s often at risk of sharing more code\nthan necessary. Subclasses shouldn\u2019t always share all characteristics of their\nparent class but will do so with inheritance. This can make a program\u2019s design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don\u2019t make sense or that cause errors because the methods don\u2019t\napply to the subclass. In addition, some languages will only allow single\ninheritance (meaning a subclass can only inherit from one class), further\nrestricting the flexibility of a program\u2019s design.",
                  "answer_start": 7504
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does encapsulation regarding OOP means?",
              "id": 3,
              "answers": [
                {
                  "text": " implementation details of an object aren\u2019t accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn\u2019t be able to reach into\nthe object\u2019s internals and change data or behavior directly.",
                  "answer_start": 1508
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Refutability: Whether a Pattern Might Fail to Match\n\nPatterns come in two forms: refutable and irrefutable. Patterns that will match\nfor any possible value passed are *irrefutable*. An example would be `x` in the\nstatement `let x = 5;` because `x` matches anything and therefore cannot fail\nto match. Patterns that can fail to match for some possible value are\n*refutable*. An example would be `Some(x)` in the expression `if let Some(x) =\na_value` because if the value in the `a_value` variable is `None` rather than\n`Some`, the `Some(x)` pattern will not match.\n\nFunction parameters, `let` statements, and `for` loops can only accept\nirrefutable patterns, because the program cannot do anything meaningful when\nvalues don\u2019t match. The `if let` and `while let` expressions accept\nrefutable and irrefutable patterns, but the compiler warns against\nirrefutable patterns because by definition they\u2019re intended to handle possible\nfailure: the functionality of a conditional is in its ability to perform\ndifferently depending on success or failure.\n\nIn general, you shouldn\u2019t have to worry about the distinction between refutable\nand irrefutable patterns; however, you do need to be familiar with the concept\nof refutability so you can respond when you see it in an error message. In\nthose cases, you\u2019ll need to change either the pattern or the construct you\u2019re\nusing the pattern with, depending on the intended behavior of the code.\n\nLet\u2019s look at an example of what happens when we try to use a refutable pattern\nwhere Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a\n`let` statement, but for the pattern we\u2019ve specified `Some(x)`, a refutable\npattern. As you might expect, this code will not compile.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-8: Attempting to use a refutable pattern with\n`let`</span>\n\nIf `some_option_value` was a `None` value, it would fail to match the pattern\n`Some(x)`, meaning the pattern is refutable. However, the `let` statement can\nonly accept an irrefutable pattern because there is nothing valid the code can\ndo with a `None` value. At compile time, Rust will complain that we\u2019ve tried to\nuse a refutable pattern where an irrefutable pattern is required:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-08/output.txt}}\n```\n\nBecause we didn\u2019t cover (and couldn\u2019t cover!) every valid value with the\npattern `Some(x)`, Rust rightfully produces a compiler error.\n\nIf we have a refutable pattern where an irrefutable pattern is needed, we can\nfix it by changing the code that uses the pattern: instead of using `let`, we\ncan use `if let`. Then if the pattern doesn\u2019t match, the code will just skip\nthe code in the curly brackets, giving it a way to continue validly. Listing\n18-9 shows how to fix the code in Listing 18-8.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-9: Using `if let` and a block with refutable\npatterns instead of `let`</span>\n\nWe\u2019ve given the code an out! This code is perfectly valid, although it means we\ncannot use an irrefutable pattern without receiving an error. If we give `if\nlet` a pattern that will always match, such as `x`, as shown in Listing 18-10,\nthe compiler will give a warning.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-10: Attempting to use an irrefutable pattern\nwith `if let`</span>\n\nRust complains that it doesn\u2019t make sense to use `if let` with an irrefutable\npattern:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-10/output.txt}}\n```\n\nFor this reason, match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern. Rust\nallows us to use an irrefutable pattern in a `match` with only one arm, but\nthis syntax isn\u2019t particularly useful and could be replaced with a simpler\n`let` statement.\n\nNow that you know where to use patterns and the difference between refutable\nand irrefutable patterns, let\u2019s cover all the syntax we can use to create\npatterns.\n",
          "qas": [
            {
              "question": "Does Rust allow to use an irrefutable pattern in a `match` with only one arm?",
              "id": 41,
              "answers": [
                {
                  "text": "Rust\nallows us to use an irrefutable pattern in a `match` with only one arm, but\nthis syntax isn\u2019t particularly useful and could be replaced with a simpler\n`let` statement.",
                  "answer_start": 3943
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are irrefutable patterns?",
              "id": 36,
              "answers": [
                {
                  "text": "Patterns that will match\nfor any possible value passed are *irrefutable*. An example would be `x` in the\nstatement `let x = 5;` because `x` matches anything and therefore cannot fail\nto match.",
                  "answer_start": 111
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does each arm in match arms must use refutable patterns?",
              "id": 40,
              "answers": [
                {
                  "text": "match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern.",
                  "answer_start": 3809
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which patterns can accept the `if let` and `while let` expressions?",
              "id": 39,
              "answers": [
                {
                  "text": "The `if let` and `while let` expressions accept\nrefutable and irrefutable patterns, but the compiler warns against\nirrefutable patterns because by definition they\u2019re intended to handle possible\nfailure: the functionality of a conditional is in its ability to perform\ndifferently depending on success or failure.",
                  "answer_start": 736
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are refutable patterns?",
              "id": 37,
              "answers": [
                {
                  "text": "Patterns that can fail to match for some possible value are\n*refutable*. An example would be `Some(x)` in the expression `if let Some(x) =\na_value` because if the value in the `a_value` variable is `None` rather than\n`Some`, the `Some(x)` pattern will not match.",
                  "answer_start": 304
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Building a Single-Threaded Web Server\n\nWe\u2019ll start by getting a single-threaded web server working. Before we begin,\nlet\u2019s look at a quick overview of the protocols involved in building web\nservers. The details of these protocols are beyond the scope of this book, but\na brief overview will give you the information you need.\n\nThe two main protocols involved in web servers are *Hypertext Transfer\nProtocol* *(HTTP)* and *Transmission Control Protocol* *(TCP)*. Both protocols\nare *request-response* protocols, meaning a *client* initiates requests and a\n*server* listens to the requests and provides a response to the client. The\ncontents of those requests and responses are defined by the protocols.\n\nTCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn\u2019t specify what that information is.\nHTTP builds on top of TCP by defining the contents of the requests and\nresponses. It\u2019s technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. We\u2019ll work with the\nraw bytes of TCP and HTTP requests and responses.\n\n### Listening to the TCP Connection\n\nOur web server needs to listen to a TCP connection, so that\u2019s the first part\nwe\u2019ll work on. The standard library offers a `std::net` module that lets us do\nthis. Let\u2019s make a new project in the usual fashion:\n\n```console\n$ cargo new hello\n     Created binary (application) `hello` project\n$ cd hello\n```\n\nNow enter the code in Listing 20-1 in *src/main.rs* to start. This code will\nlisten at the local address `127.0.0.1:7878` for incoming TCP streams. When it\ngets an incoming stream, it will print `Connection established!`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 20-1: Listening for incoming streams and printing\na message when we receive a stream</span>\n\nUsing `TcpListener`, we can listen for TCP connections at the address\n`127.0.0.1:7878`. In the address, the section before the colon is an IP address\nrepresenting your computer (this is the same on every computer and doesn\u2019t\nrepresent the authors\u2019 computer specifically), and `7878` is the port. We\u2019ve\nchosen this port for two reasons: HTTP isn\u2019t normally accepted on this port so\nour server is unlikely to conflict with any other web server you might have\nrunning on your machine, and 7878 is *rust* typed on a telephone.\n\nThe `bind` function in this scenario works like the `new` function in that it\nwill return a new `TcpListener` instance. The function is called `bind`\nbecause, in networking, connecting to a port to listen to is known as \u201cbinding\nto a port.\u201d\n\nThe `bind` function returns a `Result<T, E>`, which indicates that it\u2019s\npossible for binding to fail. For example, connecting to port 80 requires\nadministrator privileges (nonadministrators can listen only on ports higher\nthan 1023), so if we tried to connect to port 80 without being an\nadministrator, binding wouldn\u2019t work. Binding also wouldn\u2019t work, for example,\nif we ran two instances of our program and so had two programs listening to the\nsame port. Because we\u2019re writing a basic server just for learning purposes, we\nwon\u2019t worry about handling these kinds of errors; instead, we use `unwrap` to\nstop the program if errors happen.\n\nThe `incoming` method on `TcpListener` returns an iterator that gives us a\nsequence of streams (more specifically, streams of type `TcpStream`). A single\n*stream* represents an open connection between the client and the server. A\n*connection* is the name for the full request and response process in which a\nclient connects to the server, the server generates a response, and the server\ncloses the connection. As such, we will read from the `TcpStream` to see what\nthe client sent and then write our response to the stream to send data back to\nthe client. Overall, this `for` loop will process each connection in turn and\nproduce a series of streams for us to handle.\n\nFor now, our handling of the stream consists of calling `unwrap` to terminate\nour program if the stream has any errors; if there aren\u2019t any errors, the\nprogram prints a message. We\u2019ll add more functionality for the success case in\nthe next listing. The reason we might receive errors from the `incoming` method\nwhen a client connects to the server is that we\u2019re not actually iterating over\nconnections. Instead, we\u2019re iterating over *connection attempts*. The\nconnection might not be successful for a number of reasons, many of them\noperating system specific. For example, many operating systems have a limit to\nthe number of simultaneous open connections they can support; new connection\nattempts beyond that number will produce an error until some of the open\nconnections are closed.\n\nLet\u2019s try running this code! Invoke `cargo run` in the terminal and then load\n*127.0.0.1:7878* in a web browser. The browser should show an error message\nlike \u201cConnection reset,\u201d because the server isn\u2019t currently sending back any\ndata. But when you look at your terminal, you should see several messages that\nwere printed when the browser connected to the server!\n\n```text\n     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n```\n\nSometimes, you\u2019ll see multiple messages printed for one browser request; the\nreason might be that the browser is making a request for the page as well as a\nrequest for other resources, like the *favicon.ico* icon that appears in the\nbrowser tab.\n\nIt could also be that the browser is trying to connect to the server multiple\ntimes because the server isn\u2019t responding with any data. When `stream` goes out\nof scope and is dropped at the end of the loop, the connection is closed as\npart of the `drop` implementation. Browsers sometimes deal with closed\nconnections by retrying, because the problem might be temporary. The important\nfactor is that we\u2019ve successfully gotten a handle to a TCP connection!\n\nRemember to stop the program by pressing <span class=\"keystroke\">ctrl-c</span>\nwhen you\u2019re done running a particular version of the code. Then restart the\nprogram by invoking the `cargo run` command after you\u2019ve made each set of code\nchanges to make sure you\u2019re running the newest code.\n\n### Reading the Request\n\nLet\u2019s implement the functionality to read the request from the browser! To\nseparate the concerns of first getting a connection and then taking some action\nwith the connection, we\u2019ll start a new function for processing connections. In\nthis new `handle_connection` function, we\u2019ll read data from the TCP stream and\nprint it so we can see the data being sent from the browser. Change the code to\nlook like Listing 20-2.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-02/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 20-2: Reading from the `TcpStream` and printing\nthe data</span>\n\nWe bring `std::io::prelude` and `std::io::BufReader` into scope to get access\nto traits and types that let us read from and write to the stream. In the `for`\nloop in the `main` function, instead of printing a message that says we made a\nconnection, we now call the new `handle_connection` function and pass the\n`stream` to it.\n\nIn the `handle_connection` function, we create a new `BufReader` instance that\nwraps a mutable reference to the `stream`. `BufReader` adds buffering by\nmanaging calls to the `std::io::Read` trait methods for us.\n\nWe create a variable named `http_request` to collect the lines of the request\nthe browser sends to our server. We indicate that we want to collect these\nlines in a vector by adding the `Vec<_>` type annotation.\n\n`BufReader` implements the `std::io::BufRead` trait, which provides the `lines`\nmethod. The `lines` method returns an iterator of `Result<String,\nstd::io::Error>` by splitting the stream of data whenever it sees a newline\nbyte. To get each `String`, we map and `unwrap` each `Result`. The `Result`\nmight be an error if the data isn\u2019t valid UTF-8 or if there was a problem\nreading from the stream. Again, a production program should handle these errors\nmore gracefully, but we\u2019re choosing to stop the program in the error case for\nsimplicity.\n\nThe browser signals the end of an HTTP request by sending two newline\ncharacters in a row, so to get one request from the stream, we take lines until\nwe get a line that is the empty string. Once we\u2019ve collected the lines into the\nvector, we\u2019re printing them out using pretty debug formatting so we can take a\nlook at the instructions the web browser is sending to our server.\n\nLet\u2019s try this code! Start the program and make a request in a web browser\nagain. Note that we\u2019ll still get an error page in the browser, but our\nprogram\u2019s output in the terminal will now look similar to this:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: [\n    \"GET / HTTP/1.1\",\n    \"Host: 127.0.0.1:7878\",\n    \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\",\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Language: en-US,en;q=0.5\",\n    \"Accept-Encoding: gzip, deflate, br\",\n    \"DNT: 1\",\n    \"Connection: keep-alive\",\n    \"Upgrade-Insecure-Requests: 1\",\n    \"Sec-Fetch-Dest: document\",\n    \"Sec-Fetch-Mode: navigate\",\n    \"Sec-Fetch-Site: none\",\n    \"Sec-Fetch-User: ?1\",\n    \"Cache-Control: max-age=0\",\n]\n```\n\nDepending on your browser, you might get slightly different output. Now that\nwe\u2019re printing the request data, we can see why we get multiple connections\nfrom one browser request by looking at the path after `GET` in the first line\nof the request. If the repeated connections are all requesting */*, we know the\nbrowser is trying to fetch */* repeatedly because it\u2019s not getting a response\nfrom our program.\n\nLet\u2019s break down this request data to understand what the browser is asking of\nour program.\n\n### A Closer Look at an HTTP Request\n\nHTTP is a text-based protocol, and a request takes this format:\n\n```text\nMethod Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is the *request line* that holds information about what the\nclient is requesting. The first part of the request line indicates the *method*\nbeing used, such as `GET` or `POST`, which describes how the client is making\nthis request. Our client used a `GET` request, which means it is asking for\ninformation.\n\nThe next part of the request line is */*, which indicates the *Uniform Resource\nIdentifier* *(URI)* the client is requesting: a URI is almost, but not quite,\nthe same as a *Uniform Resource Locator* *(URL)*. The difference between URIs\nand URLs isn\u2019t important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute URL for URI here.\n\nThe last part is the HTTP version the client uses, and then the request line\nends in a *CRLF sequence*. (CRLF stands for *carriage return* and *line feed*,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The\nCRLF sequence separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than `\\r\\n`.\n\nLooking at the request line data we received from running our program so far,\nwe see that `GET` is the method, */* is the request URI, and `HTTP/1.1` is the\nversion.\n\nAfter the request line, the remaining lines starting from `Host:` onward are\nheaders. `GET` requests have no body.\n\nTry making a request from a different browser or asking for a different\naddress, such as *127.0.0.1:7878/test*, to see how the request data changes.\n\nNow that we know what the browser is asking for, let\u2019s send back some data!\n\n### Writing a Response\n\nWe\u2019re going to implement sending data in response to a client request.\nResponses have the following format:\n\n```text\nHTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n```\n\nThe first line is a *status line* that contains the HTTP version used in the\nresponse, a numeric status code that summarizes the result of the request, and\na reason phrase that provides a text description of the status code. After the\nCRLF sequence are any headers, another CRLF sequence, and the body of the\nresponse.\n\nHere is an example response that uses HTTP version 1.1, has a status code of\n200, an OK reason phrase, no headers, and no body:\n\n```text\nHTTP/1.1 200 OK\\r\\n\\r\\n\n```\n\nThe status code 200 is the standard success response. The text is a tiny\nsuccessful HTTP response. Let\u2019s write this to the stream as our response to a\nsuccessful request! From the `handle_connection` function, remove the\n`println!` that was printing the request data and replace it with the code in\nListing 20-3.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-3: Writing a tiny successful HTTP response to\nthe stream</span>\n\nThe first new line defines the `response` variable that holds the success\nmessage\u2019s data. Then we call `as_bytes` on our `response` to convert the string\ndata to bytes. The `write_all` method on `stream` takes a `&[u8]` and sends\nthose bytes directly down the connection. Because the `write_all` operation\ncould fail, we use `unwrap` on any error result as before. Again, in a real\napplication you would add error handling here.\n\nWith these changes, let\u2019s run our code and make a request. We\u2019re no longer\nprinting any data to the terminal, so we won\u2019t see any output other than the\noutput from Cargo. When you load *127.0.0.1:7878* in a web browser, you should\nget a blank page instead of an error. You\u2019ve just hand-coded receiving an HTTP\nrequest and sending a response!\n\n### Returning Real HTML\n\nLet\u2019s implement the functionality for returning more than a blank page. Create\nthe new file *hello.html* in the root of your project directory, not in the\n*src* directory. You can input any HTML you want; Listing 20-4 shows one\npossibility.\n\n<span class=\"filename\">Filename: hello.html</span>\n\n```html\n{{#include ../listings/ch20-web-server/listing-20-05/hello.html}}\n```\n\n<span class=\"caption\">Listing 20-4: A sample HTML file to return in a\nresponse</span>\n\nThis is a minimal HTML5 document with a heading and some text. To return this\nfrom the server when a request is received, we\u2019ll modify `handle_connection` as\nshown in Listing 20-5 to read the HTML file, add it to the response as a body,\nand send it.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-5: Sending the contents of *hello.html* as the\nbody of the response</span>\n\nWe\u2019ve added `fs` to the `use` statement to bring the standard library\u2019s\nfilesystem module into scope. The code for reading the contents of a file to a\nstring should look familiar; we used it in Chapter 12 when we read the contents\nof a file for our I/O project in Listing 12-4.\n\nNext, we use `format!` to add the file\u2019s contents as the body of the success\nresponse. To ensure a valid HTTP response, we add the `Content-Length` header\nwhich is set to the size of our response body, in this case the size of\n`hello.html`.\n\nRun this code with `cargo run` and load *127.0.0.1:7878* in your browser; you\nshould see your HTML rendered!\n\nCurrently, we\u2019re ignoring the request data in `http_request` and just sending\nback the contents of the HTML file unconditionally. That means if you try\nrequesting *127.0.0.1:7878/something-else* in your browser, you\u2019ll still get\nback this same HTML response. At the moment, our server is very limited and\ndoes not do what most web servers do. We want to customize our responses\ndepending on the request and only send back the HTML file for a well-formed\nrequest to */*.\n\n### Validating the Request and Selectively Responding\n\nRight now, our web server will return the HTML in the file no matter what the\nclient requested. Let\u2019s add functionality to check that the browser is\nrequesting */* before returning the HTML file and return an error if the\nbrowser requests anything else. For this we need to modify `handle_connection`,\nas shown in Listing 20-6. This new code checks the content of the request\nreceived against what we know a request for */* looks like and adds `if` and\n`else` blocks to treat requests differently.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-6: Handling requests to */* differently from\nother requests</span>\n\nWe\u2019re only going to be looking at the first line of the HTTP request, so rather\nthan reading the entire request into a vector, we\u2019re calling `next` to get the\nfirst item from the iterator. The first `unwrap` takes care of the `Option` and\nstops the program if the iterator has no items. The second `unwrap` handles the\n`Result` and has the same effect as the `unwrap` that was in the `map` added in\nListing 20-2.\n\nNext, we check the `request_line` to see if it equals the request line of a GET\nrequest to the */* path. If it does, the `if` block returns the contents of our\nHTML file.\n\nIf the `request_line` does *not* equal the GET request to the */* path, it\nmeans we\u2019ve received some other request. We\u2019ll add code to the `else` block in\na moment to respond to all other requests.\n\nRun this code now and request *127.0.0.1:7878*; you should get the HTML in\n*hello.html*. If you make any other request, such as\n*127.0.0.1:7878/something-else*, you\u2019ll get a connection error like those you\nsaw when running the code in Listing 20-1 and Listing 20-2.\n\nNow let\u2019s add the code in Listing 20-7 to the `else` block to return a response\nwith the status code 404, which signals that the content for the request was\nnot found. We\u2019ll also return some HTML for a page to render in the browser\nindicating the response to the end user.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-7: Responding with status code 404 and an\nerror page if anything other than */* was requested</span>\n\nHere, our response has a status line with status code 404 and the reason phrase\n`NOT FOUND`. The body of the response will be the HTML in the file *404.html*.\nYou\u2019ll need to create a *404.html* file next to *hello.html* for the error\npage; again feel free to use any HTML you want or use the example HTML in\nListing 20-8.\n\n<span class=\"filename\">Filename: 404.html</span>\n\n```html\n{{#include ../listings/ch20-web-server/listing-20-07/404.html}}\n```\n\n<span class=\"caption\">Listing 20-8: Sample content for the page to send back\nwith any 404 response</span>\n\nWith these changes, run your server again. Requesting *127.0.0.1:7878* should\nreturn the contents of *hello.html*, and any other request, like\n*127.0.0.1:7878/foo*, should return the error HTML from *404.html*.\n\n### A Touch of Refactoring\n\nAt the moment the `if` and `else` blocks have a lot of repetition: they\u2019re both\nreading files and writing the contents of the files to the stream. The only\ndifferences are the status line and the filename. Let\u2019s make the code more\nconcise by pulling out those differences into separate `if` and `else` lines\nthat will assign the values of the status line and the filename to variables;\nwe can then use those variables unconditionally in the code to read the file\nand write the response. Listing 20-9 shows the resulting code after replacing\nthe large `if` and `else` blocks.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-9: Refactoring the `if` and `else` blocks to\ncontain only the code that differs between the two cases</span>\n\nNow the `if` and `else` blocks only return the appropriate values for the\nstatus line and filename in a tuple; we then use destructuring to assign these\ntwo values to `status_line` and `filename` using a pattern in the `let`\nstatement, as discussed in Chapter 18.\n\nThe previously duplicated code is now outside the `if` and `else` blocks and\nuses the `status_line` and `filename` variables. This makes it easier to see\nthe difference between the two cases, and it means we have only one place to\nupdate the code if we want to change how the file reading and response writing\nwork. The behavior of the code in Listing 20-9 will be the same as that in\nListing 20-8.\n\nAwesome! We now have a simple web server in approximately 40 lines of Rust code\nthat responds to one request with a page of content and responds to all other\nrequests with a 404 response.\n\nCurrently, our server runs in a single thread, meaning it can only serve one\nrequest at a time. Let\u2019s examine how that can be a problem by simulating some\nslow requests. Then we\u2019ll fix it so our server can handle multiple requests at\nonce.\n",
          "qas": [
            {
              "question": "How to start Rust application from terminal?",
              "id": 105,
              "answers": [
                {
                  "text": "Invoke `cargo run` in the terminal",
                  "answer_start": 4867
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does function 'bind' works?",
              "id": 104,
              "answers": [
                {
                  "text": "The `bind` function in this scenario works like the `new` function in that it\nwill return a new `TcpListener` instance. The function is called `bind`\nbecause, in networking, connecting to a port to listen to is known as \u201cbinding\nto a port.\u201d\n\nThe `bind` function returns a `Result\u2039T, E>`, which indicates that it\u2019s\npossible for binding to fail.",
                  "answer_start": 2500
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to stop running Rust application from terminal?",
              "id": 106,
              "answers": [
                {
                  "text": "stop the program by pressing \u2039span class=\"keystroke\">ctrl-c\u2039/span>",
                  "answer_start": 6038
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does status code 404 means?",
              "id": 111,
              "answers": [
                {
                  "text": "a response\nwith the status code 404, which signals that the content for the request was\nnot found.",
                  "answer_start": 18069
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What format must have an http request?",
              "id": 107,
              "answers": [
                {
                  "text": "HTTP is a text-based protocol, and a request takes this format:\n\n```text\nMethod Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n```",
                  "answer_start": 10175
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What format must have http responses?",
              "id": 109,
              "answers": [
                {
                  "text": "Responses have the following format:\n\n```text\nHTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n```",
                  "answer_start": 12096
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the two main protocols involved in web servers?",
              "id": 101,
              "answers": [
                {
                  "text": "The two main protocols involved in web servers are *Hypertext Transfer\nProtocol* *(HTTP)* and *Transmission Control Protocol* *(TCP)*. Both protocols\nare *request-response* protocols, meaning a *client* initiates requests and a\n*server* listens to the requests and provides a response to the client. The\ncontents of those requests and responses are defined by the protocols.",
                  "answer_start": 330
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is HTTP protocol?",
              "id": 103,
              "answers": [
                {
                  "text": "HTTP builds on top of TCP by defining the contents of the requests and\nresponses. It\u2019s technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. ",
                  "answer_start": 862
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to interprete each line of http request?",
              "id": 108,
              "answers": [
                {
                  "text": "The first line is the *request line* that holds information about what the\nclient is requesting. The first part of the request line indicates the *method*\nbeing used, such as `GET` or `POST`, which describes how the client is making\nthis request. Our client used a `GET` request, which means it is asking for\ninformation.\n\nThe next part of the request line is */*, which indicates the *Uniform Resource\nIdentifier* *(URI)* the client is requesting: a URI is almost, but not quite,\nthe same as a *Uniform Resource Locator* *(URL)*. The difference between URIs\nand URLs isn\u2019t important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute URL for URI here.\n\nThe last part is the HTTP version the client uses, and then the request line\nends in a *CRLF sequence*. (CRLF stands for *carriage return* and *line feed*,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The\nCRLF sequence separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than `\\r\\n`.",
                  "answer_start": 10316
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Defining an Enum\n\nWhere structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum.\n\nLet\u2019s look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. Because these are the only possibilities for an\nIP address that our program will come across, we can *enumerate* all possible\nvariants, which is where enumeration gets its name.\n\nAny IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate because an enum value can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address.\n\nWe can express this concept in code by defining an `IpAddrKind` enumeration and\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\nvariants of the enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:def}}\n```\n\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\n\n### Enum Values\n\nWe can create instances of each of the two variants of `IpAddrKind` like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:instance}}\n```\n\nNote that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. This is useful because now both values\n`IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`. We\ncan then, for instance, define a function that takes any `IpAddrKind`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn}}\n```\n\nAnd we can call this function with either variant:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn_call}}\n```\n\nUsing enums has even more advantages. Thinking more about our IP address type,\nat the moment we don\u2019t have a way to store the actual IP address *data*; we\nonly know what *kind* it is. Given that you just learned about structs in\nChapter 5, you might be tempted to tackle this problem with structs as shown in\nListing 6-1.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-01/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-1: Storing the data and `IpAddrKind` variant of\nan IP address using a `struct`</span>\n\nHere, we\u2019ve defined a struct `IpAddr` that has two fields: a `kind` field that\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\nof type `String`. We have two instances of this struct. The first is `home`,\nand it has the value `IpAddrKind::V4` as its `kind` with associated address\ndata of `127.0.0.1`. The second instance is `loopback`. It has the other\nvariant of `IpAddrKind` as its `kind` value, `V6`, and has address `::1`\nassociated with it. We\u2019ve used a struct to bundle the `kind` and `address`\nvalues together, so now the variant is associated with the value.\n\nHowever, representing the same concept using just an enum is more concise:\nrather than an enum inside a struct, we can put data directly into each enum\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\nvariants will have associated `String` values:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-02-enum-with-data/src/main.rs:here}}\n```\n\nWe attach data to each variant of the enum directly, so there is no need for an\nextra struct. Here, it\u2019s also easier to see another detail of how enums work:\nthe name of each enum variant that we define also becomes a function that\nconstructs an instance of the enum. That is, `IpAddr::V4()` is a function call\nthat takes a `String` argument and returns an instance of the `IpAddr` type. We\nautomatically get this constructor function defined as a result of defining the\nenum.\n\nThere\u2019s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\nstill express `V6` addresses as one `String` value, we wouldn\u2019t be able to with\na struct. Enums handle this case with ease:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-03-variants-with-different-data/src/main.rs:here}}\n```\n\nWe\u2019ve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that [the standard\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let\u2019s look at how\nthe standard library defines `IpAddr`: it has the exact enum and variants that\nwe\u2019ve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:\n\n```rust\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n```\n\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.\n\nNote that even though the standard library contains a definition for `IpAddr`,\nwe can still create and use our own definition without conflict because we\nhaven\u2019t brought the standard library\u2019s definition into our scope. We\u2019ll talk\nmore about bringing types into scope in Chapter 7.\n\nLet\u2019s look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-2: A `Message` enum whose variants each store\ndifferent amounts and types of values</span>\n\nThis enum has four variants with different types:\n\n* `Quit` has no data associated with it at all.\n* `Move` has named fields, like a struct does.\n* `Write` includes a single `String`.\n* `ChangeColor` includes three `i32` values.\n\nDefining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn\u2019t use the\n`struct` keyword and all the variants are grouped together under the `Message`\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-04-structs-similar-to-message-enum/src/main.rs:here}}\n```\n\nBut if we used the different structs, each of which has its own type, we\ncouldn\u2019t as easily define a function to take any of these kinds of messages as\nwe could with the `Message` enum defined in Listing 6-2, which is a single type.\n\nThere is one more similarity between enums and structs: just as we\u2019re able to\ndefine methods on structs using `impl`, we\u2019re also able to define methods on\nenums. Here\u2019s a method named `call` that we could define on our `Message` enum:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-05-methods-on-enums/src/main.rs:here}}\n```\n\nThe body of the method would use `self` to get the value that we called the\nmethod on. In this example, we\u2019ve created a variable `m` that has the value\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\nbody of the `call` method when `m.call()` runs.\n\nLet\u2019s look at another enum in the standard library that is very common and\nuseful: `Option`.\n\n### The `Option` Enum and Its Advantages Over Null Values\n\nThis section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing.\n\nFor example, if you request the first item in a non-empty list, you would get\na value. If you request the first item in an empty list, you would get nothing.\nExpressing this concept in terms of the type system means the compiler can\ncheck whether you\u2019ve handled all the cases you should be handling; this\nfunctionality can prevent bugs that are extremely common in other programming\nlanguages.\n\nProgramming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn\u2019t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.\n\nIn his 2009 presentation \u201cNull References: The Billion Dollar Mistake,\u201d Tony\nHoare, the inventor of null, has this to say:\n\n> I call it my billion-dollar mistake. At that time, I was designing the first\n> comprehensive type system for references in an object-oriented language. My\n> goal was to ensure that all use of references should be absolutely safe, with\n> checking performed automatically by the compiler. But I couldn\u2019t resist the\n> temptation to put in a null reference, simply because it was so easy to\n> implement. This has led to innumerable errors, vulnerabilities, and system\n> crashes, which have probably caused a billion dollars of pain and damage in\n> the last forty years.\n\nThe problem with null values is that if you try to use a null value as a\nnot-null value, you\u2019ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it\u2019s extremely easy to make this kind of error.\n\nHowever, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason.\n\nThe problem isn\u2019t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\nas follows:\n\n```rust\nenum Option<T> {\n    None,\n    Some(T),\n}\n```\n\nThe `Option<T>` enum is so useful that it\u2019s even included in the prelude; you\ndon\u2019t need to bring it into scope explicitly. Its variants are also included in\nthe prelude: you can use `Some` and `None` directly without the `Option::`\nprefix. The `Option<T>` enum is still just a regular enum, and `Some(T)` and\n`None` are still variants of type `Option<T>`.\n\nThe `<T>` syntax is a feature of Rust we haven\u2019t talked about yet. It\u2019s a\ngeneric type parameter, and we\u2019ll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that `<T>` means that the `Some` variant of\nthe `Option` enum can hold one piece of data of any type, and that each\nconcrete type that gets used in place of `T` makes the overall `Option<T>` type\na different type. Here are some examples of using `Option` values to hold\nnumber types and string types:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-06-option-examples/src/main.rs:here}}\n```\n\nThe type of `some_number` is `Option<i32>`. The type of `some_char` is\n`Option<char>`, which is a different type. Rust can infer these types because\nwe\u2019ve specified a value inside the `Some` variant. For `absent_number`, Rust\nrequires us to annotate the overall `Option` type: the compiler can\u2019t infer the\ntype that the corresponding `Some` variant will hold by looking only at a\n`None` value. Here, we tell Rust that we mean for `absent_number` to be of type\n`Option<i32>`.\n\nWhen we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null: we don\u2019t have a valid value. So why is having `Option<T>`\nany better than having null?\n\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won\u2019t let us use an `Option<T>` value as if it were\ndefinitely a valid value. For example, this code won\u2019t compile, because it\u2019s\ntrying to add an `i8` to an `Option<i8>`:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}\n```\n\nIntense! In effect, this error message means that Rust doesn\u2019t understand how\nto add an `i8` and an `Option<i8>`, because they\u2019re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option<i8>` (or\nwhatever type of value we\u2019re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option<T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn\u2019t null when it actually is.\n\nEliminating the risk of incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn\u2019t an\n`Option<T>`, you *can* safely assume that the value isn\u2019t null. This was a\ndeliberate design decision for Rust to limit null\u2019s pervasiveness and increase\nthe safety of Rust code.\n\nSo how do you get the `T` value out of a `Some` variant when you have a value\nof type `Option<T>` so that you can use that value? The `Option<T>` enum has a\nlarge number of methods that are useful in a variety of situations; you can\ncheck them out in [its documentation][docs]<!-- ignore -->. Becoming familiar\nwith the methods on `Option<T>` will be extremely useful in your journey with\nRust.\n\nIn general, in order to use an `Option<T>` value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\nother code to run only if you have a `None` value, and that code doesn\u2019t have a\n`T` value available. The `match` expression is a control flow construct that\ndoes just this when used with enums: it will run different code depending on\nwhich variant of the enum it has, and that code can use the data inside the\nmatching value.\n\n[IpAddr]: ../std/net/enum.IpAddr.html\n[option]: ../std/option/enum.Option.html\n[docs]: ../std/option/enum.Option.html\n",
          "qas": [
            {
              "question": "What is the difference between enum and struct?",
              "id": 83,
              "answers": [
                {
                  "text": "Where structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum.",
                  "answer_start": 21
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is Null type available in rust language?",
              "id": 89,
              "answers": [
                {
                  "text": "Programming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn\u2019t have the\nnull feature that many other languages have. *Null* is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.",
                  "answer_start": 9037
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the similarity between struct and enum?",
              "id": 87,
              "answers": [
                {
                  "text": "There is one more similarity between enums and structs: just as we\u2019re able to\ndefine methods on structs using `impl`, we\u2019re also able to define methods on\nenums.",
                  "answer_start": 7631
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why 'Option<T>'is better option than null?",
              "id": 95,
              "answers": [
                {
                  "text": "So why is having `Option\u2039T>`\nany better than having null?\n\nIn short, because `Option\u2039T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won\u2019t let us use an `Option\u2039T>` value as if it were\ndefinitely a valid value. For example, this code won\u2019t compile, because it\u2019s\ntrying to add an `i8` to an `Option\u2039i8>`:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}\n```\n\nIntense! In effect, this error message means that Rust doesn\u2019t understand how\nto add an `i8` and an `Option\u2039i8>`, because they\u2019re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option\u2039i8>` (or\nwhatever type of value we\u2019re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.\n\nIn other words, you have to convert an `Option\u2039T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn\u2019t null when it actually is.\n",
                  "answer_start": 12469
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What means 'some' and 'none' values?",
              "id": 93,
              "answers": [
                {
                  "text": "When we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null",
                  "answer_start": 12262
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which data type can I put inside an enum variant?",
              "id": 85,
              "answers": [
                {
                  "text": "\nThis code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.",
                  "answer_start": 5795
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What the 'Option' type encodes?",
              "id": 88,
              "answers": [
                {
                  "text": "This section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing.",
                  "answer_start": 8427
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I put enumeration inside another enum?",
              "id": 86,
              "answers": [
                {
                  "text": "This code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.",
                  "answer_start": 5796
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the characteristics of the null type?",
              "id": 90,
              "answers": [
                {
                  "text": " *Null* is a value that means there\nis no value there.",
                  "answer_start": 9239
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Unrecoverable Errors with `panic!`\n\nSometimes, bad things happen in your code, and there\u2019s nothing you can do about\nit. In these cases, Rust has the `panic!` macro. There are two ways to cause a\npanic in practice: by taking an action that causes our code to panic (such as\naccessing an array past the end) or by explicitly calling the `panic!` macro.\nIn both cases, we cause a panic in our program. By default, these panics will\nprint a failure message, unwind, clean up the stack, and quit. Via an\nenvironment variable, you can also have Rust display the call stack when a\npanic occurs to make it easier to track down the source of the panic.\n\n> ### Unwinding the Stack or Aborting in Response to a Panic\n>\n> By default, when a panic occurs, the program starts *unwinding*, which\n> means Rust walks back up the stack and cleans up the data from each function\n> it encounters. However, this walking back and cleanup is a lot of work. Rust,\n> therefore, allows you to choose the alternative of immediately *aborting*,\n> which ends the program without cleaning up.\n>\n> Memory that the program was using will then need to be cleaned\n> up by the operating system. If in your project you need to make the resulting\n> binary as small as possible, you can switch from unwinding to aborting upon a\n> panic by adding `panic = 'abort'` to the appropriate `[profile]` sections in\n> your *Cargo.toml* file. For example, if you want to abort on panic in release\n> mode, add this:\n>\n> ```toml\n> [profile.release]\n> panic = 'abort'\n> ```\n\nLet\u2019s try calling `panic!` in a simple program:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,panics\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-01-panic/src/main.rs}}\n```\n\nWhen you run the program, you\u2019ll see something like this:\n\n```console\n{{#include ../listings/ch09-error-handling/no-listing-01-panic/output.txt}}\n```\n\nThe call to `panic!` causes the error message contained in the last two lines.\nThe first line shows our panic message and the place in our source code where\nthe panic occurred: *src/main.rs:2:5* indicates that it\u2019s the second line,\nfifth character of our *src/main.rs* file.\n\nIn this case, the line indicated is part of our code, and if we go to that\nline, we see the `panic!` macro call. In other cases, the `panic!` call might\nbe in code that our code calls, and the filename and line number reported by\nthe error message will be someone else\u2019s code where the `panic!` macro is\ncalled, not the line of our code that eventually led to the `panic!` call. We\ncan use the backtrace of the functions the `panic!` call came from to figure\nout the part of our code that is causing the problem. We\u2019ll discuss backtraces\nin more detail next.\n\n### Using a `panic!` Backtrace\n\nLet\u2019s look at another example to see what it\u2019s like when a `panic!` call comes\nfrom a library because of a bug in our code instead of from our code calling\nthe macro directly. Listing 9-1 has some code that attempts to access an\nindex in a vector beyond the range of valid indexes.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,panics\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-1: Attempting to access an element beyond the\nend of a vector, which will cause a call to `panic!`</span>\n\nHere, we\u2019re attempting to access the 100th element of our vector (which is at\nindex 99 because indexing starts at zero), but the vector has only 3 elements.\nIn this situation, Rust will panic. Using `[]` is supposed to return an\nelement, but if you pass an invalid index, there\u2019s no element that Rust could\nreturn here that would be correct.\n\nIn C, attempting to read beyond the end of a data structure is undefined\nbehavior. You might get whatever is at the location in memory that would\ncorrespond to that element in the data structure, even though the memory\ndoesn\u2019t belong to that structure. This is called a *buffer overread* and can\nlead to security vulnerabilities if an attacker is able to manipulate the index\nin such a way as to read data they shouldn\u2019t be allowed to that is stored after\nthe data structure.\n\nTo protect your program from this sort of vulnerability, if you try to read an\nelement at an index that doesn\u2019t exist, Rust will stop execution and refuse to\ncontinue. Let\u2019s try it and see:\n\n```console\n{{#include ../listings/ch09-error-handling/listing-09-01/output.txt}}\n```\n\nThis error points at line 4 of our `main.rs` where we attempt to access index\n99. The next note line tells us that we can set the `RUST_BACKTRACE`\nenvironment variable to get a backtrace of exactly what happened to cause the\nerror. A *backtrace* is a list of all the functions that have been called to\nget to this point. Backtraces in Rust work as they do in other languages: the\nkey to reading the backtrace is to start from the top and read until you see\nfiles you wrote. That\u2019s the spot where the problem originated. The lines above\nthat spot are code that your code has called; the lines below are code that\ncalled your code. These before-and-after lines might include core Rust code,\nstandard library code, or crates that you\u2019re using. Let\u2019s try getting a\nbacktrace by setting the `RUST_BACKTRACE` environment variable to any value\nexcept 0. Listing 9-2 shows output similar to what you\u2019ll see.\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/listing-09-01\nRUST_BACKTRACE=1 cargo run\ncopy the backtrace output below\ncheck the backtrace number mentioned in the text below the listing\n-->\n\n```console\n$ RUST_BACKTRACE=1 cargo run\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main.rs:4:5\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/std/src/panicking.rs:584:5\n   1: core::panicking::panic_fmt\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/panicking.rs:142:14\n   2: core::panicking::panic_bounds_check\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/panicking.rs:84:5\n   3: <usize as core::slice::index::SliceIndex<[T]>>::index\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/slice/index.rs:242:10\n   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/slice/index.rs:18:9\n   5: <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/alloc/src/vec/mod.rs:2591:9\n   6: panic::main\n             at ./src/main.rs:4:5\n   7: core::ops::function::FnOnce::call_once\n             at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/function.rs:248:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n```\n\n<span class=\"caption\">Listing 9-2: The backtrace generated by a call to\n`panic!` displayed when the environment variable `RUST_BACKTRACE` is set</span>\n\nThat\u2019s a lot of output! The exact output you see might be different depending\non your operating system and Rust version. In order to get backtraces with this\ninformation, debug symbols must be enabled. Debug symbols are enabled by\ndefault when using `cargo build` or `cargo run` without the `--release` flag,\nas we have here.\n\nIn the output in Listing 9-2, line 6 of the backtrace points to the line in our\nproject that\u2019s causing the problem: line 4 of *src/main.rs*. If we don\u2019t want\nour program to panic, we should start our investigation at the location pointed\nto by the first line mentioning a file we wrote. In Listing 9-1, where we\ndeliberately wrote code that would panic, the way to fix the panic is to not\nrequest an element beyond the range of the vector indexes. When your code\npanics in the future, you\u2019ll need to figure out what action the code is taking\nwith what values to cause the panic and what the code should do instead.\n\nWe\u2019ll come back to `panic!` and when we should and should not use `panic!` to\nhandle error conditions in the [\u201cTo `panic!` or Not to\n`panic!`\u201d][to-panic-or-not-to-panic]<!-- ignore --> section later in this\nchapter. Next, we\u2019ll look at how to recover from an error using `Result`.\n\n[to-panic-or-not-to-panic]:\nch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic\n",
          "qas": [
            {
              "question": "What will happen when I try to read an elements with unexisting index?",
              "id": 2139,
              "answers": [
                {
                  "text": "Rust will stop execution and refuse to\ncontinue",
                  "answer_start": 4292
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to get backtrace of an error?",
              "id": 2140,
              "answers": [
                {
                  "text": " set the `RUST_BACKTRACE`\nenvironment variable",
                  "answer_start": 4571
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is buffer overread?",
              "id": 2143,
              "answers": [
                {
                  "text": "You might get whatever is at the location in memory that would\ncorrespond to that element in the data structure, even though the memory\ndoesn\u2019t belong to that structure",
                  "answer_start": 3779
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens when 'panic' occur?",
              "id": 2003,
              "answers": [
                {
                  "text": "print a failure message, unwind, clean up the stack, and quit",
                  "answer_start": 432
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a backtrace?",
              "id": 2141,
              "answers": [
                {
                  "text": "a list of all the functions that have been called to\nget to this point",
                  "answer_start": 4699
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I terminate program when and provide feedback to the caller?",
              "id": 2005,
              "answers": [
                {
                  "text": "by taking an action that causes our code to panic (such as\naccessing an array past the end) or by explicitly calling the `panic!` macro.",
                  "answer_start": 217
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to enable debug symbols?",
              "id": 2142,
              "answers": [
                {
                  "text": "`cargo build` or `cargo run` without the `--release` flag",
                  "answer_start": 7308
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix E - Editions\n\nIn Chapter 1, you saw that `cargo new` adds a bit of metadata to your\n*Cargo.toml* file about an edition. This appendix talks about what that means!\n\nThe Rust language and compiler have a six-week release cycle, meaning users get\na constant stream of new features. Other programming languages release larger\nchanges less often; Rust releases smaller updates more frequently. After a\nwhile, all of these tiny changes add up. But from release to release, it can be\ndifficult to look back and say, \u201cWow, between Rust 1.10 and Rust 1.31, Rust has\nchanged a lot!\u201d\n\nEvery two or three years, the Rust team produces a new Rust *edition*. Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling. New editions ship as part of the usual\nsix-week release process.\n\nEditions serve different purposes for different people:\n\n* For active Rust users, a new edition brings together incremental changes into\n  an easy-to-understand package.\n* For non-users, a new edition signals that some major advancements have\n  landed, which might make Rust worth another look.\n* For those developing Rust, a new edition provides a rallying point for the\n  project as a whole.\n\nAt the time of this writing, three Rust editions are available: Rust 2015, Rust\n2018, and Rust 2021. This book is written using Rust 2021 edition idioms.\n\nThe `edition` key in *Cargo.toml* indicates which edition the compiler should\nuse for your code. If the key doesn\u2019t exist, Rust uses `2015` as the edition\nvalue for backward compatibility reasons.\n\nEach project can opt in to an edition other than the default 2015 edition.\nEditions can contain incompatible changes, such as including a new keyword that\nconflicts with identifiers in code. However, unless you opt in to those\nchanges, your code will continue to compile even as you upgrade the Rust\ncompiler version you use.\n\nAll Rust compiler versions support any edition that existed prior to that\ncompiler\u2019s release, and they can link crates of any supported editions\ntogether. Edition changes only affect the way the compiler initially parses\ncode. Therefore, if you\u2019re using Rust 2015 and one of your dependencies uses\nRust 2018, your project will compile and be able to use that dependency. The\nopposite situation, where your project uses Rust 2018 and a dependency uses\nRust 2015, works as well.\n\nTo be clear: most features will be available on all editions. Developers using\nany Rust edition will continue to see improvements as new stable releases are\nmade. However, in some cases, mainly when new keywords are added, some new\nfeatures might only be available in later editions. You will need to switch\neditions if you want to take advantage of such features.\n\nFor more details, the [*Edition\nGuide*](https://doc.rust-lang.org/stable/edition-guide/) is a complete book\nabout editions that enumerates the differences between editions and explains\nhow to automatically upgrade your code to a new edition via `cargo fix`.\n",
          "qas": [
            {
              "question": "What is the default edition?",
              "id": 203,
              "answers": [
                {
                  "text": "2015`",
                  "answer_start": 1533
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of editions?",
              "id": 196,
              "answers": [
                {
                  "text": "* For active Rust users, a new edition brings together incremental changes into\n  an easy-to-understand package.\n* For non-users, a new edition signals that some major advancements have\n  landed, which might make Rust worth another look.\n* For those developing Rust, a new edition provides a rallying point for the\n  project as a whole.\n",
                  "answer_start": 906
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What release cycle has Rust?",
              "id": 197,
              "answers": [
                {
                  "text": "six-week",
                  "answer_start": 214
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new Rust edition released?",
              "id": 198,
              "answers": [
                {
                  "text": "Every two or three years",
                  "answer_start": 586
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which Rust editions are available?",
              "id": 201,
              "answers": [
                {
                  "text": "Rust 2015, Rust\n2018, and Rust 2021",
                  "answer_start": 1308
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of new editions?",
              "id": 199,
              "answers": [
                {
                  "text": "Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling",
                  "answer_start": 657
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Improving Our I/O Project\n\nWith this new knowledge about iterators, we can improve the I/O project in\nChapter 12 by using iterators to make places in the code clearer and more\nconcise. Let\u2019s look at how iterators can improve our implementation of the\n`Config::build` function and the `search` function.\n\n### Removing a `clone` Using an Iterator\n\nIn Listing 12-6, we added code that took a slice of `String` values and created\nan instance of the `Config` struct by indexing into the slice and cloning the\nvalues, allowing the `Config` struct to own those values. In Listing 13-17,\nwe\u2019ve reproduced the implementation of the `Config::build` function as it was\nin Listing 12-23:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch13-functional-features/listing-12-23-reproduced/src/lib.rs:ch13}}\n```\n\n<span class=\"caption\">Listing 13-17: Reproduction of the `Config::build`\nfunction from Listing 12-23</span>\n\nAt the time, we said not to worry about the inefficient `clone` calls because\nwe would remove them in the future. Well, that time is now!\n\nWe needed `clone` here because we have a slice with `String` elements in the\nparameter `args`, but the `build` function doesn\u2019t own `args`. To return\nownership of a `Config` instance, we had to clone the values from the `query`\nand `file_path` fields of `Config` so the `Config` instance can own its values.\n\nWith our new knowledge about iterators, we can change the `build` function to\ntake ownership of an iterator as its argument instead of borrowing a slice.\nWe\u2019ll use the iterator functionality instead of the code that checks the length\nof the slice and indexes into specific locations. This will clarify what the\n`Config::build` function is doing because the iterator will access the values.\n\nOnce `Config::build` takes ownership of the iterator and stops using indexing\noperations that borrow, we can move the `String` values from the iterator into\n`Config` rather than calling `clone` and making a new allocation.\n\n#### Using the Returned Iterator Directly\n\nOpen your I/O project\u2019s *src/main.rs* file, which should look like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch13-functional-features/listing-12-24-reproduced/src/main.rs:ch13}}\n```\n\nWe\u2019ll first change the start of the `main` function that we had in Listing\n12-24 to the code in Listing 13-18, which this time uses an iterator. This\nwon\u2019t compile until we update `Config::build` as well.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-18: Passing the return value of `env::args` to\n`Config::build`</span>\n\nThe `env::args` function returns an iterator! Rather than collecting the\niterator values into a vector and then passing a slice to `Config::build`, now\nwe\u2019re passing ownership of the iterator returned from `env::args` to\n`Config::build` directly.\n\nNext, we need to update the definition of `Config::build`. In your I/O\nproject\u2019s *src/lib.rs* file, let\u2019s change the signature of `Config::build` to\nlook like Listing 13-19. This still won\u2019t compile because we need to update the\nfunction body.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-19/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-19: Updating the signature of `Config::build`\nto expect an iterator</span>\n\nThe standard library documentation for the `env::args` function shows that the\ntype of the iterator it returns is `std::env::Args`, and that type implements\nthe `Iterator` trait and returns `String` values.\n\nWe\u2019ve updated the signature of the `Config::build` function so the parameter\n`args` has a generic type with the trait bounds `impl Iterator<Item = String>`\ninstead of `&[String]`. This usage of the `impl Trait` syntax we discussed in\nthe [\u201cTraits as Parameters\u201d][impl-trait]<!-- ignore --> section of Chapter 10\nmeans that `args` can be any type that implements the `Iterator` type and\nreturns `String` items.\n\nBecause we\u2019re taking ownership of `args` and we\u2019ll be mutating `args` by\niterating over it, we can add the `mut` keyword into the specification of the\n`args` parameter to make it mutable.\n\n#### Using `Iterator` Trait Methods Instead of Indexing\n\nNext, we\u2019ll fix the body of `Config::build`. Because `args` implements the\n`Iterator` trait, we know we can call the `next` method on it! Listing 13-20\nupdates the code from Listing 12-23 to use the `next` method:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-20/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-20: Changing the body of `Config::build` to use\niterator methods</span>\n\nRemember that the first value in the return value of `env::args` is the name of\nthe program. We want to ignore that and get to the next value, so first we call\n`next` and do nothing with the return value. Second, we call `next` to get the\nvalue we want to put in the `query` field of `Config`. If `next` returns a\n`Some`, we use a `match` to extract the value. If it returns `None`, it means\nnot enough arguments were given and we return early with an `Err` value. We do\nthe same thing for the `file_path` value.\n\n### Making Code Clearer with Iterator Adaptors\n\nWe can also take advantage of iterators in the `search` function in our I/O\nproject, which is reproduced here in Listing 13-21 as it was in Listing 12-19:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:ch13}}\n```\n\n<span class=\"caption\">Listing 13-21: The implementation of the `search`\nfunction from Listing 12-19</span>\n\nWe can write this code in a more concise way using iterator adaptor methods.\nDoing so also lets us avoid having a mutable intermediate `results` vector. The\nfunctional programming style prefers to minimize the amount of mutable state to\nmake code clearer. Removing the mutable state might enable a future enhancement\nto make searching happen in parallel, because we wouldn\u2019t have to manage\nconcurrent access to the `results` vector. Listing 13-22 shows this change:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-22/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-22: Using iterator adaptor methods in the\nimplementation of the `search` function</span>\n\nRecall that the purpose of the `search` function is to return all lines in\n`contents` that contain the `query`. Similar to the `filter` example in Listing\n13-16, this code uses the `filter` adaptor to keep only the lines that\n`line.contains(query)` returns `true` for. We then collect the matching lines\ninto another vector with `collect`. Much simpler! Feel free to make the same\nchange to use iterator methods in the `search_case_insensitive` function as\nwell.\n\n### Choosing Between Loops or Iterators\n\nThe next logical question is which style you should choose in your own code and\nwhy: the original implementation in Listing 13-21 or the version using\niterators in Listing 13-22. Most Rust programmers prefer to use the iterator\nstyle. It\u2019s a bit tougher to get the hang of at first, but once you get a feel\nfor the various iterator adaptors and what they do, iterators can be easier to\nunderstand. Instead of fiddling with the various bits of looping and building\nnew vectors, the code focuses on the high-level objective of the loop. This\nabstracts away some of the commonplace code so it\u2019s easier to see the concepts\nthat are unique to this code, such as the filtering condition each element in\nthe iterator must pass.\n\nBut are the two implementations truly equivalent? The intuitive assumption\nmight be that the more low-level loop will be faster. Let\u2019s talk about\nperformance.\n\n[impl-trait]: ch10-02-traits.html#traits-as-parameters\n",
          "qas": [
            {
              "question": "How to improve iteration code?",
              "id": 118,
              "answers": [
                {
                  "text": "We can write this code in a more concise way using iterator adaptor methods.",
                  "answer_start": 5913
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What to do with iterator output?",
              "id": 5,
              "answers": [
                {
                  "text": "we use a `match` to extract the value",
                  "answer_start": 5255
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How iterator can improve the code?",
              "id": 7,
              "answers": [
                {
                  "text": "This will clarify what the\n`Config::build` function is doing because the iterator will access the values.",
                  "answer_start": 1692
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What code style should be used for iteration?",
              "id": 6,
              "answers": [
                {
                  "text": "Most Rust programmers prefer to use the iterator\nstyle.",
                  "answer_start": 7347
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the first value returned from env::args?",
              "id": 117,
              "answers": [
                {
                  "text": "the first value in the return value of `env::args` is the name of\nthe program",
                  "answer_start": 4947
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to make parameter mutable?",
              "id": 116,
              "answers": [
                {
                  "text": "we can add the `mut` keyword into the specification of the\n`args` parameter to make it mutable",
                  "answer_start": 4292
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Managing Growing Projects with Packages, Crates, and Modules\n\nAs you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you\u2019ll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works.\n\nThe programs we\u2019ve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files. A package can contain multiple binary crates and\noptionally one library crate. As a package grows, you can extract parts into\nseparate crates that become external dependencies. This chapter covers all\nthese techniques. For very large projects comprising a set of interrelated\npackages that evolve together, Cargo provides *workspaces*, which we\u2019ll cover\nin the [\u201cCargo Workspaces\u201d][workspaces]<!-- ignore --> section in Chapter 14.\n\nWe\u2019ll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you\u2019ve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head.\n\nA related concept is scope: the nested context in which code is written has a\nset of names that are defined as \u201cin scope.\u201d When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can\u2019t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.\n\nRust has a number of features that allow you to manage your code\u2019s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the *module system*, include:\n\n* **Packages:** A Cargo feature that lets you build, test, and share crates\n* **Crates:** A tree of modules that produces a library or executable\n* **Modules** and **use:** Let you control the organization, scope, and\n  privacy of paths\n* **Paths:** A way of naming an item, such as a struct, function, or module\n\nIn this chapter, we\u2019ll cover all these features, discuss how they interact, and\nexplain how to use them to manage scope. By the end, you should have a solid\nunderstanding of the module system and be able to work with scopes like a pro!\n\n[workspaces]: ch14-03-cargo-workspaces.html\n",
          "qas": [
            {
              "question": "What are the features that allow to manage code\u2019s\norganization?",
              "id": 118,
              "answers": [
                {
                  "text": "Rust has a number of features that allow you to manage your code\u2019s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the *module system*, include:\n\n* **Packages:** A Cargo feature that lets you build, test, and share crates\n* **Crates:** A tree of modules that produces a library or executable\n* **Modules** and **use:** Let you control the organization, scope, and\n  privacy of paths\n* **Paths:** A way of naming an item, such as a struct, function, or module\n",
                  "answer_start": 1990
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I organize the code if my project grows up?",
              "id": 112,
              "answers": [
                {
                  "text": "The programs we\u2019ve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files.",
                  "answer_start": 347
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can be inside a package?",
              "id": 113,
              "answers": [
                {
                  "text": "A package can contain multiple binary crates and\noptionally one library crate.",
                  "answer_start": 526
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the challenge of writing large programs?",
              "id": 111,
              "answers": [
                {
                  "text": "As you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you\u2019ll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works.",
                  "answer_start": 64
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an encapsulation?",
              "id": 115,
              "answers": [
                {
                  "text": "We\u2019ll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you\u2019ve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head.",
                  "answer_start": 959
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I organize my code if the package grows?",
              "id": 114,
              "answers": [
                {
                  "text": "As a package grows, you can extract parts into\nseparate crates that become external dependencies.",
                  "answer_start": 605
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the concept of the scope?",
              "id": 116,
              "answers": [
                {
                  "text": "A related concept is scope: the nested context in which code is written has a\nset of names that are defined as \u201cin scope.\u201d When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can\u2019t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.",
                  "answer_start": 1454
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I have two items with the same name in the same scope?",
              "id": 117,
              "answers": [
                {
                  "text": "You can\u2019t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.",
                  "answer_start": 1879
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Processing a Series of Items with Iterators\n\nThe iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished. When you use iterators, you don\u2019t\nhave to reimplement that logic yourself.\n\nIn Rust, iterators are *lazy*, meaning they have no effect until you call\nmethods that consume the iterator to use it up. For example, the code in\nListing 13-10 creates an iterator over the items in the vector `v1` by calling\nthe `iter` method defined on `Vec<T>`. This code by itself doesn\u2019t do anything\nuseful.\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-10: Creating an iterator</span>\n\nThe iterator is stored in the `v1_iter` variable. Once we\u2019ve created an\niterator, we can use it in a variety of ways. In Listing 3-5 in Chapter 3, we\niterated over an array using a `for` loop to execute some code on each of its\nitems. Under the hood this implicitly created and then consumed an iterator,\nbut we glossed over how exactly that works until now.\n\nIn the example in Listing 13-11, we separate the creation of the iterator from\nthe use of the iterator in the `for` loop. When the `for` loop is called using\nthe iterator in `v1_iter`, each element in the iterator is used in one\niteration of the loop, which prints out each value.\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-11: Using an iterator in a `for` loop</span>\n\nIn languages that don\u2019t have iterators provided by their standard libraries,\nyou would likely write this same functionality by starting a variable at index\n0, using that variable to index into the vector to get a value, and\nincrementing the variable value in a loop until it reached the total number of\nitems in the vector.\n\nIterators handle all that logic for you, cutting down on repetitive code you\ncould potentially mess up. Iterators give you more flexibility to use the same\nlogic with many different kinds of sequences, not just data structures you can\nindex into, like vectors. Let\u2019s examine how iterators do that.\n\n### The `Iterator` Trait and the `next` Method\n\nAll iterators implement a trait named `Iterator` that is defined in the\nstandard library. The definition of the trait looks like this:\n\n```rust\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n\n    // methods with default implementations elided\n}\n```\n\nNotice this definition uses some new syntax: `type Item` and `Self::Item`,\nwhich are defining an *associated type* with this trait. We\u2019ll talk about\nassociated types in depth in Chapter 19. For now, all you need to know is that\nthis code says implementing the `Iterator` trait requires that you also define\nan `Item` type, and this `Item` type is used in the return type of the `next`\nmethod. In other words, the `Item` type will be the type returned from the\niterator.\n\nThe `Iterator` trait only requires implementors to define one method: the\n`next` method, which returns one item of the iterator at a time wrapped in\n`Some` and, when iteration is over, returns `None`.\n\nWe can call the `next` method on iterators directly; Listing 13-12 demonstrates\nwhat values are returned from repeated calls to `next` on the iterator created\nfrom the vector.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-12/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-12: Calling the `next` method on an\niterator</span>\n\nNote that we needed to make `v1_iter` mutable: calling the `next` method on an\niterator changes internal state that the iterator uses to keep track of where\nit is in the sequence. In other words, this code *consumes*, or uses up, the\niterator. Each call to `next` eats up an item from the iterator. We didn\u2019t need\nto make `v1_iter` mutable when we used a `for` loop because the loop took\nownership of `v1_iter` and made it mutable behind the scenes.\n\nAlso note that the values we get from the calls to `next` are immutable\nreferences to the values in the vector. The `iter` method produces an iterator\nover immutable references. If we want to create an iterator that takes\nownership of `v1` and returns owned values, we can call `into_iter` instead of\n`iter`. Similarly, if we want to iterate over mutable references, we can call\n`iter_mut` instead of `iter`.\n\n### Methods that Consume the Iterator\n\nThe `Iterator` trait has a number of different methods with default\nimplementations provided by the standard library; you can find out about these\nmethods by looking in the standard library API documentation for the `Iterator`\ntrait. Some of these methods call the `next` method in their definition, which\nis why you\u2019re required to implement the `next` method when implementing the\n`Iterator` trait.\n\nMethods that call `next` are called *consuming adaptors*, because calling them\nuses up the iterator. One example is the `sum` method, which takes ownership of\nthe iterator and iterates through the items by repeatedly calling `next`, thus\nconsuming the iterator. As it iterates through, it adds each item to a running\ntotal and returns the total when iteration is complete. Listing 13-13 has a\ntest illustrating a use of the `sum` method:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-13: Calling the `sum` method to get the total\nof all items in the iterator</span>\n\nWe aren\u2019t allowed to use `v1_iter` after the call to `sum` because `sum` takes\nownership of the iterator we call it on.\n\n### Methods that Produce Other Iterators\n\n*Iterator adaptors* are methods defined on the `Iterator` trait that don\u2019t\nconsume the iterator. Instead, they produce different iterators by changing\nsome aspect of the original iterator.\n\nListing 13-14 shows an example of calling the iterator adaptor method `map`,\nwhich takes a closure to call on each item as the items are iterated through.\nThe `map` method returns a new iterator that produces the modified items. The\nclosure here creates a new iterator in which each item from the vector will be\nincremented by 1:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,not_desired_behavior\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-14: Calling the iterator adaptor `map` to\ncreate a new iterator</span>\n\nHowever, this code produces a warning:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-14/output.txt}}\n```\n\nThe code in Listing 13-14 doesn\u2019t do anything; the closure we\u2019ve specified\nnever gets called. The warning reminds us why: iterator adaptors are lazy, and\nwe need to consume the iterator here.\n\nTo fix this warning and consume the iterator, we\u2019ll use the `collect` method,\nwhich we used in Chapter 12 with `env::args` in Listing 12-1. This method\nconsumes the iterator and collects the resulting values into a collection data\ntype.\n\nIn Listing 13-15, we collect the results of iterating over the iterator that\u2019s\nreturned from the call to `map` into a vector. This vector will end up\ncontaining each item from the original vector incremented by 1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-15/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-15: Calling the `map` method to create a new\niterator and then calling the `collect` method to consume the new iterator and\ncreate a vector</span>\n\nBecause `map` takes a closure, we can specify any operation we want to perform\non each item. This is a great example of how closures let you customize some\nbehavior while reusing the iteration behavior that the `Iterator` trait\nprovides.\n\nYou can chain multiple calls to iterator adaptors to perform complex actions in\na readable way. But because all iterators are lazy, you have to call one of the\nconsuming adaptor methods to get results from calls to iterator adaptors.\n\n### Using Closures that Capture Their Environment\n\nMany iterator adapters take closures as arguments, and commonly the closures\nwe\u2019ll specify as arguments to iterator adapters will be closures that capture\ntheir environment.\n\nFor this example, we\u2019ll use the `filter` method that takes a closure. The\nclosure gets an item from the iterator and returns a `bool`. If the closure\nreturns `true`, the value will be included in the iteration produced by\n`filter`. If the closure returns `false`, the value won\u2019t be included.\n\nIn Listing 13-16, we use `filter` with a closure that captures the `shoe_size`\nvariable from its environment to iterate over a collection of `Shoe` struct\ninstances. It will return only shoes that are the specified size.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-16/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 13-16: Using the `filter` method with a closure\nthat captures `shoe_size`</span>\n\nThe `shoes_in_size` function takes ownership of a vector of shoes and a shoe\nsize as parameters. It returns a vector containing only shoes of the specified\nsize.\n\nIn the body of `shoes_in_size`, we call `into_iter` to create an iterator\nthat takes ownership of the vector. Then we call `filter` to adapt that\niterator into a new iterator that only contains elements for which the closure\nreturns `true`.\n\nThe closure captures the `shoe_size` parameter from the environment and\ncompares the value with each shoe\u2019s size, keeping only shoes of the size\nspecified. Finally, calling `collect` gathers the values returned by the\nadapted iterator into a vector that\u2019s returned by the function.\n\nThe test shows that when we call `shoes_in_size`, we get back only shoes\nthat have the same size as the value we specified.\n",
          "qas": [
            {
              "question": "When iterators are evaluated?",
              "id": 114,
              "answers": [
                {
                  "text": "In Rust, iterators are *lazy*, meaning they have no effect until you call\nmethods that consume the iterator to use it up.",
                  "answer_start": 326
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of an iterator?",
              "id": 2176,
              "answers": [
                {
                  "text": "allows you to perform some task on a sequence of items in\nturn",
                  "answer_start": 69
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What method must iterator implement?",
              "id": 2,
              "answers": [
                {
                  "text": "the\n`next` method",
                  "answer_start": 3130
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is iterator responsible for?",
              "id": 2177,
              "answers": [
                {
                  "text": "for the logic of iterating over each item and\ndetermining when the sequence has finished",
                  "answer_start": 160
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are iterators in Rust eager?",
              "id": 2178,
              "answers": [
                {
                  "text": "In Rust, iterators are *lazy*",
                  "answer_start": 326
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How iterators work with for loops?",
              "id": 115,
              "answers": [
                {
                  "text": "we\niterated over an array using a `for` loop to execute some code on each of its\nitems. Under the hood this implicitly created and then consumed an iterator",
                  "answer_start": 955
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I filter container elements?",
              "id": 4,
              "answers": [
                {
                  "text": "call `filter`",
                  "answer_start": 9561
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that iterators are lazy?",
              "id": 2179,
              "answers": [
                {
                  "text": "they have no effect until you call\nmethods that consume the iterator to use it up",
                  "answer_start": 365
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "<!-- Old heading. Do not remove or links may break. -->\n<a id=\"the-match-control-flow-operator\"></a>\n## The `match` Control Flow Construct\n\nRust has an extremely powerful control flow construct called `match` that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches. Patterns can be made up of literal values,\nvariable names, wildcards, and many other things; [Chapter\n18][ch18-00-patterns]<!-- ignore --> covers all the different kinds of patterns\nand what they do. The power of `match` comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled.\n\nThink of a `match` expression as being like a coin-sorting machine: coins slide\ndown a track with variously sized holes along it, and each coin falls through\nthe first hole it encounters that it fits into. In the same way, values go\nthrough each pattern in a `match`, and at the first pattern the value \u201cfits,\u201d\nthe value falls into the associated code block to be used during execution.\n\nSpeaking of coins, let\u2019s use them as an example using `match`! We can write a\nfunction that takes an unknown US coin and, in a similar way as the counting\nmachine, determines which coin it is and returns its value in cents, as shown\nin Listing 6-3.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-3: An enum and a `match` expression that has\nthe variants of the enum as its patterns</span>\n\nLet\u2019s break down the `match` in the `value_in_cents` function. First we list\nthe `match` keyword followed by an expression, which in this case is the value\n`coin`. This seems very similar to a conditional expression used with `if`, but\nthere\u2019s a big difference: with `if`, the condition needs to evaluate to a\nBoolean value, but here it can be any type. The type of `coin` in this example\nis the `Coin` enum that we defined on the first line.\n\nNext are the `match` arms. An arm has two parts: a pattern and some code. The\nfirst arm here has a pattern that is the value `Coin::Penny` and then the `=>`\noperator that separates the pattern and the code to run. The code in this case\nis just the value `1`. Each arm is separated from the next with a comma.\n\nWhen the `match` expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn\u2019t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need: in Listing 6-3, our `match` has four arms.\n\nThe code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression.\n\nWe don\u2019t typically use curly brackets if the match arm code is short, as it is\nin Listing 6-3 where each arm just returns a value. If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. For example, the following code prints\n\u201cLucky penny!\u201d every time the method is called with a `Coin::Penny`, but still\nreturns the last value of the block, `1`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-08-match-arm-multiple-lines/src/main.rs:here}}\n```\n\n### Patterns That Bind to Values\n\nAnother useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern. This is how we can extract values out of enum\nvariants.\n\nAs an example, let\u2019s change one of our enum variants to hold data inside it.\nFrom 1999 through 2008, the United States minted quarters with different\ndesigns for each of the 50 states on one side. No other coins got state\ndesigns, so only quarters have this extra value. We can add this information to\nour `enum` by changing the `Quarter` variant to include a `UsState` value\nstored inside it, which we\u2019ve done in Listing 6-4.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-4: A `Coin` enum in which the `Quarter` variant\nalso holds a `UsState` value</span>\n\nLet\u2019s imagine that a friend is trying to collect all 50 state quarters. While\nwe sort our loose change by coin type, we\u2019ll also call out the name of the\nstate associated with each quarter so that if it\u2019s one our friend doesn\u2019t have,\nthey can add it to their collection.\n\nIn the match expression for this code, we add a variable called `state` to the\npattern that matches values of the variant `Coin::Quarter`. When a\n`Coin::Quarter` matches, the `state` variable will bind to the value of that\nquarter\u2019s state. Then we can use `state` in the code for that arm, like so:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-09-variable-in-pattern/src/main.rs:here}}\n```\n\nIf we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin`\nwould be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each\nof the match arms, none of them match until we reach `Coin::Quarter(state)`. At\nthat point, the binding for `state` will be the value `UsState::Alaska`. We can\nthen use that binding in the `println!` expression, thus getting the inner\nstate value out of the `Coin` enum variant for `Quarter`.\n\n### Matching with `Option<T>`\n\nIn the previous section, we wanted to get the inner `T` value out of the `Some`\ncase when using `Option<T>`; we can also handle `Option<T>` using `match`, as\nwe did with the `Coin` enum! Instead of comparing coins, we\u2019ll compare the\nvariants of `Option<T>`, but the way the `match` expression works remains the\nsame.\n\nLet\u2019s say we want to write a function that takes an `Option<i32>` and, if\nthere\u2019s a value inside, adds 1 to that value. If there isn\u2019t a value inside,\nthe function should return the `None` value and not attempt to perform any\noperations.\n\nThis function is very easy to write, thanks to `match`, and will look like\nListing 6-5.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-5: A function that uses a `match` expression on\nan `Option<i32>`</span>\n\nLet\u2019s examine the first execution of `plus_one` in more detail. When we call\n`plus_one(five)`, the variable `x` in the body of `plus_one` will have the\nvalue `Some(5)`. We then compare that against each match arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}\n```\n\nThe `Some(5)` value doesn\u2019t match the pattern `None`, so we continue to the\nnext arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:second_arm}}\n```\n\nDoes `Some(5)` match `Some(i)`? It does! We have the same variant. The `i`\nbinds to the value contained in `Some`, so `i` takes the value `5`. The code in\nthe match arm is then executed, so we add 1 to the value of `i` and create a\nnew `Some` value with our total `6` inside.\n\nNow let\u2019s consider the second call of `plus_one` in Listing 6-5, where `x` is\n`None`. We enter the `match` and compare to the first arm:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}\n```\n\nIt matches! There\u2019s no value to add to, so the program stops and returns the\n`None` value on the right side of `=>`. Because the first arm matched, no other\narms are compared.\n\nCombining `match` and enums is useful in many situations. You\u2019ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It\u2019s a bit tricky at first, but\nonce you get used to it, you\u2019ll wish you had it in all languages. It\u2019s\nconsistently a user favorite.\n\n### Matches Are Exhaustive\n\nThere\u2019s one other aspect of `match` we need to discuss: the arms\u2019 patterns must\ncover all possibilities. Consider this version of our `plus_one` function,\nwhich has a bug and won\u2019t compile:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/src/main.rs:here}}\n```\n\nWe didn\u2019t handle the `None` case, so this code will cause a bug. Luckily, it\u2019s\na bug Rust knows how to catch. If we try to compile this code, we\u2019ll get this\nerror:\n\n```console\n{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/output.txt}}\n```\n\nRust knows that we didn\u2019t cover every possible case, and even knows which\npattern we forgot! Matches in Rust are *exhaustive*: we must exhaust every last\npossibility in order for the code to be valid. Especially in the case of\n`Option<T>`, when Rust prevents us from forgetting to explicitly handle the\n`None` case, it protects us from assuming that we have a value when we might\nhave null, thus making the billion-dollar mistake discussed earlier impossible.\n\n### Catch-all Patterns and the `_` Placeholder\n\nUsing enums, we can also take special actions for a few particular values, but\nfor all other values take one default action. Imagine we\u2019re implementing a game\nwhere, if you roll a 3 on a dice roll, your player doesn\u2019t move, but instead\ngets a new fancy hat. If you roll a 7, your player loses a fancy hat. For all\nother values, your player moves that number of spaces on the game board. Here\u2019s\na `match` that implements that logic, with the result of the dice roll\nhardcoded rather than a random value, and all other logic represented by\nfunctions without bodies because actually implementing them is out of scope for\nthis example:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-15-binding-catchall/src/main.rs:here}}\n```\n\nFor the first two arms, the patterns are the literal values `3` and `7`. For\nthe last arm that covers every other possible value, the pattern is the\nvariable we\u2019ve chosen to name `other`. The code that runs for the `other` arm\nuses the variable by passing it to the `move_player` function.\n\nThis code compiles, even though we haven\u2019t listed all the possible values a\n`u8` can have, because the last pattern will match all values not specifically\nlisted. This catch-all pattern meets the requirement that `match` must be\nexhaustive. Note that we have to put the catch-all arm last because the\npatterns are evaluated in order. If we put the catch-all arm earlier, the other\narms would never run, so Rust will warn us if we add arms after a catch-all!\n\nRust also has a pattern we can use when we want a catch-all but don\u2019t want to\n*use* the value in the catch-all pattern: `_` is a special pattern that matches\nany value and does not bind to that value. This tells Rust we aren\u2019t going to\nuse the value, so Rust won\u2019t warn us about an unused variable.\n\nLet\u2019s change the rules of the game: now, if you roll anything other than a 3 or\na 7, you must roll again. We no longer need to use the catch-all value, so we\ncan change our code to use `_` instead of the variable named `other`:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-16-underscore-catchall/src/main.rs:here}}\n```\n\nThis example also meets the exhaustiveness requirement because we\u2019re explicitly\nignoring all other values in the last arm; we haven\u2019t forgotten anything.\n\nFinally, we\u2019ll change the rules of the game one more time so that nothing else\nhappens on your turn if you roll anything other than a 3 or a 7. We can express\nthat by using the unit value (the empty tuple type we mentioned in [\u201cThe Tuple\nType\u201d][tuples]<!-- ignore --> section) as the code that goes with the `_` arm:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-17-underscore-unit/src/main.rs:here}}\n```\n\nHere, we\u2019re telling Rust explicitly that we aren\u2019t going to use any other value\nthat doesn\u2019t match a pattern in an earlier arm, and we don\u2019t want to run any\ncode in this case.\n\nThere\u2019s more about patterns and matching that we\u2019ll cover in [Chapter\n18][ch18-00-patterns]<!-- ignore -->. For now, we\u2019re going to move on to the\n`if let` syntax, which can be useful in situations where the `match` expression\nis a bit wordy.\n\n[tuples]: ch03-02-data-types.html#the-tuple-type\n[ch18-00-patterns]: ch18-00-patterns.html\n",
          "qas": [
            {
              "question": "What is returned for the entire `match` expression?",
              "id": 100,
              "answers": [
                {
                  "text": "The code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression.\n",
                  "answer_start": 2689
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can 'match' do?",
              "id": 96,
              "answers": [
                {
                  "text": "Rust has an extremely powerful control flow construct called `match` that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches.",
                  "answer_start": 140
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can I do if Iwant to run multiple lines of code in a match arm?",
              "id": 101,
              "answers": [
                {
                  "text": "If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. ",
                  "answer_start": 3002
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does it make sense to combine `match` and enums?",
              "id": 103,
              "answers": [
                {
                  "text": "Combining `match` and enums is useful in many situations. You\u2019ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It\u2019s a bit tricky at first, but\nonce you get used to it, you\u2019ll wish you had it in all languages. It\u2019s\nconsistently a user favorite.",
                  "answer_start": 7588
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why 'match' expression is so good?",
              "id": 98,
              "answers": [
                {
                  "text": "The power of `match` comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled.",
                  "answer_start": 527
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can patterns be made um?",
              "id": 97,
              "answers": [
                {
                  "text": "Patterns can be made up of literal values,\nvariable names, wildcards, and many other things",
                  "answer_start": 327
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens after execute 'match'?",
              "id": 99,
              "answers": [
                {
                  "text": "When the `match` expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn\u2019t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need",
                  "answer_start": 2299
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an example of useful feature of match arms?",
              "id": 102,
              "answers": [
                {
                  "text": "Another useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern.",
                  "answer_start": 3468
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Validating References with Lifetimes\n\nLifetimes are another kind of generic that we\u2019ve already been using. Rather\nthan ensuring that a type has the behavior we want, lifetimes ensure that\nreferences are valid as long as we need them to be.\n\nOne detail we didn\u2019t discuss in the [\u201cReferences and\nBorrowing\u201d][references-and-borrowing]<!-- ignore --> section in Chapter 4 is\nthat every reference in Rust has a *lifetime*, which is the scope for which\nthat reference is valid. Most of the time, lifetimes are implicit and inferred,\njust like most of the time, types are inferred. We only must annotate types\nwhen multiple types are possible. In a similar way, we must annotate lifetimes\nwhen the lifetimes of references could be related in a few different ways. Rust\nrequires us to annotate the relationships using generic lifetime parameters to\nensure the actual references used at runtime will definitely be valid.\n\nAnnotating lifetimes is not even a concept most other programming languages\nhave, so this is going to feel unfamiliar. Although we won\u2019t cover lifetimes in\ntheir entirety in this chapter, we\u2019ll discuss common ways you might encounter\nlifetime syntax so you can get comfortable with the concept.\n\n### Preventing Dangling References with Lifetimes\n\nThe main aim of lifetimes is to prevent *dangling references*, which cause a\nprogram to reference data other than the data it\u2019s intended to reference.\nConsider the program in Listing 10-16, which has an outer scope and an inner\nscope.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-16/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-16: An attempt to use a reference whose value\nhas gone out of scope</span>\n\n> Note: The examples in Listings 10-16, 10-17, and 10-23 declare variables\n> without giving them an initial value, so the variable name exists in the\n> outer scope. At first glance, this might appear to be in conflict with Rust\u2019s\n> having no null values. However, if we try to use a variable before giving it\n> a value, we\u2019ll get a compile-time error, which shows that Rust indeed does\n> not allow null values.\n\nThe outer scope declares a variable named `r` with no initial value, and the\ninner scope declares a variable named `x` with the initial value of 5. Inside\nthe inner scope, we attempt to set the value of `r` as a reference to `x`. Then\nthe inner scope ends, and we attempt to print the value in `r`. This code won\u2019t\ncompile because the value `r` is referring to has gone out of scope before we\ntry to use it. Here is the error message:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-16/output.txt}}\n```\n\nThe variable `x` doesn\u2019t \u201clive long enough.\u201d The reason is that `x` will be out\nof scope when the inner scope ends on line 7. But `r` is still valid for the\nouter scope; because its scope is larger, we say that it \u201clives longer.\u201d If\nRust allowed this code to work, `r` would be referencing memory that was\ndeallocated when `x` went out of scope, and anything we tried to do with `r`\nwouldn\u2019t work correctly. So how does Rust determine that this code is invalid?\nIt uses a borrow checker.\n\n### The Borrow Checker\n\nThe Rust compiler has a *borrow checker* that compares scopes to determine\nwhether all borrows are valid. Listing 10-17 shows the same code as Listing\n10-16 but with annotations showing the lifetimes of the variables.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-17/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-17: Annotations of the lifetimes of `r` and\n`x`, named `'a` and `'b`, respectively</span>\n\nHere, we\u2019ve annotated the lifetime of `r` with `'a` and the lifetime of `x`\nwith `'b`. As you can see, the inner `'b` block is much smaller than the outer\n`'a` lifetime block. At compile time, Rust compares the size of the two\nlifetimes and sees that `r` has a lifetime of `'a` but that it refers to memory\nwith a lifetime of `'b`. The program is rejected because `'b` is shorter than\n`'a`: the subject of the reference doesn\u2019t live as long as the reference.\n\nListing 10-18 fixes the code so it doesn\u2019t have a dangling reference and\ncompiles without any errors.\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-18/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-18: A valid reference because the data has a\nlonger lifetime than the reference</span>\n\nHere, `x` has the lifetime `'b`, which in this case is larger than `'a`. This\nmeans `r` can reference `x` because Rust knows that the reference in `r` will\nalways be valid while `x` is valid.\n\nNow that you know where the lifetimes of references are and how Rust analyzes\nlifetimes to ensure references will always be valid, let\u2019s explore generic\nlifetimes of parameters and return values in the context of functions.\n\n### Generic Lifetimes in Functions\n\nWe\u2019ll write a function that returns the longer of two string slices. This\nfunction will take two string slices and return a single string slice. After\nwe\u2019ve implemented the `longest` function, the code in Listing 10-19 should\nprint `The longest string is abcd`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-19/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-19: A `main` function that calls the `longest`\nfunction to find the longer of two string slices</span>\n\nNote that we want the function to take string slices, which are references,\nrather than strings, because we don\u2019t want the `longest` function to take\nownership of its parameters. Refer to the [\u201cString Slices as\nParameters\u201d][string-slices-as-parameters]<!-- ignore --> section in Chapter 4\nfor more discussion about why the parameters we use in Listing 10-19 are the\nones we want.\n\nIf we try to implement the `longest` function as shown in Listing 10-20, it\nwon\u2019t compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-20: An implementation of the `longest`\nfunction that returns the longer of two string slices but does not yet\ncompile</span>\n\nInstead, we get the following error that talks about lifetimes:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/output.txt}}\n```\n\nThe help text reveals that the return type needs a generic lifetime parameter\non it because Rust can\u2019t tell whether the reference being returned refers to\n`x` or `y`. Actually, we don\u2019t know either, because the `if` block in the body\nof this function returns a reference to `x` and the `else` block returns a\nreference to `y`!\n\nWhen we\u2019re defining this function, we don\u2019t know the concrete values that will\nbe passed into this function, so we don\u2019t know whether the `if` case or the\n`else` case will execute. We also don\u2019t know the concrete lifetimes of the\nreferences that will be passed in, so we can\u2019t look at the scopes as we did in\nListings 10-17 and 10-18 to determine whether the reference we return will\nalways be valid. The borrow checker can\u2019t determine this either, because it\ndoesn\u2019t know how the lifetimes of `x` and `y` relate to the lifetime of the\nreturn value. To fix this error, we\u2019ll add generic lifetime parameters that\ndefine the relationship between the references so the borrow checker can\nperform its analysis.\n\n### Lifetime Annotation Syntax\n\nLifetime annotations don\u2019t change how long any of the references live. Rather,\nthey describe the relationships of the lifetimes of multiple references to each\nother without affecting the lifetimes. Just as functions can accept any type\nwhen the signature specifies a generic type parameter, functions can accept\nreferences with any lifetime by specifying a generic lifetime parameter.\n\nLifetime annotations have a slightly unusual syntax: the names of lifetime\nparameters must start with an apostrophe (`'`) and are usually all lowercase\nand very short, like generic types. Most people use the name `'a` for the first\nlifetime annotation. We place lifetime parameter annotations after the `&` of a\nreference, using a space to separate the annotation from the reference\u2019s type.\n\nHere are some examples: a reference to an `i32` without a lifetime parameter, a\nreference to an `i32` that has a lifetime parameter named `'a`, and a mutable\nreference to an `i32` that also has the lifetime `'a`.\n\n```rust,ignore\n&i32        // a reference\n&'a i32     // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime\n```\n\nOne lifetime annotation by itself doesn\u2019t have much meaning, because the\nannotations are meant to tell Rust how generic lifetime parameters of multiple\nreferences relate to each other. Let\u2019s examine how the lifetime annotations\nrelate to each other in the context of the `longest` function.\n\n### Lifetime Annotations in Function Signatures\n\nTo use lifetime annotations in function signatures, we need to declare the\ngeneric *lifetime* parameters inside angle brackets between the function name\nand the parameter list, just as we did with generic *type* parameters.\n\nWe want the signature to express the following constraint: the returned\nreference will be valid as long as both the parameters are valid. This is the\nrelationship between lifetimes of the parameters and the return value. We\u2019ll\nname the lifetime `'a` and then add it to each reference, as shown in Listing\n10-21.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-21: The `longest` function definition\nspecifying that all the references in the signature must have the same lifetime\n`'a`</span>\n\nThis code should compile and produce the result we want when we use it with the\n`main` function in Listing 10-19.\n\nThe function signature now tells Rust that for some lifetime `'a`, the function\ntakes two parameters, both of which are string slices that live at least as\nlong as lifetime `'a`. The function signature also tells Rust that the string\nslice returned from the function will live at least as long as lifetime `'a`.\nIn practice, it means that the lifetime of the reference returned by the\n`longest` function is the same as the smaller of the lifetimes of the values\nreferred to by the function arguments. These relationships are what we want\nRust to use when analyzing this code.\n\nRemember, when we specify the lifetime parameters in this function signature,\nwe\u2019re not changing the lifetimes of any values passed in or returned. Rather,\nwe\u2019re specifying that the borrow checker should reject any values that don\u2019t\nadhere to these constraints. Note that the `longest` function doesn\u2019t need to\nknow exactly how long `x` and `y` will live, only that some scope can be\nsubstituted for `'a` that will satisfy this signature.\n\nWhen annotating lifetimes in functions, the annotations go in the function\nsignature, not in the function body. The lifetime annotations become part of\nthe contract of the function, much like the types in the signature. Having\nfunction signatures contain the lifetime contract means the analysis the Rust\ncompiler does can be simpler. If there\u2019s a problem with the way a function is\nannotated or the way it is called, the compiler errors can point to the part of\nour code and the constraints more precisely. If, instead, the Rust compiler\nmade more inferences about what we intended the relationships of the lifetimes\nto be, the compiler might only be able to point to a use of our code many steps\naway from the cause of the problem.\n\nWhen we pass concrete references to `longest`, the concrete lifetime that is\nsubstituted for `'a` is the part of the scope of `x` that overlaps with the\nscope of `y`. In other words, the generic lifetime `'a` will get the concrete\nlifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because\nwe\u2019ve annotated the returned reference with the same lifetime parameter `'a`,\nthe returned reference will also be valid for the length of the smaller of the\nlifetimes of `x` and `y`.\n\nLet\u2019s look at how the lifetime annotations restrict the `longest` function by\npassing in references that have different concrete lifetimes. Listing 10-22 is\na straightforward example.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-22: Using the `longest` function with\nreferences to `String` values that have different concrete lifetimes</span>\n\nIn this example, `string1` is valid until the end of the outer scope, `string2`\nis valid until the end of the inner scope, and `result` references something\nthat is valid until the end of the inner scope. Run this code, and you\u2019ll see\nthat the borrow checker approves; it will compile and print `The longest string\nis long string is long`.\n\nNext, let\u2019s try an example that shows that the lifetime of the reference in\n`result` must be the smaller lifetime of the two arguments. We\u2019ll move the\ndeclaration of the `result` variable outside the inner scope but leave the\nassignment of the value to the `result` variable inside the scope with\n`string2`. Then we\u2019ll move the `println!` that uses `result` to outside the\ninner scope, after the inner scope has ended. The code in Listing 10-23 will\nnot compile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-23: Attempting to use `result` after `string2`\nhas gone out of scope</span>\n\nWhen we try to compile this code, we get this error:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/output.txt}}\n```\n\nThe error shows that for `result` to be valid for the `println!` statement,\n`string2` would need to be valid until the end of the outer scope. Rust knows\nthis because we annotated the lifetimes of the function parameters and return\nvalues using the same lifetime parameter `'a`.\n\nAs humans, we can look at this code and see that `string1` is longer than\n`string2` and therefore `result` will contain a reference to `string1`.\nBecause `string1` has not gone out of scope yet, a reference to `string1` will\nstill be valid for the `println!` statement. However, the compiler can\u2019t see\nthat the reference is valid in this case. We\u2019ve told Rust that the lifetime of\nthe reference returned by the `longest` function is the same as the smaller of\nthe lifetimes of the references passed in. Therefore, the borrow checker\ndisallows the code in Listing 10-23 as possibly having an invalid reference.\n\nTry designing more experiments that vary the values and lifetimes of the\nreferences passed in to the `longest` function and how the returned reference\nis used. Make hypotheses about whether or not your experiments will pass the\nborrow checker before you compile; then check to see if you\u2019re right!\n\n### Thinking in Terms of Lifetimes\n\nThe way in which you need to specify lifetime parameters depends on what your\nfunction is doing. For example, if we changed the implementation of the\n`longest` function to always return the first parameter rather than the longest\nstring slice, we wouldn\u2019t need to specify a lifetime on the `y` parameter. The\nfollowing code will compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-08-only-one-reference-with-lifetime/src/main.rs:here}}\n```\n\nWe\u2019ve specified a lifetime parameter `'a` for the parameter `x` and the return\ntype, but not for the parameter `y`, because the lifetime of `y` does not have\nany relationship with the lifetime of `x` or the return value.\n\nWhen returning a reference from a function, the lifetime parameter for the\nreturn type needs to match the lifetime parameter for one of the parameters. If\nthe reference returned does *not* refer to one of the parameters, it must refer\nto a value created within this function. However, this would be a dangling\nreference because the value will go out of scope at the end of the function.\nConsider this attempted implementation of the `longest` function that won\u2019t\ncompile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/src/main.rs:here}}\n```\n\nHere, even though we\u2019ve specified a lifetime parameter `'a` for the return\ntype, this implementation will fail to compile because the return value\nlifetime is not related to the lifetime of the parameters at all. Here is the\nerror message we get:\n\n```console\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/output.txt}}\n```\n\nThe problem is that `result` goes out of scope and gets cleaned up at the end\nof the `longest` function. We\u2019re also trying to return a reference to `result`\nfrom the function. There is no way we can specify lifetime parameters that\nwould change the dangling reference, and Rust won\u2019t let us create a dangling\nreference. In this case, the best fix would be to return an owned data type\nrather than a reference so the calling function is then responsible for\ncleaning up the value.\n\nUltimately, lifetime syntax is about connecting the lifetimes of various\nparameters and return values of functions. Once they\u2019re connected, Rust has\nenough information to allow memory-safe operations and disallow operations that\nwould create dangling pointers or otherwise violate memory safety.\n\n### Lifetime Annotations in Struct Definitions\n\nSo far, the structs we\u2019ve defined all hold owned types. We can define structs to\nhold references, but in that case we would need to add a lifetime annotation on\nevery reference in the struct\u2019s definition. Listing 10-24 has a struct named\n`ImportantExcerpt` that holds a string slice.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-24/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 10-24: A struct that holds a reference, requiring\na lifetime annotation</span>\n\nThis struct has the single field `part` that holds a string slice, which is a\nreference. As with generic data types, we declare the name of the generic\nlifetime parameter inside angle brackets after the name of the struct so we can\nuse the lifetime parameter in the body of the struct definition. This\nannotation means an instance of `ImportantExcerpt` can\u2019t outlive the reference\nit holds in its `part` field.\n\nThe `main` function here creates an instance of the `ImportantExcerpt` struct\nthat holds a reference to the first sentence of the `String` owned by the\nvariable `novel`. The data in `novel` exists before the `ImportantExcerpt`\ninstance is created. In addition, `novel` doesn\u2019t go out of scope until after\nthe `ImportantExcerpt` goes out of scope, so the reference in the\n`ImportantExcerpt` instance is valid.\n\n### Lifetime Elision\n\nYou\u2019ve learned that every reference has a lifetime and that you need to specify\nlifetime parameters for functions or structs that use references. However, in\nChapter 4 we had a function in Listing 4-9, shown again in Listing 10-25, that\ncompiled without lifetime annotations.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-25: A function we defined in Listing 4-9 that\ncompiled without lifetime annotations, even though the parameter and return\ntype are references</span>\n\nThe reason this function compiles without lifetime annotations is historical:\nin early versions (pre-1.0) of Rust, this code wouldn\u2019t have compiled because\nevery reference needed an explicit lifetime. At that time, the function\nsignature would have been written like this:\n\n```rust,ignore\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nAfter writing a lot of Rust code, the Rust team found that Rust programmers\nwere entering the same lifetime annotations over and over in particular\nsituations. These situations were predictable and followed a few deterministic\npatterns. The developers programmed these patterns into the compiler\u2019s code so\nthe borrow checker could infer the lifetimes in these situations and wouldn\u2019t\nneed explicit annotations.\n\nThis piece of Rust history is relevant because it\u2019s possible that more\ndeterministic patterns will emerge and be added to the compiler. In the future,\neven fewer lifetime annotations might be required.\n\nThe patterns programmed into Rust\u2019s analysis of references are called the\n*lifetime elision rules*. These aren\u2019t rules for programmers to follow; they\u2019re\na set of particular cases that the compiler will consider, and if your code\nfits these cases, you don\u2019t need to write the lifetimes explicitly.\n\nThe elision rules don\u2019t provide full inference. If Rust deterministically\napplies the rules but there is still ambiguity as to what lifetimes the\nreferences have, the compiler won\u2019t guess what the lifetime of the remaining\nreferences should be. Instead of guessing, the compiler will give you an error\nthat you can resolve by adding the lifetime annotations.\n\nLifetimes on function or method parameters are called *input lifetimes*, and\nlifetimes on return values are called *output lifetimes*.\n\nThe compiler uses three rules to figure out the lifetimes of the references\nwhen there aren\u2019t explicit annotations. The first rule applies to input\nlifetimes, and the second and third rules apply to output lifetimes. If the\ncompiler gets to the end of the three rules and there are still references for\nwhich it can\u2019t figure out lifetimes, the compiler will stop with an error.\nThese rules apply to `fn` definitions as well as `impl` blocks.\n\nThe first rule is that the compiler assigns a lifetime parameter to each\nparameter that\u2019s a reference. In other words, a function with one parameter gets\none lifetime parameter: `fn foo<'a>(x: &'a i32)`; a function with two\nparameters gets two separate lifetime parameters: `fn foo<'a, 'b>(x: &'a i32,\ny: &'b i32)`; and so on.\n\nThe second rule is that, if there is exactly one input lifetime parameter, that\nlifetime is assigned to all output lifetime parameters: `fn foo<'a>(x: &'a i32)\n-> &'a i32`.\n\nThe third rule is that, if there are multiple input lifetime parameters, but\none of them is `&self` or `&mut self` because this is a method, the lifetime of\n`self` is assigned to all output lifetime parameters. This third rule makes\nmethods much nicer to read and write because fewer symbols are necessary.\n\nLet\u2019s pretend we\u2019re the compiler. We\u2019ll apply these rules to figure out the\nlifetimes of the references in the signature of the `first_word` function in\nListing 10-25. The signature starts without any lifetimes associated with the\nreferences:\n\n```rust,ignore\nfn first_word(s: &str) -> &str {\n```\n\nThen the compiler applies the first rule, which specifies that each parameter\ngets its own lifetime. We\u2019ll call it `'a` as usual, so now the signature is\nthis:\n\n```rust,ignore\nfn first_word<'a>(s: &'a str) -> &str {\n```\n\nThe second rule applies because there is exactly one input lifetime. The second\nrule specifies that the lifetime of the one input parameter gets assigned to\nthe output lifetime, so the signature is now this:\n\n```rust,ignore\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nNow all the references in this function signature have lifetimes, and the\ncompiler can continue its analysis without needing the programmer to annotate\nthe lifetimes in this function signature.\n\nLet\u2019s look at another example, this time using the `longest` function that had\nno lifetime parameters when we started working with it in Listing 10-20:\n\n```rust,ignore\nfn longest(x: &str, y: &str) -> &str {\n```\n\nLet\u2019s apply the first rule: each parameter gets its own lifetime. This time we\nhave two parameters instead of one, so we have two lifetimes:\n\n```rust,ignore\nfn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {\n```\n\nYou can see that the second rule doesn\u2019t apply because there is more than one\ninput lifetime. The third rule doesn\u2019t apply either, because `longest` is a\nfunction rather than a method, so none of the parameters are `self`. After\nworking through all three rules, we still haven\u2019t figured out what the return\ntype\u2019s lifetime is. This is why we got an error trying to compile the code in\nListing 10-20: the compiler worked through the lifetime elision rules but still\ncouldn\u2019t figure out all the lifetimes of the references in the signature.\n\nBecause the third rule really only applies in method signatures, we\u2019ll look at\nlifetimes in that context next to see why the third rule means we don\u2019t have to\nannotate lifetimes in method signatures very often.\n\n### Lifetime Annotations in Method Definitions\n\nWhen we implement methods on a struct with lifetimes, we use the same syntax as\nthat of generic type parameters shown in Listing 10-11. Where we declare and\nuse the lifetime parameters depends on whether they\u2019re related to the struct\nfields or the method parameters and return values.\n\nLifetime names for struct fields always need to be declared after the `impl`\nkeyword and then used after the struct\u2019s name, because those lifetimes are part\nof the struct\u2019s type.\n\nIn method signatures inside the `impl` block, references might be tied to the\nlifetime of references in the struct\u2019s fields, or they might be independent. In\naddition, the lifetime elision rules often make it so that lifetime annotations\naren\u2019t necessary in method signatures. Let\u2019s look at some examples using the\nstruct named `ImportantExcerpt` that we defined in Listing 10-24.\n\nFirst, we\u2019ll use a method named `level` whose only parameter is a reference to\n`self` and whose return value is an `i32`, which is not a reference to anything:\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:1st}}\n```\n\nThe lifetime parameter declaration after `impl` and its use after the type name\nare required, but we\u2019re not required to annotate the lifetime of the reference\nto `self` because of the first elision rule.\n\nHere is an example where the third lifetime elision rule applies:\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:3rd}}\n```\n\nThere are two input lifetimes, so Rust applies the first lifetime elision rule\nand gives both `&self` and `announcement` their own lifetimes. Then, because\none of the parameters is `&self`, the return type gets the lifetime of `&self`,\nand all lifetimes have been accounted for.\n\n### The Static Lifetime\n\nOne special lifetime we need to discuss is `'static`, which denotes that the\naffected reference *can* live for the entire duration of the program. All\nstring literals have the `'static` lifetime, which we can annotate as follows:\n\n```rust\nlet s: &'static str = \"I have a static lifetime.\";\n```\n\nThe text of this string is stored directly in the program\u2019s binary, which\nis always available. Therefore, the lifetime of all string literals is\n`'static`.\n\nYou might see suggestions to use the `'static` lifetime in error messages. But\nbefore specifying `'static` as the lifetime for a reference, think about\nwhether the reference you have actually lives the entire lifetime of your\nprogram or not, and whether you want it to. Most of the time, an error message\nsuggesting the `'static` lifetime results from attempting to create a dangling\nreference or a mismatch of the available lifetimes. In such cases, the solution\nis fixing those problems, not specifying the `'static` lifetime.\n\n## Generic Type Parameters, Trait Bounds, and Lifetimes Together\n\nLet\u2019s briefly look at the syntax of specifying generic type parameters, trait\nbounds, and lifetimes all in one function!\n\n```rust\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-11-generics-traits-and-lifetimes/src/main.rs:here}}\n```\n\nThis is the `longest` function from Listing 10-21 that returns the longer of\ntwo string slices. But now it has an extra parameter named `ann` of the generic\ntype `T`, which can be filled in by any type that implements the `Display`\ntrait as specified by the `where` clause. This extra parameter will be printed\nusing `{}`, which is why the `Display` trait bound is necessary. Because\nlifetimes are a type of generic, the declarations of the lifetime parameter\n`'a` and the generic type parameter `T` go in the same list inside the angle\nbrackets after the function name.\n\n## Summary\n\nWe covered a lot in this chapter! Now that you know about generic type\nparameters, traits and trait bounds, and generic lifetime parameters, you\u2019re\nready to write code without repetition that works in many different situations.\nGeneric type parameters let you apply the code to different types. Traits and\ntrait bounds ensure that even though the types are generic, they\u2019ll have the\nbehavior the code needs. You learned how to use lifetime annotations to ensure\nthat this flexible code won\u2019t have any dangling references. And all of this\nanalysis happens at compile time, which doesn\u2019t affect runtime performance!\n\nBelieve it or not, there is much more to learn on the topics we discussed in\nthis chapter: Chapter 17 discusses trait objects, which are another way to use\ntraits. There are also more complex scenarios involving lifetime annotations\nthat you will only need in very advanced scenarios; for those, you should read\nthe [Rust Reference][reference]. But next, you\u2019ll learn how to write tests in\nRust so you can make sure your code is working the way it should.\n\n[references-and-borrowing]:\nch04-02-references-and-borrowing.html#references-and-borrowing\n[string-slices-as-parameters]:\nch04-03-slices.html#string-slices-as-parameters\n[reference]: ../reference/index.html\n",
          "qas": [
            {
              "question": "What is a static lifetime?",
              "id": 2162,
              "answers": [
                {
                  "text": "the\naffected reference *can* live for the entire duration of the program",
                  "answer_start": 27129
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the naming convention of lifetimes?",
              "id": 2156,
              "answers": [
                {
                  "text": "the names of lifetime\nparameters must start with an apostrophe (`'`) and are usually all lowercase\nand very short, like generic types",
                  "answer_start": 8016
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are Rust references permanent?",
              "id": 2152,
              "answers": [
                {
                  "text": "every reference in Rust has a *lifetime*, which is the scope for which\nthat reference is valid",
                  "answer_start": 379
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is it possible to know which lifetime of reference will be passed?",
              "id": 2154,
              "answers": [
                {
                  "text": "We also don\u2019t know the concrete lifetimes of the\nreferences that will be passed in",
                  "answer_start": 7018
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are output lifetimes?",
              "id": 2161,
              "answers": [
                {
                  "text": "lifetimes on return values",
                  "answer_start": 21672
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Should I use 'static' lifetime in error messages?",
              "id": 2190,
              "answers": [
                {
                  "text": " In such cases, the solution\nis fixing those problems, not specifying the `'static` lifetime.",
                  "answer_start": 27943
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do references have to be tied to struct's fields?",
              "id": 2191,
              "answers": [
                {
                  "text": "In method signatures inside the `impl` block, references might be tied to the\nlifetime of references in the struct\u2019s fields, or they might be independent",
                  "answer_start": 25662
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do lifetime annonations affect how long reference live?",
              "id": 2155,
              "answers": [
                {
                  "text": "Lifetime annotations don\u2019t change how long any of the references live",
                  "answer_start": 7577
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do elision rule provide inference?",
              "id": 2189,
              "answers": [
                {
                  "text": "The elision rules don\u2019t provide full inference.",
                  "answer_start": 21235
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where should lifetime name be placed?",
              "id": 2188,
              "answers": [
                {
                  "text": "after the `impl`\nkeyword and then used after the struct\u2019s name",
                  "answer_start": 25542
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are lifetimes implicit?",
              "id": 2153,
              "answers": [
                {
                  "text": "lifetimes are implicit and inferred",
                  "answer_start": 493
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do lifetimes ensure?",
              "id": 2150,
              "answers": [
                {
                  "text": "references are valid as long as we need them to be",
                  "answer_start": 191
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can we define structs to keep references?",
              "id": 2159,
              "answers": [
                {
                  "text": "We can define structs to\nhold references, but in that case we would need to add a lifetime annotation on\nevery reference in the struct\u2019s definition",
                  "answer_start": 18007
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to use lifetime annotations in function signature?",
              "id": 2157,
              "answers": [
                {
                  "text": "we need to declare the\ngeneric *lifetime* parameters inside angle brackets between the function name\nand the parameter list",
                  "answer_start": 9123
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where should the annotation of lifetime be placed?",
              "id": 2158,
              "answers": [
                {
                  "text": "the annotations go in the function\nsignature, not in the function body",
                  "answer_start": 11115
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are lifetimes used for?",
              "id": 2067,
              "answers": [
                {
                  "text": "The main aim of lifetimes is to prevent *dangling references*, which cause a\nprogram to reference data other than the data it\u2019s intended to reference.",
                  "answer_start": 1263
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Recoverable Errors with `Result`\n\nMost errors aren\u2019t serious enough to require the program to stop entirely.\nSometimes, when a function fails, it\u2019s for a reason that you can easily\ninterpret and respond to. For example, if you try to open a file and that\noperation fails because the file doesn\u2019t exist, you might want to create the\nfile instead of terminating the process.\n\nRecall from [\u201cHandling Potential Failure with `Result`\u201d][handle_failure]<!--\nignore --> in Chapter 2 that the `Result` enum is defined as having two\nvariants, `Ok` and `Err`, as follows:\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThe `T` and `E` are generic type parameters: we\u2019ll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that `T` represents\nthe type of the value that will be returned in a success case within the `Ok`\nvariant, and `E` represents the type of the error that will be returned in a\nfailure case within the `Err` variant. Because `Result` has these generic type\nparameters, we can use the `Result` type and the functions defined on it in\nmany different situations where the successful value and error value we want to\nreturn may differ.\n\nLet\u2019s call a function that returns a `Result` value because the function could\nfail. In Listing 9-3 we try to open a file.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-03/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-3: Opening a file</span>\n\nThe return type of `File::open` is a `Result<T, E>`. The generic parameter `T`\nhas been filled in by the implementation of `File::open` with the type of the\nsuccess value, `std::fs::File`, which is a file handle. The type of `E` used in\nthe error value is `std::io::Error`. This return type means the call to\n`File::open` might succeed and return a file handle that we can read from or\nwrite to. The function call also might fail: for example, the file might not\nexist, or we might not have permission to access the file. The `File::open`\nfunction needs to have a way to tell us whether it succeeded or failed and at\nthe same time give us either the file handle or error information. This\ninformation is exactly what the `Result` enum conveys.\n\nIn the case where `File::open` succeeds, the value in the variable\n`greeting_file_result` will be an instance of `Ok` that contains a file handle.\nIn the case where it fails, the value in `greeting_file_result` will be an\ninstance of `Err` that contains more information about the kind of error that\nhappened.\n\nWe need to add to the code in Listing 9-3 to take different actions depending\non the value `File::open` returns. Listing 9-4 shows one way to handle the\n`Result` using a basic tool, the `match` expression that we discussed in\nChapter 6.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-4: Using a `match` expression to handle the\n`Result` variants that might be returned</span>\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been\nbrought into scope by the prelude, so we don\u2019t need to specify `Result::`\nbefore the `Ok` and `Err` variants in the `match` arms.\n\nWhen the result is `Ok`, this code will return the inner `file` value out of\nthe `Ok` variant, and we then assign that file handle value to the variable\n`greeting_file`. After the `match`, we can use the file handle for reading or\nwriting.\n\nThe other arm of the `match` handles the case where we get an `Err` value from\n`File::open`. In this example, we\u2019ve chosen to call the `panic!` macro. If\nthere\u2019s no file named *hello.txt* in our current directory and we run this\ncode, we\u2019ll see the following output from the `panic!` macro:\n\n```console\n{{#include ../listings/ch09-error-handling/listing-09-04/output.txt}}\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### Matching on Different Errors\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed.\nHowever, we want to take different actions for different failure reasons: if\n`File::open` failed because the file doesn\u2019t exist, we want to create the file\nand return the handle to the new file. If `File::open` failed for any other\nreason\u2014for example, because we didn\u2019t have permission to open the file\u2014we still\nwant the code to `panic!` in the same way as it did in Listing 9-4. For this we\nadd an inner `match` expression, shown in Listing 9-5.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-5: Handling different kinds of errors in\ndifferent ways</span>\n\nThe type of the value that `File::open` returns inside the `Err` variant is\n`io::Error`, which is a struct provided by the standard library. This struct\nhas a method `kind` that we can call to get an `io::ErrorKind` value. The enum\n`io::ErrorKind` is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an `io`\noperation. The variant we want to use is `ErrorKind::NotFound`, which indicates\nthe file we\u2019re trying to open doesn\u2019t exist yet. So we match on\n`greeting_file_result`, but we also have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned\nby `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is,\nwe try to create the file with `File::create`. However, because `File::create`\ncould also fail, we need a second arm in the inner `match` expression. When the\nfile can\u2019t be created, a different error message is printed. The second arm of\nthe outer `match` stays the same, so the program panics on any error besides\nthe missing file error.\n\n> ### Alternatives to Using `match` with `Result<T, E>`\n>\n> That\u2019s a lot of `match`! The `match` expression is very useful but also very\n> much a primitive. In Chapter 13, you\u2019ll learn about closures, which are used\n> with many of the methods defined on `Result<T, E>`. These methods can be more\n> concise than using `match` when handling `Result<T, E>` values in your code.\n>\n> For example, here\u2019s another way to write the same logic as shown in Listing\n> 9-5, this time using closures and the `unwrap_or_else` method:\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore\n> use std::fs::File;\n> use std::io::ErrorKind;\n>\n> fn main() {\n>     let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| {\n>         if error.kind() == ErrorKind::NotFound {\n>             File::create(\"hello.txt\").unwrap_or_else(|error| {\n>                 panic!(\"Problem creating the file: {:?}\", error);\n>             })\n>         } else {\n>             panic!(\"Problem opening the file: {:?}\", error);\n>         }\n>     });\n> }\n> ```\n>\n> Although this code has the same behavior as Listing 9-5, it doesn\u2019t contain\n> any `match` expressions and is cleaner to read. Come back to this example\n> after you\u2019ve read Chapter 13, and look up the `unwrap_or_else` method in the\n> standard library documentation. Many more of these methods can clean up huge\n> nested `match` expressions when you\u2019re dealing with errors.\n\n### Shortcuts for Panic on Error: `unwrap` and `expect`\n\nUsing `match` works well enough, but it can be a bit verbose and doesn\u2019t always\ncommunicate intent well. The `Result<T, E>` type has many helper methods\ndefined on it to do various, more specific tasks. The `unwrap` method is a\nshortcut method implemented just like the `match` expression we wrote in\nListing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return\nthe value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will\ncall the `panic!` macro for us. Here is an example of `unwrap` in action:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-04-unwrap/src/main.rs}}\n```\n\nIf we run this code without a *hello.txt* file, we\u2019ll see an error message from\nthe `panic!` call that the `unwrap` method makes:\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-04-unwrap\ncargo run\ncopy and paste relevant text\n-->\n\n```text\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:4:49\n```\n\nSimilarly, the `expect` method lets us also choose the `panic!` error message.\nUsing `expect` instead of `unwrap` and providing good error messages can convey\nyour intent and make tracking down the source of a panic easier. The syntax of\n`expect` looks like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic\n{{#rustdoc_include ../listings/ch09-error-handling/no-listing-05-expect/src/main.rs}}\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call\nthe `panic!` macro. The error message used by `expect` in its call to `panic!`\nwill be the parameter that we pass to `expect`, rather than the default\n`panic!` message that `unwrap` uses. Here\u2019s what it looks like:\n\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-05-expect\ncargo run\ncopy and paste relevant text\n-->\n\n```text\nthread 'main' panicked at 'hello.txt should be included in this project: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:5:10\n```\n\nIn production-quality code, most Rustaceans choose `expect` rather than\n`unwrap` and give more context about why the operation is expected to always\nsucceed. That way, if your assumptions are ever proven wrong, you have more\ninformation to use in debugging.\n\n### Propagating Errors\n\nWhen a function\u2019s implementation calls something that might fail, instead of\nhandling the error within the function itself, you can return the error to the\ncalling code so that it can decide what to do. This is known as *propagating*\nthe error and gives more control to the calling code, where there might be more\ninformation or logic that dictates how the error should be handled than what\nyou have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn\u2019t exist or can\u2019t be read, this function will return those errors\nto the code that called the function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-6: A function that returns errors to the\ncalling code using `match`</span>\n\nThis function can be written in a much shorter way, but we\u2019re going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe\u2019ll show the shorter way. Let\u2019s look at the return type of the function\nfirst: `Result<String, io::Error>`. This means the function is returning a\nvalue of the type `Result<T, E>` where the generic parameter `T` has been\nfilled in with the concrete type `String`, and the generic type `E` has been\nfilled in with the concrete type `io::Error`.\n\nIf this function succeeds without any problems, the code that calls this\nfunction will receive an `Ok` value that holds a `String`\u2014the username that\nthis function read from the file. If this function encounters any problems, the\ncalling code will receive an `Err` value that holds an instance of `io::Error`\nthat contains more information about what the problems were. We chose\n`io::Error` as the return type of this function because that happens to be the\ntype of the error value returned from both of the operations we\u2019re calling in\nthis function\u2019s body that might fail: the `File::open` function and the\n`read_to_string` method.\n\nThe body of the function starts by calling the `File::open` function. Then we\nhandle the `Result` value with a `match` similar to the `match` in Listing 9-4.\nIf `File::open` succeeds, the file handle in the pattern variable `file`\nbecomes the value in the mutable variable `username_file` and the function\ncontinues. In the `Err` case, instead of calling `panic!`, we use the `return`\nkeyword to return early out of the function entirely and pass the error value\nfrom `File::open`, now in the pattern variable `e`, back to the calling code as\nthis function\u2019s error value.\n\nSo if we have a file handle in `username_file`, the function then creates a new\n`String` in variable `username` and calls the `read_to_string` method on\nthe file handle in `username_file` to read the contents of the file into\n`username`. The `read_to_string` method also returns a `Result` because it\nmight fail, even though `File::open` succeeded. So we need another `match` to\nhandle that `Result`: if `read_to_string` succeeds, then our function has\nsucceeded, and we return the username from the file that\u2019s now in `username`\nwrapped in an `Ok`. If `read_to_string` fails, we return the error value in the\nsame way that we returned the error value in the `match` that handled the\nreturn value of `File::open`. However, we don\u2019t need to explicitly say\n`return`, because this is the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value\nthat contains a username or an `Err` value that contains an `io::Error`. It\u2019s\nup to the calling code to decide what to do with those values. If the calling\ncode gets an `Err` value, it could call `panic!` and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don\u2019t have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator `?` to make this easier.\n\n#### A Shortcut for Propagating Errors: the `?` Operator\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the\nsame functionality as in Listing 9-6, but this implementation uses the\n`?` operator.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-7: A function that returns errors to the\ncalling code using the `?` operator</span>\n\nThe `?` placed after a `Result` value is defined to work in almost the same way\nas the `match` expressions we defined to handle the `Result` values in Listing\n9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will\nget returned from this expression, and the program will continue. If the value\nis an `Err`, the `Err` will be returned from the whole function as if we had\nused the `return` keyword so the error value gets propagated to the calling\ncode.\n\nThere is a difference between what the `match` expression from Listing 9-6 does\nand what the `?` operator does: error values that have the `?` operator called\non them go through the `from` function, defined in the `From` trait in the\nstandard library, which is used to convert values from one type into another.\nWhen the `?` operator calls the `from` function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent\nall the ways a function might fail, even if parts might fail for many different\nreasons.\n\nFor example, we could change the `read_username_from_file` function in Listing\n9-7 to return a custom error type named `OurError` that we define. If we also\ndefine `impl From<io::Error> for OurError` to construct an instance of\n`OurError` from an `io::Error`, then the `?` operator calls in the body of\n`read_username_from_file` will call `from` and convert the error types without\nneeding to add any more code to the function.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will\nreturn the value inside an `Ok` to the variable `username_file`. If an error\noccurs, the `?` operator will return early out of the whole function and give\nany `Err` value to the calling code. The same thing applies to the `?` at the\nend of the `read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function\u2019s\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the `?`, as shown in Listing 9-8.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-8: Chaining method calls after the `?`\noperator</span>\n\nWe\u2019ve moved the creation of the new `String` in `username` to the beginning of\nthe function; that part hasn\u2019t changed. Instead of creating a variable\n`username_file`, we\u2019ve chained the call to `read_to_string` directly onto the\nresult of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the\n`read_to_string` call, and we still return an `Ok` value containing `username`\nwhen both `File::open` and `read_to_string` succeed rather than returning\nerrors. The functionality is again the same as in Listing 9-6 and Listing 9-7;\nthis is just a different, more ergonomic way to write it.\n\nListing 9-9 shows a way to make this even shorter using `fs::read_to_string`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n\n```rust\n{{#include ../listings/ch09-error-handling/listing-09-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-9: Using `fs::read_to_string` instead of\nopening and then reading the file</span>\n\nReading a file into a string is a fairly common operation, so the standard\nlibrary provides the convenient `fs::read_to_string` function that opens the\nfile, creates a new `String`, reads the contents of the file, puts the contents\ninto that `String`, and returns it. Of course, using `fs::read_to_string`\ndoesn\u2019t give us the opportunity to explain all the error handling, so we did it\nthe longer way first.\n\n#### Where The `?` Operator Can Be Used\n\nThe `?` operator can only be used in functions whose return type is compatible\nwith the value the `?` is used on. This is because the `?` operator is defined\nto perform an early return of a value out of the function, in the same manner\nas the `match` expression we defined in Listing 9-6. In Listing 9-6, the\n`match` was using a `Result` value, and the early return arm returned an\n`Err(e)` value. The return type of the function has to be a `Result` so that\nit\u2019s compatible with this `return`.\n\nIn Listing 9-10, let\u2019s look at the error we\u2019ll get if we use the `?` operator\nin a `main` function with a return type incompatible with the type of the value\nwe use `?` on:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-10: Attempting to use the `?` in the `main`\nfunction that returns `()` won\u2019t compile</span>\n\nThis code opens a file, which might fail. The `?` operator follows the `Result`\nvalue returned by `File::open`, but this `main` function has the return type of\n`()`, not `Result`. When we compile this code, we get the following error\nmessage:\n\n```console\n{{#include ../listings/ch09-error-handling/listing-09-10/output.txt}}\n```\n\nThis error points out that we\u2019re only allowed to use the `?` operator in a\nfunction that returns `Result`, `Option`, or another type that implements\n`FromResidual`.\n\nTo fix the error, you have two choices. One choice is to change the return type\nof your function to be compatible with the value you\u2019re using the `?` operator\non as long as you have no restrictions preventing that. The other technique is\nto use a `match` or one of the `Result<T, E>` methods to handle the `Result<T,\nE>` in whatever way is appropriate.\n\nThe error message also mentioned that `?` can be used with `Option<T>` values\nas well. As with using `?` on `Result`, you can only use `?` on `Option` in a\nfunction that returns an `Option`. The behavior of the `?` operator when called\non an `Option<T>` is similar to its behavior when called on a `Result<T, E>`:\nif the value is `None`, the `None` will be returned early from the function at\nthat point. If the value is `Some`, the value inside the `Some` is the\nresulting value of the expression and the function continues. Listing 9-11 has\nan example of a function that finds the last character of the first line in the\ngiven text:\n\n```rust\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 9-11: Using the `?` operator on an `Option<T>`\nvalue</span>\n\nThis function returns `Option<char>` because it\u2019s possible that there is a\ncharacter there, but it\u2019s also possible that there isn\u2019t. This code takes the\n`text` string slice argument and calls the `lines` method on it, which returns\nan iterator over the lines in the string. Because this function wants to\nexamine the first line, it calls `next` on the iterator to get the first value\nfrom the iterator. If `text` is the empty string, this call to `next` will\nreturn `None`, in which case we use `?` to stop and return `None` from\n`last_char_of_first_line`. If `text` is not the empty string, `next` will\nreturn a `Some` value containing a string slice of the first line in `text`.\n\nThe `?` extracts the string slice, and we can call `chars` on that string slice\nto get an iterator of its characters. We\u2019re interested in the last character in\nthis first line, so we call `last` to return the last item in the iterator.\nThis is an `Option` because it\u2019s possible that the first line is the empty\nstring, for example if `text` starts with a blank line but has characters on\nother lines, as in `\"\\nhi\"`. However, if there is a last character on the first\nline, it will be returned in the `Some` variant. The `?` operator in the middle\ngives us a concise way to express this logic, allowing us to implement the\nfunction in one line. If we couldn\u2019t use the `?` operator on `Option`, we\u2019d\nhave to implement this logic using more method calls or a `match` expression.\n\nNote that you can use the `?` operator on a `Result` in a function that returns\n`Result`, and you can use the `?` operator on an `Option` in a function that\nreturns `Option`, but you can\u2019t mix and match. The `?` operator won\u2019t\nautomatically convert a `Result` to an `Option` or vice versa; in those cases,\nyou can use methods like the `ok` method on `Result` or the `ok_or` method on\n`Option` to do the conversion explicitly.\n\nSo far, all the `main` functions we\u2019ve used return `()`. The `main` function is\nspecial because it\u2019s the entry and exit point of executable programs, and there\nare restrictions on what its return type can be for the programs to behave as\nexpected.\n\nLuckily, `main` can also return a `Result<(), E>`. Listing 9-12 has the\ncode from Listing 9-10 but we\u2019ve changed the return type of `main` to be\n`Result<(), Box<dyn Error>>` and added a return value `Ok(())` to the end. This\ncode will now compile:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch09-error-handling/listing-09-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 9-12: Changing `main` to return `Result<(), E>`\nallows the use of the `?` operator on `Result` values</span>\n\nThe `Box<dyn Error>` type is a *trait object*, which we\u2019ll talk about in the\n[\u201cUsing Trait Objects that Allow for Values of Different\nTypes\u201d][trait-objects]<!-- ignore --> section in Chapter 17. For now, you can\nread `Box<dyn Error>` to mean \u201cany kind of error.\u201d Using `?` on a `Result`\nvalue in a `main` function with the error type `Box<dyn Error>` is allowed,\nbecause it allows any `Err` value to be returned early. Even though the body of\nthis `main` function will only ever return errors of type `std::io::Error`, by\nspecifying `Box<dyn Error>`, this signature will continue to be correct even if\nmore code that returns other errors is added to the body of `main`.\n\nWhen a `main` function returns a `Result<(), E>`, the executable will\nexit with a value of `0` if `main` returns `Ok(())` and will exit with a\nnonzero value if `main` returns an `Err` value. Executables written in C return\nintegers when they exit: programs that exit successfully return the integer\n`0`, and programs that error return some integer other than `0`. Rust also\nreturns integers from executables to be compatible with this convention.\n\nThe `main` function may return any types that implement [the\n`std::process::Termination` trait][termination]<!-- ignore -->, which contains\na function `report` that returns an `ExitCode`. Consult the standard library\ndocumentation for more information on implementing the `Termination` trait for\nyour own types.\n\nNow that we\u2019ve discussed the details of calling `panic!` or returning `Result`,\nlet\u2019s return to the topic of how to decide which is appropriate to use in which\ncases.\n\n[handle_failure]: ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\n[trait-objects]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[termination]: ../std/process/trait.Termination.html\n",
          "qas": [
            {
              "question": "What does expect method of Result do?",
              "id": 2146,
              "answers": [
                {
                  "text": "lets us also choose the `panic!` error message",
                  "answer_start": 8640
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'E' mean in generics?",
              "id": 2009,
              "answers": [
                {
                  "text": " `E` represents the type of the error that will be returned in a\nfailure case within the `Err`",
                  "answer_start": 866
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is error propagating?",
              "id": 2147,
              "answers": [
                {
                  "text": "instead of\nhandling the error within the function itself, you can return the error to the\ncalling code so that it can decide what to do",
                  "answer_start": 9979
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to check the type of error?",
              "id": 2145,
              "answers": [
                {
                  "text": "error.kind()",
                  "answer_start": 5566
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When can I use 'result' instead of 'panic'?",
              "id": 2006,
              "answers": [
                {
                  "text": "For example, if you try to open a file and that\noperation fails because the file doesn\u2019t exist, you might want to create the\nfile instead of terminating the process",
                  "answer_start": 210
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When the fact that 'result' uses generics can be useful?",
              "id": 2010,
              "answers": [
                {
                  "text": "we can use the `Result` type and the functions defined on it in\nmany different situations where the successful value and error value we want to\nreturn may differ.",
                  "answer_start": 1022
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where The `?` Operator Can Be Used",
              "id": 2148,
              "answers": [
                {
                  "text": "The `?` operator can only be used in functions whose return type is compatible\nwith the value the `?` is used on.",
                  "answer_start": 19085
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Common Collections\n\nRust\u2019s standard library includes a number of very useful data structures called\n*collections*. Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you\u2019ll develop over time. In this chapter, we\u2019ll discuss three\ncollections that are used very often in Rust programs:\n\n* A *vector* allows you to store a variable number of values next to each other.\n* A *string* is a collection of characters. We\u2019ve mentioned the `String` type\n  previously, but in this chapter we\u2019ll talk about it in depth.\n* A *hash map* allows you to associate a value with a particular key. It\u2019s a\n  particular implementation of the more general data structure called a *map*.\n\nTo learn about the other kinds of collections provided by the standard library,\nsee [the documentation][collections].\n\nWe\u2019ll discuss how to create and update vectors, strings, and hash maps, as well\nas what makes each special.\n\n[collections]: ../std/collections/index.html\n",
          "qas": [
            {
              "question": "Can collections contain single or multiple values?",
              "id": 176,
              "answers": [
                {
                  "text": "Most other data types represent one specific value, but\ncollections can contain multiple values.",
                  "answer_start": 117
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does vector let me?",
              "id": 178,
              "answers": [
                {
                  "text": "* A *vector* allows you to store a variable number of values next to each other.",
                  "answer_start": 684
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a hashmap?",
              "id": 180,
              "answers": [
                {
                  "text": "* A *hash map* allows you to associate a value with a particular key. It\u2019s a\n  particular implementation of the more general data structure called a *map*.",
                  "answer_start": 907
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do collections work?",
              "id": 177,
              "answers": [
                {
                  "text": "Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you\u2019ll develop over time.",
                  "answer_start": 117
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## All the Places Patterns Can Be Used\n\nPatterns pop up in a number of places in Rust, and you\u2019ve been using them a lot\nwithout realizing it! This section discusses all the places where patterns are\nvalid.\n\n### `match` Arms\n\nAs discussed in Chapter 6, we use patterns in the arms of `match` expressions.\nFormally, `match` expressions are defined as the keyword `match`, a value to\nmatch on, and one or more match arms that consist of a pattern and an\nexpression to run if the value matches that arm\u2019s pattern, like this:\n\n```text\nmatch VALUE {\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n}\n```\n\nFor example, here's the `match` expression from Listing 6-5 that matches on an\n`Option<i32>` value in the variable `x`:\n\n```rust,ignore\nmatch x {\n    None => None,\n    Some(i) => Some(i + 1),\n}\n```\n\nThe patterns in this `match` expression are the `None` and `Some(i)` on the\nleft of each arrow.\n\nOne requirement for `match` expressions is that they need to be *exhaustive* in\nthe sense that all possibilities for the value in the `match` expression must\nbe accounted for. One way to ensure you\u2019ve covered every possibility is to have\na catchall pattern for the last arm: for example, a variable name matching any\nvalue can never fail and thus covers every remaining case.\n\nThe particular pattern `_` will match anything, but it never binds to a\nvariable, so it\u2019s often used in the last match arm. The `_` pattern can be\nuseful when you want to ignore any value not specified, for example. We\u2019ll\ncover the `_` pattern in more detail in the [\u201cIgnoring Values in a\nPattern\u201d][ignoring-values-in-a-pattern]<!-- ignore --> section later in this\nchapter.\n\n### Conditional `if let` Expressions\n\nIn Chapter 6 we discussed how to use `if let` expressions mainly as a shorter\nway to write the equivalent of a `match` that only matches one case.\nOptionally, `if let` can have a corresponding `else` containing code to run if\nthe pattern in the `if let` doesn\u2019t match.\n\nListing 18-1 shows that it\u2019s also possible to mix and match `if let`, `else\nif`, and `else if let` expressions. Doing so gives us more flexibility than a\n`match` expression in which we can express only one value to compare with the\npatterns. Also, Rust doesn't require that the conditions in a series of `if\nlet`, `else if`, `else if let` arms relate to each other.\n\nThe code in Listing 18-1 determines what color to make your background based on\na series of checks for several conditions. For this example, we\u2019ve created\nvariables with hardcoded values that a real program might receive from user\ninput.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-1: Mixing `if let`, `else if`, `else if let`,\nand `else`</span>\n\nIf the user specifies a favorite color, that color is used as the background.\nIf no favorite color is specified and today is Tuesday, the background color is\ngreen. Otherwise, if the user specifies their age as a string and we can parse\nit as a number successfully, the color is either purple or orange depending on\nthe value of the number. If none of these conditions apply, the background\ncolor is blue.\n\nThis conditional structure lets us support complex requirements. With the\nhardcoded values we have here, this example will print `Using purple as the\nbackground color`.\n\nYou can see that `if let` can also introduce shadowed variables in the same way\nthat `match` arms can: the line `if let Ok(age) = age` introduces a new\nshadowed `age` variable that contains the value inside the `Ok` variant. This\nmeans we need to place the `if age > 30` condition within that block: we can\u2019t\ncombine these two conditions into `if let Ok(age) = age && age > 30`. The\nshadowed `age` we want to compare to 30 isn\u2019t valid until the new scope starts\nwith the curly bracket.\n\nThe downside of using `if let` expressions is that the compiler doesn\u2019t check\nfor exhaustiveness, whereas with `match` expressions it does. If we omitted the\nlast `else` block and therefore missed handling some cases, the compiler would\nnot alert us to the possible logic bug.\n\n### `while let` Conditional Loops\n\nSimilar in construction to `if let`, the `while let` conditional loop allows a\n`while` loop to run for as long as a pattern continues to match. In Listing\n18-2 we code a `while let` loop that uses a vector as a stack and prints the\nvalues in the vector in the opposite order in which they were pushed.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-2: Using a `while let` loop to print values\nfor as long as `stack.pop()` returns `Some`</span>\n\nThis example prints 3, 2, and then 1. The `pop` method takes the last element\nout of the vector and returns `Some(value)`. If the vector is empty, `pop`\nreturns `None`. The `while` loop continues running the code in its block as\nlong as `pop` returns `Some`. When `pop` returns `None`, the loop stops. We can\nuse `while let` to pop every element off our stack.\n\n### `for` Loops\n\nIn a `for` loop, the value that directly follows the keyword `for` is a\npattern. For example, in `for x in y` the `x` is the pattern. Listing 18-3\ndemonstrates how to use a pattern in a `for` loop to destructure, or break\napart, a tuple as part of the `for` loop.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-3: Using a pattern in a `for` loop to\ndestructure a tuple</span>\n\nThe code in Listing 18-3 will print the following:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-03/output.txt}}\n```\n\nWe adapt an iterator using the `enumerate` method so it produces a value and\nthe index for that value, placed into a tuple. The first value produced is the\ntuple `(0, 'a')`. When this value is matched to the pattern `(index, value)`,\n`index` will be `0` and `value` will be `'a'`, printing the first line of the\noutput.\n\n### `let` Statements\n\nPrior to this chapter, we had only explicitly discussed using patterns with\n`match` and `if let`, but in fact, we\u2019ve used patterns in other places as well,\nincluding in `let` statements. For example, consider this straightforward\nvariable assignment with `let`:\n\n```rust\nlet x = 5;\n```\n\nEvery time you've used a `let` statement like this you've been using patterns,\nalthough you might not have realized it! More formally, a `let` statement looks\nlike this:\n\n```text\nlet PATTERN = EXPRESSION;\n```\n\nIn statements like `let x = 5;` with a variable name in the `PATTERN` slot, the\nvariable name is just a particularly simple form of a pattern. Rust compares\nthe expression against the pattern and assigns any names it finds. So in the\n`let x = 5;` example, `x` is a pattern that means \u201cbind what matches here to\nthe variable `x`.\u201d Because the name `x` is the whole pattern, this pattern\neffectively means \u201cbind everything to the variable `x`, whatever the value is.\u201d\n\nTo see the pattern matching aspect of `let` more clearly, consider Listing\n18-4, which uses a pattern with `let` to destructure a tuple.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-04/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-4: Using a pattern to destructure a tuple and\ncreate three variables at once</span>\n\nHere, we match a tuple against a pattern. Rust compares the value `(1, 2, 3)`\nto the pattern `(x, y, z)` and sees that the value matches the pattern, so Rust\nbinds `1` to `x`, `2` to `y`, and `3` to `z`. You can think of this tuple\npattern as nesting three individual variable patterns inside it.\n\nIf the number of elements in the pattern doesn\u2019t match the number of elements\nin the tuple, the overall type won\u2019t match and we\u2019ll get a compiler error. For\nexample, Listing 18-5 shows an attempt to destructure a tuple with three\nelements into two variables, which won\u2019t work.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-5: Incorrectly constructing a pattern whose\nvariables don\u2019t match the number of elements in the tuple</span>\n\nAttempting to compile this code results in this type error:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-05/output.txt}}\n```\n\nTo fix the error, we could ignore one or more of the values in the tuple using\n`_` or `..`, as you\u2019ll see in the [\u201cIgnoring Values in a\nPattern\u201d][ignoring-values-in-a-pattern]<!-- ignore --> section. If the problem\nis that we have too many variables in the pattern, the solution is to make the\ntypes match by removing variables so the number of variables equals the number\nof elements in the tuple.\n\n### Function Parameters\n\nFunction parameters can also be patterns. The code in Listing 18-6, which\ndeclares a function named `foo` that takes one parameter named `x` of type\n`i32`, should by now look familiar.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-6: A function signature uses patterns in the\nparameters</span>\n\nThe `x` part is a pattern! As we did with `let`, we could match a tuple in a\nfunction\u2019s arguments to the pattern. Listing 18-7 splits the values in a tuple\nas we pass it to a function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-7: A function with parameters that destructure\na tuple</span>\n\nThis code prints `Current location: (3, 5)`. The values `&(3, 5)` match the\npattern `&(x, y)`, so `x` is the value `3` and `y` is the value `5`.\n\nWe can also use patterns in closure parameter lists in the same way as in\nfunction parameter lists, because closures are similar to functions, as\ndiscussed in Chapter 13.\n\nAt this point, you\u2019ve seen several ways of using patterns, but patterns don\u2019t\nwork the same in every place we can use them. In some places, the patterns must\nbe irrefutable; in other circumstances, they can be refutable. We\u2019ll discuss\nthese two concepts next.\n\n[ignoring-values-in-a-pattern]:\nch18-03-pattern-syntax.html#ignoring-values-in-a-pattern\n",
          "qas": [
            {
              "question": "What is the downside of using `if let` expressions?",
              "id": 32,
              "answers": [
                {
                  "text": "The downside of using `if let` expressions is that the compiler doesn\u2019t check\nfor exhaustiveness, whereas with `match` expressions it does. If we omitted the\nlast `else` block and therefore missed handling some cases, the compiler would\nnot alert us to the possible logic bug.",
                  "answer_start": 3909
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to use patterns in the arms of `match` expressions?",
              "id": 30,
              "answers": [
                {
                  "text": "match VALUE {\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n}",
                  "answer_start": 530
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I be sure that I covered every possibility in arms of match expression?",
              "id": 31,
              "answers": [
                {
                  "text": "One way to ensure you\u2019ve covered every possibility is to have\na catchall pattern for the last arm: for example, a variable name matching any\nvalue can never fail and thus covers every remaining case.\n\nThe particular pattern `_` will match anything, but it never binds to a\nvariable, so it\u2019s often used in the last match arm. The `_` pattern can be\nuseful when you want to ignore any value not specified, for example.",
                  "answer_start": 1104
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does `while let` conditional Loop works?",
              "id": 33,
              "answers": [
                {
                  "text": "`while let` conditional loop allows a\n`while` loop to run for as long as a pattern continues to match.",
                  "answer_start": 4263
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens when pattern doesn\u2019t match the number of elements in the tuple?",
              "id": 35,
              "answers": [
                {
                  "text": "If the number of elements in the pattern doesn\u2019t match the number of elements\nin the tuple, the overall type won\u2019t match and we\u2019ll get a compiler error.",
                  "answer_start": 7715
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Using Message Passing to Transfer Data Between Threads\n\nOne increasingly popular approach to ensuring safe concurrency is *message\npassing*, where threads or actors communicate by sending each other messages\ncontaining data. Here\u2019s the idea in a slogan from [the Go language\ndocumentation](https://golang.org/doc/effective_go.html#concurrency):\n\u201cDo not communicate by sharing memory; instead, share memory by communicating.\u201d\n\nTo accomplish message-sending concurrency, Rust's standard library provides an\nimplementation of *channels*. A channel is a general programming concept by\nwhich data is sent from one thread to another.\n\nYou can imagine a channel in programming as being like a directional channel of\nwater, such as a stream or a river. If you put something like a rubber duck\ninto a river, it will travel downstream to the end of the waterway.\n\nA channel has two halves: a transmitter and a receiver. The transmitter half is\nthe upstream location where you put rubber ducks into the river, and the\nreceiver half is where the rubber duck ends up downstream. One part of your\ncode calls methods on the transmitter with the data you want to send, and\nanother part checks the receiving end for arriving messages. A channel is said\nto be *closed* if either the transmitter or receiver half is dropped.\n\nHere, we\u2019ll work up to a program that has one thread to generate values and\nsend them down a channel, and another thread that will receive the values and\nprint them out. We\u2019ll be sending simple values between threads using a channel\nto illustrate the feature. Once you\u2019re familiar with the technique, you could\nuse channels for any threads that need to communicate between each other, such\nas a chat system or a system where many threads perform parts of a calculation\nand send the parts to one thread that aggregates the results.\n\nFirst, in Listing 16-6, we\u2019ll create a channel but not do anything with it.\nNote that this won\u2019t compile yet because Rust can\u2019t tell what type of values we\nwant to send over the channel.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-6: Creating a channel and assigning the two\nhalves to `tx` and `rx`</span>\n\nWe create a new channel using the `mpsc::channel` function; `mpsc` stands for\n*multiple producer, single consumer*. In short, the way Rust\u2019s standard library\nimplements channels means a channel can have multiple *sending* ends that\nproduce values but only one *receiving* end that consumes those values. Imagine\nmultiple streams flowing together into one big river: everything sent down any\nof the streams will end up in one river at the end. We\u2019ll start with a single\nproducer for now, but we\u2019ll add multiple producers when we get this example\nworking.\n\nThe `mpsc::channel` function returns a tuple, the first element of which is the\nsending end--the transmitter--and the second element is the receiving end--the\nreceiver. The abbreviations `tx` and `rx` are traditionally used in many fields\nfor *transmitter* and *receiver* respectively, so we name our variables as such\nto indicate each end. We\u2019re using a `let` statement with a pattern that\ndestructures the tuples; we\u2019ll discuss the use of patterns in `let` statements\nand destructuring in Chapter 18. For now, know that using a `let` statement\nthis way is a convenient approach to extract the pieces of the tuple returned\nby `mpsc::channel`.\n\nLet\u2019s move the transmitting end into a spawned thread and have it send one\nstring so the spawned thread is communicating with the main thread, as shown in\nListing 16-7. This is like putting a rubber duck in the river upstream or\nsending a chat message from one thread to another.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-7: Moving `tx` to a spawned thread and sending\n\u201chi\u201d</span>\n\nAgain, we\u2019re using `thread::spawn` to create a new thread and then using `move`\nto move `tx` into the closure so the spawned thread owns `tx`. The spawned\nthread needs to own the transmitter to be able to send messages through the\nchannel. The transmitter has a `send` method that takes the value we want to\nsend. The `send` method returns a `Result<T, E>` type, so if the receiver has\nalready been dropped and there\u2019s nowhere to send a value, the send operation\nwill return an error. In this example, we\u2019re calling `unwrap` to panic in case\nof an error. But in a real application, we would handle it properly: return to\nChapter 9 to review strategies for proper error handling.\n\nIn Listing 16-8, we\u2019ll get the value from the receiver in the main thread. This\nis like retrieving the rubber duck from the water at the end of the river or\nreceiving a chat message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-8: Receiving the value \u201chi\u201d in the main thread\nand printing it</span>\n\nThe receiver has two useful methods: `recv` and `try_recv`. We\u2019re using `recv`,\nshort for *receive*, which will block the main thread\u2019s execution and wait\nuntil a value is sent down the channel. Once a value is sent, `recv` will\nreturn it in a `Result<T, E>`. When the transmitter closes, `recv` will return\nan error to signal that no more values will be coming.\n\nThe `try_recv` method doesn\u2019t block, but will instead return a `Result<T, E>`\nimmediately: an `Ok` value holding a message if one is available and an `Err`\nvalue if there aren\u2019t any messages this time. Using `try_recv` is useful if\nthis thread has other work to do while waiting for messages: we could write a\nloop that calls `try_recv` every so often, handles a message if one is\navailable, and otherwise does other work for a little while until checking\nagain.\n\nWe\u2019ve used `recv` in this example for simplicity; we don\u2019t have any other work\nfor the main thread to do other than wait for messages, so blocking the main\nthread is appropriate.\n\nWhen we run the code in Listing 16-8, we\u2019ll see the value printed from the main\nthread:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\n```\n\nPerfect!\n\n### Channels and Ownership Transference\n\nThe ownership rules play a vital role in message sending because they help you\nwrite safe, concurrent code. Preventing errors in concurrent programming is the\nadvantage of thinking about ownership throughout your Rust programs. Let\u2019s do\nan experiment to show how channels and ownership work together to prevent\nproblems: we\u2019ll try to use a `val` value in the spawned thread *after* we\u2019ve\nsent it down the channel. Try compiling the code in Listing 16-9 to see why\nthis code isn\u2019t allowed:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-9: Attempting to use `val` after we\u2019ve sent it\ndown the channel</span>\n\nHere, we try to print `val` after we\u2019ve sent it down the channel via `tx.send`.\nAllowing this would be a bad idea: once the value has been sent to another\nthread, that thread could modify or drop it before we try to use the value\nagain. Potentially, the other thread\u2019s modifications could cause errors or\nunexpected results due to inconsistent or nonexistent data. However, Rust gives\nus an error if we try to compile the code in Listing 16-9:\n\n```console\n{{#include ../listings/ch16-fearless-concurrency/listing-16-09/output.txt}}\n```\n\nOur concurrency mistake has caused a compile time error. The `send` function\ntakes ownership of its parameter, and when the value is moved, the receiver\ntakes ownership of it. This stops us from accidentally using the value again\nafter sending it; the ownership system checks that everything is okay.\n\n### Sending Multiple Values and Seeing the Receiver Waiting\n\nThe code in Listing 16-8 compiled and ran, but it didn\u2019t clearly show us that\ntwo separate threads were talking to each other over the channel. In Listing\n16-10 we\u2019ve made some modifications that will prove the code in Listing 16-8 is\nrunning concurrently: the spawned thread will now send multiple messages and\npause for a second between each message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-10/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 16-10: Sending multiple messages and pausing\nbetween each</span>\n\nThis time, the spawned thread has a vector of strings that we want to send to\nthe main thread. We iterate over them, sending each individually, and pause\nbetween each by calling the `thread::sleep` function with a `Duration` value of\n1 second.\n\nIn the main thread, we\u2019re not calling the `recv` function explicitly anymore:\ninstead, we\u2019re treating `rx` as an iterator. For each value received, we\u2019re\nprinting it. When the channel is closed, iteration will end.\n\nWhen running the code in Listing 16-10, you should see the following output\nwith a 1-second pause in between each line:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\nGot: from\nGot: the\nGot: thread\n```\n\nBecause we don\u2019t have any code that pauses or delays in the `for` loop in the\nmain thread, we can tell that the main thread is waiting to receive values from\nthe spawned thread.\n\n### Creating Multiple Producers by Cloning the Transmitter\n\nEarlier we mentioned that `mpsc` was an acronym for *multiple producer,\nsingle consumer*. Let\u2019s put `mpsc` to use and expand the code in Listing 16-10\nto create multiple threads that all send values to the same receiver. We can do\nso by cloning the transmitter, as shown in Listing 16-11:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 16-11: Sending multiple messages from multiple\nproducers</span>\n\nThis time, before we create the first spawned thread, we call `clone` on the\ntransmitter. This will give us a new transmitter we can pass to the first\nspawned thread. We pass the original transmitter to a second spawned thread.\nThis gives us two threads, each sending different messages to the one receiver.\n\nWhen you run the code, your output should look something like this:\n\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n\n```text\nGot: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you\n```\n\nYou might see the values in another order, depending on your system. This is\nwhat makes concurrency interesting as well as difficult. If you experiment with\n`thread::sleep`, giving it various values in the different threads, each run\nwill be more nondeterministic and create different output each time.\n\nNow that we\u2019ve looked at how channels work, let\u2019s look at a different method of\nconcurrency.\n",
          "qas": [
            {
              "question": "What does mpsc mean?",
              "id": 97,
              "answers": [
                {
                  "text": "`mpsc` stands for\n*multiple producer, single consumer*.",
                  "answer_start": 2374
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is message passing?",
              "id": 93,
              "answers": [
                {
                  "text": "One increasingly popular approach to ensuring safe concurrency is *message\npassing*, where threads or actors communicate by sending each other messages\ncontaining data.",
                  "answer_start": 59
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a channel?",
              "id": 92,
              "answers": [
                {
                  "text": "A channel is a general programming concept by\nwhich data is sent from one thread to another.",
                  "answer_start": 538
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a new channel?",
              "id": 96,
              "answers": [
                {
                  "text": "We create a new channel using the `mpsc::channel` function",
                  "answer_start": 2314
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to receive a message from channel?",
              "id": 100,
              "answers": [
                {
                  "text": "We\u2019re using `recv`,\nshort for *receive*, which will block the main thread\u2019s execution and wait\nuntil a value is sent down the channel. Once a value is sent, `recv` will\nreturn it in a `Result\u2039T, E>`. When the transmitter closes, `recv` will return\nan error to signal that no more values will be coming.",
                  "answer_start": 5218
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When try_recv should be used?",
              "id": 101,
              "answers": [
                {
                  "text": "Using `try_recv` is useful if\nthis thread has other work to do while waiting for messages",
                  "answer_start": 5724
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does send method return?",
              "id": 99,
              "answers": [
                {
                  "text": "The `send` method returns a `Result\u2039T, E>` type, so if the receiver has\nalready been dropped and there\u2019s nowhere to send a value, the send operation\nwill return an error.",
                  "answer_start": 4353
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to communicate via channel?",
              "id": 95,
              "answers": [
                {
                  "text": "One part of your\ncode calls methods on the transmitter with the data you want to send, and\nanother part checks the receiving end for arriving messages.",
                  "answer_start": 1069
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does channel consist of?",
              "id": 94,
              "answers": [
                {
                  "text": "A channel has two halves: a transmitter and a receiver.",
                  "answer_start": 857
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix G - How Rust is Made and \u201cNightly Rust\u201d\n\nThis appendix is about how Rust is made and how that affects you as a Rust\ndeveloper.\n\n### Stability Without Stagnation\n\nAs a language, Rust cares a *lot* about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can\u2019t\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things.\n\nOur solution to this problem is what we call \u201cstability without stagnation\u201d,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times.\n\n### Choo, Choo! Release Channels and Riding the Trains\n\nRust development operates on a *train schedule*. That is, all development is\ndone on the `master` branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three *release channels* for Rust:\n\n* Nightly\n* Beta\n* Stable\n\nMost Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta.\n\nHere\u2019s an example of how the development and release process works: let\u2019s\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the `master`\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:\n\n```text\nnightly: * - - * - - *\n```\n\nEvery six weeks, it\u2019s time to prepare a new release! The `beta` branch of the\nRust repository branches off from the `master` branch used by nightly. Now,\nthere are two releases:\n\n```text\nnightly: * - - * - - *\n                     |\nbeta:                *\n```\n\nMost Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere\u2019s still a nightly release every night:\n\n```text\nnightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n```\n\nLet\u2019s say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto `master`, so that nightly is fixed, and then the fix is backported to the\n`beta` branch, and a new release of beta is produced:\n\n```text\nnightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n```\n\nSix weeks after the first beta was created, it\u2019s time for a stable release! The\n`stable` branch is produced from the `beta` branch:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n```\n\nHooray! Rust 1.5 is done! However, we\u2019ve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the *next* version of Rust, 1.6.\nSo after `stable` branches off of `beta`, the next version of `beta` branches\noff of `nightly` again:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n```\n\nThis is called the \u201ctrain model\u201d because every six weeks, a release \u201cleaves the\nstation\u201d, but still has to take a journey through the beta channel before it\narrives as a stable release.\n\nRust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it\u2019s six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there\u2019s no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline.\n\nThanks to this process, you can always check out the next build of Rust and\nverify for yourself that it\u2019s easy to upgrade to: if a beta release doesn\u2019t\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n`rustc` is still a piece of software, and bugs do exist.\n\n### Unstable Features\n\nThere\u2019s one more catch with this release model: unstable features. Rust uses a\ntechnique called \u201cfeature flags\u201d to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n`master`, and therefore, in nightly, but behind a *feature flag*. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in.\n\nIf you\u2019re using a beta or stable release of Rust, you can\u2019t use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won\u2019t break. Stability without stagnation.\n\nThis book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they\u2019ll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online.\n\n### Rustup and the Role of Rust Nightly\n\nRustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you\u2019ll have stable Rust installed. To\ninstall nightly, for example:\n\n```console\n$ rustup toolchain install nightly\n```\n\nYou can see all of the *toolchains* (releases of Rust and associated\ncomponents) you have installed with `rustup` as well. Here\u2019s an example on one\nof your authors\u2019 Windows computer:\n\n```powershell\n> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n```\n\nAs you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use `rustup override` in that project\u2019s directory to set the\nnightly toolchain as the one `rustup` should use when you\u2019re in that directory:\n\n```console\n$ cd ~/projects/needs-nightly\n$ rustup override set nightly\n```\n\nNow, every time you call `rustc` or `cargo` inside of\n*~/projects/needs-nightly*, `rustup` will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!\n\n### The RFC Process and Teams\n\nSo how do you learn about these new features? Rust\u2019s development model follows\na *Request For Comments (RFC) process*. If you\u2019d like an improvement in Rust,\nyou can write up a proposal, called an RFC.\n\nAnyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There\u2019s\na full list of the teams [on Rust\u2019s\nwebsite](https://www.rust-lang.org/governance), which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere\u2019s consensus to accept or reject the feature.\n\nIf the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the `master` branch behind a feature gate, as we discussed\nin the [\u201cUnstable Features\u201d](#unstable-features)<!-- ignore --> section.\n\nAfter some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it\u2019s\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust.\n",
          "qas": [
            {
              "question": "What release channels does rust have?",
              "id": 207,
              "answers": [
                {
                  "text": "* Nightly\n* Beta\n* Stable",
                  "answer_start": 1168
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where can I find documentation for nightly-only features?",
              "id": 213,
              "answers": [
                {
                  "text": "online",
                  "answer_start": 5883
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What release channels should I use if I want experimental features?",
              "id": 208,
              "answers": [
                {
                  "text": "nightly or beta",
                  "answer_start": 1314
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What channel are most Rust developers using?",
              "id": 209,
              "answers": [
                {
                  "text": "stable",
                  "answer_start": 1234
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where can I find list of Rust teams?",
              "id": 215,
              "answers": [
                {
                  "text": "https://www.rust-lang.org/governance",
                  "answer_start": 7637
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new version released?",
              "id": 211,
              "answers": [
                {
                  "text": "Every six weeks",
                  "answer_start": 1902
                }
              ],
              "is_impossible": false
            },
            {
              "question": "For what is a technique features flags used?",
              "id": 212,
              "answers": [
                {
                  "text": "to determine what features are enabled in a\ngiven release",
                  "answer_start": 4861
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust care about the stability of code?",
              "id": 205,
              "answers": [
                {
                  "text": "Rust cares a *lot* about the stability of your code",
                  "answer_start": 189
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How often is new nightly version produced?",
              "id": 210,
              "answers": [
                {
                  "text": "Each night",
                  "answer_start": 1644
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Who can write Request for Comments?",
              "id": 214,
              "answers": [
                {
                  "text": "Anyone",
                  "answer_start": 7439
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## How to Write Tests\n\nTests are Rust functions that verify that the non-test code is functioning in\nthe expected manner. The bodies of test functions typically perform these three\nactions:\n\n1. Set up any needed data or state.\n2. Run the code you want to test.\n3. Assert the results are what you expect.\n\nLet\u2019s look at the features Rust provides specifically for writing tests that\ntake these actions, which include the `test` attribute, a few macros, and the\n`should_panic` attribute.\n\n### The Anatomy of a Test Function\n\nAt its simplest, a test in Rust is a function that\u2019s annotated with the `test`\nattribute. Attributes are metadata about pieces of Rust code; one example is\nthe `derive` attribute we used with structs in Chapter 5. To change a function\ninto a test function, add `#[test]` on the line before `fn`. When you run your\ntests with the `cargo test` command, Rust builds a test runner binary that runs\nthe annotated functions and reports on whether each\ntest function passes or fails.\n\nWhenever we make a new library project with Cargo, a test module with a test\nfunction in it is automatically generated for us. This module gives you a\ntemplate for writing your tests so you don\u2019t have to look up the exact\nstructure and syntax every time you start a new project. You can add as many\nadditional test functions and as many test modules as you want!\n\nWe\u2019ll explore some aspects of how tests work by experimenting with the template\ntest before we actually test any code. Then we\u2019ll write some real-world tests\nthat call some code that we\u2019ve written and assert that its behavior is correct.\n\nLet\u2019s create a new library project called `adder` that will add two numbers:\n\n```console\n$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder\n```\n\nThe contents of the *src/lib.rs* file in your `adder` library should look like\nListing 11-1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n<!-- manual-regeneration\ncd listings/ch11-writing-automated-tests\nrm -rf listing-11-01\ncargo new listing-11-01 --lib --name adder\ncd listing-11-01\ncargo test\ngit co output.txt\ncd ../../..\n-->\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-1: The test module and function generated\nautomatically by `cargo new`</span>\n\nFor now, let\u2019s ignore the top two lines and focus on the function. Note the\n`#[test]` annotation: this attribute indicates this is a test function, so the\ntest runner knows to treat this function as a test. We might also have non-test\nfunctions in the `tests` module to help set up common scenarios or perform\ncommon operations, so we always need to indicate which functions are tests.\n\nThe example function body uses the `assert_eq!` macro to assert that `result`,\nwhich contains the result of adding 2 and 2, equals 4. This assertion serves as\nan example of the format for a typical test. Let\u2019s run it to see that this test\npasses.\n\nThe `cargo test` command runs all tests in our project, as shown in Listing\n11-2.\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-01/output.txt}}\n```\n\n<span class=\"caption\">Listing 11-2: The output from running the automatically\ngenerated test</span>\n\nCargo compiled and ran the test. We see the line `running 1 test`. The next\nline shows the name of the generated test function, called `it_works`, and that\nthe result of running that test is `ok`. The overall summary `test result: ok.`\nmeans that all the tests passed, and the portion that reads `1 passed; 0\nfailed` totals the number of tests that passed or failed.\n\nIt\u2019s possible to mark a test as ignored so it doesn\u2019t run in a particular\ninstance; we\u2019ll cover that in the [\u201cIgnoring Some Tests Unless Specifically\nRequested\u201d][ignoring]<!-- ignore --> section later in this chapter. Because we\nhaven\u2019t done that here, the summary shows `0 ignored`. We can also pass an\nargument to the `cargo test` command to run only tests whose name matches a\nstring; this is called *filtering* and we\u2019ll cover that in the [\u201cRunning a\nSubset of Tests by Name\u201d][subset]<!-- ignore --> section. We also haven\u2019t\nfiltered the tests being run, so the end of the summary shows `0 filtered out`.\n\nThe `0 measured` statistic is for benchmark tests that measure performance.\nBenchmark tests are, as of this writing, only available in nightly Rust. See\n[the documentation about benchmark tests][bench] to learn more.\n\nThe next part of the test output starting at `Doc-tests adder` is for the\nresults of any documentation tests. We don\u2019t have any documentation tests yet,\nbut Rust can compile any code examples that appear in our API documentation.\nThis feature helps keep your docs and your code in sync! We\u2019ll discuss how to\nwrite documentation tests in the [\u201cDocumentation Comments as\nTests\u201d][doc-comments]<!-- ignore --> section of Chapter 14. For now, we\u2019ll\nignore the `Doc-tests` output.\n\nLet\u2019s start to customize the test to our own needs. First change the name of\nthe `it_works` function to a different name, such as `exploration`, like so:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/src/lib.rs}}\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of\n`it_works`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/output.txt}}\n```\n\nNow we\u2019ll add another test, but this time we\u2019ll make a test that fails! Tests\nfail when something in the test function panics. Each test is run in a new\nthread, and when the main thread sees that a test thread has died, the test is\nmarked as failed. In Chapter 9, we talked about how the simplest way to panic\nis to call the `panic!` macro. Enter the new test as a function named\n`another`, so your *src/lib.rs* file looks like Listing 11-3.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,panics,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-03/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-3: Adding a second test that will fail because\nwe call the `panic!` macro</span>\n\nRun the tests again using `cargo test`. The output should look like Listing\n11-4, which shows that our `exploration` test passed and `another` failed.\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 11-4: Test results when one test passes and one\ntest fails</span>\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new\nsections appear between the individual results and the summary: the first\ndisplays the detailed reason for each test failure. In this case, we get the\ndetails that `another` failed because it `panicked at 'Make this test fail'` on\nline 10 in the *src/lib.rs* file. The next section lists just the names of all\nthe failing tests, which is useful when there are lots of tests and lots of\ndetailed failing test output. We can use the name of a failing test to run just\nthat test to more easily debug it; we\u2019ll talk more about ways to run tests in\nthe [\u201cControlling How Tests Are Run\u201d][controlling-how-tests-are-run]<!-- ignore\n--> section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`. We\nhad one test pass and one test fail.\n\nNow that you\u2019ve seen what the test results look like in different scenarios,\nlet\u2019s look at some macros other than `panic!` that are useful in tests.\n\n### Checking Results with the `assert!` Macro\n\nThe `assert!` macro, provided by the standard library, is useful when you want\nto ensure that some condition in a test evaluates to `true`. We give the\n`assert!` macro an argument that evaluates to a Boolean. If the value is\n`true`, nothing happens and the test passes. If the value is `false`, the\n`assert!` macro calls `panic!` to cause the test to fail. Using the `assert!`\nmacro helps us check that our code is functioning in the way we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold`\nmethod, which are repeated here in Listing 11-5. Let\u2019s put this code in the\n*src/lib.rs* file, then write some tests for it using the `assert!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-05/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-5: Using the `Rectangle` struct and its\n`can_hold` method from Chapter 5</span>\n\nThe `can_hold` method returns a Boolean, which means it\u2019s a perfect use case\nfor the `assert!` macro. In Listing 11-6, we write a test that exercises the\n`can_hold` method by creating a `Rectangle` instance that has a width of 8 and\na height of 7 and asserting that it can hold another `Rectangle` instance that\nhas a width of 5 and a height of 1.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-06/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-6: A test for `can_hold` that checks whether a\nlarger rectangle can indeed hold a smaller rectangle</span>\n\nNote that we\u2019ve added a new line inside the `tests` module: `use super::*;`.\nThe `tests` module is a regular module that follows the usual visibility rules\nwe covered in Chapter 7 in the [\u201cPaths for Referring to an Item in the Module\nTree\u201d][paths-for-referring-to-an-item-in-the-module-tree]<!-- ignore -->\nsection. Because the `tests` module is an inner module, we need to bring the\ncode under test in the outer module into the scope of the inner module. We use\na glob here so anything we define in the outer module is available to this\n`tests` module.\n\nWe\u2019ve named our test `larger_can_hold_smaller`, and we\u2019ve created the two\n`Rectangle` instances that we need. Then we called the `assert!` macro and\npassed it the result of calling `larger.can_hold(&smaller)`. This expression is\nsupposed to return `true`, so our test should pass. Let\u2019s find out!\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-06/output.txt}}\n```\n\nIt does pass! Let\u2019s add another test, this time asserting that a smaller\nrectangle cannot hold a larger rectangle:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/src/lib.rs:here}}\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`,\nwe need to negate that result before we pass it to the `assert!` macro. As a\nresult, our test will pass if `can_hold` returns `false`:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/output.txt}}\n```\n\nTwo tests that pass! Now let\u2019s see what happens to our test results when we\nintroduce a bug in our code. We\u2019ll change the implementation of the `can_hold`\nmethod by replacing the greater-than sign with a less-than sign when it\ncompares the widths:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/src/lib.rs:here}}\n```\n\nRunning the tests now produces the following:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/output.txt}}\n```\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is\n5, the comparison of the widths in `can_hold` now returns `false`: 8 is not\nless than 5.\n\n### Testing Equality with the `assert_eq!` and `assert_ne!` Macros\n\nA common way to verify functionality is to test for equality between the result\nof the code under test and the value you expect the code to return. You could\ndo this using the `assert!` macro and passing it an expression using the `==`\noperator. However, this is such a common test that the standard library\nprovides a pair of macros\u2014`assert_eq!` and `assert_ne!`\u2014to perform this test\nmore conveniently. These macros compare two arguments for equality or\ninequality, respectively. They\u2019ll also print the two values if the assertion\nfails, which makes it easier to see *why* the test failed; conversely, the\n`assert!` macro only indicates that it got a `false` value for the `==`\nexpression, without printing the values that led to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its\nparameter, then we test this function using the `assert_eq!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-07/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-7: Testing the function `add_two` using the\n`assert_eq!` macro</span>\n\nLet\u2019s check that it passes!\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-07/output.txt}}\n```\n\nWe pass `4` as the argument to `assert_eq!`, which is equal to the result of\ncalling `add_two(2)`. The line for this test is `test tests::it_adds_two ...\nok`, and the `ok` text indicates that our test passed!\n\nLet\u2019s introduce a bug into our code to see what `assert_eq!` looks like when it\nfails. Change the implementation of the `add_two` function to instead add `3`:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/src/lib.rs:here}}\n```\n\nRun the tests again:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/output.txt}}\n```\n\nOur test caught the bug! The `it_adds_two` test failed, and the message tells\nus that the assertion that fails was `` assertion failed: `(left == right)` ``\nand what the `left` and `right` values are. This message helps us start\ndebugging: the `left` argument was `4` but the `right` argument, where we had\n`add_two(2)`, was `5`. You can imagine that this would be especially helpful\nwhen we have a lot of tests going on.\n\nNote that in some languages and test frameworks, the parameters to equality\nassertion functions are called `expected` and `actual`, and the order in which\nwe specify the arguments matters. However, in Rust, they\u2019re called `left` and\n`right`, and the order in which we specify the value we expect and the value\nthe code produces doesn\u2019t matter. We could write the assertion in this test as\n`assert_eq!(add_two(2), 4)`, which would result in the same failure message\nthat displays `` assertion failed: `(left == right)` ``.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and\nfail if they\u2019re equal. This macro is most useful for cases when we\u2019re not sure\nwhat a value *will* be, but we know what the value definitely *shouldn\u2019t* be.\nFor example, if we\u2019re testing a function that is guaranteed to change its input\nin some way, but the way in which the input is changed depends on the day of\nthe week that we run our tests, the best thing to assert might be that the\noutput of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators\n`==` and `!=`, respectively. When the assertions fail, these macros print their\narguments using debug formatting, which means the values being compared must\nimplement the `PartialEq` and `Debug` traits. All primitive types and most of\nthe standard library types implement these traits. For structs and enums that\nyou define yourself, you\u2019ll need to implement `PartialEq` to assert equality of\nthose types. You\u2019ll also need to implement `Debug` to print the values when the\nassertion fails. Because both traits are derivable traits, as mentioned in\nListing 5-12 in Chapter 5, this is usually as straightforward as adding the\n`#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See\nAppendix C, [\u201cDerivable Traits,\u201d][derivable-traits]<!-- ignore --> for more\ndetails about these and other derivable traits.\n\n### Adding Custom Failure Messages\n\nYou can also add a custom message to be printed with the failure message as\noptional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any\narguments specified after the required arguments are passed along to the\n`format!` macro (discussed in Chapter 8 in the [\u201cConcatenation with the `+`\nOperator or the `format!`\nMacro\u201d][concatenation-with-the--operator-or-the-format-macro]<!-- ignore -->\nsection), so you can pass a format string that contains `{}` placeholders and\nvalues to go in those placeholders. Custom messages are useful for documenting\nwhat an assertion means; when a test fails, you\u2019ll have a better idea of what\nthe problem is with the code.\n\nFor example, let\u2019s say we have a function that greets people by name and we\nwant to test that the name we pass into the function appears in the output:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-05-greeter/src/lib.rs}}\n```\n\nThe requirements for this program haven\u2019t been agreed upon yet, and we\u2019re\npretty sure the `Hello` text at the beginning of the greeting will change. We\ndecided we don\u2019t want to have to update the test when the requirements change,\nso instead of checking for exact equality to the value returned from the\n`greeting` function, we\u2019ll just assert that the output contains the text of the\ninput parameter.\n\nNow let\u2019s introduce a bug into this code by changing `greeting` to exclude\n`name` to see what the default test failure looks like:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/src/lib.rs:here}}\n```\n\nRunning this test produces the following:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/output.txt}}\n```\n\nThis result just indicates that the assertion failed and which line the\nassertion is on. A more useful failure message would print the value from the\n`greeting` function. Let\u2019s add a custom failure message composed of a format\nstring with a placeholder filled in with the actual value we got from the\n`greeting` function:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/src/lib.rs:here}}\n```\n\nNow when we run the test, we\u2019ll get a more informative error message:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/output.txt}}\n```\n\nWe can see the value we actually got in the test output, which would help us\ndebug what happened instead of what we were expecting to happen.\n\n### Checking for Panics with `should_panic`\n\nIn addition to checking return values, it\u2019s important to check that our code\nhandles error conditions as we expect. For example, consider the `Guess` type\nthat we created in Chapter 9, Listing 9-13. Other code that uses `Guess`\ndepends on the guarantee that `Guess` instances will contain only values\nbetween 1 and 100. We can write a test that ensures that attempting to create a\n`Guess` instance with a value outside that range panics.\n\nWe do this by adding the attribute `should_panic` to our test function. The\ntest passes if the code inside the function panics; the test fails if the code\ninside the function doesn\u2019t panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new`\nhappen when we expect them to.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-08/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 11-8: Testing that a condition will cause a\n`panic!`</span>\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and\nbefore the test function it applies to. Let\u2019s look at the result when this test\npasses:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/listing-11-08/output.txt}}\n```\n\nLooks good! Now let\u2019s introduce a bug in our code by removing the condition\nthat the `new` function will panic if the value is greater than 100:\n\n```rust,not_desired_behavior,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/src/lib.rs:here}}\n```\n\nWhen we run the test in Listing 11-8, it will fail:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/output.txt}}\n```\n\nWe don\u2019t get a very helpful message in this case, but when we look at the test\nfunction, we see that it\u2019s annotated with `#[should_panic]`. The failure we got\nmeans that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise. A `should_panic` test would\npass even if the test panics for a different reason from the one we were\nexpecting. To make `should_panic` tests more precise, we can add an optional\n`expected` parameter to the `should_panic` attribute. The test harness will\nmake sure that the failure message contains the provided text. For example,\nconsider the modified code for `Guess` in Listing 11-9 where the `new` function\npanics with different messages depending on whether the value is too small or\ntoo large.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-09/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 11-9: Testing for a `panic!` with a panic message\ncontaining a specified substring</span>\n\nThis test will pass because the value we put in the `should_panic` attribute\u2019s\n`expected` parameter is a substring of the message that the `Guess::new`\nfunction panics with. We could have specified the entire panic message that we\nexpect, which in this case would be `Guess value must be less than or equal to\n100, got 200.` What you choose to specify depends on how much of the panic\nmessage is unique or dynamic and how precise you want your test to be. In this\ncase, a substring of the panic message is enough to ensure that the code in the\ntest function executes the `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message\nfails, let\u2019s again introduce a bug into our code by swapping the bodies of the\n`if value < 1` and the `else if value > 100` blocks:\n\n```rust,ignore,not_desired_behavior\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/src/lib.rs:here}}\n```\n\nThis time when we run the `should_panic` test, it will fail:\n\n```console\n{{#include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/output.txt}}\n```\n\nThe failure message indicates that this test did indeed panic as we expected,\nbut the panic message did not include the expected string `'Guess value must be\nless than or equal to 100'`. The panic message that we did get in this case was\n`Guess value must be greater than or equal to 1, got 200.` Now we can start\nfiguring out where our bug is!\n\n### Using `Result<T, E>` in Tests\n\nOur tests so far all panic when they fail. We can also write tests that use\n`Result<T, E>`! Here\u2019s the test from Listing 11-1, rewritten to use `Result<T,\nE>` and return an `Err` instead of panicking:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-10-result-in-tests/src/lib.rs}}\n```\n\nThe `it_works` function now has the `Result<(), String>` return type. In the\nbody of the function, rather than calling the `assert_eq!` macro, we return\n`Ok(())` when the test passes and an `Err` with a `String` inside when the test\nfails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question\nmark operator in the body of tests, which can be a convenient way to write\ntests that should fail if any operation within them returns an `Err` variant.\n\nYou can\u2019t use the `#[should_panic]` annotation on tests that use `Result<T,\nE>`. To assert that an operation returns an `Err` variant, *don\u2019t* use the\nquestion mark operator on the `Result<T, E>` value. Instead, use\n`assert!(value.is_err())`.\n\nNow that you know several ways to write tests, let\u2019s look at what is happening\nwhen we run our tests and explore the different options we can use with `cargo\ntest`.\n\n[concatenation-with-the--operator-or-the-format-macro]:\nch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro\n[bench]: ../unstable-book/library-features/test.html\n[ignoring]: ch11-02-running-tests.html#ignoring-some-tests-unless-specifically-requested\n[subset]: ch11-02-running-tests.html#running-a-subset-of-tests-by-name\n[controlling-how-tests-are-run]:\nch11-02-running-tests.html#controlling-how-tests-are-run\n[derivable-traits]: appendix-03-derivable-traits.html\n[doc-comments]: ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests\n[paths-for-referring-to-an-item-in-the-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n",
          "qas": [
            {
              "question": "Are benchmark tests available in Rust?",
              "id": 2082,
              "answers": [
                {
                  "text": "only available in nightly Rust",
                  "answer_start": 4343
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a test function?",
              "id": 2077,
              "answers": [
                {
                  "text": "add `#[test]` on the line before `fn`",
                  "answer_start": 780
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does 'assert_ne!' check?",
              "id": 2088,
              "answers": [
                {
                  "text": "inequality",
                  "answer_start": 12044
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which keyword is used for verification of result given by tested function?",
              "id": 2084,
              "answers": [
                {
                  "text": "`assert!`",
                  "answer_start": 7931
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I add a custom failure message?",
              "id": 2090,
              "answers": [
                {
                  "text": "`format!` macro",
                  "answer_start": 16170
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to distinguish test function from normal function?",
              "id": 2075,
              "answers": [
                {
                  "text": "a test in Rust is a function that\u2019s annotated with the `test`\nattribute",
                  "answer_start": 540
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When could I use 'assert_ne!'?",
              "id": 2089,
              "answers": [
                {
                  "text": "when we\u2019re not sure\nwhat a value *will* be, but we know what the value definitely *shouldn\u2019t* be.",
                  "answer_start": 14617
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are custom messages used for?",
              "id": 2091,
              "answers": [
                {
                  "text": "for documenting\nwhat an assertion means; when a test fails",
                  "answer_start": 16490
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'should_panic' used for?",
              "id": 2093,
              "answers": [
                {
                  "text": "to check that our code\nhandles error conditions as we expect",
                  "answer_start": 18675
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does ignored test mean?",
              "id": 2081,
              "answers": [
                {
                  "text": "it doesn\u2019t run in a particular\ninstance",
                  "answer_start": 3659
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is 'assert!' keyword used for?",
              "id": 2085,
              "answers": [
                {
                  "text": "helps us check that our code is functioning in the way we intend",
                  "answer_start": 7947
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I verify if tested function returns correct value?",
              "id": 2080,
              "answers": [
                {
                  "text": "assert_eq!",
                  "answer_start": 2757
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I check if function throws an error?",
              "id": 2092,
              "answers": [
                {
                  "text": "should_panic",
                  "answer_start": 18606
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are tests?",
              "id": 2073,
              "answers": [
                {
                  "text": "functions that verify that the non-test code is functioning in\nthe expected manner",
                  "answer_start": 38
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to run tests in Rust?",
              "id": 2078,
              "answers": [
                {
                  "text": "with the `cargo test` command",
                  "answer_start": 843
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# More About Cargo and Crates.io\n\nSo far we\u2019ve used only the most basic features of Cargo to build, run, and test\nour code, but it can do a lot more. In this chapter, we\u2019ll discuss some of its\nother, more advanced features to show you how to do the following:\n\n* Customize your build through release profiles\n* Publish libraries on [crates.io](https://crates.io/)<!-- ignore -->\n* Organize large projects with workspaces\n* Install binaries from [crates.io](https://crates.io/)<!-- ignore -->\n* Extend Cargo using custom commands\n\nCargo can do even more than the functionality we cover in this chapter, so for\na full explanation of all its features, see [its\ndocumentation](https://doc.rust-lang.org/cargo/).\n",
          "qas": [
            {
              "question": "Where to read more about cargo?",
              "id": 121,
              "answers": [
                {
                  "text": "https://doc.rust-lang.org/cargo/",
                  "answer_start": 673
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rust build tool?",
              "id": 12,
              "answers": [
                {
                  "text": "Cargo",
                  "answer_start": 84
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What can Cargo do?",
              "id": 11,
              "answers": [
                {
                  "text": "* Customize your build through release profiles\n* Publish libraries on [crates.io](https://crates.io/)\u2039!-- ignore -->\n* Organize large projects with workspaces\n* Install binaries from [crates.io](https://crates.io/)\u2039!-- ignore -->\n* Extend Cargo using custom commands",
                  "answer_start": 261
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Writing Automated Tests\n\nIn his 1972 essay \u201cThe Humble Programmer,\u201d Edsger W. Dijkstra said that\n\u201cProgram testing can be a very effective way to show the presence of bugs, but\nit is hopelessly inadequate for showing their absence.\u201d That doesn\u2019t mean we\nshouldn\u2019t try to test as much as we can!\n\nCorrectness in our programs is the extent to which our code does what we intend\nit to do. Rust is designed with a high degree of concern about the correctness\nof programs, but correctness is complex and not easy to prove. Rust\u2019s type\nsystem shoulders a huge part of this burden, but the type system cannot catch\neverything. As such, Rust includes support for writing automated software tests.\n\nSay we write a function `add_two` that adds 2 to whatever number is passed to\nit. This function\u2019s signature accepts an integer as a parameter and returns an\ninteger as a result. When we implement and compile that function, Rust does all\nthe type checking and borrow checking that you\u2019ve learned so far to ensure\nthat, for instance, we aren\u2019t passing a `String` value or an invalid reference\nto this function. But Rust *can\u2019t* check that this function will do precisely\nwhat we intend, which is return the parameter plus 2 rather than, say, the\nparameter plus 10 or the parameter minus 50! That\u2019s where tests come in.\n\nWe can write tests that assert, for example, that when we pass `3` to the\n`add_two` function, the returned value is `5`. We can run these tests whenever\nwe make changes to our code to make sure any existing correct behavior has not\nchanged.\n\nTesting is a complex skill: although we can\u2019t cover every detail about how to\nwrite good tests in one chapter, we\u2019ll discuss the mechanics of Rust\u2019s testing\nfacilities. We\u2019ll talk about the annotations and macros available to you when\nwriting your tests, the default behavior and options provided for running your\ntests, and how to organize tests into unit tests and integration tests.\n",
          "qas": [
            {
              "question": "When should I run tests?",
              "id": 2072,
              "answers": [
                {
                  "text": "whenever\nwe make changes to our code to make sure any existing correct behavior has not\nchanged",
                  "answer_start": 1453
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is important to be familiar with when writing tests in Rust?",
              "id": 2070,
              "answers": [
                {
                  "text": "annotations and macros",
                  "answer_start": 1741
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does Rust support tests?",
              "id": 2071,
              "answers": [
                {
                  "text": "Rust includes support for writing automated software tests.",
                  "answer_start": 630
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why should I write tests?",
              "id": 2069,
              "answers": [
                {
                  "text": "check that this function will do precisely\nwhat we intend",
                  "answer_start": 1117
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is it possible to use assertions in tests?",
              "id": 2068,
              "answers": [
                {
                  "text": "We can write tests that assert",
                  "answer_start": 1309
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Extensible Concurrency with the `Sync` and `Send` Traits\n\nInterestingly, the Rust language has *very* few concurrency features. Almost\nevery concurrency feature we\u2019ve talked about so far in this chapter has been\npart of the standard library, not the language. Your options for handling\nconcurrency are not limited to the language or the standard library; you can\nwrite your own concurrency features or use those written by others.\n\nHowever, two concurrency concepts are embedded in the language: the\n`std::marker` traits `Sync` and `Send`.\n\n### Allowing Transference of Ownership Between Threads with `Send`\n\nThe `Send` marker trait indicates that ownership of values of the type\nimplementing `Send` can be transferred between threads. Almost every Rust type\nis `Send`, but there are some exceptions, including `Rc<T>`: this cannot be\n`Send` because if you cloned an `Rc<T>` value and tried to transfer ownership\nof the clone to another thread, both threads might update the reference count\nat the same time. For this reason, `Rc<T>` is implemented for use in\nsingle-threaded situations where you don\u2019t want to pay the thread-safe\nperformance penalty.\n\nTherefore, Rust\u2019s type system and trait bounds ensure that you can never\naccidentally send an `Rc<T>` value across threads unsafely. When we tried to do\nthis in Listing 16-14, we got the error `the trait Send is not implemented for\nRc<Mutex<i32>>`. When we switched to `Arc<T>`, which is `Send`, the code\ncompiled.\n\nAny type composed entirely of `Send` types is automatically marked as `Send` as\nwell. Almost all primitive types are `Send`, aside from raw pointers, which\nwe\u2019ll discuss in Chapter 19.\n\n### Allowing Access from Multiple Threads with `Sync`\n\nThe `Sync` marker trait indicates that it is safe for the type implementing\n`Sync` to be referenced from multiple threads. In other words, any type `T` is\n`Sync` if `&T` (an immutable reference to `T`) is `Send`, meaning the reference\ncan be sent safely to another thread. Similar to `Send`, primitive types are\n`Sync`, and types composed entirely of types that are `Sync` are also `Sync`.\n\nThe smart pointer `Rc<T>` is also not `Sync` for the same reasons that it\u2019s not\n`Send`. The `RefCell<T>` type (which we talked about in Chapter 15) and the\nfamily of related `Cell<T>` types are not `Sync`. The implementation of borrow\nchecking that `RefCell<T>` does at runtime is not thread-safe. The smart\npointer `Mutex<T>` is `Sync` and can be used to share access with multiple\nthreads as you saw in the [\u201cSharing a `Mutex<T>` Between Multiple\nThreads\u201d][sharing-a-mutext-between-multiple-threads]<!-- ignore --> section.\n\n### Implementing `Send` and `Sync` Manually Is Unsafe\n\nBecause types that are made up of `Send` and `Sync` traits are automatically\nalso `Send` and `Sync`, we don\u2019t have to implement those traits manually. As\nmarker traits, they don\u2019t even have any methods to implement. They\u2019re just\nuseful for enforcing invariants related to concurrency.\n\nManually implementing these traits involves implementing unsafe Rust code.\nWe\u2019ll talk about using unsafe Rust code in Chapter 19; for now, the important\ninformation is that building new concurrent types not made up of `Send` and\n`Sync` parts requires careful thought to uphold the safety guarantees. [\u201cThe\nRustonomicon\u201d][nomicon] has more information about these guarantees and how to\nuphold them.\n\n## Summary\n\nThis isn\u2019t the last you\u2019ll see of concurrency in this book: the project in\nChapter 20 will use the concepts in this chapter in a more realistic situation\nthan the smaller examples discussed here.\n\nAs mentioned earlier, because very little of how Rust handles concurrency is\npart of the language, many concurrency solutions are implemented as crates.\nThese evolve more quickly than the standard library, so be sure to search\nonline for the current, state-of-the-art crates to use in multithreaded\nsituations.\n\nThe Rust standard library provides channels for message passing and smart\npointer types, such as `Mutex<T>` and `Arc<T>`, that are safe to use in\nconcurrent contexts. The type system and the borrow checker ensure that the\ncode using these solutions won\u2019t end up with data races or invalid references.\nOnce you get your code to compile, you can rest assured that it will happily\nrun on multiple threads without the kinds of hard-to-track-down bugs common in\nother languages. Concurrent programming is no longer a concept to be afraid of:\ngo forth and make your programs concurrent, fearlessly!\n\nNext, we\u2019ll talk about idiomatic ways to model problems and structure solutions\nas your Rust programs get bigger. In addition, we\u2019ll discuss how Rust\u2019s idioms\nrelate to those you might be familiar with from object-oriented programming.\n\n[sharing-a-mutext-between-multiple-threads]:\nch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads\n[nomicon]: ../nomicon/index.html\n",
          "qas": [
            {
              "question": "Which types implement Send?",
              "id": 75,
              "answers": [
                {
                  "text": "Almost every Rust type\nis `Send`, but there are some exceptions, including `Rc\u2039T>`",
                  "answer_start": 739
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When types are Sync?",
              "id": 78,
              "answers": [
                {
                  "text": "any type `T` is\n`Sync` if `&T` (an immutable reference to `T`) is `Send`, meaning the reference\ncan be sent safely to another thread.",
                  "answer_start": 1852
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does Send trait do?",
              "id": 74,
              "answers": [
                {
                  "text": "The `Send` marker trait indicates that ownership of values of the type\nimplementing `Send` can be transferred between threads.",
                  "answer_start": 612
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which structs are Send?",
              "id": 76,
              "answers": [
                {
                  "text": "Any type composed entirely of `Send` types is automatically marked as `Send` as\nwell.",
                  "answer_start": 1472
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does Sync trait do?",
              "id": 77,
              "answers": [
                {
                  "text": "The `Sync` marker trait indicates that it is safe for the type implementing\n`Sync` to be referenced from multiple threads.",
                  "answer_start": 1713
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Functions\n\nFunctions are prevalent in Rust code. You\u2019ve already seen one of the most\nimportant functions in the language: the `main` function, which is the entry\npoint of many programs. You\u2019ve also seen the `fn` keyword, which allows you to\ndeclare new functions.\n\nRust code uses *snake case* as the conventional style for function and variable\nnames, in which all letters are lowercase and underscores separate words.\nHere\u2019s a program that contains an example function definition:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-16-functions/src/main.rs}}\n```\n\nWe define a function in Rust by entering `fn` followed by a function name and a\nset of parentheses. The curly brackets tell the compiler where the function\nbody begins and ends.\n\nWe can call any function we\u2019ve defined by entering its name followed by a set\nof parentheses. Because `another_function` is defined in the program, it can be\ncalled from inside the `main` function. Note that we defined `another_function`\n*after* the `main` function in the source code; we could have defined it before\nas well. Rust doesn\u2019t care where you define your functions, only that they\u2019re\ndefined somewhere in a scope that can be seen by the caller.\n\nLet\u2019s start a new binary project named *functions* to explore functions\nfurther. Place the `another_function` example in *src/main.rs* and run it. You\nshould see the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-16-functions/output.txt}}\n```\n\nThe lines execute in the order in which they appear in the `main` function.\nFirst the \u201cHello, world!\u201d message prints, and then `another_function` is called\nand its message is printed.\n\n### Parameters\n\nWe can define functions to have *parameters*, which are special variables that\nare part of a function\u2019s signature. When a function has parameters, you can\nprovide it with concrete values for those parameters. Technically, the concrete\nvalues are called *arguments*, but in casual conversation, people tend to use\nthe words *parameter* and *argument* interchangeably for either the variables\nin a function\u2019s definition or the concrete values passed in when you call a\nfunction.\n\nIn this version of `another_function` we add a parameter:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/src/main.rs}}\n```\n\nTry running this program; you should get the following output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/output.txt}}\n```\n\nThe declaration of `another_function` has one parameter named `x`. The type of\n`x` is specified as `i32`. When we pass `5` in to `another_function`, the\n`println!` macro puts `5` where the pair of curly brackets containing `x` was\nin the format string.\n\nIn function signatures, you *must* declare the type of each parameter. This is\na deliberate decision in Rust\u2019s design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what type you mean. The compiler is also able to give\nmore helpful error messages if it knows what types the function expects.\n\nWhen defining multiple parameters, separate the parameter declarations with\ncommas, like this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/src/main.rs}}\n```\n\nThis example creates a function named `print_labeled_measurement` with two\nparameters. The first parameter is named `value` and is an `i32`. The second is\nnamed `unit_label` and is type `char`. The function then prints text containing\nboth the `value` and the `unit_label`.\n\nLet\u2019s try running this code. Replace the program currently in your *functions*\nproject\u2019s *src/main.rs* file with the preceding example and run it using `cargo\nrun`:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/output.txt}}\n```\n\nBecause we called the function with `5` as the value for `value` and `'h'` as\nthe value for `unit_label`, the program output contains those values.\n\n### Statements and Expressions\n\nFunction bodies are made up of a series of statements optionally ending in an\nexpression. So far, the functions we\u2019ve covered haven\u2019t included an ending\nexpression, but you have seen an expression as part of a statement. Because\nRust is an expression-based language, this is an important distinction to\nunderstand. Other languages don\u2019t have the same distinctions, so let\u2019s look at\nwhat statements and expressions are and how their differences affect the bodies\nof functions.\n\n* **Statements** are instructions that perform some action and do not return\n  a value.\n* **Expressions** evaluate to a resultant value. Let\u2019s look at some examples.\n\nWe\u2019ve actually already used statements and expressions. Creating a variable and\nassigning a value to it with the `let` keyword is a statement. In Listing 3-1,\n`let y = 6;` is a statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 3-1: A `main` function declaration containing one statement</span>\n\nFunction definitions are also statements; the entire preceding example is a\nstatement in itself.\n\nStatements do not return values. Therefore, you can\u2019t assign a `let` statement\nto another variable, as the following code tries to do; you\u2019ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/src/main.rs}}\n```\n\nWhen you run this program, the error you\u2019ll get looks like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/output.txt}}\n```\n\nThe `let y = 6` statement does not return a value, so there isn\u2019t anything for\n`x` to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write `x = y = 6` and have both `x` and `y` have the value\n`6`; that is not the case in Rust.\n\nExpressions evaluate to a value and make up most of the rest of the code that\nyou\u2019ll write in Rust. Consider a math operation, such as `5 + 6`, which is an\nexpression that evaluates to the value `11`. Expressions can be part of\nstatements: in Listing 3-1, the `6` in the statement `let y = 6;` is an\nexpression that evaluates to the value `6`. Calling a function is an\nexpression. Calling a macro is an expression. A new scope block created with\ncurly brackets is an expression, for example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-20-blocks-are-expressions/src/main.rs}}\n```\n\nThis expression:\n\n```rust,ignore\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to `y`\nas part of the `let` statement. Note that the `x + 1` line doesn\u2019t have a\nsemicolon at the end, which is unlike most of the lines you\u2019ve seen so far.\nExpressions do not include ending semicolons. If you add a semicolon to the end\nof an expression, you turn it into a statement, and it will then not return a\nvalue. Keep this in mind as you explore function return values and expressions\nnext.\n\n### Functions with Return Values\n\nFunctions can return values to the code that calls them. We don\u2019t name return\nvalues, but we must declare their type after an arrow (`->`). In Rust, the\nreturn value of the function is synonymous with the value of the final\nexpression in the block of the body of a function. You can return early from a\nfunction by using the `return` keyword and specifying a value, but most\nfunctions return the last expression implicitly. Here\u2019s an example of a\nfunction that returns a value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/src/main.rs}}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five`\nfunction\u2014just the number `5` by itself. That\u2019s a perfectly valid function in\nRust. Note that the function\u2019s return type is specified too, as `-> i32`. Try\nrunning this code; the output should look like this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/output.txt}}\n```\n\nThe `5` in `five` is the function\u2019s return value, which is why the return type\nis `i32`. Let\u2019s examine this in more detail. There are two important bits:\nfirst, the line `let x = five();` shows that we\u2019re using the return value of a\nfunction to initialize a variable. Because the function `five` returns a `5`,\nthat line is the same as the following:\n\n```rust\nlet x = 5;\n```\n\nSecond, the `five` function has no parameters and defines the type of the\nreturn value, but the body of the function is a lonely `5` with no semicolon\nbecause it\u2019s an expression whose value we want to return.\n\nLet\u2019s look at another example:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-22-function-parameter-and-return/src/main.rs}}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a\nsemicolon at the end of the line containing `x + 1`, changing it from an\nexpression to a statement, we\u2019ll get an error:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/src/main.rs}}\n```\n\nCompiling this code produces an error, as follows:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/output.txt}}\n```\n\nThe main error message, `mismatched types`, reveals the core issue with this\ncode. The definition of the function `plus_one` says that it will return an\n`i32`, but statements don\u2019t evaluate to a value, which is expressed by `()`,\nthe unit type. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error.\n",
          "qas": [
            {
              "question": "How do we call a function?",
              "id": 330,
              "answers": [
                {
                  "text": "We can call any function we\u2019ve defined by entering its name followed by a set\nof parentheses",
                  "answer_start": 833
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are function definitions statements?",
              "id": 338,
              "answers": [
                {
                  "text": "Function definitions are also statements",
                  "answer_start": 5472
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does the function look like?",
              "id": 335,
              "answers": [
                {
                  "text": "made up of a series of statements optionally ending in an\nexpression",
                  "answer_start": 4403
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the most important function in Rust?",
              "id": 326,
              "answers": [
                {
                  "text": "`main` function",
                  "answer_start": 129
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the naming convention for functions?",
              "id": 328,
              "answers": [
                {
                  "text": "snake case",
                  "answer_start": 284
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the function's parameters?",
              "id": 331,
              "answers": [
                {
                  "text": "which are special variables that\nare part of a function\u2019s signature",
                  "answer_start": 1832
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are statements?",
              "id": 336,
              "answers": [
                {
                  "text": "re instructions that perform some action and do not return\n  a value",
                  "answer_start": 4878
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do I need to declare the type of the parameter?",
              "id": 333,
              "answers": [
                {
                  "text": "In function signatures, you *must* declare the type of each parameter",
                  "answer_start": 2950
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which keyword allows us to declare new functions?",
              "id": 327,
              "answers": [
                {
                  "text": "fn",
                  "answer_start": 211
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How do we declare what type is returned by a function?",
              "id": 339,
              "answers": [
                {
                  "text": " after an arrow",
                  "answer_start": 7841
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Comparing Performance: Loops vs. Iterators\n\nTo determine whether to use loops or iterators, you need to know which\nimplementation is faster: the version of the `search` function with an explicit\n`for` loop or the version with iterators.\n\nWe ran a benchmark by loading the entire contents of *The Adventures of\nSherlock Holmes* by Sir Arthur Conan Doyle into a `String` and looking for the\nword *the* in the contents. Here are the results of the benchmark on the\nversion of `search` using the `for` loop and the version using iterators:\n\n```text\ntest bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)\n```\n\nThe iterator version was slightly faster! We won\u2019t explain the benchmark code\nhere, because the point is not to prove that the two versions are equivalent\nbut to get a general sense of how these two implementations compare\nperformance-wise.\n\nFor a more comprehensive benchmark, you should check using various texts of\nvarious sizes as the `contents`, different words and words of different lengths\nas the `query`, and all kinds of other variations. The point is this:\niterators, although a high-level abstraction, get compiled down to roughly the\nsame code as if you\u2019d written the lower-level code yourself. Iterators are one\nof Rust\u2019s *zero-cost abstractions*, by which we mean using the abstraction\nimposes no additional runtime overhead. This is analogous to how Bjarne\nStroustrup, the original designer and implementor of C++, defines\n*zero-overhead* in \u201cFoundations of C++\u201d (2012):\n\n> In general, C++ implementations obey the zero-overhead principle: What you\n> don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand\n> code any better.\n\nAs another example, the following code is taken from an audio decoder. The\ndecoding algorithm uses the linear prediction mathematical operation to\nestimate future values based on a linear function of the previous samples. This\ncode uses an iterator chain to do some math on three variables in scope: a\n`buffer` slice of data, an array of 12 `coefficients`, and an amount by which\nto shift data in `qlp_shift`. We\u2019ve declared the variables within this example\nbut not given them any values; although this code doesn\u2019t have much meaning\noutside of its context, it\u2019s still a concise, real-world example of how Rust\ntranslates high-level ideas to low-level code.\n\n```rust,ignore\nlet buffer: &mut [i32];\nlet coefficients: [i64; 12];\nlet qlp_shift: i16;\n\nfor i in 12..buffer.len() {\n    let prediction = coefficients.iter()\n                                 .zip(&buffer[i - 12..i])\n                                 .map(|(&c, &s)| c * s as i64)\n                                 .sum::<i64>() >> qlp_shift;\n    let delta = buffer[i];\n    buffer[i] = prediction as i32 + delta;\n}\n```\n\nTo calculate the value of `prediction`, this code iterates through each of the\n12 values in `coefficients` and uses the `zip` method to pair the coefficient\nvalues with the previous 12 values in `buffer`. Then, for each pair, we\nmultiply the values together, sum all the results, and shift the bits in the\nsum `qlp_shift` bits to the right.\n\nCalculations in applications like audio decoders often prioritize performance\nmost highly. Here, we\u2019re creating an iterator, using two adaptors, and then\nconsuming the value. What assembly code would this Rust code compile to? Well,\nas of this writing, it compiles down to the same assembly you\u2019d write by hand.\nThere\u2019s no loop at all corresponding to the iteration over the values in\n`coefficients`: Rust knows that there are 12 iterations, so it \u201cunrolls\u201d the\nloop. *Unrolling* is an optimization that removes the overhead of the loop\ncontrolling code and instead generates repetitive code for each iteration of\nthe loop.\n\nAll of the coefficients get stored in registers, which means accessing the\nvalues is very fast. There are no bounds checks on the array access at runtime.\nAll these optimizations that Rust is able to apply make the resulting code\nextremely efficient. Now that you know this, you can use iterators and closures\nwithout fear! They make code seem like it\u2019s higher level but don\u2019t impose a\nruntime performance penalty for doing so.\n\n## Summary\n\nClosures and iterators are Rust features inspired by functional programming\nlanguage ideas. They contribute to Rust\u2019s capability to clearly express\nhigh-level ideas at low-level performance. The implementations of closures and\niterators are such that runtime performance is not affected. This is part of\nRust\u2019s goal to strive to provide zero-cost abstractions.\n\nNow that we\u2019ve improved the expressiveness of our I/O project, let\u2019s look at\nsome more features of `cargo` that will help us share the project with the\nworld.\n",
          "qas": [
            {
              "question": "How iterators work on assembly level?",
              "id": 9,
              "answers": [
                {
                  "text": "Well,\nas of this writing, it compiles down to the same assembly you\u2019d write by hand.",
                  "answer_start": 3400
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is zero-overhead?",
              "id": 8,
              "answers": [
                {
                  "text": "> In general, C++ implementations obey the zero-overhead principle: What you\n> don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand\n> code any better.",
                  "answer_start": 1577
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is unrolling?",
              "id": 119,
              "answers": [
                {
                  "text": "*Unrolling* is an optimization that removes the overhead of the loop\ncontrolling code and instead generates repetitive code for each iteration of\nthe loop.",
                  "answer_start": 3641
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is iterator faster than loop?",
              "id": 10,
              "answers": [
                {
                  "text": "The iterator version was slightly faster!",
                  "answer_start": 689
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Developing the Library\u2019s Functionality with Test-Driven Development\n\nNow that we\u2019ve extracted the logic into *src/lib.rs* and left the argument\ncollecting and error handling in *src/main.rs*, it\u2019s much easier to write tests\nfor the core functionality of our code. We can call functions directly with\nvarious arguments and check return values without having to call our binary\nfrom the command line.\n\nIn this section, we\u2019ll add the searching logic to the `minigrep` program\nusing the test-driven development (TDD) process with the following steps:\n\n1. Write a test that fails and run it to make sure it fails for the reason you\n   expect.\n2. Write or modify just enough code to make the new test pass.\n3. Refactor the code you just added or changed and make sure the tests\n   continue to pass.\n4. Repeat from step 1!\n\nThough it\u2019s just one of many ways to write software, TDD can help drive code\ndesign. Writing the test before you write the code that makes the test pass\nhelps to maintain high test coverage throughout the process.\n\nWe\u2019ll test drive the implementation of the functionality that will actually do\nthe searching for the query string in the file contents and produce a list of\nlines that match the query. We\u2019ll add this functionality in a function called\n`search`.\n\n### Writing a Failing Test\n\nBecause we don\u2019t need them anymore, let\u2019s remove the `println!` statements from\n*src/lib.rs* and *src/main.rs* that we used to check the program\u2019s behavior.\nThen, in *src/lib.rs*, add a `tests` module with a test function, as we did in\n[Chapter 11][ch11-anatomy]<!-- ignore -->. The test function specifies the\nbehavior we want the `search` function to have: it will take a query and the\ntext to search, and it will return only the lines from the text that contain\nthe query. Listing 12-15 shows this test, which won\u2019t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-15/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-15: Creating a failing test for the `search`\nfunction we wish we had</span>\n\nThis test searches for the string `\"duct\"`. The text we\u2019re searching is three\nlines, only one of which contains `\"duct\"` (Note that the backslash after the\nopening double quote tells Rust not to put a newline character at the beginning\nof the contents of this string literal). We assert that the value returned from\nthe `search` function contains only the line we expect.\n\nWe aren\u2019t yet able to run this test and watch it fail because the test doesn\u2019t\neven compile: the `search` function doesn\u2019t exist yet! In accordance with TDD\nprinciples, we\u2019ll add just enough code to get the test to compile and run by\nadding a definition of the `search` function that always returns an empty\nvector, as shown in Listing 12-16. Then the test should compile and fail\nbecause an empty vector doesn\u2019t match a vector containing the line `\"safe,\nfast, productive.\"`\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-16/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-16: Defining just enough of the `search`\nfunction so our test will compile</span>\n\nNotice that we need to define an explicit lifetime `'a` in the signature of\n`search` and use that lifetime with the `contents` argument and the return\nvalue. Recall in [Chapter 10][ch10-lifetimes]<!-- ignore --> that the lifetime\nparameters specify which argument lifetime is connected to the lifetime of the\nreturn value. In this case, we indicate that the returned vector should contain\nstring slices that reference slices of the argument `contents` (rather than the\nargument `query`).\n\nIn other words, we tell Rust that the data returned by the `search` function\nwill live as long as the data passed into the `search` function in the\n`contents` argument. This is important! The data referenced *by* a slice needs\nto be valid for the reference to be valid; if the compiler assumes we\u2019re making\nstring slices of `query` rather than `contents`, it will do its safety checking\nincorrectly.\n\nIf we forget the lifetime annotations and try to compile this function, we\u2019ll\nget this error:\n\n```console\n{{#include ../listings/ch12-an-io-project/output-only-02-missing-lifetimes/output.txt}}\n```\n\nRust can\u2019t possibly know which of the two arguments we need, so we need to tell\nit explicitly. Because `contents` is the argument that contains all of our text\nand we want to return the parts of that text that match, we know `contents` is\nthe argument that should be connected to the return value using the lifetime\nsyntax.\n\nOther programming languages don\u2019t require you to connect arguments to return\nvalues in the signature, but this practice will get easier over time. You might\nwant to compare this example with the [\u201cValidating References with\nLifetimes\u201d][validating-references-with-lifetimes]<!-- ignore --> section in\nChapter 10.\n\nNow let\u2019s run the test:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-16/output.txt}}\n```\n\nGreat, the test fails, exactly as we expected. Let\u2019s get the test to pass!\n\n### Writing Code to Pass the Test\n\nCurrently, our test is failing because we always return an empty vector. To fix\nthat and implement `search`, our program needs to follow these steps:\n\n* Iterate through each line of the contents.\n* Check whether the line contains our query string.\n* If it does, add it to the list of values we\u2019re returning.\n* If it doesn\u2019t, do nothing.\n* Return the list of results that match.\n\nLet\u2019s work through each step, starting with iterating through lines.\n\n#### Iterating Through Lines with the `lines` Method\n\nRust has a helpful method to handle line-by-line iteration of strings,\nconveniently named `lines`, that works as shown in Listing 12-17. Note this\nwon\u2019t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-17/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-17: Iterating through each line in `contents`\n</span>\n\nThe `lines` method returns an iterator. We\u2019ll talk about iterators in depth in\n[Chapter 13][ch13-iterators]<!-- ignore -->, but recall that you saw this way\nof using an iterator in [Listing 3-5][ch3-iter]<!-- ignore -->, where we used a\n`for` loop with an iterator to run some code on each item in a collection.\n\n#### Searching Each Line for the Query\n\nNext, we\u2019ll check whether the current line contains our query string.\nFortunately, strings have a helpful method named `contains` that does this for\nus! Add a call to the `contains` method in the `search` function, as shown in\nListing 12-18. Note this still won\u2019t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-18/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-18: Adding functionality to see whether the\nline contains the string in `query`</span>\n\nAt the moment, we\u2019re building up functionality. To get it to compile, we need\nto return a value from the body as we indicated we would in the function\nsignature.\n\n#### Storing Matching Lines\n\nTo finish this function, we need a way to store the matching lines that we want\nto return. For that, we can make a mutable vector before the `for` loop and\ncall the `push` method to store a `line` in the vector. After the `for` loop,\nwe return the vector, as shown in Listing 12-19.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-19: Storing the lines that match so we can\nreturn them</span>\n\nNow the `search` function should return only the lines that contain `query`,\nand our test should pass. Let\u2019s run the test:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-19/output.txt}}\n```\n\nOur test passed, so we know it works!\n\nAt this point, we could consider opportunities for refactoring the\nimplementation of the search function while keeping the tests passing to\nmaintain the same functionality. The code in the search function isn\u2019t too bad,\nbut it doesn\u2019t take advantage of some useful features of iterators. We\u2019ll\nreturn to this example in [Chapter 13][ch13-iterators]<!-- ignore -->, where\nwe\u2019ll explore iterators in detail, and look at how to improve it.\n\n#### Using the `search` Function in the `run` Function\n\nNow that the `search` function is working and tested, we need to call `search`\nfrom our `run` function. We need to pass the `config.query` value and the\n`contents` that `run` reads from the file to the `search` function. Then `run`\nwill print each line returned from `search`:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/src/lib.rs:here}}\n```\n\nWe\u2019re still using a `for` loop to return each line from `search` and print it.\n\nNow the entire program should work! Let\u2019s try it out, first with a word that\nshould return exactly one line from the Emily Dickinson poem, \u201cfrog\u201d:\n\n```console\n{{#include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/output.txt}}\n```\n\nCool! Now let\u2019s try a word that will match multiple lines, like \u201cbody\u201d:\n\n```console\n{{#include ../listings/ch12-an-io-project/output-only-03-multiple-matches/output.txt}}\n```\n\nAnd finally, let\u2019s make sure that we don\u2019t get any lines when we search for a\nword that isn\u2019t anywhere in the poem, such as \u201cmonomorphization\u201d:\n\n```console\n{{#include ../listings/ch12-an-io-project/output-only-04-no-matches/output.txt}}\n```\n\nExcellent! We\u2019ve built our own mini version of a classic tool and learned a lot\nabout how to structure applications. We\u2019ve also learned a bit about file input\nand output, lifetimes, testing, and command line parsing.\n\nTo round out this project, we\u2019ll briefly demonstrate how to work with\nenvironment variables and how to print to standard error, both of which are\nuseful when you\u2019re writing command line programs.\n\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[ch11-anatomy]: ch11-01-writing-tests.html#the-anatomy-of-a-test-function\n[ch10-lifetimes]: ch10-03-lifetime-syntax.html\n[ch3-iter]: ch03-05-control-flow.html#looping-through-a-collection-with-for\n[ch13-iterators]: ch13-02-iterators.html\n",
          "qas": [
            {
              "question": "How do I produce code using Test Driven Development?",
              "id": 2197,
              "answers": [
                {
                  "text": "1. Write a test that fails and run it to make sure it fails for the reason you\n   expect.\n2. Write or modify just enough code to make the new test pass.\n3. Refactor the code you just added or changed and make sure the tests\n   continue to pass.\n4. Repeat from step 1!",
                  "answer_start": 551
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the benefits of TDD?",
              "id": 2198,
              "answers": [
                {
                  "text": "Writing the test before you write the code that makes the test pass\nhelps to maintain high test coverage throughout the process.",
                  "answer_start": 905
                }
              ],
              "is_impossible": false
            },
            {
              "question": "From what should I start in Test Driven Development?",
              "id": 2199,
              "answers": [
                {
                  "text": "Write a test that fails and run it to make sure it fails for the reason you\n   expect.",
                  "answer_start": 554
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# An I/O Project: Building a Command Line Program\n\nThis chapter is a recap of the many skills you\u2019ve learned so far and an\nexploration of a few more standard library features. We\u2019ll build a command line\ntool that interacts with file and command line input/output to practice some of\nthe Rust concepts you now have under your belt.\n\nRust\u2019s speed, safety, single binary output, and cross-platform support make it\nan ideal language for creating command line tools, so for our project, we\u2019ll\nmake our own version of the classic command line search tool `grep`\n(**g**lobally search a **r**egular **e**xpression and **p**rint). In the\nsimplest use case, `grep` searches a specified file for a specified string. To\ndo so, `grep` takes as its arguments a file path and a string. Then it reads\nthe file, finds lines in that file that contain the string argument, and prints\nthose lines.\n\nAlong the way, we\u2019ll show how to make our command line tool use the terminal\nfeatures that many other command line tools use. We\u2019ll read the value of an\nenvironment variable to allow the user to configure the behavior of our tool.\nWe\u2019ll also print error messages to the standard error console stream (`stderr`)\ninstead of standard output (`stdout`), so, for example, the user can redirect\nsuccessful output to a file while still seeing error messages onscreen.\n\nOne Rust community member, Andrew Gallant, has already created a fully\nfeatured, very fast version of `grep`, called `ripgrep`. By comparison, our\nversion will be fairly simple, but this chapter will give you some of the\nbackground knowledge you need to understand a real-world project such as\n`ripgrep`.\n\nOur `grep` project will combine a number of concepts you\u2019ve learned so far:\n\n* Organizing code (using what you learned about modules in [Chapter 7][ch7]<!--\n  ignore -->)\n* Using vectors and strings (collections, [Chapter 8][ch8]<!-- ignore -->)\n* Handling errors ([Chapter 9][ch9]<!-- ignore -->)\n* Using traits and lifetimes where appropriate ([Chapter 10][ch10]<!-- ignore\n  -->)\n* Writing tests ([Chapter 11][ch11]<!-- ignore -->)\n\nWe\u2019ll also briefly introduce closures, iterators, and trait objects, which\nChapters [13][ch13]<!-- ignore --> and [17][ch17]<!-- ignore --> will cover in\ndetail.\n\n[ch7]: ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\n[ch8]: ch08-00-common-collections.html\n[ch9]: ch09-00-error-handling.html\n[ch10]: ch10-00-generics.html\n[ch11]: ch11-00-testing.html\n[ch13]: ch13-00-functional-features.html\n[ch17]: ch17-00-oop.html\n",
          "qas": [
            {
              "question": "What is the name of error stream?",
              "id": 2111,
              "answers": [
                {
                  "text": "stderr",
                  "answer_start": 1181
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the purpose of stderr?",
              "id": 2114,
              "answers": [
                {
                  "text": "print error messages",
                  "answer_start": 1121
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the name of standard output?",
              "id": 2112,
              "answers": [
                {
                  "text": "stdout",
                  "answer_start": 1219
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which parameters takes 'grep' for file search?",
              "id": 2113,
              "answers": [
                {
                  "text": "a file path and a string",
                  "answer_start": 745
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Macros\n\nWe\u2019ve used macros like `println!` throughout this book, but we haven\u2019t fully\nexplored what a macro is and how it works. The term *macro* refers to a family\nof features in Rust: *declarative* macros with `macro_rules!` and three kinds\nof *procedural* macros:\n\n* Custom `#[derive]` macros that specify code added with the `derive` attribute\n  used on structs and enums\n* Attribute-like macros that define custom attributes usable on any item\n* Function-like macros that look like function calls but operate on the tokens\n  specified as their argument\n\nWe\u2019ll talk about each of these in turn, but first, let\u2019s look at why we even\nneed macros when we already have functions.\n\n### The Difference Between Macros and Functions\n\nFundamentally, macros are a way of writing code that writes other code, which\nis known as *metaprogramming*. In Appendix C, we discuss the `derive`\nattribute, which generates an implementation of various traits for you. We\u2019ve\nalso used the `println!` and `vec!` macros throughout the book. All of these\nmacros *expand* to produce more code than the code you\u2019ve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don\u2019t.\n\nA function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call `println!(\"hello\")` with one argument or\n`println!(\"hello {}\", name)` with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can\u2019t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.\n\nThe downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you\u2019re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.\n\nAnother important difference between macros and functions is that you must\ndefine macros or bring them into scope *before* you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.\n\n### Declarative Macros with `macro_rules!` for General Metaprogramming\n\nThe most widely used form of macros in Rust is the *declarative macro*. These\nare also sometimes referred to as \u201cmacros by example,\u201d \u201c`macro_rules!` macros,\u201d\nor just plain \u201cmacros.\u201d At their core, declarative macros allow you to write\nsomething similar to a Rust `match` expression. As discussed in Chapter 6,\n`match` expressions are control structures that take an expression, compare the\nresulting value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation.\n\nTo define a macro, you use the `macro_rules!` construct. Let\u2019s explore how to\nuse `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8\ncovered how we can use the `vec!` macro to create a new vector with particular\nvalues. For example, the following macro creates a new vector containing three\nintegers:\n\n```rust\nlet v: Vec<u32> = vec![1, 2, 3];\n```\n\nWe could also use the `vec!` macro to make a vector of two integers or a vector\nof five string slices. We wouldn\u2019t be able to use a function to do the same\nbecause we wouldn\u2019t know the number or type of values up front.\n\nListing 19-28 shows a slightly simplified definition of the `vec!` macro.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-28/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-28: A simplified version of the `vec!` macro\ndefinition</span>\n\n> Note: The actual definition of the `vec!` macro in the standard library\n> includes code to preallocate the correct amount of memory up front. That code\n> is an optimization that we don\u2019t include here to make the example simpler.\n\nThe `#[macro_export]` annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can\u2019t be brought into scope.\n\nWe then start the macro definition with `macro_rules!` and the name of the\nmacro we\u2019re defining *without* the exclamation mark. The name, in this case\n`vec`, is followed by curly brackets denoting the body of the macro definition.\n\nThe structure in the `vec!` body is similar to the structure of a `match`\nexpression. Here we have one arm with the pattern `( $( $x:expr ),* )`,\nfollowed by `=>` and the block of code associated with this pattern. If the\npattern matches, the associated block of code will be emitted. Given that this\nis the only pattern in this macro, there is only one valid way to match; any\nother pattern will result in an error. More complex macros will have more than\none arm.\n\nValid pattern syntax in macro definitions is different than the pattern syntax\ncovered in Chapter 18 because macro patterns are matched against Rust code\nstructure rather than values. Let\u2019s walk through what the pattern pieces in\nListing 19-28 mean; for the full macro pattern syntax, see the [Rust\nReference][ref].\n\nFirst, we use a set of parentheses to encompass the whole pattern. We use a\ndollar sign (`$`) to declare a variable in the macro system that will contain\nthe Rust code matching the pattern. The dollar sign makes it clear this is a\nmacro variable as opposed to a regular Rust variable. Next comes a set of\nparentheses that captures values that match the pattern within the parentheses\nfor use in the replacement code. Within `$()` is `$x:expr`, which matches any\nRust expression and gives the expression the name `$x`.\n\nThe comma following `$()` indicates that a literal comma separator character\ncould optionally appear after the code that matches the code in `$()`. The `*`\nspecifies that the pattern matches zero or more of whatever precedes the `*`.\n\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three\ntimes with the three expressions `1`, `2`, and `3`.\n\nNow let\u2019s look at the pattern in the body of the code associated with this arm:\n`temp_vec.push()` within `$()*` is generated for each part that matches `$()`\nin the pattern zero or more times depending on how many times the pattern\nmatches. The `$x` is replaced with each expression matched. When we call this\nmacro with `vec![1, 2, 3];`, the code generated that replaces this macro call\nwill be the following:\n\n```rust,ignore\n{\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n}\n```\n\nWe\u2019ve defined a macro that can take any number of arguments of any type and can\ngenerate code to create a vector containing the specified elements.\n\nTo learn more about how to write macros, consult the online documentation or\nother resources, such as [\u201cThe Little Book of Rust Macros\u201d][tlborm] started by\nDaniel Keep and continued by Lukas Wirth.\n\n### Procedural Macros for Generating Code from Attributes\n\nThe second form of macros is the *procedural macro*, which acts more like a\nfunction (and is a type of procedure). Procedural macros accept some code as an\ninput, operate on that code, and produce some code as an output rather than\nmatching against patterns and replacing the code with other code as declarative\nmacros do. The three kinds of procedural macros are custom derive,\nattribute-like, and function-like, and all work in a similar fashion.\n\nWhen creating procedural macros, the definitions must reside in their own crate\nwith a special crate type. This is for complex technical reasons that we hope\nto eliminate in the future. In Listing 19-29, we show how to define a\nprocedural macro, where `some_attribute` is a placeholder for using a specific\nmacro variety.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore\nuse proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n\n<span class=\"caption\">Listing 19-29: An example of defining a procedural\nmacro</span>\n\nThe function that defines a procedural macro takes a `TokenStream` as an input\nand produces a `TokenStream` as an output. The `TokenStream` type is defined by\nthe `proc_macro` crate that is included with Rust and represents a sequence of\ntokens. This is the core of the macro: the source code that the macro is\noperating on makes up the input `TokenStream`, and the code the macro produces\nis the output `TokenStream`. The function also has an attribute attached to it\nthat specifies which kind of procedural macro we\u2019re creating. We can have\nmultiple kinds of procedural macros in the same crate.\n\nLet\u2019s look at the different kinds of procedural macros. We\u2019ll start with a\ncustom derive macro and then explain the small dissimilarities that make the\nother forms different.\n\n### How to Write a Custom `derive` Macro\n\nLet\u2019s create a crate named `hello_macro` that defines a trait named\n`HelloMacro` with one associated function named `hello_macro`. Rather than\nmaking our users implement the `HelloMacro` trait for each of their types,\nwe\u2019ll provide a procedural macro so users can annotate their type with\n`#[derive(HelloMacro)]` to get a default implementation of the `hello_macro`\nfunction. The default implementation will print `Hello, Macro! My name is\nTypeName!` where `TypeName` is the name of the type on which this trait has\nbeen defined. In other words, we\u2019ll write a crate that enables another\nprogrammer to write code like Listing 19-30 using our crate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-30/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-30: The code a user of our crate will be able\nto write when using our procedural macro</span>\n\nThis code will print `Hello, Macro! My name is Pancakes!` when we\u2019re done. The\nfirst step is to make a new library crate, like this:\n\n```console\n$ cargo new hello_macro --lib\n```\n\nNext, we\u2019ll define the `HelloMacro` trait and its associated function:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/hello_macro/src/lib.rs}}\n```\n\nWe have a trait and its function. At this point, our crate user could implement\nthe trait to achieve the desired functionality, like so:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/pancakes/src/main.rs}}\n```\n\nHowever, they would need to write the implementation block for each type they\nwanted to use with `hello_macro`; we want to spare them from having to do this\nwork.\n\nAdditionally, we can\u2019t yet provide the `hello_macro` function with default\nimplementation that will print the name of the type the trait is implemented\non: Rust doesn\u2019t have reflection capabilities, so it can\u2019t look up the type\u2019s\nname at runtime. We need a macro to generate code at compile time.\n\nThe next step is to define the procedural macro. At the time of this writing,\nprocedural macros need to be in their own crate. Eventually, this restriction\nmight be lifted. The convention for structuring crates and macro crates is as\nfollows: for a crate named `foo`, a custom derive procedural macro crate is\ncalled `foo_derive`. Let\u2019s start a new crate called `hello_macro_derive` inside\nour `hello_macro` project:\n\n```console\n$ cargo new hello_macro_derive --lib\n```\n\nOur two crates are tightly related, so we create the procedural macro crate\nwithin the directory of our `hello_macro` crate. If we change the trait\ndefinition in `hello_macro`, we\u2019ll have to change the implementation of the\nprocedural macro in `hello_macro_derive` as well. The two crates will need to\nbe published separately, and programmers using these crates will need to add\nboth as dependencies and bring them both into scope. We could instead have the\n`hello_macro` crate use `hello_macro_derive` as a dependency and re-export the\nprocedural macro code. However, the way we\u2019ve structured the project makes it\npossible for programmers to use `hello_macro` even if they don\u2019t want the\n`derive` functionality.\n\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate.\nWe\u2019ll also need functionality from the `syn` and `quote` crates, as you\u2019ll see\nin a moment, so we need to add them as dependencies. Add the following to the\n*Cargo.toml* file for `hello_macro_derive`:\n\n<span class=\"filename\">Filename: hello_macro_derive/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/Cargo.toml:6:12}}\n```\n\nTo start defining the procedural macro, place the code in Listing 19-31 into\nyour *src/lib.rs* file for the `hello_macro_derive` crate. Note that this code\nwon\u2019t compile until we add a definition for the `impl_hello_macro` function.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 19-31: Code that most procedural macro crates\nwill require in order to process Rust code</span>\n\nNotice that we\u2019ve split the code into the `hello_macro_derive` function, which\nis responsible for parsing the `TokenStream`, and the `impl_hello_macro`\nfunction, which is responsible for transforming the syntax tree: this makes\nwriting a procedural macro more convenient. The code in the outer function\n(`hello_macro_derive` in this case) will be the same for almost every\nprocedural macro crate you see or create. The code you specify in the body of\nthe inner function (`impl_hello_macro` in this case) will be different\ndepending on your procedural macro\u2019s purpose.\n\nWe\u2019ve introduced three new crates: `proc_macro`, [`syn`], and [`quote`]. The\n`proc_macro` crate comes with Rust, so we didn\u2019t need to add that to the\ndependencies in *Cargo.toml*. The `proc_macro` crate is the compiler\u2019s API that\nallows us to read and manipulate Rust code from our code.\n\nThe `syn` crate parses Rust code from a string into a data structure that we\ncan perform operations on. The `quote` crate turns `syn` data structures back\ninto Rust code. These crates make it much simpler to parse any sort of Rust\ncode we might want to handle: writing a full parser for Rust code is no simple\ntask.\n\nThe `hello_macro_derive` function will be called when a user of our library\nspecifies `#[derive(HelloMacro)]` on a type. This is possible because we\u2019ve\nannotated the `hello_macro_derive` function here with `proc_macro_derive` and\nspecified the name `HelloMacro`, which matches our trait name; this is the\nconvention most procedural macros follow.\n\nThe `hello_macro_derive` function first converts the `input` from a\n`TokenStream` to a data structure that we can then interpret and perform\noperations on. This is where `syn` comes into play. The `parse` function in\n`syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the\nparsed Rust code. Listing 19-32 shows the relevant parts of the `DeriveInput`\nstruct we get from parsing the `struct Pancakes;` string:\n\n```rust,ignore\nDeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: \"Pancakes\",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n```\n\n<span class=\"caption\">Listing 19-32: The `DeriveInput` instance we get when\nparsing the code that has the macro\u2019s attribute in Listing 19-30</span>\n\nThe fields of this struct show that the Rust code we\u2019ve parsed is a unit struct\nwith the `ident` (identifier, meaning the name) of `Pancakes`. There are more\nfields on this struct for describing all sorts of Rust code; check the [`syn`\ndocumentation for `DeriveInput`][syn-docs] for more information.\n\nSoon we\u2019ll define the `impl_hello_macro` function, which is where we\u2019ll build\nthe new Rust code we want to include. But before we do, note that the output\nfor our derive macro is also a `TokenStream`. The returned `TokenStream` is\nadded to the code that our crate users write, so when they compile their crate,\nthey\u2019ll get the extra functionality that we provide in the modified\n`TokenStream`.\n\nYou might have noticed that we\u2019re calling `unwrap` to cause the\n`hello_macro_derive` function to panic if the call to the `syn::parse` function\nfails here. It\u2019s necessary for our procedural macro to panic on errors because\n`proc_macro_derive` functions must return `TokenStream` rather than `Result` to\nconform to the procedural macro API. We\u2019ve simplified this example by using\n`unwrap`; in production code, you should provide more specific error messages\nabout what went wrong by using `panic!` or `expect`.\n\nNow that we have the code to turn the annotated Rust code from a `TokenStream`\ninto a `DeriveInput` instance, let\u2019s generate the code that implements the\n`HelloMacro` trait on the annotated type, as shown in Listing 19-33.\n\n<span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-33/hello_macro/hello_macro_derive/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 19-33: Implementing the `HelloMacro` trait using\nthe parsed Rust code</span>\n\nWe get an `Ident` struct instance containing the name (identifier) of the\nannotated type using `ast.ident`. The struct in Listing 19-32 shows that when\nwe run the `impl_hello_macro` function on the code in Listing 19-30, the\n`ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus,\nthe `name` variable in Listing 19-33 will contain an `Ident` struct instance\nthat, when printed, will be the string `\"Pancakes\"`, the name of the struct in\nListing 19-30.\n\nThe `quote!` macro lets us define the Rust code that we want to return. The\ncompiler expects something different to the direct result of the `quote!`\nmacro\u2019s execution, so we need to convert it to a `TokenStream`. We do this by\ncalling the `into` method, which consumes this intermediate representation and\nreturns a value of the required `TokenStream` type.\n\nThe `quote!` macro also provides some very cool templating mechanics: we can\nenter `#name`, and `quote!` will replace it with the value in the variable\n`name`. You can even do some repetition similar to the way regular macros work.\nCheck out [the `quote` crate\u2019s docs][quote-docs] for a thorough introduction.\n\nWe want our procedural macro to generate an implementation of our `HelloMacro`\ntrait for the type the user annotated, which we can get by using `#name`. The\ntrait implementation has the one function `hello_macro`, whose body contains the\nfunctionality we want to provide: printing `Hello, Macro! My name is` and then\nthe name of the annotated type.\n\nThe `stringify!` macro used here is built into Rust. It takes a Rust\nexpression, such as `1 + 2`, and at compile time turns the expression into a\nstring literal, such as `\"1 + 2\"`. This is different than `format!` or\n`println!`, macros which evaluate the expression and then turn the result into\na `String`. There is a possibility that the `#name` input might be an\nexpression to print literally, so we use `stringify!`. Using `stringify!` also\nsaves an allocation by converting `#name` to a string literal at compile time.\n\nAt this point, `cargo build` should complete successfully in both `hello_macro`\nand `hello_macro_derive`. Let\u2019s hook up these crates to the code in Listing\n19-30 to see the procedural macro in action! Create a new binary project in\nyour *projects* directory using `cargo new pancakes`. We need to add\n`hello_macro` and `hello_macro_derive` as dependencies in the `pancakes`\ncrate\u2019s *Cargo.toml*. If you\u2019re publishing your versions of `hello_macro` and\n`hello_macro_derive` to [crates.io](https://crates.io/), they would be regular\ndependencies; if not, you can specify them as `path` dependencies as follows:\n\n```toml\n{{#include ../listings/ch19-advanced-features/no-listing-21-pancakes/pancakes/Cargo.toml:7:9}}\n```\n\nPut the code in Listing 19-30 into *src/main.rs*, and run `cargo run`: it\nshould print `Hello, Macro! My name is Pancakes!` The implementation of the\n`HelloMacro` trait from the procedural macro was included without the\n`pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the\ntrait implementation.\n\nNext, let\u2019s explore how the other kinds of procedural macros differ from custom\nderive macros.\n\n### Attribute-like macros\n\nAttribute-like macros are similar to custom derive macros, but instead of\ngenerating code for the `derive` attribute, they allow you to create new\nattributes. They\u2019re also more flexible: `derive` only works for structs and\nenums; attributes can be applied to other items as well, such as functions.\nHere\u2019s an example of using an attribute-like macro: say you have an attribute\nnamed `route` that annotates functions when using a web application framework:\n\n```rust,ignore\n#[route(GET, \"/\")]\nfn index() {\n```\n\nThis `#[route]` attribute would be defined by the framework as a procedural\nmacro. The signature of the macro definition function would look like this:\n\n```rust,ignore\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n```\n\nHere, we have two parameters of type `TokenStream`. The first is for the\ncontents of the attribute: the `GET, \"/\"` part. The second is the body of the\nitem the attribute is attached to: in this case, `fn index() {}` and the rest\nof the function\u2019s body.\n\nOther than that, attribute-like macros work the same way as custom derive\nmacros: you create a crate with the `proc-macro` crate type and implement a\nfunction that generates the code you want!\n\n### Function-like macros\n\nFunction-like macros define macros that look like function calls. Similarly to\n`macro_rules!` macros, they\u2019re more flexible than functions; for example, they\ncan take an unknown number of arguments. However, `macro_rules!` macros can be\ndefined only using the match-like syntax we discussed in the section\n[\u201cDeclarative Macros with `macro_rules!` for General\nMetaprogramming\u201d][decl]<!-- ignore --> earlier. Function-like macros take a\n`TokenStream` parameter and their definition manipulates that `TokenStream`\nusing Rust code as the other two types of procedural macros do. An example of a\nfunction-like macro is an `sql!` macro that might be called like so:\n\n```rust,ignore\nlet sql = sql!(SELECT * FROM posts WHERE id=1);\n```\n\nThis macro would parse the SQL statement inside it and check that it\u2019s\nsyntactically correct, which is much more complex processing than a\n`macro_rules!` macro can do. The `sql!` macro would be defined like this:\n\n```rust,ignore\n#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {\n```\n\nThis definition is similar to the custom derive macro\u2019s signature: we receive\nthe tokens that are inside the parentheses and return the code we wanted to\ngenerate.\n\n## Summary\n\nWhew! Now you have some Rust features in your toolbox that you likely won\u2019t use\noften, but you\u2019ll know they\u2019re available in very particular circumstances.\nWe\u2019ve introduced several complex topics so that when you encounter them in\nerror message suggestions or in other peoples\u2019 code, you\u2019ll be able to\nrecognize these concepts and syntax. Use this chapter as a reference to guide\nyou to solutions.\n\nNext, we\u2019ll put everything we\u2019ve discussed throughout the book into practice\nand do one more project!\n\n[ref]: ../reference/macros-by-example.html\n[tlborm]: https://veykril.github.io/tlborm/\n[`syn`]: https://crates.io/crates/syn\n[`quote`]: https://crates.io/crates/quote\n[syn-docs]: https://docs.rs/syn/1.0/syn/struct.DeriveInput.html\n[quote-docs]: https://docs.rs/quote\n[decl]: #declarative-macros-with-macro_rules-for-general-metaprogramming\n",
          "qas": [
            {
              "question": "What is procedural macro?",
              "id": 96,
              "answers": [
                {
                  "text": "The second form of macros is the *procedural macro*, which acts more like a\nfunction (and is a type of procedure). Procedural macros accept some code as an\ninput, operate on that code, and produce some code as an output rather than\nmatching against patterns and replacing the code with other code as declarative\nmacros do. The three kinds of procedural macros are custom derive,\nattribute-like, and function-like, and all work in a similar fashion.",
                  "answer_start": 7522
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What differs macros and functions?",
              "id": 91,
              "answers": [
                {
                  "text": "Another important difference between macros and functions is that you must\ndefine macros or bring them into scope *before* you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.",
                  "answer_start": 2141
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the types of procedural macros?",
              "id": 88,
              "answers": [
                {
                  "text": "* Custom `#[derive]` macros that specify code added with the `derive` attribute\n  used on structs and enums\n* Attribute-like macros that define custom attributes usable on any item\n* Function-like macros that look like function calls but operate on the tokens\n  specified as their argument",
                  "answer_start": 270
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does term macro refers to?",
              "id": 87,
              "answers": [
                {
                  "text": "The term *macro* refers to a family\nof features in Rust: *declarative* macros with `macro_rules!` and three kinds\nof *procedural* macros:",
                  "answer_start": 131
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How function-like macros work?",
              "id": 100,
              "answers": [
                {
                  "text": "Function-like macros define macros that look like function calls. Similarly to\n`macro_rules!` macros, they\u2019re more flexible than functions; for example, they\ncan take an unknown number of arguments. However, `macro_rules!` macros can be\ndefined only using the match-like syntax we discussed in the section\n[\u201cDeclarative Macros with `macro_rules!` for General\nMetaprogramming\u201d][decl]\u2039!-- ignore --> earlier. Function-like macros take a\n`TokenStream` parameter and their definition manipulates that `TokenStream`\nusing Rust code as the other two types of procedural macros do.",
                  "answer_start": 22349
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does the `stringify!` macro?",
              "id": 98,
              "answers": [
                {
                  "text": "It takes a Rust\nexpression, such as `1 + 2`, and at compile time turns the expression into a\nstring literal, such as `\"1 + 2\"`. This is different than `format!` or\n`println!`, macros which evaluate the expression and then turn the result into\na `String`.",
                  "answer_start": 19465
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the Differences Between Macros and Functions?",
              "id": 89,
              "answers": [
                {
                  "text": "Fundamentally, macros are a way of writing code that writes other code, which\nis known as *metaprogramming*. In Appendix C, we discuss the `derive`\nattribute, which generates an implementation of various traits for you. We\u2019ve\nalso used the `println!` and `vec!` macros throughout the book. All of these\nmacros *expand* to produce more code than the code you\u2019ve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don\u2019t.\n\nA function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call `println!(\"hello\")` with one argument or\n`println!(\"hello {}\", name)` with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can\u2019t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.\n",
                  "answer_start": 732
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does the macro '#[macro_export]' do?",
              "id": 94,
              "answers": [
                {
                  "text": "The `#[macro_export]` annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can\u2019t be brought into scope.",
                  "answer_start": 4443
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are Declarative Macros?",
              "id": 92,
              "answers": [
                {
                  "text": "The most widely used form of macros in Rust is the *declarative macro*. These\nare also sometimes referred to as \u201cmacros by example,\u201d \u201c`macro_rules!` macros,\u201d\nor just plain \u201cmacros.\u201d At their core, declarative macros allow you to write\nsomething similar to a Rust `match` expression. As discussed in Chapter 6,\n`match` expressions are control structures that take an expression, compare the\nresulting value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation.",
                  "answer_start": 2429
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Storing Keys with Associated Values in Hash Maps\n\nThe last of our common collections is the *hash map*. The type `HashMap<K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a\n*hashing function*, which determines how it places these keys and values into\nmemory. Many programming languages support this kind of data structure, but\nthey often use a different name, such as hash, map, object, hash table,\ndictionary, or associative array, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team\u2019s score in a hash map in which\neach key is a team\u2019s name and the values are each team\u2019s score. Given a team\nname, you can retrieve its score.\n\nWe\u2019ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\nAs always, check the standard library documentation for more information.\n\n### Creating a New Hash Map\n\nOne way to create an empty hash map is using `new` and adding elements with\n`insert`. In Listing 8-20, we\u2019re keeping track of the scores of two teams whose\nnames are *Blue* and *Yellow*. The Blue team starts with 10 points, and the\nYellow team starts with 50.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-20/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span>\n\nNote that we need to first `use` the `HashMap` from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it\u2019s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there\u2019s no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type as each other, and all of\nthe values must have the same type.\n\n### Accessing Values in a Hash Map\n\nWe can get a value out of the hash map by providing its key to the `get`\nmethod, as shown in Listing 8-21.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-21: Accessing the score for the Blue team\nstored in the hash map</span>\n\nHere, `score` will have the value that\u2019s associated with the Blue team, and the\nresult will be `10`. The `get` method returns an `Option<&V>`; if there\u2019s no\nvalue for that key in the hash map, `get` will return `None`. This program\nhandles the `Option` by calling `copied` to get an `Option<i32>` rather than an\n`Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn't\nhave an entry for the key.\n\nWe can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/no-listing-03-iterate-over-hashmap/src/main.rs:here}}\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n```\n\n### Hash Maps and Ownership\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied\ninto the hash map. For owned values like `String`, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they\u2019re inserted</span>\n\nWe aren\u2019t able to use the variables `field_name` and `field_value` after\nthey\u2019ve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won\u2019t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We\u2019ll talk more about these issues in\nthe [\u201cValidating References with\nLifetimes\u201d][validating-references-with-lifetimes]<!-- ignore --> section in\nChapter 10.\n\n### Updating a Hash Map\n\nAlthough the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have value 10 stored in\nthe `scores` hash map).\n\nWhen you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey *doesn\u2019t* already have a value. Or you could combine the old value and the\nnew value. Let\u2019s look at how to do each of these!\n\n#### Overwriting a Value\n\nIf we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls `insert` twice, the hash map will\nonly contain one key/value pair because we\u2019re inserting the value for the Blue\nteam\u2019s key both times.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-23: Replacing a value stored with a particular\nkey</span>\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been\noverwritten.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a>\n\n#### Adding a Key and Value Only If a Key Isn\u2019t Present\n\nIt\u2019s common to check whether a particular key already exists in the hash map\nwith a value then take the following actions: if the key does exist in the hash\nmap, the existing value should remain the way it is. If the key doesn\u2019t exist,\ninsert it and a value for it.\n\nHash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. Let\u2019s say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn\u2019t, we want to insert the value 50, and the same for the\nBlue team. Using the `entry` API, the code looks like Listing 8-24.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-24: Using the `entry` method to only insert if\nthe key does not already have a value</span>\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to\nthe value for the corresponding `Entry` key if that key exists, and if not,\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The\nfirst call to `entry` will insert the key for the Yellow team with the value\n50 because the Yellow team doesn\u2019t have a value already. The second call to\n`entry` will not change the hash map because the Blue team already has the\nvalue 10.\n\n#### Updating a Value Based on the Old Value\n\nAnother common use case for hash maps is to look up a key\u2019s value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we\u2019ve\nseen that word. If it\u2019s the first time we\u2019ve seen a word, we\u2019ll first insert\nthe value 0.\n\n```rust\n{{#rustdoc_include ../listings/ch08-common-collections/listing-08-25/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 8-25: Counting occurrences of words using a hash\nmap that stores words and counts</span>\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see\nthe same key/value pairs printed in a different order: recall from the\n[\u201cAccessing Values in a Hash Map\u201d][access]<!-- ignore --> section that\niterating over a hash map happens in an arbitrary order.\n\nThe `split_whitespace` method returns an iterator over sub-slices, separated by\nwhitespace, of the value in `text`. The `or_insert` method returns a mutable\nreference (`&mut V`) to the value for the specified key. Here we store that\nmutable reference in the `count` variable, so in order to assign to that value,\nwe must first dereference `count` using the asterisk (`*`). The mutable\nreference goes out of scope at the end of the `for` loop, so all of these\nchanges are safe and allowed by the borrowing rules.\n\n### Hashing Functions\n\nBy default, `HashMap` uses a hashing function called *SipHash* that can provide\nresistance to Denial of Service (DoS) attacks involving hash\ntables[^siphash]<!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A *hasher* is a type that implements the\n`BuildHasher` trait. We\u2019ll talk about traits and how to implement them in\nChapter 10. You don\u2019t necessarily have to implement your own hasher from\nscratch; [crates.io](https://crates.io/)<!-- ignore --> has libraries shared by\nother Rust users that provide hashers implementing many common hashing\nalgorithms.\n\n[^siphash]: [https://en.wikipedia.org/wiki/SipHash](https://en.wikipedia.org/wiki/SipHash)\n\n## Summary\n\nVectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:\n\n* Given a list of integers, use a vector and return the median (when sorted,\n  the value in the middle position) and mode (the value that occurs most often;\n  a hash map will be helpful here) of the list.\n* Convert strings to pig latin. The first consonant of each word is moved to\n  the end of the word and \u201cay\u201d is added, so \u201cfirst\u201d becomes \u201cirst-fay.\u201d Words\n  that start with a vowel have \u201chay\u201d added to the end instead (\u201capple\u201d becomes\n  \u201capple-hay\u201d). Keep in mind the details about UTF-8 encoding!\n* Using a hash map and vectors, create a text interface to allow a user to add\n  employee names to a department in a company. For example, \u201cAdd Sally to\n  Engineering\u201d or \u201cAdd Amir to Sales.\u201d Then let the user retrieve a list of all\n  people in a department or all people in the company by department, sorted\n  alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!\n\nWe\u2019re getting into more complex programs in which operations can fail, so, it\u2019s\na perfect time to discuss error handling. We\u2019ll do that next!\n\n[validating-references-with-lifetimes]:\nch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[access]: #accessing-values-in-a-hash-map\n",
          "qas": [
            {
              "question": "What can I do If i want to use faster hashing function?",
              "id": 228,
              "answers": [
                {
                  "text": "If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher.",
                  "answer_start": 9259
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is \"entry\"?",
              "id": 225,
              "answers": [
                {
                  "text": "Hash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. ",
                  "answer_start": 6076
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which hashing function uses hash map by default?",
              "id": 226,
              "answers": [
                {
                  "text": "By default, `HashMap` uses a hashing function called *SipHash*",
                  "answer_start": 8941
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create an empty hashmap?",
              "id": 218,
              "answers": [
                {
                  "text": "One way to create an empty hash map is using `new`",
                  "answer_start": 1088
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What hashmap stores?",
              "id": 214,
              "answers": [
                {
                  "text": "The last of our common collections is the *hash map*. The type `HashMap\u2039K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a\n*hashing function*, which determines how it places these keys and values into\nmemory.",
                  "answer_start": 53
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where hash maps store their data?",
              "id": 220,
              "answers": [
                {
                  "text": "Just like vectors, hash maps store their data on the heap.",
                  "answer_start": 1926
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When are hashmaps useful?",
              "id": 217,
              "answers": [
                {
                  "text": "Hash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team\u2019s score in a hash map in which\neach key is a team\u2019s name and the values are each team\u2019s score. Given a team\nname, you can retrieve its score.",
                  "answer_start": 480
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the advantage of *SipHash* hashing function?",
              "id": 227,
              "answers": [
                {
                  "text": "hashing function called *SipHash* that can provide\nresistance to Denial of Service (DoS) attacks involving hash\ntables[^siphash]\u2039!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it.",
                  "answer_start": 8970
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to iterate each key/value pair in a hash map?",
              "id": 222,
              "answers": [
                {
                  "text": "We can iterate over each key/value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:",
                  "answer_start": 2962
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to change data in a hashmap?",
              "id": 224,
              "answers": [
                {
                  "text": "When you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey *doesn\u2019t* already have a value. Or you could combine the old value and the\nnew value.",
                  "answer_start": 4555
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What hashing function determines?",
              "id": 215,
              "answers": [
                {
                  "text": "*hashing function*, which determines how it places these keys and values into\nmemory. ",
                  "answer_start": 199
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Functional Language Features: Iterators and Closures\n\nRust\u2019s design has taken inspiration from many existing languages and\ntechniques, and one significant influence is *functional programming*.\nProgramming in a functional style often includes using functions as values by\npassing them in arguments, returning them from other functions, assigning them\nto variables for later execution, and so forth.\n\nIn this chapter, we won\u2019t debate the issue of what functional programming is or\nisn\u2019t but will instead discuss some features of Rust that are similar to\nfeatures in many languages often referred to as functional.\n\nMore specifically, we\u2019ll cover:\n\n* *Closures*, a function-like construct you can store in a variable\n* *Iterators*, a way of processing a series of elements\n* How to use closures and iterators to improve the I/O project in Chapter 12\n* The performance of closures and iterators (Spoiler alert: they\u2019re faster than\n  you might think!)\n\nWe\u2019ve already covered some other Rust features, such as pattern matching and\nenums, that are also influenced by the functional style. Because mastering\nclosures and iterators is an important part of writing idiomatic, fast Rust\ncode, we\u2019ll devote this entire chapter to them.\n",
          "qas": [
            {
              "question": "What are the characteristics of functional programming?",
              "id": 2138,
              "answers": [
                {
                  "text": "includes using functions as values by\npassing them in arguments, returning them from other functions, assigning them\nto variables for later execution, and so forth.",
                  "answer_start": 236
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is an iterator?",
              "id": 2136,
              "answers": [
                {
                  "text": "a way of processing a series of elements",
                  "answer_start": 732
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which functional language features are used in Rust?",
              "id": 2137,
              "answers": [
                {
                  "text": "Iterators and Closures",
                  "answer_start": 32
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is a closure?",
              "id": 2135,
              "answers": [
                {
                  "text": "a function-like construct you can store in a variable",
                  "answer_start": 663
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Pattern Syntax\n\nIn this section, we gather all the syntax valid in patterns and discuss why and\nwhen you might want to use each one.\n\n### Matching Literals\n\nAs you saw in Chapter 6, you can match patterns against literals directly. The\nfollowing code gives some examples:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-01-literals/src/main.rs:here}}\n```\n\nThis code prints `one` because the value in `x` is 1. This syntax is useful\nwhen you want your code to take an action if it gets a particular concrete\nvalue.\n\n### Matching Named Variables\n\nNamed variables are irrefutable patterns that match any value, and we\u2019ve used\nthem many times in the book. However, there is a complication when you use\nnamed variables in `match` expressions. Because `match` starts a new scope,\nvariables declared as part of a pattern inside the `match` expression will\nshadow those with the same name outside the `match` construct, as is the case\nwith all variables. In Listing 18-11, we declare a variable named `x` with the\nvalue `Some(5)` and a variable `y` with the value `10`. We then create a\n`match` expression on the value `x`. Look at the patterns in the match arms and\n`println!` at the end, and try to figure out what the code will print before\nrunning this code or reading further.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-11: A `match` expression with an arm that\nintroduces a shadowed variable `y`</span>\n\nLet\u2019s walk through what happens when the `match` expression runs. The pattern\nin the first match arm doesn\u2019t match the defined value of `x`, so the code\ncontinues.\n\nThe pattern in the second match arm introduces a new variable named `y` that\nwill match any value inside a `Some` value. Because we\u2019re in a new scope inside\nthe `match` expression, this is a new `y` variable, not the `y` we declared at\nthe beginning with the value 10. This new `y` binding will match any value\ninside a `Some`, which is what we have in `x`. Therefore, this new `y` binds to\nthe inner value of the `Some` in `x`. That value is `5`, so the expression for\nthat arm executes and prints `Matched, y = 5`.\n\nIf `x` had been a `None` value instead of `Some(5)`, the patterns in the first\ntwo arms wouldn\u2019t have matched, so the value would have matched to the\nunderscore. We didn\u2019t introduce the `x` variable in the pattern of the\nunderscore arm, so the `x` in the expression is still the outer `x` that hasn\u2019t\nbeen shadowed. In this hypothetical case, the `match` would print `Default\ncase, x = None`.\n\nWhen the `match` expression is done, its scope ends, and so does the scope of\nthe inner `y`. The last `println!` produces `at the end: x = Some(5), y = 10`.\n\nTo create a `match` expression that compares the values of the outer `x` and\n`y`, rather than introducing a shadowed variable, we would need to use a match\nguard conditional instead. We\u2019ll talk about match guards later in the [\u201cExtra\nConditionals with Match Guards\u201d](#extra-conditionals-with-match-guards)<!--\nignore --> section.\n\n### Multiple Patterns\n\nIn `match` expressions, you can match multiple patterns using the `|` syntax,\nwhich is the pattern *or* operator. For example, in the following code we match\nthe value of `x` against the match arms, the first of which has an *or* option,\nmeaning if the value of `x` matches either of the values in that arm, that\narm\u2019s code will run:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-02-multiple-patterns/src/main.rs:here}}\n```\n\nThis code prints `one or two`.\n\n### Matching Ranges of Values with `..=`\n\nThe `..=` syntax allows us to match to an inclusive range of values. In the\nfollowing code, when a pattern matches any of the values within the given\nrange, that arm will execute:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-03-ranges/src/main.rs:here}}\n```\n\nIf `x` is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more\nconvenient for multiple match values than using the `|` operator to express the\nsame idea; if we were to use `|` we would have to specify `1 | 2 | 3 | 4 | 5`.\nSpecifying a range is much shorter, especially if we want to match, say, any\nnumber between 1 and 1,000!\n\nThe compiler checks that the range isn\u2019t empty at compile time, and because the\nonly types for which Rust can tell if a range is empty or not are `char` and\nnumeric values, ranges are only allowed with numeric or `char` values.\n\nHere is an example using ranges of `char` values:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-04-ranges-of-char/src/main.rs:here}}\n```\n\nRust can tell that `'c'` is within the first pattern\u2019s range and prints `early\nASCII letter`.\n\n### Destructuring to Break Apart Values\n\nWe can also use patterns to destructure structs, enums, and tuples to use\ndifferent parts of these values. Let\u2019s walk through each value.\n\n#### Destructuring Structs\n\nListing 18-12 shows a `Point` struct with two fields, `x` and `y`, that we can\nbreak apart using a pattern with a `let` statement.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-12/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-12: Destructuring a struct\u2019s fields into\nseparate variables</span>\n\nThis code creates the variables `a` and `b` that match the values of the `x`\nand `y` fields of the `p` struct. This example shows that the names of the\nvariables in the pattern don\u2019t have to match the field names of the struct.\nHowever, it\u2019s common to match the variable names to the field names to make it\neasier to remember which variables came from which fields. Because of this\ncommon usage, and because writing `let Point { x: x, y: y } = p;` contains a\nlot of duplication, Rust has a shorthand for patterns that match struct fields:\nyou only need to list the name of the struct field, and the variables created\nfrom the pattern will have the same names. Listing 18-13 behaves in the same\nway as the code in Listing 18-12, but the variables created in the `let`\npattern are `x` and `y` instead of `a` and `b`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-13/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-13: Destructuring struct fields using struct\nfield shorthand</span>\n\nThis code creates the variables `x` and `y` that match the `x` and `y` fields\nof the `p` variable. The outcome is that the variables `x` and `y` contain the\nvalues from the `p` struct.\n\nWe can also destructure with literal values as part of the struct pattern\nrather than creating variables for all the fields. Doing so allows us to test\nsome of the fields for particular values while creating variables to\ndestructure the other fields.\n\nIn Listing 18-14, we have a `match` expression that separates `Point` values\ninto three cases: points that lie directly on the `x` axis (which is true when\n`y = 0`), on the `y` axis (`x = 0`), or neither.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-14: Destructuring and matching literal values\nin one pattern</span>\n\nThe first arm will match any point that lies on the `x` axis by specifying that\nthe `y` field matches if its value matches the literal `0`. The pattern still\ncreates an `x` variable that we can use in the code for this arm.\n\nSimilarly, the second arm matches any point on the `y` axis by specifying that\nthe `x` field matches if its value is `0` and creates a variable `y` for the\nvalue of the `y` field. The third arm doesn\u2019t specify any literals, so it\nmatches any other `Point` and creates variables for both the `x` and `y` fields.\n\nIn this example, the value `p` matches the second arm by virtue of `x`\ncontaining a 0, so this code will print `On the y axis at 7`.\n\nRemember that a `match` expression stops checking arms once it has found the\nfirst matching pattern, so even though `Point { x: 0, y: 0}` is on the `x` axis\nand the `y` axis, this code would only print `On the x axis at 0`.\n\n#### Destructuring Enums\n\nWe've destructured enums in this book (for example, Listing 6-5 in Chapter 6),\nbut haven\u2019t yet explicitly discussed that the pattern to destructure an enum\ncorresponds to the way the data stored within the enum is defined. As an\nexample, in Listing 18-15 we use the `Message` enum from Listing 6-2 and write\na `match` with patterns that will destructure each inner value.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-15/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-15: Destructuring enum variants that hold\ndifferent kinds of values</span>\n\nThis code will print `Change the color to red 0, green 160, and blue 255`. Try\nchanging the value of `msg` to see the code from the other arms run.\n\nFor enum variants without any data, like `Message::Quit`, we can\u2019t destructure\nthe value any further. We can only match on the literal `Message::Quit` value,\nand no variables are in that pattern.\n\nFor struct-like enum variants, such as `Message::Move`, we can use a pattern\nsimilar to the pattern we specify to match structs. After the variant name, we\nplace curly brackets and then list the fields with variables so we break apart\nthe pieces to use in the code for this arm. Here we use the shorthand form as\nwe did in Listing 18-13.\n\nFor tuple-like enum variants, like `Message::Write` that holds a tuple with one\nelement and `Message::ChangeColor` that holds a tuple with three elements, the\npattern is similar to the pattern we specify to match tuples. The number of\nvariables in the pattern must match the number of elements in the variant we\u2019re\nmatching.\n\n#### Destructuring Nested Structs and Enums\n\nSo far, our examples have all been matching structs or enums one level deep,\nbut matching can work on nested items too! For example, we can refactor the\ncode in Listing 18-15 to support RGB and HSV colors in the `ChangeColor`\nmessage, as shown in Listing 18-16.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-16/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-16: Matching on nested enums</span>\n\nThe pattern of the first arm in the `match` expression matches a\n`Message::ChangeColor` enum variant that contains a `Color::Rgb` variant; then\nthe pattern binds to the three inner `i32` values. The pattern of the second\narm also matches a `Message::ChangeColor` enum variant, but the inner enum\nmatches `Color::Hsv` instead. We can specify these complex conditions in one\n`match` expression, even though two enums are involved.\n\n#### Destructuring Structs and Tuples\n\nWe can mix, match, and nest destructuring patterns in even more complex ways.\nThe following example shows a complicated destructure where we nest structs and\ntuples inside a tuple and destructure all the primitive values out:\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-05-destructuring-structs-and-tuples/src/main.rs:here}}\n```\n\nThis code lets us break complex types into their component parts so we can use\nthe values we\u2019re interested in separately.\n\nDestructuring with patterns is a convenient way to use pieces of values, such\nas the value from each field in a struct, separately from each other.\n\n### Ignoring Values in a Pattern\n\nYou\u2019ve seen that it\u2019s sometimes useful to ignore values in a pattern, such as\nin the last arm of a `match`, to get a catchall that doesn\u2019t actually do\nanything but does account for all remaining possible values. There are a few\nways to ignore entire values or parts of values in a pattern: using the `_`\npattern (which you\u2019ve seen), using the `_` pattern within another pattern,\nusing a name that starts with an underscore, or using `..` to ignore remaining\nparts of a value. Let\u2019s explore how and why to use each of these patterns.\n\n#### Ignoring an Entire Value with `_`\n\nWe\u2019ve used the underscore as a wildcard pattern that will match any value but\nnot bind to the value. This is especially useful as the last arm in a `match`\nexpression, but we can also use it in any pattern, including function\nparameters, as shown in Listing 18-17.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-17/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-17: Using `_` in a function signature</span>\n\nThis code will completely ignore the value `3` passed as the first argument,\nand will print `This code only uses the y parameter: 4`.\n\nIn most cases when you no longer need a particular function parameter, you\nwould change the signature so it doesn\u2019t include the unused parameter. Ignoring\na function parameter can be especially useful in cases when, for example,\nyou're implementing a trait when you need a certain type signature but the\nfunction body in your implementation doesn\u2019t need one of the parameters. You\nthen avoid getting a compiler warning about unused function parameters, as you\nwould if you used a name instead.\n\n#### Ignoring Parts of a Value with a Nested `_`\n\nWe can also use `_` inside another pattern to ignore just part of a value, for\nexample, when we want to test for only part of a value but have no use for the\nother parts in the corresponding code we want to run. Listing 18-18 shows code\nresponsible for managing a setting\u2019s value. The business requirements are that\nthe user should not be allowed to overwrite an existing customization of a\nsetting but can unset the setting and give it a value if it is currently unset.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-18/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-18: Using an underscore within patterns that\nmatch `Some` variants when we don\u2019t need to use the value inside the\n`Some`</span>\n\nThis code will print `Can't overwrite an existing customized value` and then\n`setting is Some(5)`. In the first match arm, we don\u2019t need to match on or use\nthe values inside either `Some` variant, but we do need to test for the case\nwhen `setting_value` and `new_setting_value` are the `Some` variant. In that\ncase, we print the reason for not changing `setting_value`, and it doesn\u2019t get\nchanged.\n\nIn all other cases (if either `setting_value` or `new_setting_value` are\n`None`) expressed by the `_` pattern in the second arm, we want to allow\n`new_setting_value` to become `setting_value`.\n\nWe can also use underscores in multiple places within one pattern to ignore\nparticular values. Listing 18-19 shows an example of ignoring the second and\nfourth values in a tuple of five items.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-19/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-19: Ignoring multiple parts of a tuple</span>\n\nThis code will print `Some numbers: 2, 8, 32`, and the values 4 and 16 will be\nignored.\n\n#### Ignoring an Unused Variable by Starting Its Name with `_`\n\nIf you create a variable but don\u2019t use it anywhere, Rust will usually issue a\nwarning because an unused variable could be a bug. However, sometimes it\u2019s\nuseful to be able to create a variable you won\u2019t use yet, such as when you\u2019re\nprototyping or just starting a project. In this situation, you can tell Rust\nnot to warn you about the unused variable by starting the name of the variable\nwith an underscore. In Listing 18-20, we create two unused variables, but when\nwe compile this code, we should only get a warning about one of them.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-20/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-20: Starting a variable name with an\nunderscore to avoid getting unused variable warnings</span>\n\nHere we get a warning about not using the variable `y`, but we don\u2019t get a\nwarning about not using `_x`.\n\nNote that there is a subtle difference between using only `_` and using a name\nthat starts with an underscore. The syntax `_x` still binds the value to the\nvariable, whereas `_` doesn\u2019t bind at all. To show a case where this\ndistinction matters, Listing 18-21 will provide us with an error.\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-21/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-21: An unused variable starting with an\nunderscore still binds the value, which might take ownership of the value</span>\n\nWe\u2019ll receive an error because the `s` value will still be moved into `_s`,\nwhich prevents us from using `s` again. However, using the underscore by itself\ndoesn\u2019t ever bind to the value. Listing 18-22 will compile without any errors\nbecause `s` doesn\u2019t get moved into `_`.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-22/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-22: Using an underscore does not bind the\nvalue</span>\n\nThis code works just fine because we never bind `s` to anything; it isn\u2019t moved.\n\n#### Ignoring Remaining Parts of a Value with `..`\n\nWith values that have many parts, we can use the `..` syntax to use specific\nparts and ignore the rest, avoiding the need to list underscores for each\nignored value. The `..` pattern ignores any parts of a value that we haven\u2019t\nexplicitly matched in the rest of the pattern. In Listing 18-23, we have a\n`Point` struct that holds a coordinate in three-dimensional space. In the\n`match` expression, we want to operate only on the `x` coordinate and ignore\nthe values in the `y` and `z` fields.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-23/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-23: Ignoring all fields of a `Point` except\nfor `x` by using `..`</span>\n\nWe list the `x` value and then just include the `..` pattern. This is quicker\nthan having to list `y: _` and `z: _`, particularly when we\u2019re working with\nstructs that have lots of fields in situations where only one or two fields are\nrelevant.\n\nThe syntax `..` will expand to as many values as it needs to be. Listing 18-24\nshows how to use `..` with a tuple.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-24/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-24: Matching only the first and last values in\na tuple and ignoring all other values</span>\n\nIn this code, the first and last value are matched with `first` and `last`. The\n`..` will match and ignore everything in the middle.\n\nHowever, using `..` must be unambiguous. If it is unclear which values are\nintended for matching and which should be ignored, Rust will give us an error.\nListing 18-25 shows an example of using `..` ambiguously, so it will not\ncompile.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-25/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-25: An attempt to use `..` in an ambiguous\nway</span>\n\nWhen we compile this example, we get this error:\n\n```console\n{{#include ../listings/ch18-patterns-and-matching/listing-18-25/output.txt}}\n```\n\nIt\u2019s impossible for Rust to determine how many values in the tuple to ignore\nbefore matching a value with `second` and then how many further values to\nignore thereafter. This code could mean that we want to ignore `2`, bind\n`second` to `4`, and then ignore `8`, `16`, and `32`; or that we want to ignore\n`2` and `4`, bind `second` to `8`, and then ignore `16` and `32`; and so forth.\nThe variable name `second` doesn\u2019t mean anything special to Rust, so we get a\ncompiler error because using `..` in two places like this is ambiguous.\n\n### Extra Conditionals with Match Guards\n\nA *match guard* is an additional `if` condition, specified after the pattern in\na `match` arm, that must also match for that arm to be chosen. Match guards are\nuseful for expressing more complex ideas than a pattern alone allows.\n\nThe condition can use variables created in the pattern. Listing 18-26 shows a\n`match` where the first arm has the pattern `Some(x)` and also has a match\nguard of `if x % 2 == 0` (which will be true if the number is even).\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-26/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-26: Adding a match guard to a pattern</span>\n\nThis example will print `The number 4 is even`. When `num` is compared to the\npattern in the first arm, it matches, because `Some(4)` matches `Some(x)`. Then\nthe match guard checks whether the remainder of dividing `x` by 2 is equal to\n0, and because it is, the first arm is selected.\n\nIf `num` had been `Some(5)` instead, the match guard in the first arm would\nhave been false because the remainder of 5 divided by 2 is 1, which is not\nequal to 0. Rust would then go to the second arm, which would match because the\nsecond arm doesn\u2019t have a match guard and therefore matches any `Some` variant.\n\nThere is no way to express the `if x % 2 == 0` condition within a pattern, so\nthe match guard gives us the ability to express this logic. The downside of\nthis additional expressiveness is that the compiler doesn't try to check for\nexhaustiveness when match guard expressions are involved.\n\nIn Listing 18-11, we mentioned that we could use match guards to solve our\npattern-shadowing problem. Recall that we created a new variable inside the\npattern in the `match` expression instead of using the variable outside the\n`match`. That new variable meant we couldn\u2019t test against the value of the\nouter variable. Listing 18-27 shows how we can use a match guard to fix this\nproblem.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-27/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 18-27: Using a match guard to test for equality\nwith an outer variable</span>\n\nThis code will now print `Default case, x = Some(5)`. The pattern in the second\nmatch arm doesn\u2019t introduce a new variable `y` that would shadow the outer `y`,\nmeaning we can use the outer `y` in the match guard. Instead of specifying the\npattern as `Some(y)`, which would have shadowed the outer `y`, we specify\n`Some(n)`. This creates a new variable `n` that doesn\u2019t shadow anything because\nthere is no `n` variable outside the `match`.\n\nThe match guard `if n == y` is not a pattern and therefore doesn\u2019t introduce\nnew variables. This `y` *is* the outer `y` rather than a new shadowed `y`, and\nwe can look for a value that has the same value as the outer `y` by comparing\n`n` to `y`.\n\nYou can also use the *or* operator `|` in a match guard to specify multiple\npatterns; the match guard condition will apply to all the patterns. Listing\n18-28 shows the precedence when combining a pattern that uses `|` with a match\nguard. The important part of this example is that the `if y` match guard\napplies to `4`, `5`, *and* `6`, even though it might look like `if y` only\napplies to `6`.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-28/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-28: Combining multiple patterns with a match\nguard</span>\n\nThe match condition states that the arm only matches if the value of `x` is\nequal to `4`, `5`, or `6` *and* if `y` is `true`. When this code runs, the\npattern of the first arm matches because `x` is `4`, but the match guard `if y`\nis false, so the first arm is not chosen. The code moves on to the second arm,\nwhich does match, and this program prints `no`. The reason is that the `if`\ncondition applies to the whole pattern `4 | 5 | 6`, not only to the last value\n`6`. In other words, the precedence of a match guard in relation to a pattern\nbehaves like this:\n\n```text\n(4 | 5 | 6) if y => ...\n```\n\nrather than this:\n\n```text\n4 | 5 | (6 if y) => ...\n```\n\nAfter running the code, the precedence behavior is evident: if the match guard\nwere applied only to the final value in the list of values specified using the\n`|` operator, the arm would have matched and the program would have printed\n`yes`.\n\n### `@` Bindings\n\nThe *at* operator `@` lets us create a variable that holds a value at the same\ntime as we\u2019re testing that value for a pattern match. In Listing 18-29, we want\nto test that a `Message::Hello` `id` field is within the range `3..=7`. We also\nwant to bind the value to the variable `id_variable` so we can use it in the\ncode associated with the arm. We could name this variable `id`, the same as the\nfield, but for this example we\u2019ll use a different name.\n\n```rust\n{{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-29/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 18-29: Using `@` to bind to a value in a pattern\nwhile also testing it</span>\n\nThis example will print `Found an id in range: 5`. By specifying `id_variable\n@` before the range `3..=7`, we\u2019re capturing whatever value matched the range\nwhile also testing that the value matched the range pattern.\n\nIn the second arm, where we only have a range specified in the pattern, the code\nassociated with the arm doesn\u2019t have a variable that contains the actual value\nof the `id` field. The `id` field\u2019s value could have been 10, 11, or 12, but\nthe code that goes with that pattern doesn\u2019t know which it is. The pattern code\nisn\u2019t able to use the value from the `id` field, because we haven\u2019t saved the\n`id` value in a variable.\n\nIn the last arm, where we\u2019ve specified a variable without a range, we do have\nthe value available to use in the arm\u2019s code in a variable named `id`. The\nreason is that we\u2019ve used the struct field shorthand syntax. But we haven\u2019t\napplied any test to the value in the `id` field in this arm, as we did with the\nfirst two arms: any value would match this pattern.\n\nUsing `@` lets us test a value and save it in a variable within one pattern.\n\n## Summary\n\nRust\u2019s patterns are very useful in distinguishing between different kinds of\ndata. When used in `match` expressions, Rust ensures your patterns cover every\npossible value, or your program won\u2019t compile. Patterns in `let` statements and\nfunction parameters make those constructs more useful, enabling the\ndestructuring of values into smaller parts at the same time as assigning to\nvariables. We can create simple or complex patterns to suit our needs.\n\nNext, for the penultimate chapter of the book, we\u2019ll look at some advanced\naspects of a variety of Rust\u2019s features.\n",
          "qas": [
            {
              "question": "How to match multiple patterns?",
              "id": 43,
              "answers": [
                {
                  "text": "you can match multiple patterns using the `|` syntax,\nwhich is the pattern *or* operator.",
                  "answer_start": 3196
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is match guard?",
              "id": 50,
              "answers": [
                {
                  "text": "A *match guard* is an additional `if` condition, specified after the pattern in\na `match` arm, that must also match for that arm to be chosen. Match guards are\nuseful for expressing more complex ideas than a pattern alone allows.",
                  "answer_start": 19991
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does at* operator do?",
              "id": 52,
              "answers": [
                {
                  "text": "The *at* operator `@` lets us create a variable that holds a value at the same\ntime as we\u2019re testing that value for a pattern match.",
                  "answer_start": 24361
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What other use cases have patterns?",
              "id": 45,
              "answers": [
                {
                  "text": "We can also use patterns to destructure structs, enums, and tuples to use\ndifferent parts of these values.",
                  "answer_start": 4869
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What complications caused using named variables in `match` expressions?",
              "id": 42,
              "answers": [
                {
                  "text": "However, there is a complication when you use\nnamed variables in `match` expressions. Because `match` starts a new scope,\nvariables declared as part of a pattern inside the `match` expression will\nshadow those with the same name outside the `match` construct, as is the case\nwith all variables",
                  "answer_start": 685
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the ways to ignore entire values or parts of values in a pattern?",
              "id": 47,
              "answers": [
                {
                  "text": "There are a few\nways to ignore entire values or parts of values in a pattern: using the `_`\npattern (which you\u2019ve seen), using the `_` pattern within another pattern,\nusing a name that starts with an underscore, or using `..` to ignore remaining\nparts of a value.",
                  "answer_start": 11789
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what types are ranges allowed?",
              "id": 44,
              "answers": [
                {
                  "text": "ranges are only allowed with numeric or `char` values",
                  "answer_start": 4507
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When the `match` expression stops checking arms?",
              "id": 46,
              "answers": [
                {
                  "text": "a `match` expression stops checking arms once it has found the\nfirst matching pattern",
                  "answer_start": 8079
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What happens when I create a variable but don\u2019t use it anywhere?",
              "id": 49,
              "answers": [
                {
                  "text": "If you create a variable but don\u2019t use it anywhere, Rust will usually issue a\nwarning because an unused variable could be a bug. However, sometimes it\u2019s\nuseful to be able to create a variable you won\u2019t use yet, such as when you\u2019re\nprototyping or just starting a project. In this situation, you can tell Rust\nnot to warn you about the unused variable by starting the name of the variable\nwith an underscore",
                  "answer_start": 15190
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Cargo Workspaces\n\nIn Chapter 12, we built a package that included a binary crate and a library\ncrate. As your project develops, you might find that the library crate\ncontinues to get bigger and you want to split your package further into\nmultiple library crates. Cargo offers a feature called *workspaces* that can\nhelp manage multiple related packages that are developed in tandem.\n\n### Creating a Workspace\n\nA *workspace* is a set of packages that share the same *Cargo.lock* and output\ndirectory. Let\u2019s make a project using a workspace\u2014we\u2019ll use trivial code so we\ncan concentrate on the structure of the workspace. There are multiple ways to\nstructure a workspace, so we'll just show one common way. We\u2019ll have a\nworkspace containing a binary and two libraries. The binary, which will provide\nthe main functionality, will depend on the two libraries. One library will\nprovide an `add_one` function, and a second library an `add_two` function.\nThese three crates will be part of the same workspace. We\u2019ll start by creating\na new directory for the workspace:\n\n```console\n$ mkdir add\n$ cd add\n```\n\nNext, in the *add* directory, we create the *Cargo.toml* file that will\nconfigure the entire workspace. This file won\u2019t have a `[package]` section.\nInstead, it will start with a `[workspace]` section that will allow us to add\nmembers to the workspace by specifying the path to the package with our binary\ncrate; in this case, that path is *adder*:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-01-workspace-with-adder-crate/add/Cargo.toml}}\n```\n\nNext, we\u2019ll create the `adder` binary crate by running `cargo new` within the\n*add* directory:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-01-adder-crate/add\nrm -rf adder\ncargo new adder\ncopy output below\n-->\n\n```console\n$ cargo new adder\n     Created binary (application) `adder` package\n```\n\nAt this point, we can build the workspace by running `cargo build`. The files\nin your *add* directory should look like this:\n\n```text\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 adder\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 target\n```\n\nThe workspace has one *target* directory at the top level that the compiled\nartifacts will be placed into; the `adder` package doesn\u2019t have its own\n*target* directory. Even if we were to run `cargo build` from inside the\n*adder* directory, the compiled artifacts would still end up in *add/target*\nrather than *add/adder/target*. Cargo structures the *target* directory in a\nworkspace like this because the crates in a workspace are meant to depend on\neach other. If each crate had its own *target* directory, each crate would have\nto recompile each of the other crates in the workspace to place the artifacts\nin its own *target* directory. By sharing one *target* directory, the crates\ncan avoid unnecessary rebuilding.\n\n### Creating the Second Package in the Workspace\n\nNext, let\u2019s create another member package in the workspace and call it\n`add_one`. Change the top-level *Cargo.toml* to specify the *add_one* path in\nthe `members` list:\n\n<span class=\"filename\">Filename: Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/Cargo.toml}}\n```\n\nThen generate a new library crate named `add_one`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-02-add-one/add\nrm -rf add_one\ncargo new add_one --lib\ncopy output below\n-->\n\n```console\n$ cargo new add_one --lib\n     Created library `add_one` package\n```\n\nYour *add* directory should now have these directories and files:\n\n```text\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 add_one\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 adder\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 target\n```\n\nIn the *add_one/src/lib.rs* file, let\u2019s add an `add_one` function:\n\n<span class=\"filename\">Filename: add_one/src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/add_one/src/lib.rs}}\n```\n\nNow we can have the `adder` package with our binary depend on the `add_one`\npackage that has our library. First, we\u2019ll need to add a path dependency on\n`add_one` to *adder/Cargo.toml*.\n\n<span class=\"filename\">Filename: adder/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/adder/Cargo.toml:6:7}}\n```\n\nCargo doesn\u2019t assume that crates in a workspace will depend on each other, so\nwe need to be explicit about the dependency relationships.\n\nNext, let\u2019s use the `add_one` function (from the `add_one` crate) in the\n`adder` crate. Open the *adder/src/main.rs* file and add a `use` line at the\ntop to bring the new `add_one` library crate into scope. Then change the `main`\nfunction to call the `add_one` function, as in Listing 14-7.\n\n<span class=\"filename\">Filename: adder/src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-07/add/adder/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 14-7: Using the `add_one` library crate from the\n `adder` crate</span>\n\nLet\u2019s build the workspace by running `cargo build` in the top-level *add*\ndirectory!\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n```\n\nTo run the binary crate from the *add* directory, we can specify which\npackage in the workspace we want to run by using the `-p` argument and the\npackage name with `cargo run`:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo run -p adder\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo run -p adder\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!\n```\n\nThis runs the code in *adder/src/main.rs*, which depends on the `add_one` crate.\n\n#### Depending on an External Package in a Workspace\n\nNotice that the workspace has only one *Cargo.lock* file at the top level,\nrather than having a *Cargo.lock* in each crate\u2019s directory. This ensures that\nall crates are using the same version of all dependencies. If we add the `rand`\npackage to the *adder/Cargo.toml* and *add_one/Cargo.toml* files, Cargo will\nresolve both of those to one version of `rand` and record that in the one\n*Cargo.lock*. Making all crates in the workspace use the same dependencies\nmeans the crates will always be compatible with each other. Let\u2019s add the\n`rand` crate to the `[dependencies]` section in the *add_one/Cargo.toml* file\nso we can use the `rand` crate in the `add_one` crate:\n\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n-->\n\n<span class=\"filename\">Filename: add_one/Cargo.toml</span>\n\n```toml\n{{#include ../listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add/add_one/Cargo.toml:6:7}}\n```\n\nWe can now add `use rand;` to the *add_one/src/lib.rs* file, and building the\nwhole workspace by running `cargo build` in the *add* directory will bring in\nand compile the `rand` crate. We will get one warning because we aren\u2019t\nreferring to the `rand` we brought into scope:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n   --snip--\n   Compiling rand v0.8.5\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand`\n --> add_one/src/lib.rs:1:5\n  |\n1 | use rand;\n  |     ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `add_one` (lib) generated 1 warning\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 10.18s\n```\n\nThe top-level *Cargo.lock* now contains information about the dependency of\n`add_one` on `rand`. However, even though `rand` is used somewhere in the\nworkspace, we can\u2019t use it in other crates in the workspace unless we add\n`rand` to their *Cargo.toml* files as well. For example, if we add `use rand;`\nto the *adder/src/main.rs* file for the `adder` package, we\u2019ll get an error:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-03-use-rand/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo build\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n --> adder/src/main.rs:2:5\n  |\n2 | use rand;\n  |     ^^^^ no external crate `rand`\n```\n\nTo fix this, edit the *Cargo.toml* file for the `adder` package and indicate\nthat `rand` is a dependency for it as well. Building the `adder` package will\nadd `rand` to the list of dependencies for `adder` in *Cargo.lock*, but no\nadditional copies of `rand` will be downloaded. Cargo has ensured that every\ncrate in every package in the workspace using the `rand` package will be using\nthe same version, saving us space and ensuring that the crates in the workspace\nwill be compatible with each other.\n\n#### Adding a Test to a Workspace\n\nFor another enhancement, let\u2019s add a test of the `add_one::add_one` function\nwithin the `add_one` crate:\n\n<span class=\"filename\">Filename: add_one/src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add/add_one/src/lib.rs}}\n```\n\nNow run `cargo test` in the top-level *add* directory. Running `cargo test` in\na workspace structured like this one will run the tests for all the crates in\nthe workspace:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test\ncopy output below; the output updating script doesn't handle subdirectories in\npaths properly\n-->\n\n```console\n$ cargo test\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.27s\n     Running unittests src/lib.rs (target/debug/deps/add_one-f0253159197f7841)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/adder-49979ff40686fa8e)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n```\n\nThe first section of the output shows that the `it_works` test in the `add_one`\ncrate passed. The next section shows that zero tests were found in the `adder`\ncrate, and then the last section shows zero documentation tests were found in\nthe `add_one` crate.\n\nWe can also run tests for one particular crate in a workspace from the\ntop-level directory by using the `-p` flag and specifying the name of the crate\nwe want to test:\n\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test -p add_one\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n\n```console\n$ cargo test -p add_one\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests src/lib.rs (target/debug/deps/add_one-b3235fea9a156f74)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n```\n\nThis output shows `cargo test` only ran the tests for the `add_one` crate and\ndidn\u2019t run the `adder` crate tests.\n\nIf you publish the crates in the workspace to [crates.io](https://crates.io/),\neach crate in the workspace will need to be published separately. Like `cargo\ntest`, we can publish a particular crate in our workspace by using the `-p`\nflag and specifying the name of the crate we want to publish.\n\nFor additional practice, add an `add_two` crate to this workspace in a similar\nway as the `add_one` crate!\n\nAs your project grows, consider using a workspace: it\u2019s easier to understand\nsmaller, individual components than one big blob of code. Furthermore, keeping\nthe crates in a workspace can make coordination between crates easier if they\nare often changed at the same time.\n",
          "qas": [
            {
              "question": "What is workspace?",
              "id": 21,
              "answers": [
                {
                  "text": "A *workspace* is a set of packages that share the same *Cargo.lock* and output\ndirectory.",
                  "answer_start": 413
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to build workspace?",
              "id": 22,
              "answers": [
                {
                  "text": "we can build the workspace by running `cargo build`",
                  "answer_start": 1956
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to specify which crate to publish?",
              "id": 138,
              "answers": [
                {
                  "text": "we can publish a particular crate in our workspace by using the `-p`\nflag and specifying the name of the crate we want to publish",
                  "answer_start": 12536
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where are compiled artifacts?",
              "id": 23,
              "answers": [
                {
                  "text": "The workspace has one *target* directory at the top level that the compiled\nartifacts will be placed into",
                  "answer_start": 2182
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Variables and Mutability\n\nAs mentioned in the [\u201cStoring Values with\nVariables\u201d][storing-values-with-variables]<!-- ignore --> section, by default,\nvariables are immutable. This is one of many nudges Rust gives you to write\nyour code in a way that takes advantage of the safety and easy concurrency that\nRust offers. However, you still have the option to make your variables mutable.\nLet\u2019s explore how and why Rust encourages you to favor immutability and why\nsometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can\u2019t change\nthat value. To illustrate this, generate a new project called *variables* in\nyour *projects* directory by using `cargo new variables`.\n\nThen, in your new *variables* directory, open *src/main.rs* and replace its\ncode with the following code, which won\u2019t compile just yet:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/src/main.rs}}\n```\n\nSave and run the program using `cargo run`. You should receive an error message\nregarding an immutability error, as shown in this output:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/output.txt}}\n```\n\nThis example shows how the compiler helps you find errors in your programs.\nCompiler errors can be frustrating, but really they only mean your program\nisn\u2019t safely doing what you want it to do yet; they do *not* mean that you\u2019re\nnot a good programmer! Experienced Rustaceans still get compiler errors.\n\nYou received the error message `` cannot assign twice to immutable variable `x`\n`` because you tried to assign a second value to the immutable `x` variable.\n\nIt\u2019s important that we get compile-time errors when we attempt to change a\nvalue that\u2019s designated as immutable because this very situation can lead to\nbugs. If one part of our code operates on the assumption that a value will\nnever change and another part of our code changes that value, it\u2019s possible\nthat the first part of the code won\u2019t do what it was designed to do. The cause\nof this kind of bug can be difficult to track down after the fact, especially\nwhen the second piece of code changes the value only *sometimes*. The Rust\ncompiler guarantees that when you state that a value won\u2019t change, it really\nwon\u2019t change, so you don\u2019t have to keep track of it yourself. Your code is thus\neasier to reason through.\n\nBut mutability can be very useful, and can make code more convenient to write.\nAlthough variables are immutable by default, you can make them mutable by\nadding `mut` in front of the variable name as you did in [Chapter\n2][storing-values-with-variables]<!-- ignore -->. Adding `mut` also conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable\u2019s value.\n\nFor example, let\u2019s change *src/main.rs* to the following:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/src/main.rs}}\n```\n\nWhen we run the program now, we get this:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/output.txt}}\n```\n\nWe\u2019re allowed to change the value bound to `x` from `5` to `6` when `mut` is\nused. Ultimately, deciding whether to use mutability or not is up to you and\ndepends on what you think is clearest in that particular situation.\n\n### Constants\n\nLike immutable variables, *constants* are values that are bound to a name and\nare not allowed to change, but there are a few differences between constants\nand variables.\n\nFirst, you aren\u2019t allowed to use `mut` with constants. Constants aren\u2019t just\nimmutable by default\u2014they\u2019re always immutable. You declare constants using the\n`const` keyword instead of the `let` keyword, and the type of the value *must*\nbe annotated. We\u2019ll cover types and type annotations in the next section,\n[\u201cData Types\u201d][data-types]<!-- ignore -->, so don\u2019t worry about the details\nright now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression,\nnot the result of a value that could only be computed at runtime.\n\nHere\u2019s an example of a constant declaration:\n\n```rust\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n```\n\nThe constant\u2019s name is `THREE_HOURS_IN_SECONDS` and its value is set to the\nresult of multiplying 60 (the number of seconds in a minute) by 60 (the number\nof minutes in an hour) by 3 (the number of hours we want to count in this\nprogram). Rust\u2019s naming convention for constants is to use all uppercase with\nunderscores between words. The compiler is able to evaluate a limited set of\noperations at compile time, which lets us choose to write out this value in a\nway that\u2019s easier to understand and verify, rather than setting this constant\nto the value 10,800. See the [Rust Reference\u2019s section on constant\nevaluation][const-eval] for more information on what operations can be used\nwhen declaring constants.\n\nConstants are valid for the entire time a program runs, within the scope in\nwhich they were declared. This property makes constants useful for values in\nyour application domain that multiple parts of the program might need to know\nabout, such as the maximum number of points any player of a game is allowed to\nearn, or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future.\n\n### Shadowing\n\nAs you saw in the guessing game tutorial in [Chapter\n2][comparing-the-guess-to-the-secret-number]<!-- ignore -->, you can declare a\nnew variable with the same name as a previous variable. Rustaceans say that the\nfirst variable is *shadowed* by the second, which means that the second\nvariable is what the compiler will see when you use the name of the variable.\nIn effect, the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends.\nWe can shadow a variable by using the same variable\u2019s name and repeating the\nuse of the `let` keyword as follows:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/src/main.rs}}\n```\n\nThis program first binds `x` to a value of `5`. Then it creates a new variable\n`x` by repeating `let x =`, taking the original value and adding `1` so the\nvalue of `x` is then `6`. Then, within an inner scope created with the curly\nbrackets, the third `let` statement also shadows `x` and creates a new\nvariable, multiplying the previous value by `2` to give `x` a value of `12`.\nWhen that scope is over, the inner shadowing ends and `x` returns to being `6`.\nWhen we run this program, it will output the following:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/output.txt}}\n```\n\nShadowing is different from marking a variable as `mut` because we\u2019ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword. By using `let`, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed.\n\nThe other difference between `mut` and shadowing is that because we\u2019re\neffectively creating a new variable when we use the `let` keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, and then we want to store that input as a number:\n\n```rust\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-04-shadowing-can-change-types/src/main.rs:here}}\n```\n\nThe first `spaces` variable is a string type and the second `spaces` variable\nis a number type. Shadowing thus spares us from having to come up with\ndifferent names, such as `spaces_str` and `spaces_num`; instead, we can reuse\nthe simpler `spaces` name. However, if we try to use `mut` for this, as shown\nhere, we\u2019ll get a compile-time error:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/src/main.rs:here}}\n```\n\nThe error says we\u2019re not allowed to mutate a variable\u2019s type:\n\n```console\n{{#include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/output.txt}}\n```\n\nNow that we\u2019ve explored how variables work, let\u2019s look at more data types they\ncan have.\n\n[comparing-the-guess-to-the-secret-number]:\nch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[data-types]: ch03-02-data-types.html#data-types\n[storing-values-with-variables]: ch02-00-guessing-game-tutorial.html#storing-values-with-variables\n[const-eval]: ../reference/const_eval.html\n",
          "qas": [
            {
              "question": "Can I declare a new variable with the same value as a previous variable?",
              "id": 322,
              "answers": [
                {
                  "text": "you can declare a\nnew variable with the same name as a previous variable",
                  "answer_start": 6021
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How should I name constants?",
              "id": 321,
              "answers": [
                {
                  "text": "Rust\u2019s naming convention for constants is to use all uppercase with\nunderscores between words",
                  "answer_start": 4796
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does it mean that variable is immutable?",
              "id": 315,
              "answers": [
                {
                  "text": "When a variable is immutable, once a value is bound to a name, you can\u2019t change\nthat value",
                  "answer_start": 500
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I make variable mutable?",
              "id": 314,
              "answers": [
                {
                  "text": "you still have the option to make your variables mutable",
                  "answer_start": 328
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between shadowing and mutability?",
              "id": 325,
              "answers": [
                {
                  "text": "Shadowing is different from marking a variable as `mut` because we\u2019ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword.",
                  "answer_start": 7333
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are constants?",
              "id": 317,
              "answers": [
                {
                  "text": "values that are bound to a name and\nare not allowed to change",
                  "answer_start": 3578
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What will happen when I try to change the value of an immutable variable?",
              "id": 316,
              "answers": [
                {
                  "text": "we get compile-time errors when we attempt to change a\nvalue that\u2019s designated as immutable",
                  "answer_start": 1802
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Are variables mutable by default?",
              "id": 313,
              "answers": [
                {
                  "text": "by default,\nvariables are immutable.",
                  "answer_start": 138
                }
              ],
              "is_impossible": false
            },
            {
              "question": "With what syntax can I declare constant?",
              "id": 320,
              "answers": [
                {
                  "text": "You declare constants using the\n`const` keyword",
                  "answer_start": 3831
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can I use 'mut' with constants?",
              "id": 318,
              "answers": [
                {
                  "text": "you aren\u2019t allowed to use `mut` with constants",
                  "answer_start": 3714
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "<!-- Old heading. Do not remove or links may break. -->\n<a id=\"closures-anonymous-functions-that-can-capture-their-environment\"></a>\n\n## Closures: Anonymous Functions that Capture Their Environment\n\nRust\u2019s closures are anonymous functions you can save in a variable or pass as\narguments to other functions. You can create the closure in one place and then\ncall the closure elsewhere to evaluate it in a different context. Unlike\nfunctions, closures can capture values from the scope in which they\u2019re defined.\nWe\u2019ll demonstrate how these closure features allow for code reuse and behavior\ncustomization.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"creating-an-abstraction-of-behavior-with-closures\"></a>\n<a id=\"refactoring-using-functions\"></a>\n<a id=\"refactoring-with-closures-to-store-code\"></a>\n\n### Capturing the Environment with Closures\n\nWe\u2019ll first examine how we can use closures to capture values from the\nenvironment they\u2019re defined in for later use. Here\u2019s the scenario: Every so\noften, our t-shirt company gives away an exclusive, limited-edition shirt to\nsomeone on our mailing list as a promotion. People on the mailing list can\noptionally add their favorite color to their profile. If the person chosen for\na free shirt has their favorite color set, they get that color shirt. If the\nperson hasn\u2019t specified a favorite color, they get whatever color the company\ncurrently has the most of.\n\nThere are many ways to implement this. For this example, we\u2019re going to use an\nenum called `ShirtColor` that has the variants `Red` and `Blue` (limiting the\nnumber of colors available for simplicity). We represent the company\u2019s\ninventory with an `Inventory` struct that has a field named `shirts` that\ncontains a `Vec<ShirtColor>` representing the shirt colors currently in stock.\nThe method `giveaway` defined on `Inventory` gets the optional shirt\ncolor preference of the free shirt winner, and returns the shirt color the\nperson will get. This setup is shown in Listing 13-1:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-1: Shirt company giveaway situation</span>\n\nThe `store` defined in `main` has two blue shirts and one red shirt remaining\nto distribute for this limited-edition promotion. We call the `giveaway` method\nfor a user with a preference for a red shirt and a user without any preference.\n\nAgain, this code could be implemented in many ways, and here, to focus on\nclosures, we\u2019ve stuck to concepts you\u2019ve already learned except for the body of\nthe `giveaway` method that uses a closure. In the `giveaway` method, we get the\nuser preference as a parameter of type `Option<ShirtColor>` and call the\n`unwrap_or_else` method on `user_preference`. The [`unwrap_or_else` method on\n`Option<T>`][unwrap-or-else]<!-- ignore --> is defined by the standard library.\nIt takes one argument: a closure without any arguments that returns a value `T`\n(the same type stored in the `Some` variant of the `Option<T>`, in this case\n`ShirtColor`). If the `Option<T>` is the `Some` variant, `unwrap_or_else`\nreturns the value from within the `Some`. If the `Option<T>` is the `None`\nvariant, `unwrap_or_else` calls the closure and returns the value returned by\nthe closure.\n\nWe specify the closure expression `|| self.most_stocked()` as the argument to\n`unwrap_or_else`. This is a closure that takes no parameters itself (if the\nclosure had parameters, they would appear between the two vertical bars). The\nbody of the closure calls `self.most_stocked()`. We\u2019re defining the closure\nhere, and the implementation of `unwrap_or_else` will evaluate the closure\nlater if the result is needed.\n\nRunning this code prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-01/output.txt}}\n```\n\nOne interesting aspect here is that we\u2019ve passed a closure that calls\n`self.most_stocked()` on the current `Inventory` instance. The standard library\ndidn\u2019t need to know anything about the `Inventory` or `ShirtColor` types we\ndefined, or the logic we want to use in this scenario. The closure captures an\nimmutable reference to the `self` `Inventory` instance and passes it with the\ncode we specify to the `unwrap_or_else` method. Functions, on the other hand,\nare not able to capture their environment in this way.\n\n### Closure Type Inference and Annotation\n\nThere are more differences between functions and closures. Closures don\u2019t\nusually require you to annotate the types of the parameters or the return value\nlike `fn` functions do. Type annotations are required on functions because the\ntypes are part of an explicit interface exposed to your users. Defining this\ninterface rigidly is important for ensuring that everyone agrees on what types\nof values a function uses and returns. Closures, on the other hand, aren\u2019t used\nin an exposed interface like this: they\u2019re stored in variables and used without\nnaming them and exposing them to users of our library.\n\nClosures are typically short and relevant only within a narrow context rather\nthan in any arbitrary scenario. Within these limited contexts, the compiler can\ninfer the types of the parameters and the return type, similar to how it\u2019s able\nto infer the types of most variables (there are rare cases where the compiler\nneeds closure type annotations too).\n\nAs with variables, we can add type annotations if we want to increase\nexplicitness and clarity at the cost of being more verbose than is strictly\nnecessary. Annotating the types for a closure would look like the definition\nshown in Listing 13-2. In this example, we\u2019re defining a closure and storing it\nin a variable rather than defining the closure in the spot we pass it as an\nargument as we did in Listing 13-1.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-2: Adding optional type annotations of the\nparameter and return value types in the closure</span>\n\nWith type annotations added, the syntax of closures looks more similar to the\nsyntax of functions. Here we define a function that adds 1 to its parameter and\na closure that has the same behavior, for comparison. We\u2019ve added some spaces\nto line up the relevant parts. This illustrates how closure syntax is similar\nto function syntax except for the use of pipes and the amount of syntax that is\noptional:\n\n```rust,ignore\nfn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;\n```\n\nThe first line shows a function definition, and the second line shows a fully\nannotated closure definition. In the third line, we remove the type annotations\nfrom the closure definition. In the fourth line, we remove the brackets, which\nare optional because the closure body has only one expression. These are all\nvalid definitions that will produce the same behavior when they\u2019re called. The\n`add_one_v3` and `add_one_v4` lines require the closures to be evaluated to be\nable to compile because the types will be inferred from their usage. This is\nsimilar to `let v = Vec::new();` needing either type annotations or values of\nsome type to be inserted into the `Vec` for Rust to be able to infer the type.\n\nFor closure definitions, the compiler will infer one concrete type for each of\ntheir parameters and for their return value. For instance, Listing 13-3 shows\nthe definition of a short closure that just returns the value it receives as a\nparameter. This closure isn\u2019t very useful except for the purposes of this\nexample. Note that we haven\u2019t added any type annotations to the definition.\nBecause there are no type annotations, we can call the closure with any type,\nwhich we\u2019ve done here with `String` the first time. If we then try to call\n`example_closure` with an integer, we\u2019ll get an error.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 13-3: Attempting to call a closure whose types\nare inferred with two different types</span>\n\nThe compiler gives us this error:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-03/output.txt}}\n```\n\nThe first time we call `example_closure` with the `String` value, the compiler\ninfers the type of `x` and the return type of the closure to be `String`. Those\ntypes are then locked into the closure in `example_closure`, and we get a type\nerror when we next try to use a different type with the same closure.\n\n### Capturing References or Moving Ownership\n\nClosures can capture values from their environment in three ways, which\ndirectly map to the three ways a function can take a parameter: borrowing\nimmutably, borrowing mutably, and taking ownership. The closure will decide\nwhich of these to use based on what the body of the function does with the\ncaptured values.\n\nIn Listing 13-4, we define a closure that captures an immutable reference to\nthe vector named `list` because it only needs an immutable reference to print\nthe value:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-04/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-4: Defining and calling a closure that\ncaptures an immutable reference</span>\n\nThis example also illustrates that a variable can bind to a closure definition,\nand we can later call the closure by using the variable name and parentheses as\nif the variable name were a function name.\n\nBecause we can have multiple immutable references to `list` at the same time,\n`list` is still accessible from the code before the closure definition, after\nthe closure definition but before the closure is called, and after the closure\nis called. This code compiles, runs, and prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-04/output.txt}}\n```\n\nNext, in Listing 13-5, we change the closure body so that it adds an element to\nthe `list` vector. The closure now captures a mutable reference:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-5: Defining and calling a closure that\ncaptures a mutable reference</span>\n\nThis code compiles, runs, and prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-05/output.txt}}\n```\n\nNote that there\u2019s no longer a `println!` between the definition and the call of\nthe `borrows_mutably` closure: when `borrows_mutably` is defined, it captures a\nmutable reference to `list`. We don\u2019t use the closure again after the closure\nis called, so the mutable borrow ends. Between the closure definition and the\nclosure call, an immutable borrow to print isn\u2019t allowed because no other\nborrows are allowed when there\u2019s a mutable borrow. Try adding a `println!`\nthere to see what error message you get!\n\nIf you want to force the closure to take ownership of the values it uses in the\nenvironment even though the body of the closure doesn\u2019t strictly need\nownership, you can use the `move` keyword before the parameter list.\n\nThis technique is mostly useful when passing a closure to a new thread to move\nthe data so that it\u2019s owned by the new thread. We\u2019ll discuss threads and why\nyou would want to use them in detail in Chapter 16 when we talk about\nconcurrency, but for now, let\u2019s briefly explore spawning a new thread using a\nclosure that needs the `move` keyword. Listing 13-6 shows Listing 13-4 modified\nto print the vector in a new thread rather than in the main thread:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-06/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-6: Using `move` to force the closure for the\nthread to take ownership of `list`</span>\n\nWe spawn a new thread, giving the thread a closure to run as an argument. The\nclosure body prints out the list. In Listing 13-4, the closure only captured\n`list` using an immutable reference because that's the least amount of access\nto `list` needed to print it. In this example, even though the closure body\nstill only needs an immutable reference, we need to specify that `list` should\nbe moved into the closure by putting the `move` keyword at the beginning of the\nclosure definition. The new thread might finish before the rest of the main\nthread finishes, or the main thread might finish first. If the main thread\nmaintained ownership of `list` but ended before the new thread did and dropped\n`list`, the immutable reference in the thread would be invalid. Therefore, the\ncompiler requires that `list` be moved into the closure given to the new thread\nso the reference will be valid. Try removing the `move` keyword or using `list`\nin the main thread after the closure is defined to see what compiler errors you\nget!\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"storing-closures-using-generic-parameters-and-the-fn-traits\"></a>\n<a id=\"limitations-of-the-cacher-implementation\"></a>\n<a id=\"moving-captured-values-out-of-the-closure-and-the-fn-traits\"></a>\n\n### Moving Captured Values Out of Closures and the `Fn` Traits\n\nOnce a closure has captured a reference or captured ownership of a value from\nthe environment where the closure is defined (thus affecting what, if anything,\nis moved *into* the closure), the code in the body of the closure defines what\nhappens to the references or values when the closure is evaluated later (thus\naffecting what, if anything, is moved *out of* the closure). A closure body can\ndo any of the following: move a captured value out of the closure, mutate the\ncaptured value, neither move nor mutate the value, or capture nothing from the\nenvironment to begin with.\n\nThe way a closure captures and handles values from the environment affects\nwhich traits the closure implements, and traits are how functions and structs\ncan specify what kinds of closures they can use. Closures will automatically\nimplement one, two, or all three of these `Fn` traits, in an additive fashion,\ndepending on how the closure\u2019s body handles the values:\n\n1. `FnOnce` applies to closures that can be called once. All closures implement\n   at least this trait, because all closures can be called. A closure that\n   moves captured values out of its body will only implement `FnOnce` and none\n   of the other `Fn` traits, because it can only be called once.\n2. `FnMut` applies to closures that don\u2019t move captured values out of their\n   body, but that might mutate the captured values. These closures can be\n   called more than once.\n3. `Fn` applies to closures that don\u2019t move captured values out of their body\n   and that don\u2019t mutate captured values, as well as closures that capture\n   nothing from their environment. These closures can be called more than once\n   without mutating their environment, which is important in cases such as\n   calling a closure multiple times concurrently.\n\nLet\u2019s look at the definition of the `unwrap_or_else` method on `Option<T>` that\nwe used in Listing 13-1:\n\n```rust,ignore\nimpl<T> Option<T> {\n    pub fn unwrap_or_else<F>(self, f: F) -> T\n    where\n        F: FnOnce() -> T\n    {\n        match self {\n            Some(x) => x,\n            None => f(),\n        }\n    }\n}\n```\n\nRecall that `T` is the generic type representing the type of the value in the\n`Some` variant of an `Option`. That type `T` is also the return type of the\n`unwrap_or_else` function: code that calls `unwrap_or_else` on an\n`Option<String>`, for example, will get a `String`.\n\nNext, notice that the `unwrap_or_else` function has the additional generic type\nparameter `F`. The `F` type is the type of the parameter named `f`, which is\nthe closure we provide when calling `unwrap_or_else`.\n\nThe trait bound specified on the generic type `F` is `FnOnce() -> T`, which\nmeans `F` must be able to be called once, take no arguments, and return a `T`.\nUsing `FnOnce` in the trait bound expresses the constraint that\n`unwrap_or_else` is only going to call `f` at most one time. In the body of\n`unwrap_or_else`, we can see that if the `Option` is `Some`, `f` won\u2019t be\ncalled. If the `Option` is `None`, `f` will be called once. Because all\nclosures implement `FnOnce`, `unwrap_or_else` accepts the most different kinds\nof closures and is as flexible as it can be.\n\n> Note: Functions can implement all three of the `Fn` traits too. If what we\n> want to do doesn\u2019t require capturing a value from the environment, we can use\n> the name of a function rather than a closure where we need something that\n> implements one of the `Fn` traits. For example, on an `Option<Vec<T>>` value,\n> we could call `unwrap_or_else(Vec::new)` to get a new, empty vector if the\n> value is `None`.\n\nNow let\u2019s look at the standard library method `sort_by_key` defined on slices,\nto see how that differs from `unwrap_or_else` and why `sort_by_key` uses\n`FnMut` instead of `FnOnce` for the trait bound. The closure gets one argument\nin the form of a reference to the current item in the slice being considered,\nand returns a value of type `K` that can be ordered. This function is useful\nwhen you want to sort a slice by a particular attribute of each item. In\nListing 13-7, we have a list of `Rectangle` instances and we use `sort_by_key`\nto order them by their `width` attribute from low to high:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-07/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-7: Using `sort_by_key` to order rectangles by\nwidth</span>\n\nThis code prints:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-07/output.txt}}\n```\n\nThe reason `sort_by_key` is defined to take an `FnMut` closure is that it calls\nthe closure multiple times: once for each item in the slice. The closure `|r|\nr.width` doesn\u2019t capture, mutate, or move out anything from its environment, so\nit meets the trait bound requirements.\n\nIn contrast, Listing 13-8 shows an example of a closure that implements just\nthe `FnOnce` trait, because it moves a value out of the environment. The\ncompiler won\u2019t let us use this closure with `sort_by_key`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-08/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-8: Attempting to use an `FnOnce` closure with\n`sort_by_key`</span>\n\nThis is a contrived, convoluted way (that doesn\u2019t work) to try and count the\nnumber of times `sort_by_key` gets called when sorting `list`. This code\nattempts to do this counting by pushing `value`\u2014a `String` from the closure\u2019s\nenvironment\u2014into the `sort_operations` vector. The closure captures `value`\nthen moves `value` out of the closure by transferring ownership of `value` to\nthe `sort_operations` vector. This closure can be called once; trying to call\nit a second time wouldn\u2019t work because `value` would no longer be in the\nenvironment to be pushed into `sort_operations` again! Therefore, this closure\nonly implements `FnOnce`. When we try to compile this code, we get this error\nthat `value` can\u2019t be moved out of the closure because the closure must\nimplement `FnMut`:\n\n```console\n{{#include ../listings/ch13-functional-features/listing-13-08/output.txt}}\n```\n\nThe error points to the line in the closure body that moves `value` out of the\nenvironment. To fix this, we need to change the closure body so that it doesn\u2019t\nmove values out of the environment. To count the number of times `sort_by_key`\nis called, keeping a counter in the environment and incrementing its value in\nthe closure body is a more straightforward way to calculate that. The closure\nin Listing 13-9 works with `sort_by_key` because it is only capturing a mutable\nreference to the `num_sort_operations` counter and can therefore be called more\nthan once:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch13-functional-features/listing-13-09/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 13-9: Using an `FnMut` closure with `sort_by_key`\nis allowed</span>\n\nThe `Fn` traits are important when defining or using functions or types that\nmake use of closures. In the next section, we\u2019ll discuss iterators. Many\niterator methods take closure arguments, so keep these closure details in mind\nas we continue!\n\n[unwrap-or-else]: ../std/option/enum.Option.html#method.unwrap_or_else\n",
          "qas": [
            {
              "question": "Are closures used in exposed interface?",
              "id": 2211,
              "answers": [
                {
                  "text": "Closures, on the other hand, aren\u2019t used\nin an exposed interface",
                  "answer_start": 4868
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the difference between functions and closures?",
              "id": 2208,
              "answers": [
                {
                  "text": "Unlike\nfunctions, closures can capture values from the scope in which they\u2019re defined.",
                  "answer_start": 422
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to use closures?",
              "id": 2207,
              "answers": [
                {
                  "text": "You can create the closure in one place and then\ncall the closure elsewhere to evaluate it in a different context.",
                  "answer_start": 307
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can closures capture values?",
              "id": 2213,
              "answers": [
                {
                  "text": "in three ways, which\ndirectly map to the three ways a function can take a parameter: borrowing\nimmutably, borrowing mutably, and taking ownership.",
                  "answer_start": 8838
                }
              ],
              "is_impossible": false
            },
            {
              "question": "To which closures does 'Fn' apply?",
              "id": 2218,
              "answers": [
                {
                  "text": " `Fn` applies to closures that don\u2019t move captured values out of their body\n   and that don\u2019t mutate captured values, as well as closures that capture\n   nothing from their environment.",
                  "answer_start": 14865
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is closure allowed to do?",
              "id": 2215,
              "answers": [
                {
                  "text": " move a captured value out of the closure, mutate the\ncaptured value, neither move nor mutate the value, or capture nothing from the\nenvironment to begin with.",
                  "answer_start": 13861
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Do I have to annotate type of parameters in closures?",
              "id": 2210,
              "answers": [
                {
                  "text": "Closures don\u2019t\nusually require you to annotate the types of the parameters or the return value\nlike `fn` functions do.",
                  "answer_start": 4499
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Give me a scenario where can I use closure?",
              "id": 2209,
              "answers": [
                {
                  "text": "Every so\noften, our t-shirt company gives away an exclusive, limited-edition shirt to\nsomeone on our mailing list as a promotion. People on the mailing list can\noptionally add their favorite color to their profile. If the person chosen for\na free shirt has their favorite color set, they get that color shirt. If the\nperson hasn\u2019t specified a favorite color, they get whatever color the company\ncurrently has the most of.",
                  "answer_start": 1002
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Understanding Ownership\n\nOwnership is Rust\u2019s most unique feature and has deep implications for the rest\nof the language. It enables Rust to make memory safety guarantees without\nneeding a garbage collector, so it\u2019s important to understand how ownership\nworks. In this chapter, we\u2019ll talk about ownership as well as several related\nfeatures: borrowing, slices, and how Rust lays data out in memory.\n",
          "qas": [
            {
              "question": "What is the most unique Rust feature?",
              "id": 284,
              "answers": [
                {
                  "text": "Ownership",
                  "answer_start": 27
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Working with Environment Variables\n\nWe\u2019ll improve `minigrep` by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but by instead making it an\nenvironment variable, we allow our users to set the environment variable once\nand have all their searches be case insensitive in that terminal session.\n\n### Writing a Failing Test for the Case-Insensitive `search` Function\n\nWe first add a new `search_case_insensitive` function that will be called when\nthe environment variable has a value. We\u2019ll continue to follow the TDD process,\nso the first step is again to write a failing test. We\u2019ll add a new test for\nthe new `search_case_insensitive` function and rename our old test from\n`one_result` to `case_sensitive` to clarify the differences between the two\ntests, as shown in Listing 12-20.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-20/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-20: Adding a new failing test for the\ncase-insensitive function we\u2019re about to add</span>\n\nNote that we\u2019ve edited the old test\u2019s `contents` too. We\u2019ve added a new line\nwith the text `\"Duct tape.\"` using a capital D that shouldn\u2019t match the query\n`\"duct\"` when we\u2019re searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don\u2019t accidentally break the case-sensitive\nsearch functionality that we\u2019ve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search.\n\nThe new test for the case-*insensitive* search uses `\"rUsT\"` as its query. In\nthe `search_case_insensitive` function we\u2019re about to add, the query `\"rUsT\"`\nshould match the line containing `\"Rust:\"` with a capital R and match the line\n`\"Trust me.\"` even though both have different casing from the query. This is\nour failing test, and it will fail to compile because we haven\u2019t yet defined\nthe `search_case_insensitive` function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the `search` function in Listing 12-16 to see the test compile and fail.\n\n### Implementing the `search_case_insensitive` Function\n\nThe `search_case_insensitive` function, shown in Listing 12-21, will be almost\nthe same as the `search` function. The only difference is that we\u2019ll lowercase\nthe `query` and each `line` so whatever the case of the input arguments,\nthey\u2019ll be the same case when we check whether the line contains the query.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-21/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-21: Defining the `search_case_insensitive`\nfunction to lowercase the query and the line before comparing them</span>\n\nFirst, we lowercase the `query` string and store it in a shadowed variable with\nthe same name. Calling `to_lowercase` on the query is necessary so no\nmatter whether the user\u2019s query is `\"rust\"`, `\"RUST\"`, `\"Rust\"`, or `\"rUsT\"`,\nwe\u2019ll treat the query as if it were `\"rust\"` and be insensitive to the case.\nWhile `to_lowercase` will handle basic Unicode, it won\u2019t be 100% accurate. If\nwe were writing a real application, we\u2019d want to do a bit more work here, but\nthis section is about environment variables, not Unicode, so we\u2019ll leave it at\nthat here.\n\nNote that `query` is now a `String` rather than a string slice, because calling\n`to_lowercase` creates new data rather than referencing existing data. Say the\nquery is `\"rUsT\"`, as an example: that string slice doesn\u2019t contain a lowercase\n`u` or `t` for us to use, so we have to allocate a new `String` containing\n`\"rust\"`. When we pass `query` as an argument to the `contains` method now, we\nneed to add an ampersand because the signature of `contains` is defined to take\na string slice.\n\nNext, we add a call to `to_lowercase` on each `line` to lowercase all\ncharacters. Now that we\u2019ve converted `line` and `query` to lowercase, we\u2019ll\nfind matches no matter what the case of the query is.\n\nLet\u2019s see if this implementation passes the tests:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-21/output.txt}}\n```\n\nGreat! They passed. Now, let\u2019s call the new `search_case_insensitive` function\nfrom the `run` function. First, we\u2019ll add a configuration option to the\n`Config` struct to switch between case-sensitive and case-insensitive search.\nAdding this field will cause compiler errors because we aren\u2019t initializing\nthis field anywhere yet:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:here}}\n```\n\nWe added the `ignore_case` field that holds a Boolean. Next, we need the `run`\nfunction to check the `ignore_case` field\u2019s value and use that to decide\nwhether to call the `search` function or the `search_case_insensitive`\nfunction, as shown in Listing 12-22. This still won\u2019t compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:there}}\n```\n\n<span class=\"caption\">Listing 12-22: Calling either `search` or\n`search_case_insensitive` based on the value in `config.ignore_case`</span>\n\nFinally, we need to check for the environment variable. The functions for\nworking with environment variables are in the `env` module in the standard\nlibrary, so we bring that module into scope at the top of *src/lib.rs*. Then\nwe\u2019ll use the `var` function from the `env` module to check to see if any value\nhas been set for an environment variable named `IGNORE_CASE`, as shown in\nListing 12-23.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-23/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-23: Checking for any value in an environment\nvariable named `IGNORE_CASE`</span>\n\nHere, we create a new variable `ignore_case`. To set its value, we call the\n`env::var` function and pass it the name of the `IGNORE_CASE` environment\nvariable. The `env::var` function returns a `Result` that will be the\nsuccessful `Ok` variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the `Err` variant\nif the environment variable is not set.\n\nWe\u2019re using the `is_ok` method on the `Result` to check whether the environment\nvariable is set, which means the program should do a case-insensitive search.\nIf the `IGNORE_CASE` environment variable isn\u2019t set to anything, `is_ok` will\nreturn false and the program will perform a case-sensitive search. We don\u2019t\ncare about the *value* of the environment variable, just whether it\u2019s set or\nunset, so we\u2019re checking `is_ok` rather than using `unwrap`, `expect`, or any\nof the other methods we\u2019ve seen on `Result`.\n\nWe pass the value in the `ignore_case` variable to the `Config` instance so the\n`run` function can read that value and decide whether to call\n`search_case_insensitive` or `search`, as we implemented in Listing 12-22.\n\nLet\u2019s give it a try! First, we\u2019ll run our program without the environment\nvariable set and with the query `to`, which should match any line that contains\nthe word \u201cto\u201d in all lowercase:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-23/output.txt}}\n```\n\nLooks like that still works! Now, let\u2019s run the program with `IGNORE_CASE`\nset to `1` but with the same query `to`.\n\n```console\n$ IGNORE_CASE=1 cargo run -- to poem.txt\n```\n\nIf you\u2019re using PowerShell, you will need to set the environment variable and\nrun the program as separate commands:\n\n```console\nPS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt\n```\n\nThis will make `IGNORE_CASE` persist for the remainder of your shell\nsession. It can be unset with the `Remove-Item` cmdlet:\n\n```console\nPS> Remove-Item Env:IGNORE_CASE\n```\n\nWe should get lines that contain \u201cto\u201d that might have uppercase letters:\n\n<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nIGNORE_CASE=1 cargo run -- to poem.txt\ncan't extract because of the environment variable\n-->\n\n```console\nAre you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n```\n\nExcellent, we also got lines containing \u201cTo\u201d! Our `minigrep` program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables.\n\nSome programs allow arguments *and* environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case sensitivity\nthrough either a command line argument or an environment variable. Decide\nwhether the command line argument or the environment variable should take\nprecedence if the program is run with one set to case sensitive and one set to\nignore case.\n\nThe `std::env` module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available.\n",
          "qas": [
            {
              "question": "How to delete a environment variable?",
              "id": 2204,
              "answers": [
                {
                  "text": "```console\nPS> Remove-Item Env:IGNORE_CASE\n```",
                  "answer_start": 8081
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the return value of env::val?",
              "id": 2203,
              "answers": [
                {
                  "text": "returns a `Result` that will be the\nsuccessful `Ok` variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the `Err` variant\nif the environment variable is not set.",
                  "answer_start": 6361
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Does 'to_lowercase' work on every letter from Unicode ?",
              "id": 2201,
              "answers": [
                {
                  "text": "`to_lowercase` will handle basic Unicode",
                  "answer_start": 3331
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I avoid passing the same command line argument in each running of the program?",
              "id": 2200,
              "answers": [
                {
                  "text": "Environment Variables",
                  "answer_start": 16
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Smart Pointers\n\nA *pointer* is a general concept for a variable that contains an address in\nmemory. This address refers to, or \u201cpoints at,\u201d some other data. The most\ncommon kind of pointer in Rust is a reference, which you learned about in\nChapter 4. References are indicated by the `&` symbol and borrow the value they\npoint to. They don\u2019t have any special capabilities other than referring to\ndata, and have no overhead.\n\n*Smart pointers*, on the other hand, are data structures that act like a\npointer but also have additional metadata and capabilities. The concept of\nsmart pointers isn\u2019t unique to Rust: smart pointers originated in C++ and exist\nin other languages as well. Rust has a variety of smart pointers defined in the\nstandard library that provide functionality beyond that provided by references.\nTo explore the general concept, we\u2019ll look at a couple of different examples of\nsmart pointers, including a *reference counting* smart pointer type. This\npointer enables you to allow data to have multiple owners by keeping track of\nthe number of owners and, when no owners remain, cleaning up the data.\n\nRust, with its concept of ownership and borrowing, has an additional difference\nbetween references and smart pointers: while references only borrow data, in\nmany cases, smart pointers *own* the data they point to.\n\nThough we didn\u2019t call them as such at the time, we\u2019ve already encountered a few\nsmart pointers in this book, including `String` and `Vec<T>` in Chapter 8. Both\nthese types count as smart pointers because they own some memory and allow you\nto manipulate it. They also have metadata and extra capabilities or guarantees.\n`String`, for example, stores its capacity as metadata and has the extra\nability to ensure its data will always be valid UTF-8.\n\nSmart pointers are usually implemented using structs. Unlike an ordinary\nstruct, smart pointers implement the `Deref` and `Drop` traits. The `Deref`\ntrait allows an instance of the smart pointer struct to behave like a reference\nso you can write your code to work with either references or smart pointers.\nThe `Drop` trait allows you to customize the code that\u2019s run when an instance\nof the smart pointer goes out of scope. In this chapter, we\u2019ll discuss both\ntraits and demonstrate why they\u2019re important to smart pointers.\n\nGiven that the smart pointer pattern is a general design pattern used\nfrequently in Rust, this chapter won\u2019t cover every existing smart pointer. Many\nlibraries have their own smart pointers, and you can even write your own. We\u2019ll\ncover the most common smart pointers in the standard library:\n\n* `Box<T>` for allocating values on the heap\n* `Rc<T>`, a reference counting type that enables multiple ownership\n* `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces\n  the borrowing rules at runtime instead of compile time\n\nIn addition, we\u2019ll cover the *interior mutability* pattern where an immutable\ntype exposes an API for mutating an interior value. We\u2019ll also discuss\n*reference cycles*: how they can leak memory and how to prevent them.\n\nLet\u2019s dive in!\n",
          "qas": [
            {
              "question": "How smart pointers differ from references?",
              "id": 33,
              "answers": [
                {
                  "text": "while references only borrow data, in\nmany cases, smart pointers *own* the data they point to",
                  "answer_start": 1237
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Rc<T>?",
              "id": 30,
              "answers": [
                {
                  "text": "a reference counting type that enables multiple ownership",
                  "answer_start": 2655
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are typical smart pointer traits?",
              "id": 32,
              "answers": [
                {
                  "text": "smart pointers implement the `Deref` and `Drop` traits",
                  "answer_start": 1862
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is Box<T>?",
              "id": 29,
              "answers": [
                {
                  "text": "for allocating values on the heap",
                  "answer_start": 2610
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Fearless Concurrency\n\nHandling concurrent programming safely and efficiently is another of Rust\u2019s\nmajor goals. *Concurrent programming*, where different parts of a program\nexecute independently, and *parallel programming*, where different parts of a\nprogram execute at the same time, are becoming increasingly important as more\ncomputers take advantage of their multiple processors. Historically,\nprogramming in these contexts has been difficult and error prone: Rust hopes to\nchange that.\n\nInitially, the Rust team thought that ensuring memory safety and preventing\nconcurrency problems were two separate challenges to be solved with different\nmethods. Over time, the team discovered that the ownership and type systems are\na powerful set of tools to help manage memory safety *and* concurrency\nproblems! By leveraging ownership and type checking, many concurrency errors\nare compile-time errors in Rust rather than runtime errors. Therefore, rather\nthan making you spend lots of time trying to reproduce the exact circumstances\nunder which a runtime concurrency bug occurs, incorrect code will refuse to\ncompile and present an error explaining the problem. As a result, you can fix\nyour code while you\u2019re working on it rather than potentially after it has been\nshipped to production. We\u2019ve nicknamed this aspect of Rust *fearless*\n*concurrency*. Fearless concurrency allows you to write code that is free of\nsubtle bugs and is easy to refactor without introducing new bugs.\n\n> Note: For simplicity\u2019s sake, we\u2019ll refer to many of the problems as\n> *concurrent* rather than being more precise by saying *concurrent and/or\n> parallel*. If this book were about concurrency and/or parallelism, we\u2019d be\n> more specific. For this chapter, please mentally substitute *concurrent\n> and/or parallel* whenever we use *concurrent*.\n\nMany languages are dogmatic about the solutions they offer for handling\nconcurrent problems. For example, Erlang has elegant functionality for\nmessage-passing concurrency but has only obscure ways to share state between\nthreads. Supporting only a subset of possible solutions is a reasonable\nstrategy for higher-level languages, because a higher-level language promises\nbenefits from giving up some control to gain abstractions. However, lower-level\nlanguages are expected to provide the solution with the best performance in any\ngiven situation and have fewer abstractions over the hardware. Therefore, Rust\noffers a variety of tools for modeling problems in whatever way is appropriate\nfor your situation and requirements.\n\nHere are the topics we\u2019ll cover in this chapter:\n\n* How to create threads to run multiple pieces of code at the same time\n* *Message-passing* concurrency, where channels send messages between threads\n* *Shared-state* concurrency, where multiple threads have access to some piece\n  of data\n* The `Sync` and `Send` traits, which extend Rust\u2019s concurrency guarantees to\n  user-defined types as well as types provided by the standard library\n",
          "qas": [
            {
              "question": "How many concurrency solutions are supported?",
              "id": 80,
              "answers": [
                {
                  "text": "Rust\noffers a variety of tools for modeling problems in whatever way is appropriate\nfor your situation and requirements.",
                  "answer_start": 2429
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are the most common concurrency features in Rust?",
              "id": 81,
              "answers": [
                {
                  "text": "* *Message-passing* concurrency, where channels send messages between threads\n* *Shared-state* concurrency, where multiple threads have access to some piece\n  of data\n* The `Sync` and `Send` traits, which extend Rust\u2019s concurrency guarantees to\n  user-defined types as well as types provided by the standard library",
                  "answer_start": 2673
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Using `Box<T>` to Point to Data on the Heap\n\nThe most straightforward smart pointer is a *box*, whose type is written\n`Box<T>`. Boxes allow you to store data on the heap rather than the stack. What\nremains on the stack is the pointer to the heap data. Refer to Chapter 4 to\nreview the difference between the stack and the heap.\n\nBoxes don\u2019t have performance overhead, other than storing their data on the\nheap instead of on the stack. But they don\u2019t have many extra capabilities\neither. You\u2019ll use them most often in these situations:\n\n* When you have a type whose size can\u2019t be known at compile time and you want\n  to use a value of that type in a context that requires an exact size\n* When you have a large amount of data and you want to transfer ownership but\n  ensure the data won\u2019t be copied when you do so\n* When you want to own a value and you care only that it\u2019s a type that\n  implements a particular trait rather than being of a specific type\n\nWe\u2019ll demonstrate the first situation in the [\u201cEnabling Recursive Types with\nBoxes\u201d](#enabling-recursive-types-with-boxes)<!-- ignore --> section. In the\nsecond case, transferring ownership of a large amount of data can take a long\ntime because the data is copied around on the stack. To improve performance in\nthis situation, we can store the large amount of data on the heap in a box.\nThen, only the small amount of pointer data is copied around on the stack,\nwhile the data it references stays in one place on the heap. The third case is\nknown as a *trait object*, and Chapter 17 devotes an entire section, [\u201cUsing\nTrait Objects That Allow for Values of Different Types,\u201d][trait-objects]<!--\nignore --> just to that topic. So what you learn here you\u2019ll apply again in\nChapter 17!\n\n### Using a `Box<T>` to Store Data on the Heap\n\nBefore we discuss the heap storage use case for `Box<T>`, we\u2019ll cover the\nsyntax and how to interact with values stored within a `Box<T>`.\n\nListing 15-1 shows how to use a box to store an `i32` value on the heap:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-01/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-1: Storing an `i32` value on the heap using a\nbox</span>\n\nWe define the variable `b` to have the value of a `Box` that points to the\nvalue `5`, which is allocated on the heap. This program will print `b = 5`; in\nthis case, we can access the data in the box similar to how we would if this\ndata were on the stack. Just like any owned value, when a box goes out of\nscope, as `b` does at the end of `main`, it will be deallocated. The\ndeallocation happens both for the box (stored on the stack) and the data it\npoints to (stored on the heap).\n\nPutting a single value on the heap isn\u2019t very useful, so you won\u2019t use boxes by\nthemselves in this way very often. Having values like a single `i32` on the\nstack, where they\u2019re stored by default, is more appropriate in the majority of\nsituations. Let\u2019s look at a case where boxes allow us to define types that we\nwouldn\u2019t be allowed to if we didn\u2019t have boxes.\n\n### Enabling Recursive Types with Boxes\n\nA value of *recursive type* can have another value of the same type as part of\nitself. Recursive types pose an issue because at compile time Rust needs to\nknow how much space a type takes up. However, the nesting of values of\nrecursive types could theoretically continue infinitely, so Rust can\u2019t know how\nmuch space the value needs. Because boxes have a known size, we can enable\nrecursive types by inserting a box in the recursive type definition.\n\nAs an example of a recursive type, let\u2019s explore the *cons list*. This is a data\ntype commonly found in functional programming languages. The cons list type\nwe\u2019ll define is straightforward except for the recursion; therefore, the\nconcepts in the example we\u2019ll work with will be useful any time you get into\nmore complex situations involving recursive types.\n\n#### More Information About the Cons List\n\nA *cons list* is a data structure that comes from the Lisp programming language\nand its dialects and is made up of nested pairs, and is the Lisp version of a\nlinked list. Its name comes from the `cons` function (short for \u201cconstruct\nfunction\u201d) in Lisp that constructs a new pair from its two arguments. By\ncalling `cons` on a pair consisting of a value and another pair, we can\nconstruct cons lists made up of recursive pairs.\n\nFor example, here\u2019s a pseudocode representation of a cons list containing the\nlist 1, 2, 3 with each pair in parentheses:\n\n```text\n(1, (2, (3, Nil)))\n```\n\nEach item in a cons list contains two elements: the value of the current item\nand the next item. The last item in the list contains only a value called `Nil`\nwithout a next item. A cons list is produced by recursively calling the `cons`\nfunction. The canonical name to denote the base case of the recursion is `Nil`.\nNote that this is not the same as the \u201cnull\u201d or \u201cnil\u201d concept in Chapter 6,\nwhich is an invalid or absent value.\n\nThe cons list isn\u2019t a commonly used data structure in Rust. Most of the time\nwhen you have a list of items in Rust, `Vec<T>` is a better choice to use.\nOther, more complex recursive data types *are* useful in various situations,\nbut by starting with the cons list in this chapter, we can explore how boxes\nlet us define a recursive data type without much distraction.\n\nListing 15-2 contains an enum definition for a cons list. Note that this code\nwon\u2019t compile yet because the `List` type doesn\u2019t have a known size, which\nwe\u2019ll demonstrate.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-02/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-2: The first attempt at defining an enum to\nrepresent a cons list data structure of `i32` values</span>\n\n> Note: We\u2019re implementing a cons list that holds only `i32` values for the\n> purposes of this example. We could have implemented it using generics, as we\n> discussed in Chapter 10, to define a cons list type that could store values of\n> any type.\n\nUsing the `List` type to store the list `1, 2, 3` would look like the code in\nListing 15-3:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-03/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-3: Using the `List` enum to store the list `1,\n2, 3`</span>\n\nThe first `Cons` value holds `1` and another `List` value. This `List` value is\nanother `Cons` value that holds `2` and another `List` value. This `List` value\nis one more `Cons` value that holds `3` and a `List` value, which is finally\n`Nil`, the non-recursive variant that signals the end of the list.\n\nIf we try to compile the code in Listing 15-3, we get the error shown in\nListing 15-4:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-03/output.txt}}\n```\n\n<span class=\"caption\">Listing 15-4: The error we get when attempting to define\na recursive enum</span>\n\nThe error shows this type \u201chas infinite size.\u201d The reason is that we\u2019ve defined\n`List` with a variant that is recursive: it holds another value of itself\ndirectly. As a result, Rust can\u2019t figure out how much space it needs to store a\n`List` value. Let\u2019s break down why we get this error. First, we\u2019ll look at how\nRust decides how much space it needs to store a value of a non-recursive type.\n\n#### Computing the Size of a Non-Recursive Type\n\nRecall the `Message` enum we defined in Listing 6-2 when we discussed enum\ndefinitions in Chapter 6:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}\n```\n\nTo determine how much space to allocate for a `Message` value, Rust goes\nthrough each of the variants to see which variant needs the most space. Rust\nsees that `Message::Quit` doesn\u2019t need any space, `Message::Move` needs enough\nspace to store two `i32` values, and so forth. Because only one variant will be\nused, the most space a `Message` value will need is the space it would take to\nstore the largest of its variants.\n\nContrast this with what happens when Rust tries to determine how much space a\nrecursive type like the `List` enum in Listing 15-2 needs. The compiler starts\nby looking at the `Cons` variant, which holds a value of type `i32` and a value\nof type `List`. Therefore, `Cons` needs an amount of space equal to the size of\nan `i32` plus the size of a `List`. To figure out how much memory the `List`\ntype needs, the compiler looks at the variants, starting with the `Cons`\nvariant. The `Cons` variant holds a value of type `i32` and a value of type\n`List`, and this process continues infinitely, as shown in Figure 15-1.\n\n<img alt=\"An infinite Cons list\" src=\"img/trpl15-01.svg\" class=\"center\" style=\"width: 50%;\" />\n\n<span class=\"caption\">Figure 15-1: An infinite `List` consisting of infinite\n`Cons` variants</span>\n\n#### Using `Box<T>` to Get a Recursive Type with a Known Size\n\nBecause Rust can\u2019t figure out how much space to allocate for recursively\ndefined types, the compiler gives an error with this helpful suggestion:\n\n<!-- manual-regeneration\nafter doing automatic regeneration, look at listings/ch15-smart-pointers/listing-15-03/output.txt and copy the relevant line\n-->\n\n```text\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +\n```\n\nIn this suggestion, \u201cindirection\u201d means that instead of storing a value\ndirectly, we should change the data structure to store the value indirectly by\nstoring a pointer to the value instead.\n\nBecause a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>`\nneeds: a pointer\u2019s size doesn\u2019t change based on the amount of data it\u2019s\npointing to. This means we can put a `Box<T>` inside the `Cons` variant instead\nof another `List` value directly. The `Box<T>` will point to the next `List`\nvalue that will be on the heap rather than inside the `Cons` variant.\nConceptually, we still have a list, created with lists holding other lists, but\nthis implementation is now more like placing the items next to one another\nrather than inside one another.\n\nWe can change the definition of the `List` enum in Listing 15-2 and the usage\nof the `List` in Listing 15-3 to the code in Listing 15-5, which will compile:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-05/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-5: Definition of `List` that uses `Box<T>` in\norder to have a known size</span>\n\nThe `Cons` variant needs the size of an `i32` plus the space to store the\nbox\u2019s pointer data. The `Nil` variant stores no values, so it needs less space\nthan the `Cons` variant. We now know that any `List` value will take up the\nsize of an `i32` plus the size of a box\u2019s pointer data. By using a box, we\u2019ve\nbroken the infinite, recursive chain, so the compiler can figure out the size\nit needs to store a `List` value. Figure 15-2 shows what the `Cons` variant\nlooks like now.\n\n<img alt=\"A finite Cons list\" src=\"img/trpl15-02.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-2: A `List` that is not infinitely sized\nbecause `Cons` holds a `Box`</span>\n\nBoxes provide only the indirection and heap allocation; they don\u2019t have any\nother special capabilities, like those we\u2019ll see with the other smart pointer\ntypes. They also don\u2019t have the performance overhead that these special\ncapabilities incur, so they can be useful in cases like the cons list where the\nindirection is the only feature we need. We\u2019ll look at more use cases for boxes\nin Chapter 17, too.\n\nThe `Box<T>` type is a smart pointer because it implements the `Deref` trait,\nwhich allows `Box<T>` values to be treated like references. When a `Box<T>`\nvalue goes out of scope, the heap data that the box is pointing to is cleaned\nup as well because of the `Drop` trait implementation. These two traits will be\neven more important to the functionality provided by the other smart pointer\ntypes we\u2019ll discuss in the rest of this chapter. Let\u2019s explore these two traits\nin more detail.\n\n[trait-objects]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n",
          "qas": [
            {
              "question": "How to create recursive data type?",
              "id": 38,
              "answers": [
                {
                  "text": "we can enable\nrecursive types by inserting a box in the recursive type definition",
                  "answer_start": 3491
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When boxed value gets deallocated?",
              "id": 37,
              "answers": [
                {
                  "text": "Just like any owned value, when a box goes out of\nscope, as `b` does at the end of `main`, it will be deallocated. The\ndeallocation happens both for the box (stored on the stack) and the data it\npoints to (stored on the heap).",
                  "answer_start": 2493
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where does Box<T> store data?",
              "id": 35,
              "answers": [
                {
                  "text": "Boxes allow you to store data on the heap rather than the stack.",
                  "answer_start": 131
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to pass around large amounts of data?",
              "id": 36,
              "answers": [
                {
                  "text": "To improve performance in\nthis situation, we can store the large amount of data on the heap in a box.\nThen, only the small amount of pointer data is copied around on the stack,\nwhile the data it references stays in one place on the heap.",
                  "answer_start": 1241
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Traits: Defining Shared Behavior\n\nA *trait* defines functionality a particular type has and can share with other\ntypes. We can use traits to define shared behavior in an abstract way. We can\nuse *trait bounds* to specify that a generic type can be any type that has\ncertain behavior.\n\n> Note: Traits are similar to a feature often called *interfaces* in other\n> languages, although with some differences.\n\n### Defining a Trait\n\nA type\u2019s behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose.\n\nFor example, let\u2019s say we have multiple structs that hold various kinds and\namounts of text: a `NewsArticle` struct that holds a news story filed in a\nparticular location and a `Tweet` that can have at most 280 characters along\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\nto another tweet.\n\nWe want to make a media aggregator library crate named `aggregator` that can\ndisplay summaries of data that might be stored in a `NewsArticle` or `Tweet`\ninstance. To do this, we need a summary from each type, and we\u2019ll request\nthat summary by calling a `summarize` method on an instance. Listing 10-12\nshows the definition of a public `Summary` trait that expresses this behavior.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-12/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 10-12: A `Summary` trait that consists of the\nbehavior provided by a `summarize` method</span>\n\nHere, we declare a trait using the `trait` keyword and then the trait\u2019s name,\nwhich is `Summary` in this case. We\u2019ve also declared the trait as `pub` so that\ncrates depending on this crate can make use of this trait too, as we\u2019ll see in\na few examples. Inside the curly brackets, we declare the method signatures\nthat describe the behaviors of the types that implement this trait, which in\nthis case is `fn summarize(&self) -> String`.\n\nAfter the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the `Summary` trait will have the method `summarize`\ndefined with this signature exactly.\n\nA trait can have multiple methods in its body: the method signatures are listed\none per line and each line ends in a semicolon.\n\n### Implementing a Trait on a Type\n\nNow that we\u2019ve defined the desired signatures of the `Summary` trait\u2019s methods,\nwe can implement it on the types in our media aggregator. Listing 10-13 shows\nan implementation of the `Summary` trait on the `NewsArticle` struct that uses\nthe headline, the author, and the location to create the return value of\n`summarize`. For the `Tweet` struct, we define `summarize` as the username\nfollowed by the entire text of the tweet, assuming that tweet content is\nalready limited to 280 characters.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-13: Implementing the `Summary` trait on the\n`NewsArticle` and `Tweet` types</span>\n\nImplementing a trait on a type is similar to implementing regular methods. The\ndifference is that after `impl`, we put the trait name we want to implement,\nthen use the `for` keyword, and then specify the name of the type we want to\nimplement the trait for. Within the `impl` block, we put the method signatures\nthat the trait definition has defined. Instead of adding a semicolon after each\nsignature, we use curly brackets and fill in the method body with the specific\nbehavior that we want the methods of the trait to have for the particular type.\n\nNow that the library has implemented the `Summary` trait on `NewsArticle` and\n`Tweet`, users of the crate can call the trait methods on instances of\n`NewsArticle` and `Tweet` in the same way we call regular methods. The only\ndifference is that the user must bring the trait into scope as well as the\ntypes. Here\u2019s an example of how a binary crate could use our `aggregator`\nlibrary crate:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-01-calling-trait-method/src/main.rs}}\n```\n\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already\nknow, people`.\n\nOther crates that depend on the `aggregator` crate can also bring the `Summary`\ntrait into scope to implement `Summary` on their own types. One restriction to\nnote is that we can implement a trait on a type only if at least one of the\ntrait or the type is local to our crate. For example, we can implement standard\nlibrary traits like `Display` on a custom type like `Tweet` as part of our\n`aggregator` crate functionality, because the type `Tweet` is local to our\n`aggregator` crate. We can also implement `Summary` on `Vec<T>` in our\n`aggregator` crate, because the trait `Summary` is local to our `aggregator`\ncrate.\n\nBut we can\u2019t implement external traits on external types. For example, we can\u2019t\nimplement the `Display` trait on `Vec<T>` within our `aggregator` crate,\nbecause `Display` and `Vec<T>` are both defined in the standard library and\naren\u2019t local to our `aggregator` crate. This restriction is part of a property\ncalled *coherence*, and more specifically the *orphan rule*, so named because\nthe parent type is not present. This rule ensures that other people\u2019s code\ncan\u2019t break your code and vice versa. Without the rule, two crates could\nimplement the same trait for the same type, and Rust wouldn\u2019t know which\nimplementation to use.\n\n### Default Implementations\n\nSometimes it\u2019s useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method\u2019s default behavior.\n\nIn Listing 10-14 we specify a default string for the `summarize` method of the\n`Summary` trait instead of only defining the method signature, as we did in\nListing 10-12.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-14/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 10-14: Defining a `Summary` trait with a default\nimplementation of the `summarize` method</span>\n\nTo use a default implementation to summarize instances of `NewsArticle`, we\nspecify an empty `impl` block with `impl Summary for NewsArticle {}`.\n\nEven though we\u2019re no longer defining the `summarize` method on `NewsArticle`\ndirectly, we\u2019ve provided a default implementation and specified that\n`NewsArticle` implements the `Summary` trait. As a result, we can still call\nthe `summarize` method on an instance of `NewsArticle`, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-02-calling-default-impl/src/main.rs:here}}\n```\n\nThis code prints `New article available! (Read more...)`.\n\nCreating a default implementation doesn\u2019t require us to change anything about\nthe implementation of `Summary` on `Tweet` in Listing 10-13. The reason is that\nthe syntax for overriding a default implementation is the same as the syntax\nfor implementing a trait method that doesn\u2019t have a default implementation.\n\nDefault implementations can call other methods in the same trait, even if those\nother methods don\u2019t have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the `Summary` trait to have a\n`summarize_author` method whose implementation is required, and then define a\n`summarize` method that has a default implementation that calls the\n`summarize_author` method:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:here}}\n```\n\nTo use this version of `Summary`, we only need to define `summarize_author`\nwhen we implement the trait on a type:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:impl}}\n```\n\nAfter we define `summarize_author`, we can call `summarize` on instances of the\n`Tweet` struct, and the default implementation of `summarize` will call the\ndefinition of `summarize_author` that we\u2019ve provided. Because we\u2019ve implemented\n`summarize_author`, the `Summary` trait has given us the behavior of the\n`summarize` method without requiring us to write any more code.\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/main.rs:here}}\n```\n\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\n\nNote that it isn\u2019t possible to call the default implementation from an\noverriding implementation of that same method.\n\n### Traits as Parameters\n\nNow that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types. We'll use the\n`Summary` trait we implemented on the `NewsArticle` and `Tweet` types in\nListing 10-13 to define a `notify` function that calls the `summarize` method\non its `item` parameter, which is of some type that implements the `Summary`\ntrait. To do this, we use the `impl Trait` syntax, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-04-traits-as-parameters/src/lib.rs:here}}\n```\n\nInstead of a concrete type for the `item` parameter, we specify the `impl`\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of `notify`, we can call any methods on `item`\nthat come from the `Summary` trait, such as `summarize`. We can call `notify`\nand pass in any instance of `NewsArticle` or `Tweet`. Code that calls the\nfunction with any other type, such as a `String` or an `i32`, won\u2019t compile\nbecause those types don\u2019t implement `Summary`.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"fixing-the-largest-function-with-trait-bounds\"></a>\n\n#### Trait Bound Syntax\n\nThe `impl Trait` syntax works for straightforward cases but is actually syntax\nsugar for a longer form known as a *trait bound*; it looks like this:\n\n```rust,ignore\npub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets.\n\nThe `impl Trait` syntax is convenient and makes for more concise code in simple\ncases, while the fuller trait bound syntax can express more complexity in other\ncases. For example, we can have two parameters that implement `Summary`. Doing\nso with the `impl Trait` syntax looks like this:\n\n```rust,ignore\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\n```\n\nUsing `impl Trait` is appropriate if we want this function to allow `item1` and\n`item2` to have different types (as long as both types implement `Summary`). If\nwe want to force both parameters to have the same type, however, we must use a\ntrait bound, like this:\n\n```rust,ignore\npub fn notify<T: Summary>(item1: &T, item2: &T) {\n```\n\nThe generic type `T` specified as the type of the `item1` and `item2`\nparameters constrains the function such that the concrete type of the value\npassed as an argument for `item1` and `item2` must be the same.\n\n#### Specifying Multiple Trait Bounds with the `+` Syntax\n\nWe can also specify more than one trait bound. Say we wanted `notify` to use\ndisplay formatting as well as `summarize` on `item`: we specify in the `notify`\ndefinition that `item` must implement both `Display` and `Summary`. We can do\nso using the `+` syntax:\n\n```rust,ignore\npub fn notify(item: &(impl Summary + Display)) {\n```\n\nThe `+` syntax is also valid with trait bounds on generic types:\n\n```rust,ignore\npub fn notify<T: Summary + Display>(item: &T) {\n```\n\nWith the two trait bounds specified, the body of `notify` can call `summarize`\nand use `{}` to format `item`.\n\n#### Clearer Trait Bounds with `where` Clauses\n\nUsing too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function\u2019s name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a `where` clause after the function\nsignature. So instead of writing this:\n\n```rust,ignore\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n```\n\nwe can use a `where` clause, like this:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-where-clause/src/lib.rs:here}}\n```\n\nThis function\u2019s signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds.\n\n### Returning Types that Implement Traits\n\nWe can also use the `impl Trait` syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-05-returning-impl-trait/src/lib.rs:here}}\n```\n\nBy using `impl Summary` for the return type, we specify that the\n`returns_summarizable` function returns some type that implements the `Summary`\ntrait without naming the concrete type. In this case, `returns_summarizable`\nreturns a `Tweet`, but the code calling this function doesn\u2019t need to know that.\n\nThe ability to specify a return type only by the trait it implements is\nespecially useful in the context of closures and iterators, which we cover in\nChapter 13. Closures and iterators create types that only the compiler knows or\ntypes that are very long to specify. The `impl Trait` syntax lets you concisely\nspecify that a function returns some type that implements the `Iterator` trait\nwithout needing to write out a very long type.\n\nHowever, you can only use `impl Trait` if you\u2019re returning a single type. For\nexample, this code that returns either a `NewsArticle` or a `Tweet` with the\nreturn type specified as `impl Summary` wouldn\u2019t work:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-06-impl-trait-returns-one-type/src/lib.rs:here}}\n```\n\nReturning either a `NewsArticle` or a `Tweet` isn\u2019t allowed due to restrictions\naround how the `impl Trait` syntax is implemented in the compiler. We\u2019ll cover\nhow to write a function with this behavior in the [\u201cUsing Trait Objects That\nAllow for Values of Different\nTypes\u201d][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> section of Chapter 17.\n\n### Using Trait Bounds to Conditionally Implement Methods\n\nBy using a trait bound with an `impl` block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type `Pair<T>` in Listing 10-15 always implements the\n`new` function to return a new instance of `Pair<T>` (recall from the\n[\u201cDefining Methods\u201d][methods]<!-- ignore --> section of Chapter 5 that `Self`\nis a type alias for the type of the `impl` block, which in this case is\n`Pair<T>`). But in the next `impl` block, `Pair<T>` only implements the\n`cmp_display` method if its inner type `T` implements the `PartialOrd` trait\nthat enables comparison *and* the `Display` trait that enables printing.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-15/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 10-15: Conditionally implementing methods on a\ngeneric type depending on trait bounds</span>\n\nWe can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called *blanket implementations* and are extensively used in the\nRust standard library. For example, the standard library implements the\n`ToString` trait on any type that implements the `Display` trait. The `impl`\nblock in the standard library looks similar to this code:\n\n```rust,ignore\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\n\nBecause the standard library has this blanket implementation, we can call the\n`to_string` method defined by the `ToString` trait on any type that implements\nthe `Display` trait. For example, we can turn integers into their corresponding\n`String` values like this because integers implement `Display`:\n\n```rust\nlet s = 3.to_string();\n```\n\nBlanket implementations appear in the documentation for the trait in the\n\u201cImplementors\u201d section.\n\nTraits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn\u2019t define the method. But Rust\nmoves these errors to compile time so we\u2019re forced to fix the problems before\nour code is even able to run. Additionally, we don\u2019t have to write code that\nchecks for behavior at runtime because we\u2019ve already checked at compile time.\nDoing so improves performance without having to give up the flexibility of\ngenerics.\n\n[using-trait-objects-that-allow-for-values-of-different-types]: ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[methods]: ch05-03-method-syntax.html#defining-methods\n",
          "qas": [
            {
              "question": "Is it possible to override default behavior of a method?",
              "id": 2060,
              "answers": [
                {
                  "text": "we can keep or override\neach method\u2019s default behavior",
                  "answer_start": 6150
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to declare a trait?",
              "id": 2052,
              "answers": [
                {
                  "text": "we declare a trait using the `trait` keyword and then the trait\u2019s name",
                  "answer_start": 1743
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What restrictions are used in traits?",
              "id": 2055,
              "answers": [
                {
                  "text": "we can implement a trait on a type only if at least one of the\ntrait or the type is local to our crate.",
                  "answer_start": 4830
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where are blanket implementations used?",
              "id": 2066,
              "answers": [
                {
                  "text": "in the\nRust standard library",
                  "answer_start": 16562
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What does the orphan rule prevent from?",
              "id": 2058,
              "answers": [
                {
                  "text": "ensures that other people\u2019s code\ncan\u2019t break your code and vice versa",
                  "answer_start": 5707
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is  \"+\" syntax valid on generics?",
              "id": 2062,
              "answers": [
                {
                  "text": "The `+` syntax is also valid with trait bounds on generic types",
                  "answer_start": 12318
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can different types share the same behavior?",
              "id": 2051,
              "answers": [
                {
                  "text": "Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes",
                  "answer_start": 499
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What are blanket implementations?",
              "id": 2065,
              "answers": [
                {
                  "text": "Implementations of a trait on any type that satisfies the trait\nbounds",
                  "answer_start": 16429
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is it possible to implement external traits?",
              "id": 2056,
              "answers": [
                {
                  "text": "we can\u2019t implement external traits on external types.",
                  "answer_start": 5283
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is used after trait signature?",
              "id": 2054,
              "answers": [
                {
                  "text": "curly brackets",
                  "answer_start": 3890
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How can I set more than 1 trait bound?",
              "id": 2061,
              "answers": [
                {
                  "text": "with the `+` Syntax",
                  "answer_start": 11967
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to implement a trait?",
              "id": 2053,
              "answers": [
                {
                  "text": "Implementing a trait on a type is similar to implementing regular methods. The\ndifference is that after `impl`, we put the trait name we want to implement,\nthen use the `for` keyword, and then specify the name of the type we want to\nimplement the trait for.",
                  "answer_start": 3480
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Reference Cycles Can Leak Memory\n\nRust\u2019s memory safety guarantees make it difficult, but not impossible, to\naccidentally create memory that is never cleaned up (known as a *memory leak*).\nPreventing memory leaks entirely is not one of Rust\u2019s guarantees, meaning\nmemory leaks are memory safe in Rust. We can see that Rust allows memory leaks\nby using `Rc<T>` and `RefCell<T>`: it\u2019s possible to create references where\nitems refer to each other in a cycle. This creates memory leaks because the\nreference count of each item in the cycle will never reach 0, and the values\nwill never be dropped.\n\n### Creating a Reference Cycle\n\nLet\u2019s look at how a reference cycle might happen and how to prevent it,\nstarting with the definition of the `List` enum and a `tail` method in Listing\n15-25:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-25/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 15-25: A cons list definition that holds a\n`RefCell<T>` so we can modify what a `Cons` variant is referring to</span>\n\nWe\u2019re using another variation of the `List` definition from Listing 15-5. The\nsecond element in the `Cons` variant is now `RefCell<Rc<List>>`, meaning that\ninstead of having the ability to modify the `i32` value as we did in Listing\n15-24, we want to modify the `List` value a `Cons` variant is pointing to.\nWe\u2019re also adding a `tail` method to make it convenient for us to access the\nsecond item if we have a `Cons` variant.\n\nIn Listing 15-26, we\u2019re adding a `main` function that uses the definitions in\nListing 15-25. This code creates a list in `a` and a list in `b` that points to\nthe list in `a`. Then it modifies the list in `a` to point to `b`, creating a\nreference cycle. There are `println!` statements along the way to show what the\nreference counts are at various points in this process.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-26/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-26: Creating a reference cycle of two `List`\nvalues pointing to each other</span>\n\nWe create an `Rc<List>` instance holding a `List` value in the variable `a`\nwith an initial list of `5, Nil`. We then create an `Rc<List>` instance holding\nanother `List` value in the variable `b` that contains the value 10 and points\nto the list in `a`.\n\nWe modify `a` so it points to `b` instead of `Nil`, creating a cycle. We do\nthat by using the `tail` method to get a reference to the `RefCell<Rc<List>>`\nin `a`, which we put in the variable `link`. Then we use the `borrow_mut`\nmethod on the `RefCell<Rc<List>>` to change the value inside from an `Rc<List>`\nthat holds a `Nil` value to the `Rc<List>` in `b`.\n\nWhen we run this code, keeping the last `println!` commented out for the\nmoment, we\u2019ll get this output:\n\n```console\n{{#include ../listings/ch15-smart-pointers/listing-15-26/output.txt}}\n```\n\nThe reference count of the `Rc<List>` instances in both `a` and `b` are 2 after\nwe change the list in `a` to point to `b`. At the end of `main`, Rust drops the\nvariable `b`, which decreases the reference count of the `b` `Rc<List>` instance\nfrom 2 to 1. The memory that `Rc<List>` has on the heap won\u2019t be dropped at\nthis point, because its reference count is 1, not 0. Then Rust drops `a`, which\ndecreases the reference count of the `a` `Rc<List>` instance from 2 to 1 as\nwell. This instance\u2019s memory can\u2019t be dropped either, because the other\n`Rc<List>` instance still refers to it. The memory allocated to the list will\nremain uncollected forever. To visualize this reference cycle, we\u2019ve created a\ndiagram in Figure 15-4.\n\n<img alt=\"Reference cycle of lists\" src=\"img/trpl15-04.svg\" class=\"center\" />\n\n<span class=\"caption\">Figure 15-4: A reference cycle of lists `a` and `b`\npointing to each other</span>\n\nIf you uncomment the last `println!` and run the program, Rust will try to\nprint this cycle with `a` pointing to `b` pointing to `a` and so forth until it\noverflows the stack.\n\nCompared to a real-world program, the consequences of creating a reference cycle\nin this example aren\u2019t very dire: right after we create the reference cycle,\nthe program ends. However, if a more complex program allocated lots of memory\nin a cycle and held onto it for a long time, the program would use more memory\nthan it needed and might overwhelm the system, causing it to run out of\navailable memory.\n\nCreating reference cycles is not easily done, but it\u2019s not impossible either.\nIf you have `RefCell<T>` values that contain `Rc<T>` values or similar nested\ncombinations of types with interior mutability and reference counting, you must\nensure that you don\u2019t create cycles; you can\u2019t rely on Rust to catch them.\nCreating a reference cycle would be a logic bug in your program that you should\nuse automated tests, code reviews, and other software development practices to\nminimize.\n\nAnother solution for avoiding reference cycles is reorganizing your data\nstructures so that some references express ownership and some references don\u2019t.\nAs a result, you can have cycles made up of some ownership relationships and\nsome non-ownership relationships, and only the ownership relationships affect\nwhether or not a value can be dropped. In Listing 15-25, we always want `Cons`\nvariants to own their list, so reorganizing the data structure isn\u2019t possible.\nLet\u2019s look at an example using graphs made up of parent nodes and child nodes\nto see when non-ownership relationships are an appropriate way to prevent\nreference cycles.\n\n### Preventing Reference Cycles: Turning an `Rc<T>` into a `Weak<T>`\n\nSo far, we\u2019ve demonstrated that calling `Rc::clone` increases the\n`strong_count` of an `Rc<T>` instance, and an `Rc<T>` instance is only cleaned\nup if its `strong_count` is 0. You can also create a *weak reference* to the\nvalue within an `Rc<T>` instance by calling `Rc::downgrade` and passing a\nreference to the `Rc<T>`. Strong references are how you can share ownership of\nan `Rc<T>` instance. Weak references don\u2019t express an ownership relationship,\nand their count doesn\u2019t affect when an `Rc<T>` instance is cleaned up. They\nwon\u2019t cause a reference cycle because any cycle involving some weak references\nwill be broken once the strong reference count of values involved is 0.\n\nWhen you call `Rc::downgrade`, you get a smart pointer of type `Weak<T>`.\nInstead of increasing the `strong_count` in the `Rc<T>` instance by 1, calling\n`Rc::downgrade` increases the `weak_count` by 1. The `Rc<T>` type uses\n`weak_count` to keep track of how many `Weak<T>` references exist, similar to\n`strong_count`. The difference is the `weak_count` doesn\u2019t need to be 0 for the\n`Rc<T>` instance to be cleaned up.\n\nBecause the value that `Weak<T>` references might have been dropped, to do\nanything with the value that a `Weak<T>` is pointing to, you must make sure the\nvalue still exists. Do this by calling the `upgrade` method on a `Weak<T>`\ninstance, which will return an `Option<Rc<T>>`. You\u2019ll get a result of `Some`\nif the `Rc<T>` value has not been dropped yet and a result of `None` if the\n`Rc<T>` value has been dropped. Because `upgrade` returns an `Option<Rc<T>>`,\nRust will ensure that the `Some` case and the `None` case are handled, and\nthere won\u2019t be an invalid pointer.\n\nAs an example, rather than using a list whose items know only about the next\nitem, we\u2019ll create a tree whose items know about their children items *and*\ntheir parent items.\n\n#### Creating a Tree Data Structure: a `Node` with Child Nodes\n\nTo start, we\u2019ll build a tree with nodes that know about their child nodes.\nWe\u2019ll create a struct named `Node` that holds its own `i32` value as well as\nreferences to its children `Node` values:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:here}}\n```\n\nWe want a `Node` to own its children, and we want to share that ownership with\nvariables so we can access each `Node` in the tree directly. To do this, we\ndefine the `Vec<T>` items to be values of type `Rc<Node>`. We also want to\nmodify which nodes are children of another node, so we have a `RefCell<T>` in\n`children` around the `Vec<Rc<Node>>`.\n\nNext, we\u2019ll use our struct definition and create one `Node` instance named\n`leaf` with the value 3 and no children, and another instance named `branch`\nwith the value 5 and `leaf` as one of its children, as shown in Listing 15-27:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:there}}\n```\n\n<span class=\"caption\">Listing 15-27: Creating a `leaf` node with no children\nand a `branch` node with `leaf` as one of its children</span>\n\nWe clone the `Rc<Node>` in `leaf` and store that in `branch`, meaning the\n`Node` in `leaf` now has two owners: `leaf` and `branch`. We can get from\n`branch` to `leaf` through `branch.children`, but there\u2019s no way to get from\n`leaf` to `branch`. The reason is that `leaf` has no reference to `branch` and\ndoesn\u2019t know they\u2019re related. We want `leaf` to know that `branch` is its\nparent. We\u2019ll do that next.\n\n#### Adding a Reference from a Child to Its Parent\n\nTo make the child node aware of its parent, we need to add a `parent` field to\nour `Node` struct definition. The trouble is in deciding what the type of\n`parent` should be. We know it can\u2019t contain an `Rc<T>`, because that would\ncreate a reference cycle with `leaf.parent` pointing to `branch` and\n`branch.children` pointing to `leaf`, which would cause their `strong_count`\nvalues to never be 0.\n\nThinking about the relationships another way, a parent node should own its\nchildren: if a parent node is dropped, its child nodes should be dropped as\nwell. However, a child should not own its parent: if we drop a child node, the\nparent should still exist. This is a case for weak references!\n\nSo instead of `Rc<T>`, we\u2019ll make the type of `parent` use `Weak<T>`,\nspecifically a `RefCell<Weak<Node>>`. Now our `Node` struct definition looks\nlike this:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:here}}\n```\n\nA node will be able to refer to its parent node but doesn\u2019t own its parent.\nIn Listing 15-28, we update `main` to use this new definition so the `leaf`\nnode will have a way to refer to its parent, `branch`:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:there}}\n```\n\n<span class=\"caption\">Listing 15-28: A `leaf` node with a weak reference to its\nparent node `branch`</span>\n\nCreating the `leaf` node looks similar to Listing 15-27 with the exception of\nthe `parent` field: `leaf` starts out without a parent, so we create a new,\nempty `Weak<Node>` reference instance.\n\nAt this point, when we try to get a reference to the parent of `leaf` by using\nthe `upgrade` method, we get a `None` value. We see this in the output from the\nfirst `println!` statement:\n\n```text\nleaf parent = None\n```\n\nWhen we create the `branch` node, it will also have a new `Weak<Node>`\nreference in the `parent` field, because `branch` doesn\u2019t have a parent node.\nWe still have `leaf` as one of the children of `branch`. Once we have the\n`Node` instance in `branch`, we can modify `leaf` to give it a `Weak<Node>`\nreference to its parent. We use the `borrow_mut` method on the\n`RefCell<Weak<Node>>` in the `parent` field of `leaf`, and then we use the\n`Rc::downgrade` function to create a `Weak<Node>` reference to `branch` from\nthe `Rc<Node>` in `branch.`\n\nWhen we print the parent of `leaf` again, this time we\u2019ll get a `Some` variant\nholding `branch`: now `leaf` can access its parent! When we print `leaf`, we\nalso avoid the cycle that eventually ended in a stack overflow like we had in\nListing 15-26; the `Weak<Node>` references are printed as `(Weak)`:\n\n```text\nleaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })\n```\n\nThe lack of infinite output indicates that this code didn\u2019t create a reference\ncycle. We can also tell this by looking at the values we get from calling\n`Rc::strong_count` and `Rc::weak_count`.\n\n#### Visualizing Changes to `strong_count` and `weak_count`\n\nLet\u2019s look at how the `strong_count` and `weak_count` values of the `Rc<Node>`\ninstances change by creating a new inner scope and moving the creation of\n`branch` into that scope. By doing so, we can see what happens when `branch` is\ncreated and then dropped when it goes out of scope. The modifications are shown\nin Listing 15-29:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-29/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 15-29: Creating `branch` in an inner scope and\nexamining strong and weak reference counts</span>\n\nAfter `leaf` is created, its `Rc<Node>` has a strong count of 1 and a weak\ncount of 0. In the inner scope, we create `branch` and associate it with\n`leaf`, at which point when we print the counts, the `Rc<Node>` in `branch`\nwill have a strong count of 1 and a weak count of 1 (for `leaf.parent` pointing\nto `branch` with a `Weak<Node>`). When we print the counts in `leaf`, we\u2019ll see\nit will have a strong count of 2, because `branch` now has a clone of the\n`Rc<Node>` of `leaf` stored in `branch.children`, but will still have a weak\ncount of 0.\n\nWhen the inner scope ends, `branch` goes out of scope and the strong count of\nthe `Rc<Node>` decreases to 0, so its `Node` is dropped. The weak count of 1\nfrom `leaf.parent` has no bearing on whether or not `Node` is dropped, so we\ndon\u2019t get any memory leaks!\n\nIf we try to access the parent of `leaf` after the end of the scope, we\u2019ll get\n`None` again. At the end of the program, the `Rc<Node>` in `leaf` has a strong\ncount of 1 and a weak count of 0, because the variable `leaf` is now the only\nreference to the `Rc<Node>` again.\n\nAll of the logic that manages the counts and value dropping is built into\n`Rc<T>` and `Weak<T>` and their implementations of the `Drop` trait. By\nspecifying that the relationship from a child to its parent should be a\n`Weak<T>` reference in the definition of `Node`, you\u2019re able to have parent\nnodes point to child nodes and vice versa without creating a reference cycle\nand memory leaks.\n\n## Summary\n\nThis chapter covered how to use smart pointers to make different guarantees and\ntrade-offs from those Rust makes by default with regular references. The\n`Box<T>` type has a known size and points to data allocated on the heap. The\n`Rc<T>` type keeps track of the number of references to data on the heap so\nthat data can have multiple owners. The `RefCell<T>` type with its interior\nmutability gives us a type that we can use when we need an immutable type but\nneed to change an inner value of that type; it also enforces the borrowing\nrules at runtime instead of at compile time.\n\nAlso discussed were the `Deref` and `Drop` traits, which enable a lot of the\nfunctionality of smart pointers. We explored reference cycles that can cause\nmemory leaks and how to prevent them using `Weak<T>`.\n\nIf this chapter has piqued your interest and you want to implement your own\nsmart pointers, check out [\u201cThe Rustonomicon\u201d][nomicon] for more useful\ninformation.\n\nNext, we\u2019ll talk about concurrency in Rust. You\u2019ll even learn about a few new\nsmart pointers.\n\n[nomicon]: ../nomicon/index.html\n",
          "qas": [
            {
              "question": "What is the difference between strong and weak references?",
              "id": 73,
              "answers": [
                {
                  "text": "Strong references are how you can share ownership of\nan `Rc\u2039T>` instance. Weak references don\u2019t express an ownership relationship,\nand their count doesn\u2019t affect when an `Rc\u2039T>` instance is cleaned up.",
                  "answer_start": 5959
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Can you leak memory in Rust?",
              "id": 70,
              "answers": [
                {
                  "text": "Preventing memory leaks entirely is not one of Rust\u2019s guarantees",
                  "answer_start": 191
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a memory leak?",
              "id": 71,
              "answers": [
                {
                  "text": "We can see that Rust allows memory leaks\nby using `Rc\u2039T>` and `RefCell\u2039T>`: it\u2019s possible to create references where\nitems refer to each other in a cycle. This creates memory leaks because the\nreference count of each item in the cycle will never reach 0, and the values\nwill never be dropped.",
                  "answer_start": 303
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to prevent reference cycles?",
              "id": 72,
              "answers": [
                {
                  "text": "Another solution for avoiding reference cycles is reorganizing your data\nstructures so that some references express ownership and some references don\u2019t.\nAs a result, you can have cycles made up of some ownership relationships and\nsome non-ownership relationships, and only the ownership relationships affect\nwhether or not a value can be dropped.",
                  "answer_start": 4930
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Writing Error Messages to Standard Error Instead of Standard Output\n\nAt the moment, we\u2019re writing all of our output to the terminal using the\n`println!` macro. In most terminals, there are two kinds of output: *standard\noutput* (`stdout`) for general information and *standard error* (`stderr`) for\nerror messages. This distinction enables users to choose to direct the\nsuccessful output of a program to a file but still print error messages to the\nscreen.\n\nThe `println!` macro is only capable of printing to standard output, so we\nhave to use something else to print to standard error.\n\n### Checking Where Errors Are Written\n\nFirst, let\u2019s observe how the content printed by `minigrep` is currently being\nwritten to standard output, including any error messages we want to write to\nstandard error instead. We\u2019ll do that by redirecting the standard output stream\nto a file while intentionally causing an error. We won\u2019t redirect the standard\nerror stream, so any content sent to standard error will continue to display on\nthe screen.\n\nCommand line programs are expected to send error messages to the standard error\nstream so we can still see error messages on the screen even if we redirect the\nstandard output stream to a file. Our program is not currently well-behaved:\nwe\u2019re about to see that it saves the error message output to a file instead!\n\nTo demonstrate this behavior, we\u2019ll run the program with `>` and the file path,\n*output.txt*, that we want to redirect the standard output stream to. We won\u2019t\npass any arguments, which should cause an error:\n\n```console\n$ cargo run > output.txt\n```\n\nThe `>` syntax tells the shell to write the contents of standard output to\n*output.txt* instead of the screen. We didn\u2019t see the error message we were\nexpecting printed to the screen, so that means it must have ended up in the\nfile. This is what *output.txt* contains:\n\n```text\nProblem parsing arguments: not enough arguments\n```\n\nYup, our error message is being printed to standard output. It\u2019s much more\nuseful for error messages like this to be printed to standard error so only\ndata from a successful run ends up in the file. We\u2019ll change that.\n\n### Printing Errors to Standard Error\n\nWe\u2019ll use the code in Listing 12-24 to change how error messages are printed.\nBecause of the refactoring we did earlier in this chapter, all the code that\nprints error messages is in one function, `main`. The standard library provides\nthe `eprintln!` macro that prints to the standard error stream, so let\u2019s change\nthe two places we were calling `println!` to print errors to use `eprintln!`\ninstead.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-24/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-24: Writing error messages to standard error\ninstead of standard output using `eprintln!`</span>\n\nLet\u2019s now run the program again in the same way, without any arguments and\nredirecting standard output with `>`:\n\n```console\n$ cargo run > output.txt\nProblem parsing arguments: not enough arguments\n```\n\nNow we see the error onscreen and *output.txt* contains nothing, which is the\nbehavior we expect of command line programs.\n\nLet\u2019s run the program again with arguments that don\u2019t cause an error but still\nredirect standard output to a file, like so:\n\n```console\n$ cargo run -- to poem.txt > output.txt\n```\n\nWe won\u2019t see any output to the terminal, and *output.txt* will contain our\nresults:\n\n<span class=\"filename\">Filename: output.txt</span>\n\n```text\nAre you nobody, too?\nHow dreary to be somebody!\n```\n\nThis demonstrates that we\u2019re now using standard output for successful output\nand standard error for error output as appropriate.\n\n## Summary\n\nThis chapter recapped some of the major concepts you\u2019ve learned so far and\ncovered how to perform common I/O operations in Rust. By using command line\narguments, files, environment variables, and the `eprintln!` macro for printing\nerrors, you\u2019re now prepared to write command line applications. Combined with\nthe concepts in previous chapters, your code will be well organized, store data\neffectively in the appropriate data structures, handle errors nicely, and be\nwell tested.\n\nNext, we\u2019ll explore some Rust features that were influenced by functional\nlanguages: closures and iterators.\n",
          "qas": [
            {
              "question": "What is stdout used for?",
              "id": 2129,
              "answers": [
                {
                  "text": "for general information",
                  "answer_start": 242
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to redirect output stream to file?",
              "id": 2132,
              "answers": [
                {
                  "text": "with `>` and the file path",
                  "answer_start": 1405
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is 'println!' able to print error message?",
              "id": 2131,
              "answers": [
                {
                  "text": "`println!` macro is only capable of printing to standard output",
                  "answer_start": 465
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Which macro enables us to add message to error stream?",
              "id": 2134,
              "answers": [
                {
                  "text": "`eprintln!`",
                  "answer_start": 2572
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Defining Modules to Control Scope and Privacy\n\nIn this section, we\u2019ll talk about modules and other parts of the module system,\nnamely *paths* that allow you to name items; the `use` keyword that brings a\npath into scope; and the `pub` keyword to make items public. We\u2019ll also discuss\nthe `as` keyword, external packages, and the glob operator.\n\nFirst, we\u2019re going to start with a list of rules for easy reference when you\u2019re\norganizing your code in the future. Then we\u2019ll explain each of the rules in\ndetail.\n\n### Modules Cheat Sheet\n\nHere we provide a quick reference on how modules, paths, the `use` keyword, and\nthe `pub` keyword work in the compiler, and how most developers organize their\ncode. We\u2019ll be going through examples of each of these rules throughout this\nchapter, but this is a great place to refer to as a reminder of how modules\nwork.\n\n- **Start from the crate root**: When compiling a crate, the compiler first\n  looks in the crate root file (usually *src/lib.rs* for a library crate or\n  *src/main.rs* for a binary crate) for code to compile.\n- **Declaring modules**: In the crate root file, you can declare new modules;\nsay, you declare a \u201cgarden\u201d module with `mod garden;`. The compiler will look\nfor the module\u2019s code in these places:\n  - Inline, within curly brackets that replace the semicolon following `mod\n    garden`\n  - In the file *src/garden.rs*\n  - In the file *src/garden/mod.rs*\n- **Declaring submodules**: In any file other than the crate root, you can\n  declare submodules. For example, you might declare `mod vegetables;` in\n  *src/garden.rs*. The compiler will look for the submodule\u2019s code within the\n  directory named for the parent module in these places:\n  - Inline, directly following `mod vegetables`, within curly brackets instead\n    of the semicolon\n  - In the file *src/garden/vegetables.rs*\n  - In the file *src/garden/vegetables/mod.rs*\n- **Paths to code in modules**: Once a module is part of your crate, you can\n  refer to code in that module from anywhere else in that same crate, as long\n  as the privacy rules allow, using the path to the code. For example, an\n  `Asparagus` type in the garden vegetables module would be found at\n  `crate::garden::vegetables::Asparagus`.\n- **Private vs public**: Code within a module is private from its parent\n  modules by default. To make a module public, declare it with `pub mod`\n  instead of `mod`. To make items within a public module public as well, use\n  `pub` before their declarations.\n- **The `use` keyword**: Within a scope, the `use` keyword creates shortcuts to\n  items to reduce repetition of long paths. In any scope that can refer to\n  `crate::garden::vegetables::Asparagus`, you can create a shortcut with `use\n  crate::garden::vegetables::Asparagus;` and from then on you only need to\n  write `Asparagus` to make use of that type in the scope.\n\nHere we create a binary crate named `backyard` that illustrates these rules. The\ncrate\u2019s directory, also named `backyard`, contains these files and directories:\n\n```text\nbackyard\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 garden\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vegetables.rs\n    \u251c\u2500\u2500 garden.rs\n    \u2514\u2500\u2500 main.rs\n```\n\nThe crate root file in this case is *src/main.rs*, and it contains:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/main.rs}}\n```\n\nThe `pub mod garden;` line tells the compiler to include the code it finds in\n*src/garden.rs*, which is:\n\n<span class=\"filename\">Filename: src/garden.rs</span>\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden.rs}}\n```\n\nHere, `pub mod vegetables;` means the code in *src/garden/vegetables.rs* is\nincluded too. That code is:\n\n```rust,noplayground,ignore\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden/vegetables.rs}}\n```\n\nNow let\u2019s get into the details of these rules and demonstrate them in action!\n\n### Grouping Related Code in Modules\n\n*Modules* let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the *privacy* of items, because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them.\n\nAs an example, let\u2019s write a library crate that provides the functionality of a\nrestaurant. We\u2019ll define the signatures of functions but leave their bodies\nempty to concentrate on the organization of the code, rather than the\nimplementation of a restaurant.\n\nIn the restaurant industry, some parts of a restaurant are referred to as\n*front of house* and others as *back of house*. Front of house is where\ncustomers are; this encompasses where the hosts seat customers, servers take\norders and payment, and bartenders make drinks. Back of house is where the\nchefs and cooks work in the kitchen, dishwashers clean up, and managers do\nadministrative work.\n\nTo structure our crate in this way, we can organize its functions into nested\nmodules. Create a new library named `restaurant` by running `cargo new\nrestaurant --lib`; then enter the code in Listing 7-1 into *src/lib.rs* to\ndefine some modules and function signatures. Here\u2019s the front of house section:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-01/src/lib.rs}}\n```\n\n<span class=\"caption\">Listing 7-1: A `front_of_house` module containing other\nmodules that then contain functions</span>\n\nWe define a module with the `mod` keyword followed by the name of the module\n(in this case, `front_of_house`). The body of the module then goes inside curly\nbrackets. Inside modules, we can place other modules, as in this case with the\nmodules `hosting` and `serving`. Modules can also hold definitions for other\nitems, such as structs, enums, constants, traits, and\u2014as in Listing\n7-1\u2014functions.\n\nBy using modules, we can group related definitions together and name why\nthey\u2019re related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized.\n\nEarlier, we mentioned that *src/main.rs* and *src/lib.rs* are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate\u2019s module structure,\nknown as the *module tree*.\n\nListing 7-2 shows the module tree for the structure in Listing 7-1.\n\n```text\ncrate\n \u2514\u2500\u2500 front_of_house\n     \u251c\u2500\u2500 hosting\n     \u2502   \u251c\u2500\u2500 add_to_waitlist\n     \u2502   \u2514\u2500\u2500 seat_at_table\n     \u2514\u2500\u2500 serving\n         \u251c\u2500\u2500 take_order\n         \u251c\u2500\u2500 serve_order\n         \u2514\u2500\u2500 take_payment\n```\n\n<span class=\"caption\">Listing 7-2: The module tree for the code in Listing\n7-1</span>\n\nThis tree shows how some of the modules nest inside one another; for example,\n`hosting` nests inside `front_of_house`. The tree also shows that some modules\nare *siblings* to each other, meaning they\u2019re defined in the same module;\n`hosting` and `serving` are siblings defined within `front_of_house`. If module\nA is contained inside module B, we say that module A is the *child* of module B\nand that module B is the *parent* of module A. Notice that the entire module\ntree is rooted under the implicit module named `crate`.\n\nThe module tree might remind you of the filesystem\u2019s directory tree on your\ncomputer; this is a very apt comparison! Just like directories in a filesystem,\nyou use modules to organize your code. And just like files in a directory, we\nneed a way to find our modules.\n",
          "qas": [
            {
              "question": "If I will declare the module, where will compiler look for module's code?",
              "id": 131,
              "answers": [
                {
                  "text": "- **Declaring modules**: In the crate root file, you can declare new modules;\nsay, you declare a \u201cgarden\u201d module with `mod garden;`. The compiler will look\nfor the module\u2019s code in these places:\n  - Inline, within curly brackets that replace the semicolon following `mod\n    garden`\n  - In the file *src/garden.rs*\n  - In the file *src/garden/mod.rs*",
                  "answer_start": 1066
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to make items public?",
              "id": 133,
              "answers": [
                {
                  "text": "To make a module public, declare it with `pub mod`\n  instead of `mod`. To make items within a public module public as well, use\n  `pub` before their declarations.",
                  "answer_start": 2326
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why *src/main.rs* and *src/lib.rs* files are named crate roots?",
              "id": 137,
              "answers": [
                {
                  "text": "Earlier, we mentioned that *src/main.rs* and *src/lib.rs* are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate\u2019s module structure,\nknown as the *module tree*.",
                  "answer_start": 6512
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What is the 'use' keyword used for?",
              "id": 128,
              "answers": [
                {
                  "text": "the `use` keyword that brings a\npath into scope;",
                  "answer_start": 175
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What paths allow me?",
              "id": 127,
              "answers": [
                {
                  "text": "we\u2019ll talk about modules and other parts of the module system,\nnamely *paths* that allow you to name items",
                  "answer_start": 67
                }
              ],
              "is_impossible": false
            },
            {
              "question": "If I will declare the submodule, where will compiler look for module's code?",
              "id": 132,
              "answers": [
                {
                  "text": "- **Declaring submodules**: In any file other than the crate root, you can\n  declare submodules. For example, you might declare `mod vegetables;` in\n  *src/garden.rs*. The compiler will look for the submodule\u2019s code within the\n  directory named for the parent module in these places:\n  - Inline, directly following `mod vegetables`, within curly brackets instead\n    of the semicolon\n  - In the file *src/garden/vegetables.rs*\n  - In the file *src/garden/vegetables/mod.rs*",
                  "answer_start": 1417
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Code within a module is private or public from its parent modules by default?",
              "id": 134,
              "answers": [
                {
                  "text": "- **Private vs public**: Code within a module is private from its parent\n  modules by default. ",
                  "answer_start": 2231
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What the modules allow us?",
              "id": 135,
              "answers": [
                {
                  "text": "*Modules* let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the *privacy* of items, because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them.",
                  "answer_start": 4073
                }
              ],
              "is_impossible": false
            },
            {
              "question": "What do 'pub' keyword?",
              "id": 129,
              "answers": [
                {
                  "text": "and the `pub` keyword to make items public.",
                  "answer_start": 224
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is it worth to use modules?",
              "id": 136,
              "answers": [
                {
                  "text": "By using modules, we can group related definitions together and name why\nthey\u2019re related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized.\n",
                  "answer_start": 6120
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Turning Our Single-Threaded Server into a Multithreaded Server\n\nRight now, the server will process each request in turn, meaning it won\u2019t\nprocess a second connection until the first is finished processing. If the\nserver received more and more requests, this serial execution would be less and\nless optimal. If the server receives a request that takes a long time to\nprocess, subsequent requests will have to wait until the long request is\nfinished, even if the new requests can be processed quickly. We\u2019ll need to fix\nthis, but first, we\u2019ll look at the problem in action.\n\n### Simulating a Slow Request in the Current Server Implementation\n\nWe\u2019ll look at how a slow-processing request can affect other requests made to\nour current server implementation. Listing 20-10 implements handling a request\nto */sleep* with a simulated slow response that will cause the server to sleep\nfor 5 seconds before responding.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-10: Simulating a slow request by sleeping for\n5 seconds</span>\n\nWe switched from `if` to `match` now that we have three cases. We need to\nexplicitly match on a slice of `request_line` to pattern match against the\nstring literal values; `match` doesn\u2019t do automatic referencing and\ndereferencing like the equality method does.\n\nThe first arm is the same as the `if` block from Listing 20-9. The second arm\nmatches a request to */sleep*. When that request is received, the server will\nsleep for 5 seconds before rendering the successful HTML page. The third arm is\nthe same as the `else` block from Listing 20-9.\n\nYou can see how primitive our server is: real libraries would handle the\nrecognition of multiple requests in a much less verbose way!\n\nStart the server using `cargo run`. Then open two browser windows: one for\n*http://127.0.0.1:7878/* and the other for *http://127.0.0.1:7878/sleep*. If\nyou enter the */* URI a few times, as before, you\u2019ll see it respond quickly.\nBut if you enter */sleep* and then load */*, you\u2019ll see that */* waits until\n`sleep` has slept for its full 5 seconds before loading.\n\nThere are multiple techniques we could use to avoid requests backing up behind\na slow request; the one we\u2019ll implement is a thread pool.\n\n### Improving Throughput with a Thread Pool\n\nA *thread pool* is a group of spawned threads that are waiting and ready to\nhandle a task. When the program receives a new task, it assigns one of the\nthreads in the pool to the task, and that thread will process the task. The\nremaining threads in the pool are available to handle any other tasks that come\nin while the first thread is processing. When the first thread is done\nprocessing its task, it\u2019s returned to the pool of idle threads, ready to handle\na new task. A thread pool allows you to process connections concurrently,\nincreasing the throughput of your server.\n\nWe\u2019ll limit the number of threads in the pool to a small number to protect us\nfrom Denial of Service (DoS) attacks; if we had our program create a new thread\nfor each request as it came in, someone making 10 million requests to our\nserver could create havoc by using up all our server\u2019s resources and grinding\nthe processing of requests to a halt.\n\nRather than spawning unlimited threads, then, we\u2019ll have a fixed number of\nthreads waiting in the pool. Requests that come in are sent to the pool for\nprocessing. The pool will maintain a queue of incoming requests. Each of the\nthreads in the pool will pop off a request from this queue, handle the request,\nand then ask the queue for another request. With this design, we can process up\nto `N` requests concurrently, where `N` is the number of threads. If each\nthread is responding to a long-running request, subsequent requests can still\nback up in the queue, but we\u2019ve increased the number of long-running requests\nwe can handle before reaching that point.\n\nThis technique is just one of many ways to improve the throughput of a web\nserver. Other options you might explore are the *fork/join model*, the\n*single-threaded async I/O model*, or the *multi-threaded async I/O model*. If\nyou\u2019re interested in this topic, you can read more about other solutions and\ntry to implement them; with a low-level language like Rust, all of these\noptions are possible.\n\nBefore we begin implementing a thread pool, let\u2019s talk about what using the\npool should look like. When you\u2019re trying to design code, writing the client\ninterface first can help guide your design. Write the API of the code so it\u2019s\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API.\n\nSimilar to how we used test-driven development in the project in Chapter 12,\nwe\u2019ll use compiler-driven development here. We\u2019ll write the code that calls the\nfunctions we want, and then we\u2019ll look at errors from the compiler to determine\nwhat we should change next to get the code to work. Before we do that, however,\nwe\u2019ll explore the technique we\u2019re not going to use as a starting point.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"code-structure-if-we-could-spawn-a-thread-for-each-request\"></a>\n\n#### Spawning a Thread for Each Request\n\nFirst, let\u2019s explore how our code might look if it did create a new thread for\nevery connection. As mentioned earlier, this isn\u2019t our final plan due to the\nproblems with potentially spawning an unlimited number of threads, but it is a\nstarting point to get a working multithreaded server first. Then we\u2019ll add the\nthread pool as an improvement, and contrasting the two solutions will be\neasier. Listing 20-11 shows the changes to make to `main` to spawn a new thread\nto handle each stream within the `for` loop.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,no_run\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-11: Spawning a new thread for each\nstream</span>\n\nAs you learned in Chapter 16, `thread::spawn` will create a new thread and then\nrun the code in the closure in the new thread. If you run this code and load\n*/sleep* in your browser, then */* in two more browser tabs, you\u2019ll indeed see\nthat the requests to */* don\u2019t have to wait for */sleep* to finish. However, as\nwe mentioned, this will eventually overwhelm the system because you\u2019d be making\nnew threads without any limit.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"creating-a-similar-interface-for-a-finite-number-of-threads\"></a>\n\n#### Creating a Finite Number of Threads\n\nWe want our thread pool to work in a similar, familiar way so switching from\nthreads to a thread pool doesn\u2019t require large changes to the code that uses\nour API. Listing 20-12 shows the hypothetical interface for a `ThreadPool`\nstruct we want to use instead of `thread::spawn`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-12: Our ideal `ThreadPool` interface</span>\n\nWe use `ThreadPool::new` to create a new thread pool with a configurable number\nof threads, in this case four. Then, in the `for` loop, `pool.execute` has a\nsimilar interface as `thread::spawn` in that it takes a closure the pool should\nrun for each stream. We need to implement `pool.execute` so it takes the\nclosure and gives it to a thread in the pool to run. This code won\u2019t yet\ncompile, but we\u2019ll try so the compiler can guide us in how to fix it.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"building-the-threadpool-struct-using-compiler-driven-development\"></a>\n\n#### Building `ThreadPool` Using Compiler Driven Development\n\nMake the changes in Listing 20-12 to *src/main.rs*, and then let\u2019s use the\ncompiler errors from `cargo check` to drive our development. Here is the first\nerror we get:\n\n```console\n{{#include ../listings/ch20-web-server/listing-20-12/output.txt}}\n```\n\nGreat! This error tells us we need a `ThreadPool` type or module, so we\u2019ll\nbuild one now. Our `ThreadPool` implementation will be independent of the kind\nof work our web server is doing. So, let\u2019s switch the `hello` crate from a\nbinary crate to a library crate to hold our `ThreadPool` implementation. After\nwe change to a library crate, we could also use the separate thread pool\nlibrary for any work we want to do using a thread pool, not just for serving\nweb requests.\n\nCreate a *src/lib.rs* that contains the following, which is the simplest\ndefinition of a `ThreadPool` struct that we can have for now:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/src/lib.rs}}\n```\n\nThen edit *main.rs* file to bring `ThreadPool` into scope from the library\ncrate by adding the following code to the top of *src/main.rs*:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/src/main.rs:here}}\n```\n\nThis code still won\u2019t work, but let\u2019s check it again to get the next error that\nwe need to address:\n\n```console\n{{#include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/output.txt}}\n```\n\nThis error indicates that next we need to create an associated function named\n`new` for `ThreadPool`. We also know that `new` needs to have one parameter\nthat can accept `4` as an argument and should return a `ThreadPool` instance.\nLet\u2019s implement the simplest `new` function that will have those\ncharacteristics:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/no-listing-02-impl-threadpool-new/src/lib.rs}}\n```\n\nWe chose `usize` as the type of the `size` parameter, because we know that a\nnegative number of threads doesn\u2019t make any sense. We also know we\u2019ll use this\n4 as the number of elements in a collection of threads, which is what the\n`usize` type is for, as discussed in the [\u201cInteger Types\u201d][integer-types]<!--\nignore --> section of Chapter 3.\n\nLet\u2019s check the code again:\n\n```console\n{{#include ../listings/ch20-web-server/no-listing-02-impl-threadpool-new/output.txt}}\n```\n\nNow the error occurs because we don\u2019t have an `execute` method on `ThreadPool`.\nRecall from the [\u201cCreating a Finite Number of\nThreads\u201d](#creating-a-finite-number-of-threads)<!-- ignore --> section that we\ndecided our thread pool should have an interface similar to `thread::spawn`. In\naddition, we\u2019ll implement the `execute` function so it takes the closure it\u2019s\ngiven and gives it to an idle thread in the pool to run.\n\nWe\u2019ll define the `execute` method on `ThreadPool` to take a closure as a\nparameter. Recall from the [\u201cMoving Captured Values Out of the Closure and the\n`Fn` Traits\u201d][fn-traits]<!-- ignore --> section in Chapter 13 that we can take\nclosures as parameters with three different traits: `Fn`, `FnMut`, and\n`FnOnce`. We need to decide which kind of closure to use here. We know we\u2019ll\nend up doing something similar to the standard library `thread::spawn`\nimplementation, so we can look at what bounds the signature of `thread::spawn`\nhas on its parameter. The documentation shows us the following:\n\n```rust,ignore\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `F` type parameter is the one we\u2019re concerned with here; the `T` type\nparameter is related to the return value, and we\u2019re not concerned with that. We\ncan see that `spawn` uses `FnOnce` as the trait bound on `F`. This is probably\nwhat we want as well, because we\u2019ll eventually pass the argument we get in\n`execute` to `spawn`. We can be further confident that `FnOnce` is the trait we\nwant to use because the thread for running a request will only execute that\nrequest\u2019s closure one time, which matches the `Once` in `FnOnce`.\n\nThe `F` type parameter also has the trait bound `Send` and the lifetime bound\n`'static`, which are useful in our situation: we need `Send` to transfer the\nclosure from one thread to another and `'static` because we don\u2019t know how long\nthe thread will take to execute. Let\u2019s create an `execute` method on\n`ThreadPool` that will take a generic parameter of type `F` with these bounds:\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/no-listing-03-define-execute/src/lib.rs:here}}\n```\n\nWe still use the `()` after `FnOnce` because this `FnOnce` represents a closure\nthat takes no parameters and returns the unit type `()`. Just like function\ndefinitions, the return type can be omitted from the signature, but even if we\nhave no parameters, we still need the parentheses.\n\nAgain, this is the simplest implementation of the `execute` method: it does\nnothing, but we\u2019re trying only to make our code compile. Let\u2019s check it again:\n\n```console\n{{#include ../listings/ch20-web-server/no-listing-03-define-execute/output.txt}}\n```\n\nIt compiles! But note that if you try `cargo run` and make a request in the\nbrowser, you\u2019ll see the errors in the browser that we saw at the beginning of\nthe chapter. Our library isn\u2019t actually calling the closure passed to `execute`\nyet!\n\n> Note: A saying you might hear about languages with strict compilers, such as\n> Haskell and Rust, is \u201cif the code compiles, it works.\u201d But this saying is not\n> universally true. Our project compiles, but it does absolutely nothing! If we\n> were building a real, complete project, this would be a good time to start\n> writing unit tests to check that the code compiles *and* has the behavior we\n> want.\n\n#### Validating the Number of Threads in `new`\n\nWe aren\u2019t doing anything with the parameters to `new` and `execute`. Let\u2019s\nimplement the bodies of these functions with the behavior we want. To start,\nlet\u2019s think about `new`. Earlier we chose an unsigned type for the `size`\nparameter, because a pool with a negative number of threads makes no sense.\nHowever, a pool with zero threads also makes no sense, yet zero is a perfectly\nvalid `usize`. We\u2019ll add code to check that `size` is greater than zero before\nwe return a `ThreadPool` instance and have the program panic if it receives a\nzero by using the `assert!` macro, as shown in Listing 20-13.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-13: Implementing `ThreadPool::new` to panic if\n`size` is zero</span>\n\nWe\u2019ve also added some documentation for our `ThreadPool` with doc comments.\nNote that we followed good documentation practices by adding a section that\ncalls out the situations in which our function can panic, as discussed in\nChapter 14. Try running `cargo doc --open` and clicking the `ThreadPool` struct\nto see what the generated docs for `new` look like!\n\nInstead of adding the `assert!` macro as we\u2019ve done here, we could change `new`\ninto `build` and return a `Result` like we did with `Config::build` in the I/O\nproject in Listing 12-9. But we\u2019ve decided in this case that trying to create a\nthread pool without any threads should be an unrecoverable error. If you\u2019re\nfeeling ambitious, try to write a function named `build` with the following\nsignature to compare with the `new` function:\n\n```rust,ignore\npub fn build(size: usize) -> Result<ThreadPool, PoolCreationError> {\n```\n\n#### Creating Space to Store the Threads\n\nNow that we have a way to know we have a valid number of threads to store in\nthe pool, we can create those threads and store them in the `ThreadPool` struct\nbefore returning the struct. But how do we \u201cstore\u201d a thread? Let\u2019s take another\nlook at the `thread::spawn` signature:\n\n```rust,ignore\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `spawn` function returns a `JoinHandle<T>`, where `T` is the type that the\nclosure returns. Let\u2019s try using `JoinHandle` too and see what happens. In our\ncase, the closures we\u2019re passing to the thread pool will handle the connection\nand not return anything, so `T` will be the unit type `()`.\n\nThe code in Listing 20-14 will compile but doesn\u2019t create any threads yet.\nWe\u2019ve changed the definition of `ThreadPool` to hold a vector of\n`thread::JoinHandle<()>` instances, initialized the vector with a capacity of\n`size`, set up a `for` loop that will run some code to create the threads, and\nreturned a `ThreadPool` instance containing them.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,not_desired_behavior\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-14/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-14: Creating a vector for `ThreadPool` to hold\nthe threads</span>\n\nWe\u2019ve brought `std::thread` into scope in the library crate, because we\u2019re\nusing `thread::JoinHandle` as the type of the items in the vector in\n`ThreadPool`.\n\nOnce a valid size is received, our `ThreadPool` creates a new vector that can\nhold `size` items. The `with_capacity` function performs the same task as\n`Vec::new` but with an important difference: it preallocates space in the\nvector. Because we know we need to store `size` elements in the vector, doing\nthis allocation up front is slightly more efficient than using `Vec::new`,\nwhich resizes itself as elements are inserted.\n\nWhen you run `cargo check` again, it should succeed.\n\n#### A `Worker` Struct Responsible for Sending Code from the `ThreadPool` to a Thread\n\nWe left a comment in the `for` loop in Listing 20-14 regarding the creation of\nthreads. Here, we\u2019ll look at how we actually create threads. The standard\nlibrary provides `thread::spawn` as a way to create threads, and\n`thread::spawn` expects to get some code the thread should run as soon as the\nthread is created. However, in our case, we want to create the threads and have\nthem *wait* for code that we\u2019ll send later. The standard library\u2019s\nimplementation of threads doesn\u2019t include any way to do that; we have to\nimplement it manually.\n\nWe\u2019ll implement this behavior by introducing a new data structure between the\n`ThreadPool` and the threads that will manage this new behavior. We\u2019ll call\nthis data structure *Worker*, which is a common term in pooling\nimplementations. The Worker picks up code that needs to be run and runs the\ncode in the Worker\u2019s thread. Think of people working in the kitchen at a\nrestaurant: the workers wait until orders come in from customers, and then\nthey\u2019re responsible for taking those orders and fulfilling them.\n\nInstead of storing a vector of `JoinHandle<()>` instances in the thread pool,\nwe\u2019ll store instances of the `Worker` struct. Each `Worker` will store a single\n`JoinHandle<()>` instance. Then we\u2019ll implement a method on `Worker` that will\ntake a closure of code to run and send it to the already running thread for\nexecution. We\u2019ll also give each worker an `id` so we can distinguish between\nthe different workers in the pool when logging or debugging.\n\nHere is the new process that will happen when we create a `ThreadPool`. We\u2019ll\nimplement the code that sends the closure to the thread after we have `Worker`\nset up in this way:\n\n1. Define a `Worker` struct that holds an `id` and a `JoinHandle<()>`.\n2. Change `ThreadPool` to hold a vector of `Worker` instances.\n3. Define a `Worker::new` function that takes an `id` number and returns a\n   `Worker` instance that holds the `id` and a thread spawned with an empty\n   closure.\n4. In `ThreadPool::new`, use the `for` loop counter to generate an `id`, create\n   a new `Worker` with that `id`, and store the worker in the vector.\n\nIf you\u2019re up for a challenge, try implementing these changes on your own before\nlooking at the code in Listing 20-15.\n\nReady? Here is Listing 20-15 with one way to make the preceding modifications.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-15/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-15: Modifying `ThreadPool` to hold `Worker`\ninstances instead of holding threads directly</span>\n\nWe\u2019ve changed the name of the field on `ThreadPool` from `threads` to `workers`\nbecause it\u2019s now holding `Worker` instances instead of `JoinHandle<()>`\ninstances. We use the counter in the `for` loop as an argument to\n`Worker::new`, and we store each new `Worker` in the vector named `workers`.\n\nExternal code (like our server in *src/main.rs*) doesn\u2019t need to know the\nimplementation details regarding using a `Worker` struct within `ThreadPool`,\nso we make the `Worker` struct and its `new` function private. The\n`Worker::new` function uses the `id` we give it and stores a `JoinHandle<()>`\ninstance that is created by spawning a new thread using an empty closure.\n\n> Note: If the operating system can\u2019t create a thread because there aren\u2019t\n> enough system resources, `thread::spawn` will panic. That will cause our\n> whole server to panic, even though the creation of some threads might\n> succeed. For simplicity\u2019s sake, this behavior is fine, but in a production\n> thread pool implementation, you\u2019d likely want to use\n> [`std::thread::Builder`][builder]<!-- ignore --> and its\n> [`spawn`][builder-spawn]<!-- ignore --> method that returns `Result` instead.\n\nThis code will compile and will store the number of `Worker` instances we\nspecified as an argument to `ThreadPool::new`. But we\u2019re *still* not processing\nthe closure that we get in `execute`. Let\u2019s look at how to do that next.\n\n#### Sending Requests to Threads via Channels\n\nThe next problem we\u2019ll tackle is that the closures given to `thread::spawn` do\nabsolutely nothing. Currently, we get the closure we want to execute in the\n`execute` method. But we need to give `thread::spawn` a closure to run when we\ncreate each `Worker` during the creation of the `ThreadPool`.\n\nWe want the `Worker` structs that we just created to fetch the code to run from\na queue held in the `ThreadPool` and send that code to its thread to run.\n\nThe channels we learned about in Chapter 16\u2014a simple way to communicate between\ntwo threads\u2014would be perfect for this use case. We\u2019ll use a channel to function\nas the queue of jobs, and `execute` will send a job from the `ThreadPool` to\nthe `Worker` instances, which will send the job to its thread. Here is the plan:\n\n1. The `ThreadPool` will create a channel and hold on to the sender.\n2. Each `Worker` will hold on to the receiver.\n3. We\u2019ll create a new `Job` struct that will hold the closures we want to send\n   down the channel.\n4. The `execute` method will send the job it wants to execute through the\n   sender.\n5. In its thread, the `Worker` will loop over its receiver and execute the\n   closures of any jobs it receives.\n\nLet\u2019s start by creating a channel in `ThreadPool::new` and holding the sender\nin the `ThreadPool` instance, as shown in Listing 20-16. The `Job` struct\ndoesn\u2019t hold anything for now but will be the type of item we\u2019re sending down\nthe channel.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-16/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-16: Modifying `ThreadPool` to store the\nsender of a channel that transmits `Job` instances</span>\n\nIn `ThreadPool::new`, we create our new channel and have the pool hold the\nsender. This will successfully compile.\n\nLet\u2019s try passing a receiver of the channel into each worker as the thread pool\ncreates the channel. We know we want to use the receiver in the thread that the\nworkers spawn, so we\u2019ll reference the `receiver` parameter in the closure. The\ncode in Listing 20-17 won\u2019t quite compile yet.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-17/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-17: Passing the receiver to the workers</span>\n\nWe\u2019ve made some small and straightforward changes: we pass the receiver into\n`Worker::new`, and then we use it inside the closure.\n\nWhen we try to check this code, we get this error:\n\n```console\n{{#include ../listings/ch20-web-server/listing-20-17/output.txt}}\n```\n\nThe code is trying to pass `receiver` to multiple `Worker` instances. This\nwon\u2019t work, as you\u2019ll recall from Chapter 16: the channel implementation that\nRust provides is multiple *producer*, single *consumer*. This means we can\u2019t\njust clone the consuming end of the channel to fix this code. We also don\u2019t\nwant to send a message multiple times to multiple consumers; we want one list\nof messages with multiple workers such that each message gets processed once.\n\nAdditionally, taking a job off the channel queue involves mutating the\n`receiver`, so the threads need a safe way to share and modify `receiver`;\notherwise, we might get race conditions (as covered in Chapter 16).\n\nRecall the thread-safe smart pointers discussed in Chapter 16: to share\nownership across multiple threads and allow the threads to mutate the value, we\nneed to use `Arc<Mutex<T>>`. The `Arc` type will let multiple workers own the\nreceiver, and `Mutex` will ensure that only one worker gets a job from the\nreceiver at a time. Listing 20-18 shows the changes we need to make.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-18/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-18: Sharing the receiver among the workers\nusing `Arc` and `Mutex`</span>\n\nIn `ThreadPool::new`, we put the receiver in an `Arc` and a `Mutex`. For each\nnew worker, we clone the `Arc` to bump the reference count so the workers can\nshare ownership of the receiver.\n\nWith these changes, the code compiles! We\u2019re getting there!\n\n#### Implementing the `execute` Method\n\nLet\u2019s finally implement the `execute` method on `ThreadPool`. We\u2019ll also change\n`Job` from a struct to a type alias for a trait object that holds the type of\nclosure that `execute` receives. As discussed in the [\u201cCreating Type Synonyms\nwith Type Aliases\u201d][creating-type-synonyms-with-type-aliases]<!-- ignore -->\nsection of Chapter 19, type aliases allow us to make long types shorter for\nease of use. Look at Listing 20-19.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-19/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-19: Creating a `Job` type alias for a `Box`\nthat holds each closure and then sending the job down the channel</span>\n\nAfter creating a new `Job` instance using the closure we get in `execute`, we\nsend that job down the sending end of the channel. We\u2019re calling `unwrap` on\n`send` for the case that sending fails. This might happen if, for example, we\nstop all our threads from executing, meaning the receiving end has stopped\nreceiving new messages. At the moment, we can\u2019t stop our threads from\nexecuting: our threads continue executing as long as the pool exists. The\nreason we use `unwrap` is that we know the failure case won\u2019t happen, but the\ncompiler doesn\u2019t know that.\n\nBut we\u2019re not quite done yet! In the worker, our closure being passed to\n`thread::spawn` still only *references* the receiving end of the channel.\nInstead, we need the closure to loop forever, asking the receiving end of the\nchannel for a job and running the job when it gets one. Let\u2019s make the change\nshown in Listing 20-20 to `Worker::new`.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-20/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-20: Receiving and executing the jobs in the\nworker\u2019s thread</span>\n\nHere, we first call `lock` on the `receiver` to acquire the mutex, and then we\ncall `unwrap` to panic on any errors. Acquiring a lock might fail if the mutex\nis in a *poisoned* state, which can happen if some other thread panicked while\nholding the lock rather than releasing the lock. In this situation, calling\n`unwrap` to have this thread panic is the correct action to take. Feel free to\nchange this `unwrap` to an `expect` with an error message that is meaningful to\nyou.\n\nIf we get the lock on the mutex, we call `recv` to receive a `Job` from the\nchannel. A final `unwrap` moves past any errors here as well, which might occur\nif the thread holding the sender has shut down, similar to how the `send`\nmethod returns `Err` if the receiver shuts down.\n\nThe call to `recv` blocks, so if there is no job yet, the current thread will\nwait until a job becomes available. The `Mutex<T>` ensures that only one\n`Worker` thread at a time is trying to request a job.\n\nOur thread pool is now in a working state! Give it a `cargo run` and make some\nrequests:\n\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-20\ncargo run\nmake some requests to 127.0.0.1:7878\nCan't automate because the output depends on making requests\n-->\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n --> src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n  --> src/lib.rs:48:5\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n  --> src/lib.rs:49:5\n   |\n49 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: `hello` (lib) generated 3 warnings\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n```\n\nSuccess! We now have a thread pool that executes connections asynchronously.\nThere are never more than four threads created, so our system won\u2019t get\noverloaded if the server receives a lot of requests. If we make a request to\n*/sleep*, the server will be able to serve other requests by having another\nthread run them.\n\n> Note: if you open */sleep* in multiple browser windows simultaneously, they\n> might load one at a time in 5 second intervals. Some web browsers execute\n> multiple instances of the same request sequentially for caching reasons. This\n> limitation is not caused by our web server.\n\nAfter learning about the `while let` loop in Chapter 18, you might be wondering\nwhy we didn\u2019t write the worker thread code as shown in Listing 20-21.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,not_desired_behavior\n{{#rustdoc_include ../listings/ch20-web-server/listing-20-21/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 20-21: An alternative implementation of\n`Worker::new` using `while let`</span>\n\nThis code compiles and runs but doesn\u2019t result in the desired threading\nbehavior: a slow request will still cause other requests to wait to be\nprocessed. The reason is somewhat subtle: the `Mutex` struct has no public\n`unlock` method because the ownership of the lock is based on the lifetime of\nthe `MutexGuard<T>` within the `LockResult<MutexGuard<T>>` that the `lock`\nmethod returns. At compile time, the borrow checker can then enforce the rule\nthat a resource guarded by a `Mutex` cannot be accessed unless we hold the\nlock. However, this implementation can also result in the lock being held\nlonger than intended if we aren\u2019t mindful of the lifetime of the\n`MutexGuard<T>`.\n\nThe code in Listing 20-20 that uses `let job =\nreceiver.lock().unwrap().recv().unwrap();` works because with `let`, any\ntemporary values used in the expression on the right hand side of the equals\nsign are immediately dropped when the `let` statement ends. However, `while\nlet` (and `if let` and `match`) does not drop temporary values until the end of\nthe associated block. In Listing 20-21, the lock remains held for the duration\nof the call to `job()`, meaning other workers cannot receive jobs.\n\n[creating-type-synonyms-with-type-aliases]:\nch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases\n[integer-types]: ch03-02-data-types.html#integer-types\n[fn-traits]:\nch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits\n[builder]: ../std/thread/struct.Builder.html\n[builder-spawn]: ../std/thread/struct.Builder.html#method.spawn\n",
          "qas": [
            {
              "question": "How to implement API?",
              "id": 113,
              "answers": [
                {
                  "text": "Write the API of the code so it\u2019s\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API.",
                  "answer_start": 4574
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create a new thread pool?",
              "id": 114,
              "answers": [
                {
                  "text": "We use `ThreadPool::new` to create a new thread pool with a configurable number\nof threads, in this case four.",
                  "answer_start": 7224
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "# Using Structs to Structure Related Data\n\nA *struct*, or *structure*, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group. If\nyou\u2019re familiar with an object-oriented language, a *struct* is like an\nobject\u2019s data attributes. In this chapter, we\u2019ll compare and contrast tuples\nwith structs to build on what you already know and demonstrate when structs are\na better way to group data.\n\nWe\u2019ll demonstrate how to define and instantiate structs. We\u2019ll discuss how to\ndefine associated functions, especially the kind of associated functions called\n*methods*, to specify behavior associated with a struct type. Structs and enums\n(discussed in Chapter 6) are the building blocks for creating new types in your\nprogram\u2019s domain to take full advantage of Rust\u2019s compile-time type checking.\n",
          "qas": [
            {
              "question": "What does 'struct' data allow me?",
              "id": 43,
              "answers": [
                {
                  "text": "A *struct*, or *structure*, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group.",
                  "answer_start": 43
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Refactoring to Improve Modularity and Error Handling\n\nTo improve our program, we\u2019ll fix four problems that have to do with the\nprogram\u2019s structure and how it\u2019s handling potential errors. First, our `main`\nfunction now performs two tasks: it parses arguments and reads files. As our\nprogram grows, the number of separate tasks the `main` function handles will\nincrease. As a function gains responsibilities, it becomes more difficult to\nreason about, harder to test, and harder to change without breaking one of its\nparts. It\u2019s best to separate functionality so each function is responsible for\none task.\n\nThis issue also ties into the second problem: although `query` and `file_path`\nare configuration variables to our program, variables like `contents` are used\nto perform the program\u2019s logic. The longer `main` becomes, the more variables\nwe\u2019ll need to bring into scope; the more variables we have in scope, the harder\nit will be to keep track of the purpose of each. It\u2019s best to group the\nconfiguration variables into one structure to make their purpose clear.\n\nThe third problem is that we\u2019ve used `expect` to print an error message when\nreading the file fails, but the error message just prints `Should have been\nable to read the file`. Reading a file can fail in a number of ways: for\nexample, the file could be missing, or we might not have permission to open it.\nRight now, regardless of the situation, we\u2019d print the same error message for\neverything, which wouldn\u2019t give the user any information!\n\nFourth, we use `expect` repeatedly to handle different errors, and if the user\nruns our program without specifying enough arguments, they\u2019ll get an `index out\nof bounds` error from Rust that doesn\u2019t clearly explain the problem. It would\nbe best if all the error-handling code were in one place so future maintainers\nhad only one place to consult the code if the error-handling logic needed to\nchange. Having all the error-handling code in one place will also ensure that\nwe\u2019re printing messages that will be meaningful to our end users.\n\nLet\u2019s address these four problems by refactoring our project.\n\n### Separation of Concerns for Binary Projects\n\nThe organizational problem of allocating responsibility for multiple tasks to\nthe `main` function is common to many binary projects. As a result, the Rust\ncommunity has developed guidelines for splitting the separate concerns of a\nbinary program when `main` starts getting large. This process has the following\nsteps:\n\n* Split your program into a *main.rs* and a *lib.rs* and move your program\u2019s\n  logic to *lib.rs*.\n* As long as your command line parsing logic is small, it can remain in\n  *main.rs*.\n* When the command line parsing logic starts getting complicated, extract it\n  from *main.rs* and move it to *lib.rs*.\n\nThe responsibilities that remain in the `main` function after this process\nshould be limited to the following:\n\n* Calling the command line parsing logic with the argument values\n* Setting up any other configuration\n* Calling a `run` function in *lib.rs*\n* Handling the error if `run` returns an error\n\nThis pattern is about separating concerns: *main.rs* handles running the\nprogram, and *lib.rs* handles all the logic of the task at hand. Because you\ncan\u2019t test the `main` function directly, this structure lets you test all of\nyour program\u2019s logic by moving it into functions in *lib.rs*. The code that\nremains in *main.rs* will be small enough to verify its correctness by reading\nit. Let\u2019s rework our program by following this process.\n\n#### Extracting the Argument Parser\n\nWe\u2019ll extract the functionality for parsing arguments into a function that\n`main` will call to prepare for moving the command line parsing logic to\n*src/lib.rs*. Listing 12-5 shows the new start of `main` that calls a new\nfunction `parse_config`, which we\u2019ll define in *src/main.rs* for the moment.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-05/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-5: Extracting a `parse_config` function from\n`main`</span>\n\nWe\u2019re still collecting the command line arguments into a vector, but instead of\nassigning the argument value at index 1 to the variable `query` and the\nargument value at index 2 to the variable `file_path` within the `main`\nfunction, we pass the whole vector to the `parse_config` function. The\n`parse_config` function then holds the logic that determines which argument\ngoes in which variable and passes the values back to `main`. We still create\nthe `query` and `file_path` variables in `main`, but `main` no longer has the\nresponsibility of determining how the command line arguments and variables\ncorrespond.\n\nThis rework may seem like overkill for our small program, but we\u2019re refactoring\nin small, incremental steps. After making this change, run the program again to\nverify that the argument parsing still works. It\u2019s good to check your progress\noften, to help identify the cause of problems when they occur.\n\n#### Grouping Configuration Values\n\nWe can take another small step to improve the `parse_config` function further.\nAt the moment, we\u2019re returning a tuple, but then we immediately break that\ntuple into individual parts again. This is a sign that perhaps we don\u2019t have\nthe right abstraction yet.\n\nAnother indicator that shows there\u2019s room for improvement is the `config` part\nof `parse_config`, which implies that the two values we return are related and\nare both part of one configuration value. We\u2019re not currently conveying this\nmeaning in the structure of the data other than by grouping the two values into\na tuple; we\u2019ll instead put the two values into one struct and give each of the\nstruct fields a meaningful name. Doing so will make it easier for future\nmaintainers of this code to understand how the different values relate to each\nother and what their purpose is.\n\nListing 12-6 shows the improvements to the `parse_config` function.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-6: Refactoring `parse_config` to return an\ninstance of a `Config` struct</span>\n\nWe\u2019ve added a struct named `Config` defined to have fields named `query` and\n`file_path`. The signature of `parse_config` now indicates that it returns a\n`Config` value. In the body of `parse_config`, where we used to return\nstring slices that reference `String` values in `args`, we now define `Config`\nto contain owned `String` values. The `args` variable in `main` is the owner of\nthe argument values and is only letting the `parse_config` function borrow\nthem, which means we\u2019d violate Rust\u2019s borrowing rules if `Config` tried to take\nownership of the values in `args`.\n\nThere are a number of ways we could manage the `String` data; the easiest,\nthough somewhat inefficient, route is to call the `clone` method on the values.\nThis will make a full copy of the data for the `Config` instance to own, which\ntakes more time and memory than storing a reference to the string data.\nHowever, cloning the data also makes our code very straightforward because we\ndon\u2019t have to manage the lifetimes of the references; in this circumstance,\ngiving up a little performance to gain simplicity is a worthwhile trade-off.\n\n> ### The Trade-Offs of Using `clone`\n>\n> There\u2019s a tendency among many Rustaceans to avoid using `clone` to fix\n> ownership problems because of its runtime cost. In\n> [Chapter 13][ch13]<!-- ignore -->, you\u2019ll learn how to use more efficient\n> methods in this type of situation. But for now, it\u2019s okay to copy a few\n> strings to continue making progress because you\u2019ll make these copies only\n> once and your file path and query string are very small. It\u2019s better to have\n> a working program that\u2019s a bit inefficient than to try to hyperoptimize code\n> on your first pass. As you become more experienced with Rust, it\u2019ll be\n> easier to start with the most efficient solution, but for now, it\u2019s\n> perfectly acceptable to call `clone`.\n\nWe\u2019ve updated `main` so it places the instance of `Config` returned by\n`parse_config` into a variable named `config`, and we updated the code that\npreviously used the separate `query` and `file_path` variables so it now uses\nthe fields on the `Config` struct instead.\n\nNow our code more clearly conveys that `query` and `file_path` are related and\nthat their purpose is to configure how the program will work. Any code that\nuses these values knows to find them in the `config` instance in the fields\nnamed for their purpose.\n\n#### Creating a Constructor for `Config`\n\nSo far, we\u2019ve extracted the logic responsible for parsing the command line\narguments from `main` and placed it in the `parse_config` function. Doing so\nhelped us to see that the `query` and `file_path` values were related and that\nrelationship should be conveyed in our code. We then added a `Config` struct to\nname the related purpose of `query` and `file_path` and to be able to return the\nvalues\u2019 names as struct field names from the `parse_config` function.\n\nSo now that the purpose of the `parse_config` function is to create a `Config`\ninstance, we can change `parse_config` from a plain function to a function\nnamed `new` that is associated with the `Config` struct. Making this change\nwill make the code more idiomatic. We can create instances of types in the\nstandard library, such as `String`, by calling `String::new`. Similarly, by\nchanging `parse_config` into a `new` function associated with `Config`, we\u2019ll\nbe able to create instances of `Config` by calling `Config::new`. Listing 12-7\nshows the changes we need to make.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,should_panic,noplayground\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-07/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-7: Changing `parse_config` into\n`Config::new`</span>\n\nWe\u2019ve updated `main` where we were calling `parse_config` to instead call\n`Config::new`. We\u2019ve changed the name of `parse_config` to `new` and moved it\nwithin an `impl` block, which associates the `new` function with `Config`. Try\ncompiling this code again to make sure it works.\n\n### Fixing the Error Handling\n\nNow we\u2019ll work on fixing our error handling. Recall that attempting to access\nthe values in the `args` vector at index 1 or index 2 will cause the program to\npanic if the vector contains fewer than three items. Try running the program\nwithout any arguments; it will look like this:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-07/output.txt}}\n```\n\nThe line `index out of bounds: the len is 1 but the index is 1` is an error\nmessage intended for programmers. It won\u2019t help our end users understand what\nthey should do instead. Let\u2019s fix that now.\n\n#### Improving the Error Message\n\nIn Listing 12-8, we add a check in the `new` function that will verify that the\nslice is long enough before accessing index 1 and 2. If the slice isn\u2019t long\nenough, the program panics and displays a better error message.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-08/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-8: Adding a check for the number of\narguments</span>\n\nThis code is similar to [the `Guess::new` function we wrote in Listing\n9-13][ch9-custom-types]<!-- ignore -->, where we called `panic!` when the\n`value` argument was out of the range of valid values. Instead of checking for\na range of values here, we\u2019re checking that the length of `args` is at least 3\nand the rest of the function can operate under the assumption that this\ncondition has been met. If `args` has fewer than three items, this condition\nwill be true, and we call the `panic!` macro to end the program immediately.\n\nWith these extra few lines of code in `new`, let\u2019s run the program without any\narguments again to see what the error looks like now:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-08/output.txt}}\n```\n\nThis output is better: we now have a reasonable error message. However, we also\nhave extraneous information we don\u2019t want to give to our users. Perhaps using\nthe technique we used in Listing 9-13 isn\u2019t the best to use here: a call to\n`panic!` is more appropriate for a programming problem than a usage problem,\n[as discussed in Chapter 9][ch9-error-guidelines]<!-- ignore -->. Instead,\nwe\u2019ll use the other technique you learned about in Chapter 9\u2014[returning a\n`Result`][ch9-result]<!-- ignore --> that indicates either success or an error.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"returning-a-result-from-new-instead-of-calling-panic\"></a>\n\n#### Returning a `Result` Instead of Calling `panic!`\n\nWe can instead return a `Result` value that will contain a `Config` instance in\nthe successful case and will describe the problem in the error case. We\u2019re also\ngoing to change the function name from `new` to `build` because many\nprogrammers expect `new` functions to never fail. When `Config::build` is\ncommunicating to `main`, we can use the `Result` type to signal there was a\nproblem. Then we can change `main` to convert an `Err` variant into a more\npractical error for our users without the surrounding text about `thread\n'main'` and `RUST_BACKTRACE` that a call to `panic!` causes.\n\nListing 12-9 shows the changes we need to make to the return value of the\nfunction we\u2019re now calling `Config::build` and the body of the function needed\nto return a `Result`. Note that this won\u2019t compile until we update `main` as\nwell, which we\u2019ll do in the next listing.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-09/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-9: Returning a `Result` from\n`Config::build`</span>\n\nOur `build` function returns a `Result` with a `Config` instance in the success\ncase and a `&'static str` in the error case. Our error values will always be\nstring literals that have the `'static` lifetime.\n\nWe\u2019ve made two changes in the body of the function: instead of calling `panic!`\nwhen the user doesn\u2019t pass enough arguments, we now return an `Err` value, and\nwe\u2019ve wrapped the `Config` return value in an `Ok`. These changes make the\nfunction conform to its new type signature.\n\nReturning an `Err` value from `Config::build` allows the `main` function to\nhandle the `Result` value returned from the `build` function and exit the\nprocess more cleanly in the error case.\n\n<!-- Old headings. Do not remove or links may break. -->\n<a id=\"calling-confignew-and-handling-errors\"></a>\n\n#### Calling `Config::build` and Handling Errors\n\nTo handle the error case and print a user-friendly message, we need to update\n`main` to handle the `Result` being returned by `Config::build`, as shown in\nListing 12-10. We\u2019ll also take the responsibility of exiting the command line\ntool with a nonzero error code away from `panic!` and instead implement it by\nhand. A nonzero exit status is a convention to signal to the process that\ncalled our program that the program exited with an error state.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-10/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-10: Exiting with an error code if building a\n`Config` fails</span>\n\nIn this listing, we\u2019ve used a method we haven\u2019t covered in detail yet:\n`unwrap_or_else`, which is defined on `Result<T, E>` by the standard library.\nUsing `unwrap_or_else` allows us to define some custom, non-`panic!` error\nhandling. If the `Result` is an `Ok` value, this method\u2019s behavior is similar\nto `unwrap`: it returns the inner value `Ok` is wrapping. However, if the value\nis an `Err` value, this method calls the code in the *closure*, which is an\nanonymous function we define and pass as an argument to `unwrap_or_else`. We\u2019ll\ncover closures in more detail in [Chapter 13][ch13]<!-- ignore -->. For now,\nyou just need to know that `unwrap_or_else` will pass the inner value of the\n`Err`, which in this case is the static string `\"not enough arguments\"` that we\nadded in Listing 12-9, to our closure in the argument `err` that appears\nbetween the vertical pipes. The code in the closure can then use the `err`\nvalue when it runs.\n\nWe\u2019ve added a new `use` line to bring `process` from the standard library into\nscope. The code in the closure that will be run in the error case is only two\nlines: we print the `err` value and then call `process::exit`. The\n`process::exit` function will stop the program immediately and return the\nnumber that was passed as the exit status code. This is similar to the\n`panic!`-based handling we used in Listing 12-8, but we no longer get all the\nextra output. Let\u2019s try it:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-10/output.txt}}\n```\n\nGreat! This output is much friendlier for our users.\n\n### Extracting Logic from `main`\n\nNow that we\u2019ve finished refactoring the configuration parsing, let\u2019s turn to\nthe program\u2019s logic. As we stated in [\u201cSeparation of Concerns for Binary\nProjects\u201d](#separation-of-concerns-for-binary-projects)<!-- ignore -->, we\u2019ll\nextract a function named `run` that will hold all the logic currently in the\n`main` function that isn\u2019t involved with setting up configuration or handling\nerrors. When we\u2019re done, `main` will be concise and easy to verify by\ninspection, and we\u2019ll be able to write tests for all the other logic.\n\nListing 12-11 shows the extracted `run` function. For now, we\u2019re just making\nthe small, incremental improvement of extracting the function. We\u2019re still\ndefining the function in *src/main.rs*.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-11/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-11: Extracting a `run` function containing the\nrest of the program logic</span>\n\nThe `run` function now contains all the remaining logic from `main`, starting\nfrom reading the file. The `run` function takes the `Config` instance as an\nargument.\n\n#### Returning Errors from the `run` Function\n\nWith the remaining program logic separated into the `run` function, we can\nimprove the error handling, as we did with `Config::build` in Listing 12-9.\nInstead of allowing the program to panic by calling `expect`, the `run`\nfunction will return a `Result<T, E>` when something goes wrong. This will let\nus further consolidate the logic around handling errors into `main` in a\nuser-friendly way. Listing 12-12 shows the changes we need to make to the\nsignature and body of `run`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-12/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-12: Changing the `run` function to return\n`Result`</span>\n\nWe\u2019ve made three significant changes here. First, we changed the return type of\nthe `run` function to `Result<(), Box<dyn Error>>`. This function previously\nreturned the unit type, `()`, and we keep that as the value returned in the\n`Ok` case.\n\nFor the error type, we used the *trait object* `Box<dyn Error>` (and we\u2019ve\nbrought `std::error::Error` into scope with a `use` statement at the top).\nWe\u2019ll cover trait objects in [Chapter 17][ch17]<!-- ignore -->. For now, just\nknow that `Box<dyn Error>` means the function will return a type that\nimplements the `Error` trait, but we don\u2019t have to specify what particular type\nthe return value will be. This gives us flexibility to return error values that\nmay be of different types in different error cases. The `dyn` keyword is short\nfor \u201cdynamic.\u201d\n\nSecond, we\u2019ve removed the call to `expect` in favor of the `?` operator, as we\ntalked about in [Chapter 9][ch9-question-mark]<!-- ignore -->. Rather than\n`panic!` on an error, `?` will return the error value from the current function\nfor the caller to handle.\n\nThird, the `run` function now returns an `Ok` value in the success case.\nWe\u2019ve declared the `run` function\u2019s success type as `()` in the signature,\nwhich means we need to wrap the unit type value in the `Ok` value. This\n`Ok(())` syntax might look a bit strange at first, but using `()` like this is\nthe idiomatic way to indicate that we\u2019re calling `run` for its side effects\nonly; it doesn\u2019t return a value we need.\n\nWhen you run this code, it will compile but will display a warning:\n\n```console\n{{#include ../listings/ch12-an-io-project/listing-12-12/output.txt}}\n```\n\nRust tells us that our code ignored the `Result` value and the `Result` value\nmight indicate that an error occurred. But we\u2019re not checking to see whether or\nnot there was an error, and the compiler reminds us that we probably meant to\nhave some error-handling code here! Let\u2019s rectify that problem now.\n\n#### Handling Errors Returned from `run` in `main`\n\nWe\u2019ll check for errors and handle them using a technique similar to one we used\nwith `Config::build` in Listing 12-10, but with a slight difference:\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-01-handling-errors-in-main/src/main.rs:here}}\n```\n\nWe use `if let` rather than `unwrap_or_else` to check whether `run` returns an\n`Err` value and call `process::exit(1)` if it does. The `run` function doesn\u2019t\nreturn a value that we want to `unwrap` in the same way that `Config::build`\nreturns the `Config` instance. Because `run` returns `()` in the success case,\nwe only care about detecting an error, so we don\u2019t need `unwrap_or_else` to\nreturn the unwrapped value, which would only be `()`.\n\nThe bodies of the `if let` and the `unwrap_or_else` functions are the same in\nboth cases: we print the error and exit.\n\n### Splitting Code into a Library Crate\n\nOur `minigrep` project is looking good so far! Now we\u2019ll split the\n*src/main.rs* file and put some code into the *src/lib.rs* file. That way we\ncan test the code and have a *src/main.rs* file with fewer responsibilities.\n\nLet\u2019s move all the code that isn\u2019t the `main` function from *src/main.rs* to\n*src/lib.rs*:\n\n* The `run` function definition\n* The relevant `use` statements\n* The definition of `Config`\n* The `Config::build` function definition\n\nThe contents of *src/lib.rs* should have the signatures shown in Listing 12-13\n(we\u2019ve omitted the bodies of the functions for brevity). Note that this won\u2019t\ncompile until we modify *src/main.rs* in Listing 12-14.\n\n<span class=\"filename\">Filename: src/lib.rs</span>\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-13/src/lib.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-13: Moving `Config` and `run` into\n*src/lib.rs*</span>\n\nWe\u2019ve made liberal use of the `pub` keyword: on `Config`, on its fields and its\n`build` method, and on the `run` function. We now have a library crate that has\na public API we can test!\n\nNow we need to bring the code we moved to *src/lib.rs* into the scope of the\nbinary crate in *src/main.rs*, as shown in Listing 12-14.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust,ignore\n{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-14/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 12-14: Using the `minigrep` library crate in\n*src/main.rs*</span>\n\nWe add a `use minigrep::Config` line to bring the `Config` type from the\nlibrary crate into the binary crate\u2019s scope, and we prefix the `run` function\nwith our crate name. Now all the functionality should be connected and should\nwork. Run the program with `cargo run` and make sure everything works\ncorrectly.\n\nWhew! That was a lot of work, but we\u2019ve set ourselves up for success in the\nfuture. Now it\u2019s much easier to handle errors, and we\u2019ve made the code more\nmodular. Almost all of our work will be done in *src/lib.rs* from here on out.\n\nLet\u2019s take advantage of this newfound modularity by doing something that would\nhave been difficult with the old code but is easy with the new code: we\u2019ll\nwrite some tests!\n\n[ch13]: ch13-00-functional-features.html\n[ch9-custom-types]: ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation\n[ch9-error-guidelines]: ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling\n[ch9-result]: ch09-02-recoverable-errors-with-result.html\n[ch17]: ch17-00-oop.html\n[ch9-question-mark]: ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n",
          "qas": [
            {
              "question": "What are benefits of using 'unwrap_or_else\"?",
              "id": 2194,
              "answers": [
                {
                  "text": "Using `unwrap_or_else` allows us to define some custom, non-`panic!` error\nhandling.",
                  "answer_start": 15635
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How to create new instance of a type?",
              "id": 2193,
              "answers": [
                {
                  "text": "We can create instances of types in the\nstandard library, such as `String`, by calling `String::new`",
                  "answer_start": 9403
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Is is good to use 'clone'?",
              "id": 2192,
              "answers": [
                {
                  "text": "There\u2019s a tendency among many Rustaceans to avoid using `clone` to fix\n> ownership problems because of its runtime cost.",
                  "answer_start": 7415
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Concise Control Flow with `if let`\n\nThe `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest. Consider the\nprogram in Listing 6-6 that matches on an `Option<u8>` value in the\n`config_max` variable but only wants to execute code if the value is the `Some`\nvariant.\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-06/src/main.rs:here}}\n```\n\n<span class=\"caption\">Listing 6-6: A `match` that only cares about executing\ncode when the value is `Some`</span>\n\nIf the value is `Some`, we print out the value in the `Some` variant by binding\nthe value to the variable `max` in the pattern. We don\u2019t want to do anything\nwith the `None` value. To satisfy the `match` expression, we have to add `_ =>\n()` after processing just one variant, which is annoying boilerplate code to\nadd.\n\nInstead, we could write this in a shorter way using `if let`. The following\ncode behaves the same as the `match` in Listing 6-6:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-12-if-let/src/main.rs:here}}\n```\n\nThe syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm. In this case, the pattern is\n`Some(max)`, and the `max` binds to the value inside the `Some`. We can then\nuse `max` in the body of the `if let` block in the same way we used `max` in\nthe corresponding `match` arm. The code in the `if let` block isn\u2019t run if the\nvalue doesn\u2019t match the pattern.\n\nUsing `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\nbetween `match` and `if let` depends on what you\u2019re doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.\n\nIn other words, you can think of `if let` as syntax sugar for a `match` that\nruns code when the value matches one pattern and then ignores all other values.\n\nWe can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. Recall the\n`Coin` enum definition in Listing 6-4, where the `Quarter` variant also held a\n`UsState` value. If we wanted to count all non-quarter coins we see while also\nannouncing the state of the quarters, we could do that with a `match`\nexpression, like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-13-count-and-announce-match/src/main.rs:here}}\n```\n\nOr we could use an `if let` and `else` expression, like this:\n\n```rust\n{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-14-count-and-announce-if-let-else/src/main.rs:here}}\n```\n\nIf you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\n\n## Summary\n\nWe\u2019ve now covered how to use enums to create custom types that can be one of a\nset of enumerated values. We\u2019ve shown how the standard library\u2019s `Option<T>`\ntype helps you use the type system to prevent errors. When enum values have\ndata inside them, you can use `match` or `if let` to extract and use those\nvalues, depending on how many cases you need to handle.\n\nYour Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects.\n\nIn order to provide a well-organized API to your users that is straightforward\nto use and only exposes exactly what your users will need, let\u2019s now turn to\nRust\u2019s modules.\n\n",
          "qas": [
            {
              "question": "What are pros and cons of 'if let' syntax?",
              "id": 107,
              "answers": [
                {
                  "text": "Using `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\nbetween `match` and `if let` depends on what you\u2019re doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.",
                  "answer_start": 1633
                }
              ],
              "is_impossible": false
            },
            {
              "question": "'if let' is a combine of which keywords?",
              "id": 105,
              "answers": [
                {
                  "text": "The `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest.",
                  "answer_start": 39
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Why is it good to creating custom types to use in the API?",
              "id": 110,
              "answers": [
                {
                  "text": "Your Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects.",
                  "answer_start": 3486
                }
              ],
              "is_impossible": false
            },
            {
              "question": "How does 'else' work when I use 'if let'?",
              "id": 108,
              "answers": [
                {
                  "text": "We can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. ",
                  "answer_start": 2124
                }
              ],
              "is_impossible": false
            },
            {
              "question": "When is useful to use 'if let' instead of 'match'?\n",
              "id": 109,
              "answers": [
                {
                  "text": "\nIf you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\n",
                  "answer_start": 2948
                }
              ],
              "is_impossible": false
            },
            {
              "question": "The syntax `if let` takes a pattern and an expression separated by which sign?",
              "id": 106,
              "answers": [
                {
                  "text": "The syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm. ",
                  "answer_start": 1140
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "<!-- Old link, do not remove -->\n<a id=\"installing-binaries-from-cratesio-with-cargo-install\"></a>\n\n## Installing Binaries with `cargo install`\n\nThe `cargo install` command allows you to install and use binary crates\nlocally. This isn\u2019t intended to replace system packages; it\u2019s meant to be a\nconvenient way for Rust developers to install tools that others have shared on\n[crates.io](https://crates.io/)<!-- ignore -->. Note that you can only install\npackages that have binary targets. A *binary target* is the runnable program\nthat is created if the crate has a *src/main.rs* file or another file specified\nas a binary, as opposed to a library target that isn\u2019t runnable on its own but\nis suitable for including within other programs. Usually, crates have\ninformation in the *README* file about whether a crate is a library, has a\nbinary target, or both.\n\nAll binaries installed with `cargo install` are stored in the installation\nroot\u2019s *bin* folder. If you installed Rust using *rustup.rs* and don\u2019t have any\ncustom configurations, this directory will be *$HOME/.cargo/bin*. Ensure that\ndirectory is in your `$PATH` to be able to run programs you\u2019ve installed with\n`cargo install`.\n\nFor example, in Chapter 12 we mentioned that there\u2019s a Rust implementation of\nthe `grep` tool called `ripgrep` for searching files. To install `ripgrep`, we\ncan run the following:\n\n<!-- manual-regeneration\ncargo install something you don't have, copy relevant output below\n-->\n\n```console\n$ cargo install ripgrep\n    Updating crates.io index\n  Downloaded ripgrep v13.0.0\n  Downloaded 1 crate (243.3 KB) in 0.88s\n  Installing ripgrep v13.0.0\n--snip--\n   Compiling ripgrep v13.0.0\n    Finished release [optimized + debuginfo] target(s) in 3m 10s\n  Installing ~/.cargo/bin/rg\n   Installed package `ripgrep v13.0.0` (executable `rg`)\n```\n\nThe second-to-last line of the output shows the location and the name of the\ninstalled binary, which in the case of `ripgrep` is `rg`. As long as the\ninstallation directory is in your `$PATH`, as mentioned previously, you can\nthen run `rg --help` and start using a faster, rustier tool for searching files!\n",
          "qas": [
            {
              "question": "What does cargo install do?",
              "id": 26,
              "answers": [
                {
                  "text": "v",
                  "answer_start": 26
                }
              ],
              "is_impossible": false
            },
            {
              "question": "Where are installed crates stored?",
              "id": 140,
              "answers": [
                {
                  "text": "All binaries installed with `cargo install` are stored in the installation\nroot\u2019s *bin* folder.",
                  "answer_start": 857
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Advanced Functions and Closures\n\nThis section explores some advanced features related to functions and closures,\nincluding function pointers and returning closures.\n\n### Function Pointers\n\nWe\u2019ve talked about how to pass closures to functions; you can also pass regular\nfunctions to functions! This technique is useful when you want to pass a\nfunction you\u2019ve already defined rather than defining a new closure. Functions\ncoerce to the type `fn` (with a lowercase f), not to be confused with the `Fn`\nclosure trait. The `fn` type is called a *function pointer*. Passing functions\nwith function pointers will allow you to use functions as arguments to other\nfunctions.\n\nThe syntax for specifying that a parameter is a function pointer is similar to\nthat of closures, as shown in Listing 19-27, where we\u2019ve defined a function\n`add_one` that adds one to its parameter. The function `do_twice` takes two\nparameters: a function pointer to any function that takes an `i32` parameter\nand returns an `i32`, and one `i32` value. The `do_twice` function calls the\nfunction `f` twice, passing it the `arg` value, then adds the two function call\nresults together. The `main` function calls `do_twice` with the arguments\n`add_one` and `5`.\n\n<span class=\"filename\">Filename: src/main.rs</span>\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/listing-19-27/src/main.rs}}\n```\n\n<span class=\"caption\">Listing 19-27: Using the `fn` type to accept a function\npointer as an argument</span>\n\nThis code prints `The answer is: 12`. We specify that the parameter `f` in\n`do_twice` is an `fn` that takes one parameter of type `i32` and returns an\n`i32`. We can then call `f` in the body of `do_twice`. In `main`, we can pass\nthe function name `add_one` as the first argument to `do_twice`.\n\nUnlike closures, `fn` is a type rather than a trait, so we specify `fn` as the\nparameter type directly rather than declaring a generic type parameter with one\nof the `Fn` traits as a trait bound.\n\nFunction pointers implement all three of the closure traits (`Fn`, `FnMut`, and\n`FnOnce`), meaning you can always pass a function pointer as an argument for a\nfunction that expects a closure. It\u2019s best to write functions using a generic\ntype and one of the closure traits so your functions can accept either\nfunctions or closures.\n\nThat said, one example of where you would want to only accept `fn` and not\nclosures is when interfacing with external code that doesn\u2019t have closures: C\nfunctions can accept functions as arguments, but C doesn\u2019t have closures.\n\nAs an example of where you could use either a closure defined inline or a named\nfunction, let\u2019s look at a use of the `map` method provided by the `Iterator`\ntrait in the standard library. To use the `map` function to turn a vector of\nnumbers into a vector of strings, we could use a closure, like this:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-15-map-closure/src/main.rs:here}}\n```\n\nOr we could name a function as the argument to `map` instead of the closure,\nlike this:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-16-map-function/src/main.rs:here}}\n```\n\nNote that we must use the fully qualified syntax that we talked about earlier\nin the [\u201cAdvanced Traits\u201d][advanced-traits]<!-- ignore --> section because\nthere are multiple functions available named `to_string`. Here, we\u2019re using the\n`to_string` function defined in the `ToString` trait, which the standard\nlibrary has implemented for any type that implements `Display`.\n\nRecall from the [\u201cEnum values\u201d][enum-values]<!-- ignore --> section of Chapter\n6 that the name of each enum variant that we define also becomes an initializer\nfunction. We can use these initializer functions as function pointers that\nimplement the closure traits, which means we can specify the initializer\nfunctions as arguments for methods that take closures, like so:\n\n```rust\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-17-map-initializer/src/main.rs:here}}\n```\n\nHere we create `Status::Value` instances using each `u32` value in the range\nthat `map` is called on by using the initializer function of `Status::Value`.\nSome people prefer this style, and some people prefer to use closures. They\ncompile to the same code, so use whichever style is clearer to you.\n\n### Returning Closures\n\nClosures are represented by traits, which means you can\u2019t return closures\ndirectly. In most cases where you might want to return a trait, you can instead\nuse the concrete type that implements the trait as the return value of the\nfunction. However, you can\u2019t do that with closures because they don\u2019t have a\nconcrete type that is returnable; you\u2019re not allowed to use the function\npointer `fn` as a return type, for example.\n\nThe following code tries to return a closure directly, but it won\u2019t compile:\n\n```rust,ignore,does_not_compile\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-18-returns-closure/src/lib.rs}}\n```\n\nThe compiler error is as follows:\n\n```console\n{{#include ../listings/ch19-advanced-features/no-listing-18-returns-closure/output.txt}}\n```\n\nThe error references the `Sized` trait again! Rust doesn\u2019t know how much space\nit will need to store the closure. We saw a solution to this problem earlier.\nWe can use a trait object:\n\n```rust,noplayground\n{{#rustdoc_include ../listings/ch19-advanced-features/no-listing-19-returns-closure-trait-object/src/lib.rs}}\n```\n\nThis code will compile just fine. For more about trait objects, refer to the\nsection [\u201cUsing Trait Objects That Allow for Values of Different\nTypes\u201d][using-trait-objects-that-allow-for-values-of-different-types]<!--\nignore --> in Chapter 17.\n\nNext, let\u2019s look at macros!\n\n[advanced-traits]:\nch19-03-advanced-traits.html#advanced-traits\n[enum-values]: ch06-01-defining-an-enum.html#enum-values\n[using-trait-objects-that-allow-for-values-of-different-types]:\nch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n",
          "qas": [
            {
              "question": "How to return a closure?",
              "id": 86,
              "answers": [
                {
                  "text": "Closures are represented by traits, which means you can\u2019t return closures\ndirectly. In most cases where you might want to return a trait, you can instead\nuse the concrete type that implements the trait as the return value of the\nfunction. However, you can\u2019t do that with closures because they don\u2019t have a\nconcrete type that is returnable; you\u2019re not allowed to use the function\npointer `fn` as a return type, for example.",
                  "answer_start": 4339
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Extending Cargo with Custom Commands\n\nCargo is designed so you can extend it with new subcommands without having to\nmodify Cargo. If a binary in your `$PATH` is named `cargo-something`, you can\nrun it as if it was a Cargo subcommand by running `cargo something`. Custom\ncommands like this are also listed when you run `cargo --list`. Being able to\nuse `cargo install` to install extensions and then run them just like the\nbuilt-in Cargo tools is a super convenient benefit of Cargo\u2019s design!\n\n## Summary\n\nSharing code with Cargo and [crates.io](https://crates.io/)<!-- ignore --> is\npart of what makes the Rust ecosystem useful for many different tasks. Rust\u2019s\nstandard library is small and stable, but crates are easy to share, use, and\nimprove on a timeline different from that of the language. Don\u2019t be shy about\nsharing code that\u2019s useful to you on [crates.io](https://crates.io/)<!-- ignore\n-->; it\u2019s likely that it will be useful to someone else as well!\n",
          "qas": [
            {
              "question": "How to add custom command?",
              "id": 27,
              "answers": [
                {
                  "text": "Cargo is designed so you can extend it with new subcommands without having to\nmodify Cargo. If a binary in your `$PATH` is named `cargo-something`, you can\nrun it as if it was a Cargo subcommand by running `cargo something`.",
                  "answer_start": 41
                }
              ],
              "is_impossible": false
            }
          ]
        },
        {
          "context": "## Appendix F: Translations of the Book\n\nFor resources in languages other than English. Most are still in progress; see\n[the Translations label][label] to help or let us know about a new translation!\n\n[label]: https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations\n\n- [Portugu\u00eas](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Portugu\u00eas](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- [\u7b80\u4f53\u4e2d\u6587](https://github.com/KaiserY/trpl-zh-cn)\n- [\u6b63\u9ad4\u4e2d\u6587](https://github.com/rust-tw/book-tw)\n- [\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430](https://github.com/pavloslav/rust-book-uk-ua)\n- [Espa\u00f1ol](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n- [Italiano](https://github.com/EmanueleGurini/book_it)\n- [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](https://github.com/rust-lang-ru/book)\n- [\ud55c\uad6d\uc5b4](https://github.com/rinthel/rust-lang-book-ko)\n- [\u65e5\u672c\u8a9e](https://github.com/rust-lang-ja/book-ja)\n- [Fran\u00e7ais](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ae](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/pomokhtari/rust-book-fa)\n- [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n- [\u0939\u093f\u0902\u0926\u0940](https://github.com/venkatarun95/rust-book-hindi)\n- [\u0e44\u0e17\u0e22](https://github.com/rust-lang-th/book-th)\n- [Danske](https://github.com/DanKHansen/book-dk)\n",
          "qas": [
            {
              "question": "In what languages can I read about Rust?",
              "id": 204,
              "answers": [
                {
                  "text": "- [Portugu\u00eas](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Portugu\u00eas](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- [\u7b80\u4f53\u4e2d\u6587](https://github.com/KaiserY/trpl-zh-cn)\n- [\u6b63\u9ad4\u4e2d\u6587](https://github.com/rust-tw/book-tw)\n- [\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430](https://github.com/pavloslav/rust-book-uk-ua)\n- [Espa\u00f1ol](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n- [Italiano](https://github.com/EmanueleGurini/book_it)\n- [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](https://github.com/rust-lang-ru/book)\n- [\ud55c\uad6d\uc5b4](https://github.com/rinthel/rust-lang-book-ko)\n- [\u65e5\u672c\u8a9e](https://github.com/rust-lang-ja/book-ja)\n- [Fran\u00e7ais](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ae](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/pomokhtari/rust-book-fa)\n- [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n- [\u0939\u093f\u0902\u0926\u0940](https://github.com/venkatarun95/rust-book-hindi)\n- [\u0e44\u0e17\u0e22](https://github.com/rust-lang-th/book-th)\n- [Danske](https://github.com/DanKHansen/book-dk)",
                  "answer_start": 296
                }
              ],
              "is_impossible": false
            }
          ]
        }
      ]
    }
  ]
}